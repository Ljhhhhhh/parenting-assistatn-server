<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="eyJjdXJyZW50Q29udmVyc2F0aW9uSWQiOiJkOWIxYTM5MS02MWQzLTRiYjEtYTMxMy1jMmI3MGRkOWMwNDQiLCJjb252ZXJzYXRpb25zIjp7IjcxMzNiMzFiLWFjODgtNDBlOC05ZTgwLWZiNDQzNjQyNzY5ZiI6eyJpZCI6IjcxMzNiMzFiLWFjODgtNDBlOC05ZTgwLWZiNDQzNjQyNzY5ZiIsIm5hbWUiOiJXZWxjb21lIHRvIHRoZSBBdWdtZW50IEFnZW50IiwiY3JlYXRlZEF0SXNvIjoiMjAyNS0wNC0xMFQwNToyNTo1MS4yMzdaIiwibGFzdEludGVyYWN0ZWRBdElzbyI6IjIwMjUtMDQtMTRUMDU6NTU6NTIuODczWiIsImNoYXRIaXN0b3J5IjpbeyJyZXF1ZXN0X2lkIjoiNWE2MjNlZmUtMjdkMC00YThlLThiMzgtNjBiZTAwMDRlN2U4IiwidXVpZCI6ImJjMTU2ZjllLTZkYWItNGJiZi1hODRmLWM2ZTVjNzQ3YWQwYyIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtY2hlY2twb2ludC1kZWxpbWl0ZXIiLCJzdGF0dXMiOiJzdWNjZXNzIiwiZnJvbVRpbWVzdGFtcCI6MCwidG9UaW1lc3RhbXAiOjE3NDQyNjI3NTEyMzgsInNlZW5fc3RhdGUiOiJzZWVuIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjFiMTg2ZDMzLWMxY2EtNDg5YS1iYmZhLTNmMTA5M2ViNDliNiIsInJlcXVlc3RfbWVzc2FnZSI6IuWcqHB5Y2hhcm0g5Lit5aaC5L2V5byA5ZCv5pys6aG555uu55qEYmFja2VuZOacjeWKoSIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiLlnKhweWNoYXJtIOS4reWmguS9leW8gOWQr+acrOmhueebrueahGJhY2tlbmTmnI3liqEifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMThubVhWOXpSY25tSE42c3ZTNTFINHMiLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIlxcdTY3ZTVcXHU2MjdlXFx1OTg3OVxcdTc2ZWVcXHU3Njg0XFx1NGUzYlxcdTg5ODFcXHU1MTY1XFx1NTNlM1xcdTY1ODdcXHU0ZWY2XFx1ZmYwY1xcdTcyNzlcXHU1MjJiXFx1NjYyZmJhY2tlbmRcXHU3NmVlXFx1NWY1NVxcdTRlMGJcXHU3Njg0XFx1NGUzYlxcdTg5ODFQeXRob25cXHU2NTg3XFx1NGVmNlxcdWZmMGNcXHU0ZWU1XFx1NTNjYVxcdTRlZmJcXHU0ZjU1XFx1NTQyZlxcdTUyYThcXHU2NzBkXFx1NTJhMVxcdTU2NjhcXHU2MjE2QVBJXFx1NzY4NFxcdTgxMWFcXHU2NzJjXCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLopoHlnKhQeUNoYXJt5Lit5byA5ZCv6L+Z5Liq6aG555uu55qEYmFja2VuZOacjeWKoe+8jOaIkemcgOimgeWFiOS6huino+mhueebrueahOe7k+aehOWSjOWQr+WKqOaWueW8j+OAguiuqeaIkeWFiOafpeeci+S4gOS4i+mhueebrueahOebuOWFs+S/oeaBr+OAglxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiLlnKhweWNoYXJtIOS4reWmguS9leW8gOWQr+acrOmhueebrueahGJhY2tlbmTmnI3liqEifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInJlc3BvbnNlX3RleHQiOiLopoHlnKhQeUNoYXJt5Lit5byA5ZCv6L+Z5Liq6aG555uu55qEYmFja2VuZOacjeWKoe+8jOaIkemcgOimgeWFiOS6huino+mhueebrueahOe7k+aehOWSjOWQr+WKqOaWueW8j+OAguiuqeaIkeWFiOafpeeci+S4gOS4i+mhueebrueahOebuOWFs+S/oeaBr+OAglxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjI1YWI1MDc0LTM2M2MtNDRkZi04YmNmLWNkZjVlODkzZDYwOCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUhYTTN5azRyZXpQRE1vSlllV1FDRmEiLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIlxcdTY3ZTVcXHU2MjdlXFx1OTg3OVxcdTc2ZWVcXHU3Njg0XFx1NTQyZlxcdTUyYThcXHU1NDdkXFx1NGVlNFxcdWZmMGNcXHU3Mjc5XFx1NTIyYlxcdTY2MmZcXHU1OTgyXFx1NGY1NVxcdTU3MjhcXHU2NzJjXFx1NTczMFxcdTVmMDBcXHU1M2QxXFx1NzNhZlxcdTU4ODNcXHU0ZTJkXFx1NTQyZlxcdTUyYThiYWNrZW5kXFx1NjcwZFxcdTUyYTFcXHU3Njg0XFx1NTQ3ZFxcdTRlZTRcXHU2MjE2XFx1ODExYVxcdTY3MmNcIn0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IGJhY2tlbmQvYXBwL2FwaS9tYWluLnB5XG5mcm9tIGZhc3RhcGkgaW1wb3J0IEFQSVJvdXRlclxuXG5mcm9tIGFwcC5hcGkucm91dGVzIGltcG9ydCBpdGVtcywgbG9naW4sIHByaXZhdGUsIHVzZXJzLCB1dGlscywgY2hpbGRyZW4sIGdyb3d0aF9yZWNvcmRzLCBkb2N1bWVudHMsIGNoYXRcbmZyb20gYXBwLmNvcmUuY29uZmlnIGltcG9ydCBzZXR0aW5nc1xuXG5hcGlfcm91dGVyID0gQVBJUm91dGVyKClcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIobG9naW4ucm91dGVyKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcih1c2Vycy5yb3V0ZXIpXG5hcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKHV0aWxzLnJvdXRlcilcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIoaXRlbXMucm91dGVyKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihjaGlsZHJlbi5yb3V0ZXIsIHByZWZpeD1cIi9jaGlsZHJlblwiLCB0YWdzPVtcImNoaWxkcmVuXCJdKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihncm93dGhfcmVjb3Jkcy5yb3V0ZXIsIHByZWZpeD1cIi9ncm93dGgtcmVjb3Jkc1wiLCB0YWdzPVtcImdyb3d0aC1yZWNvcmRzXCJdKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihkb2N1bWVudHMucm91dGVyLCBwcmVmaXg9XCIvZG9jdW1lbnRzXCIsIHRhZ3M9W1wiZG9jdW1lbnRzXCJdKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihjaGF0LnJvdXRlciwgcHJlZml4PVwiL2NoYXRcIiwgdGFncz1bXCJjaGF0XCJdKVxuXG5cbmlmIHNldHRpbmdzLkVOVklST05NRU5UID09IFwibG9jYWxcIjpcbiAgICBhcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKHByaXZhdGUucm91dGVyKVxuLi4uXG5QYXRoOiBiYWNrZW5kL0RvY2tlcmZpbGVcbi4uLlxuXG4jIEluc3RhbGwgZGVwZW5kZW5jaWVzXG4jIFJlZjogaHR0cHM6Ly9kb2NzLmFzdHJhbC5zaC91di9ndWlkZXMvaW50ZWdyYXRpb24vZG9ja2VyLyNpbnRlcm1lZGlhdGUtbGF5ZXJzXG5SVU4gLS1tb3VudD10eXBlPWNhY2hlLHRhcmdldD0vcm9vdC8uY2FjaGUvdXYgXFxcbiAgICAtLW1vdW50PXR5cGU9YmluZCxzb3VyY2U9dXYubG9jayx0YXJnZXQ9dXYubG9jayBcXFxuICAgIC0tbW91bnQ9dHlwZT1iaW5kLHNvdXJjZT1weXByb2plY3QudG9tbCx0YXJnZXQ9cHlwcm9qZWN0LnRvbWwgXFxcbiAgICB1diBzeW5jIC0tZnJvemVuIC0tbm8taW5zdGFsbC1wcm9qZWN0XG5cbkVOViBQWVRIT05QQVRIPS9hcHBcblxuQ09QWSAuL3NjcmlwdHMgL2FwcC9zY3JpcHRzXG5cbkNPUFkgLi9weXByb2plY3QudG9tbCAuL3V2LmxvY2sgLi9hbGVtYmljLmluaSAvYXBwL1xuXG5DT1BZIC4vYXBwIC9hcHAvYXBwXG5cbiMgU3luYyB0aGUgcHJvamVjdFxuIyBSZWY6IGh0dHBzOi8vZG9jcy5hc3RyYWwuc2gvdXYvZ3VpZGVzL2ludGVncmF0aW9uL2RvY2tlci8jaW50ZXJtZWRpYXRlLWxheWVyc1xuUlVOIC0tbW91bnQ9dHlwZT1jYWNoZSx0YXJnZXQ9L3Jvb3QvLmNhY2hlL3V2IFxcXG4gICAgdXYgc3luY1xuXG5DTUQgW1wiZmFzdGFwaVwiLCBcInJ1blwiLCBcIi0td29ya2Vyc1wiLCBcIjRcIiwgXCJhcHAvbWFpbi5weVwiXVxuLi4uXG5QYXRoOiBiYWNrZW5kL2FwcC9tYWluLnB5XG5pbXBvcnQgc2VudHJ5X3Nka1xuZnJvbSBmYXN0YXBpIGltcG9ydCBGYXN0QVBJXG5mcm9tIGZhc3RhcGkucm91dGluZyBpbXBvcnQgQVBJUm91dGVcbmZyb20gc3RhcmxldHRlLm1pZGRsZXdhcmUuY29ycyBpbXBvcnQgQ09SU01pZGRsZXdhcmVcblxuZnJvbSBhcHAuYXBpLm1haW4gaW1wb3J0IGFwaV9yb3V0ZXJcbmZyb20gYXBwLmNvcmUuY29uZmlnIGltcG9ydCBzZXR0aW5nc1xuXG5cbmRlZiBjdXN0b21fZ2VuZXJhdGVfdW5pcXVlX2lkKHJvdXRlOiBBUElSb3V0ZSkgLT4gc3RyOlxuICAgIHJldHVybiBmXCJ7cm91dGUudGFnc1swXX0te3JvdXRlLm5hbWV9XCJcblxuXG5pZiBzZXR0aW5ncy5TRU5UUllfRFNOIGFuZCBzZXR0aW5ncy5FTlZJUk9OTUVOVCAhPSBcImxvY2FsXCI6XG4gICAgc2VudHJ5X3Nkay5pbml0KGRzbj1zdHIoc2V0dGluZ3MuU0VOVFJZX0RTTiksIGVuYWJsZV90cmFjaW5nPVRydWUpXG5cbmFwcCA9IEZhc3RBUEkoXG4gICAgdGl0bGU9c2V0dGluZ3MuUFJPSkVDVF9OQU1FLFxuICAgIG9wZW5hcGlfdXJsPWZcIntzZXR0aW5ncy5BUElfVjFfU1RSfS9vcGVuYXBpLmpzb25cIixcbiAgICBnZW5lcmF0ZV91bmlxdWVfaWRfZnVuY3Rpb249Y3VzdG9tX2dlbmVyYXRlX3VuaXF1ZV9pZCxcbilcblxuIyBTZXQgYWxsIENPUlMgZW5hYmxlZCBvcmlnaW5zXG5pZiBzZXR0aW5ncy5hbGxfY29yc19vcmlnaW5zOlxuICAgIGFwcC5hZGRfbWlkZGxld2FyZShcbiAgICAgICAgQ09SU01pZGRsZXdhcmUsXG4gICAgICAgIGFsbG93X29yaWdpbnM9c2V0dGluZ3MuYWxsX2NvcnNfb3JpZ2lucyxcbiAgICAgICAgYWxsb3dfY3JlZGVudGlhbHM9VHJ1ZSxcbiAgICAgICAgYWxsb3dfbWV0aG9kcz1bXCIqXCJdLFxuICAgICAgICBhbGxvd19oZWFkZXJzPVtcIipcIl0sXG4gICAgKVxuXG5hcHAuaW5jbHVkZV9yb3V0ZXIoYXBpX3JvdXRlciwgcHJlZml4PXNldHRpbmdzLkFQSV9WMV9TVFIpXG4uLi5cblBhdGg6IGJhY2tlbmQvUkVBRE1FLm1kXG4jIEZhc3RBUEkgUHJvamVjdCAtIEJhY2tlbmRcblxuIyMgUmVxdWlyZW1lbnRzXG5cbiogW0RvY2tlcl0oaHR0cHM6Ly93d3cuZG9ja2VyLmNvbS8pLlxuKiBbdXZdKGh0dHBzOi8vZG9jcy5hc3RyYWwuc2gvdXYvKSBmb3IgUHl0aG9uIHBhY2thZ2UgYW5kIGVudmlyb25tZW50IG1hbmFnZW1lbnQuXG5cbiMjIERvY2tlciBDb21wb3NlXG5cblN0YXJ0IHRoZSBsb2NhbCBkZXZlbG9wbWVudCBlbnZpcm9ubWVudCB3aXRoIERvY2tlciBDb21wb3NlIGZvbGxvd2luZyB0aGUgZ3VpZGUgaW4gWy4uL2RldmVsb3BtZW50Lm1kXSguLi9kZXZlbG9wbWVudC5tZCkuXG5cbiMjIEdlbmVyYWwgV29ya2Zsb3dcblxuQnkgZGVmYXVsdCwgdGhlIGRlcGVuZGVuY2llcyBhcmUgbWFuYWdlZCB3aXRoIFt1dl0oaHR0cHM6Ly9kb2NzLmFzdHJhbC5zaC91di8pLCBnbyB0aGVyZSBhbmQgaW5zdGFsbCBpdC5cblxuRnJvbSBgLi9iYWNrZW5kL2AgeW91IGNhbiBpbnN0YWxsIGFsbCB0aGUgZGVwZW5kZW5jaWVzIHdpdGg6XG5cbmBgYGNvbnNvbGVcbiQgdXYgc3luY1xuYGBgXG5cblRoZW4geW91IGNhbiBhY3RpdmF0ZSB0aGUgdmlydHVhbCBlbnZpcm9ubWVudCB3aXRoOlxuXG5gYGBjb25zb2xlXG4kIHNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGVcbmBgYFxuXG5NYWtlIHN1cmUgeW91ciBlZGl0b3IgaXMgdXNpbmcgdGhlIGNvcnJlY3QgUHl0aG9uIHZpcnR1YWwgZW52aXJvbm1lbnQsIHdpdGggdGhlIGludGVycHJldGVyIGF0IGBiYWNrZW5kLy52ZW52L2Jpbi9weXRob25gLlxuXG5Nb2RpZnkgb3IgYWRkIFNRTE1vZGVsIG1vZGVscyBmb3IgZGF0YSBhbmQgU1FMIHRhYmxlcyBpbiBgLi9iYWNrZW5kL2FwcC9tb2RlbHMucHlgLCBBUEkgZW5kcG9pbnRzIGluIGAuL2JhY2tlbmQvYXBwL2FwaS9gLCBDUlVEIChDcmVhdGUsIFJlYWQsIFVwZGF0ZSwgRGVsZXRlKSB1dGlscyBpbiBgLi9iYWNrZW5kL2FwcC9jcnVkLnB5YC5cblxuIyMgVlMgQ29kZVxuXG5UaGVyZSBhcmUgYWxyZWFkeSBjb25maWd1cmF0aW9ucyBpbiBwbGFjZSB0byBydW4gdGhlIGJhY2tlbmQgdGhyb3VnaCB0aGUgVlMgQ29kZSBkZWJ1Z2dlciwgc28gdGhhdCB5b3UgY2FuIHVzZSBicmVha3BvaW50cywgcGF1c2UgYW5kIGV4cGxvcmUgdmFyaWFibGVzLCBldGMuXG5cblRoZSBzZXR1cCBpcyBhbHNvIGFscmVhZHkgY29uZmlndXJlZCBzbyB5b3UgY2FuIHJ1biB0aGUgdGVzdHMgdGhyb3VnaCB0aGUgVlMgQ29kZSBQeXRob24gdGVzdHMgdGFiLlxuXG4jIyBEb2NrZXIgQ29tcG9zZSBPdmVycmlkZVxuXG5EdXJpbmcgZGV2ZWxvcG1lbnQsIHlvdSBjYW4gY2hhbmdlIERvY2tlciBDb21wb3NlIHNldHRpbmdzIHRoYXQgd2lsbCBvbmx5IGFmZmVjdCB0aGUgbG9jYWwgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnQgaW4gdGhlIGZpbGUgYGRvY2tlci1jb21wb3NlLm92ZXJyaWRlLnltbGAuXG4uLi5cblxuVGhlcmUgaXMgYWxzbyBhIGNvbW1hbmQgb3ZlcnJpZGUgdGhhdCBydW5zIGBmYXN0YXBpIHJ1biAtLXJlbG9hZGAgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBgZmFzdGFwaSBydW5gLiBJdCBzdGFydHMgYSBzaW5nbGUgc2VydmVyIHByb2Nlc3MgKGluc3RlYWQgb2YgbXVsdGlwbGUsIGFzIHdvdWxkIGJlIGZvciBwcm9kdWN0aW9uKSBhbmQgcmVsb2FkcyB0aGUgcHJvY2VzcyB3aGVuZXZlciB0aGUgY29kZSBjaGFuZ2VzLiBIYXZlIGluIG1pbmQgdGhhdCBpZiB5b3UgaGF2ZSBhIHN5bnRheCBlcnJvciBhbmQgc2F2ZSB0aGUgUHl0aG9uIGZpbGUsIGl0IHdpbGwgYnJlYWsgYW5kIGV4aXQsIGFuZCB0aGUgY29udGFpbmVyIHdpbGwgc3RvcC4gQWZ0ZXIgdGhhdCwgeW91IGNhbiByZXN0YXJ0IHRoZSBjb250YWluZXIgYnkgZml4aW5nIHRoZSBlcnJvciBhbmQgcnVubmluZyBhZ2FpbjpcblxuYGBgY29uc29sZVxuJCBkb2NrZXIgY29tcG9zZSB3YXRjaFxuYGBgXG4uLi5cblxudGhhdCBtZWFucyB0aGF0IHlvdSBhcmUgaW4gYSBgYmFzaGAgc2Vzc2lvbiBpbnNpZGUgeW91ciBjb250YWluZXIsIGFzIGEgYHJvb3RgIHVzZXIsIHVuZGVyIHRoZSBgL2FwcGAgZGlyZWN0b3J5LCB0aGlzIGRpcmVjdG9yeSBoYXMgYW5vdGhlciBkaXJlY3RvcnkgY2FsbGVkIFwiYXBwXCIgaW5zaWRlLCB0aGF0J3Mgd2hlcmUgeW91ciBjb2RlIGxpdmVzIGluc2lkZSB0aGUgY29udGFpbmVyOiBgL2FwcC9hcHBgLlxuXG5UaGVyZSB5b3UgY2FuIHVzZSB0aGUgYGZhc3RhcGkgcnVuIC0tcmVsb2FkYCBjb21tYW5kIHRvIHJ1biB0aGUgZGVidWcgbGl2ZSByZWxvYWRpbmcgc2VydmVyLlxuXG5gYGBjb25zb2xlXG4kIGZhc3RhcGkgcnVuIC0tcmVsb2FkIGFwcC9tYWluLnB5XG5gYGBcblxuLi4uaXQgd2lsbCBsb29rIGxpa2U6XG5cbmBgYGNvbnNvbGVcbnJvb3RAN2YyNjA3YWYzMWMzOi9hcHAjIGZhc3RhcGkgcnVuIC0tcmVsb2FkIGFwcC9tYWluLnB5XG5gYGBcblxuYW5kIHRoZW4gaGl0IGVudGVyLiBUaGF0IHJ1bnMgdGhlIGxpdmUgcmVsb2FkaW5nIHNlcnZlciB0aGF0IGF1dG8gcmVsb2FkcyB3aGVuIGl0IGRldGVjdHMgY29kZSBjaGFuZ2VzLlxuLi4uXG5QYXRoOiBiYWNrZW5kL3NjcmlwdHMvcHJlc3RhcnQuc2hcbiMhIC91c3IvYmluL2VudiBiYXNoXG5cbnNldCAtZVxuc2V0IC14XG5cbiMgTGV0IHRoZSBEQiBzdGFydFxucHl0aG9uIGFwcC9iYWNrZW5kX3ByZV9zdGFydC5weVxuXG4jIFJ1biBtaWdyYXRpb25zXG5hbGVtYmljIHVwZ3JhZGUgaGVhZFxuXG4jIENyZWF0ZSBpbml0aWFsIGRhdGEgaW4gREJcbnB5dGhvbiBhcHAvaW5pdGlhbF9kYXRhLnB5XG4uLi5cblBhdGg6IG1haW4ucHlcbmRlZiBtYWluKCk6XG4gICAgcHJpbnQoXCJIZWxsbyBmcm9tIHBhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIVwiKVxuXG5cbmlmIF9fbmFtZV9fID09IFwiX19tYWluX19cIjpcbiAgICBtYWluKClcbi4uLlxuUGF0aDogYmFja2VuZC9zY3JpcHRzL3Rlc3RzLXN0YXJ0LnNoXG4jISAvdXNyL2Jpbi9lbnYgYmFzaFxuc2V0IC1lXG5zZXQgLXhcblxucHl0aG9uIGFwcC90ZXN0c19wcmVfc3RhcnQucHlcblxuYmFzaCBzY3JpcHRzL3Rlc3Quc2ggXCIkQFwiXG4uLi5cblBhdGg6IGJhY2tlbmQvYXBwL2JhY2tlbmRfcHJlX3N0YXJ0LnB5XG5pbXBvcnQgbG9nZ2luZ1xuXG5mcm9tIHNxbGFsY2hlbXkgaW1wb3J0IEVuZ2luZVxuZnJvbSBzcWxtb2RlbCBpbXBvcnQgU2Vzc2lvbiwgc2VsZWN0XG5mcm9tIHRlbmFjaXR5IGltcG9ydCBhZnRlcl9sb2csIGJlZm9yZV9sb2csIHJldHJ5LCBzdG9wX2FmdGVyX2F0dGVtcHQsIHdhaXRfZml4ZWRcblxuZnJvbSBhcHAuY29yZS5kYiBpbXBvcnQgZW5naW5lXG5cbmxvZ2dpbmcuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2luZy5JTkZPKVxubG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoX19uYW1lX18pXG5cbm1heF90cmllcyA9IDYwICogNSAgIyA1IG1pbnV0ZXNcbndhaXRfc2Vjb25kcyA9IDFcblxuXG5AcmV0cnkoXG4gICAgc3RvcD1zdG9wX2FmdGVyX2F0dGVtcHQobWF4X3RyaWVzKSxcbiAgICB3YWl0PXdhaXRfZml4ZWQod2FpdF9zZWNvbmRzKSxcbiAgICBiZWZvcmU9YmVmb3JlX2xvZyhsb2dnZXIsIGxvZ2dpbmcuSU5GTyksXG4gICAgYWZ0ZXI9YWZ0ZXJfbG9nKGxvZ2dlciwgbG9nZ2luZy5XQVJOKSxcbilcbmRlZiBpbml0KGRiX2VuZ2luZTogRW5naW5lKSAtPiBOb25lOlxuICAgIHRyeTpcbiAgICAgICAgd2l0aCBTZXNzaW9uKGRiX2VuZ2luZSkgYXMgc2Vzc2lvbjpcbiAgICAgICAgICAgICMgVHJ5IHRvIGNyZWF0ZSBzZXNzaW9uIHRvIGNoZWNrIGlmIERCIGlzIGF3YWtlXG4gICAgICAgICAgICBzZXNzaW9uLmV4ZWMoc2VsZWN0KDEpKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgbG9nZ2VyLmVycm9yKGUpXG4gICAgICAgIHJhaXNlIGVcblxuXG5kZWYgbWFpbigpIC0+IE5vbmU6XG4gICAgbG9nZ2VyLmluZm8oXCJJbml0aWFsaXppbmcgc2VydmljZVwiKVxuICAgIGluaXQoZW5naW5lKVxuICAgIGxvZ2dlci5pbmZvKFwiU2VydmljZSBmaW5pc2hlZCBpbml0aWFsaXppbmdcIilcblxuXG5pZiBfX25hbWVfXyA9PSBcIl9fbWFpbl9fXCI6XG4gICAgbWFpbigpXG4uLi5cblBhdGg6IGRvYy9GdWxsLVN0YWNrLUZhc3RBUEktVGVtcGxhdGXlrabkuaDmiYvlhowubWRcbi4uLlxuXG5gYGBcbi5cbuKUnOKUgOKUgCAuZ2l0aHViLyAgICAgICAgICAgICMgR2l0SHViIEFjdGlvbnMg6YWN572uXG7ilJzilIDilIAgYmFja2VuZC8gICAgICAgICAgICAjIOWQjuerr+S7o+eggVxu4pSc4pSA4pSAIGZyb250ZW5kLyAgICAgICAgICAgIyDliY3nq6/ku6PnoIFcbuKUnOKUgOKUgCBzY3JpcHRzLyAgICAgICAgICAgICMg5a6e55So6ISa5pysXG7ilJzilIDilIAgLmVudiAgICAgICAgICAgICAgICAjIOeOr+Wig+WPmOmHj1xu4pSc4pSA4pSAIGRvY2tlci1jb21wb3NlLnltbCAgIyBEb2NrZXIgQ29tcG9zZSDphY3nva5cbuKUlOKUgOKUgCAuLi5cbmBgYFxuXG4jIyMg5ZCO56uv57uT5p6EXG5cbmBgYFxuYmFja2VuZC9cbuKUnOKUgOKUgCBhcHAvXG7ilIIgICDilJzilIDilIAgYXBpLyAgICAgICAgICAgICMgQVBJIOi3r+eUsVxu4pSCICAg4pSc4pSA4pSAIGNvcmUvICAgICAgICAgICAjIOaguOW/g+mFjee9rlxu4pSCICAg4pSc4pSA4pSAIGNydWQvICAgICAgICAgICAjIENSVUQg5pON5L2cXG7ilIIgICDilJzilIDilIAgZGIvICAgICAgICAgICAgICMg5pWw5o2u5bqT6K6+572uXG7ilIIgICDilJzilIDilIAgbW9kZWxzLyAgICAgICAgICMg5pWw5o2u5qih5Z6LXG7ilIIgICDilJzilIDilIAgc2NoZW1hcy8gICAgICAgICMgUHlkYW50aWMg5qih5byPXG7ilIIgICDilJzilIDilIAgdGVzdHMvICAgICAgICAgICMg5rWL6K+VXG7ilIIgICDilJTilIDilIAgbWFpbi5weSAgICAgICAgICMg5Li75bqU55So5YWl5Y+jXG7ilJzilIDilIAgYWxlbWJpYy8gICAgICAgICAgICAjIOaVsOaNruW6k+i/geenu1xu4pSU4pSA4pSAIC4uLlxuYGBgXG5cbiMjIyDliY3nq6/nu5PmnoRcblxuYGBgXG5mcm9udGVuZC9cbuKUnOKUgOKUgCBzcmMvXG7ilIIgICDilJzilIDilIAgYXNzZXRzLyAgICAgICAgICMg6Z2Z5oCB6LWE5rqQXG7ilIIgICDilJzilIDilIAgY2xpZW50LyAgICAgICAgICMg55Sf5oiQ55qEIEFQSSDlrqLmiLfnq69cbuKUgiAgIOKUnOKUgOKUgCBjb21wb25lbnRzLyAgICAgIyBSZWFjdCDnu4Tku7ZcbuKUgiAgIOKUnOKUgOKUgCBob29rcy8gICAgICAgICAgIyDoh6rlrprkuYkgaG9va3NcbuKUgiAgIOKUnOKUgOKUgCByb3V0ZXMvICAgICAgICAgIyDot6/nlLHlkozpobXpnaJcbuKUgiAgIOKUlOKUgOKUgCAuLi5cbuKUnOKUgOKUgCB0ZXN0cy8gICAgICAgICAgICAgICMgUGxheXdyaWdodCDmtYvor5VcbuKUlOKUgOKUgCAuLi5cbmBgYFxuXG4jIyA0LiDlkI7nq6/mnrbmnoRcblxuIyMjIEZhc3RBUEkg5bqU55So57uT5p6EXG5cbkZhc3RBUEkg5bqU55So55qE5YWl5Y+j54K55pivIGBiYWNrZW5kL2FwcC9tYWluLnB5YO+8jOWug+WIneWni+WMliBGYXN0QVBJIOW6lOeUqOW5tuWMheWQq+aJgOaciei3r+eUseOAglxuXG5gYGBweXRob25cbiMgYmFja2VuZC9hcHAvbWFpbi5weVxuZnJvbSBmYXN0YXBpIGltcG9ydCBGYXN0QVBJXG5mcm9tIGFwcC5hcGkubWFpbiBpbXBvcnQgYXBpX3JvdXRlclxuZnJvbSBhcHAuY29yZS5jb25maWcgaW1wb3J0IHNldHRpbmdzXG5cbmFwcCA9IEZhc3RBUEkoXG4gICAgdGl0bGU9c2V0dGluZ3MuUFJPSkVDVF9OQU1FLFxuICAgIG9wZW5hcGlfdXJsPWZcIntzZXR0aW5ncy5BUElfVjFfU1RSfS9vcGVuYXBpLmpzb25cIixcbilcbi4uLlxuXG5gYGBiYXNoXG4jIOacrOWcsOWJjeerr+W8gOWPkVxuY2QgZnJvbnRlbmRcbm5wbSBpbnN0YWxsXG5ucG0gcnVuIGRldlxuYGBgXG5cbiMjIyDlkI7nq6/lvIDlj5Fcblxu5ZCO56uv5byA5Y+R5ZCM5qC35Y+v5Lul5ZyoIERvY2tlciDlrrnlmajlhoXov5vooYzvvIzkuZ/lj6/ku6XlnKjmnKzlnLDov5vooYzvvJpcblxuYGBgYmFzaFxuIyDmnKzlnLDlkI7nq6/lvIDlj5FcbmNkIGJhY2tlbmRcbnV2IHN5bmNcbnNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGVcbmZhc3RhcGkgZGV2IGFwcC9tYWluLnB5XG5gYGBcblxuIyMgNy4gRG9ja2VyIOS4juWuueWZqOWMllxuXG4jIyMgRG9ja2VyIENvbXBvc2Ug6YWN572uXG5cbumhueebruS9v+eUqCBEb2NrZXIgQ29tcG9zZSDnrqHnkIblrrnlmajvvJpcblxuYGBgeWFtbFxuIyBkb2NrZXItY29tcG9zZS55bWxcbnZlcnNpb246ICczLjgnXG5zZXJ2aWNlczpcbiAgYmFja2VuZDpcbiAgICBpbWFnZTogJyR7RE9DS0VSX0lNQUdFX0JBQ0tFTkR9OiR7VEFHLWxhdGVzdH0nXG4gICAgZGVwZW5kc19vbjpcbiAgICAgIC0gZGJcbiAgICBlbnZfZmlsZTpcbiAgICAgIC0gLmVudlxuICAgIGVudmlyb25tZW50OlxuICAgICAgLSBET01BSU49JHtET01BSU59XG4gICAgICAtIEZST05URU5EX0hPU1Q9JHtGUk9OVEVORF9IT1NUfVxuICAgICAgIyDlhbbku5bnjq/looPlj5jph48uLi5cblxuICBmcm9udGVuZDpcbiAgICBpbWFnZTogJyR7RE9DS0VSX0lNQUdFX0ZST05URU5EfToke1RBRy1sYXRlc3R9J1xuICAgIGVudl9maWxlOlxuICAgICAgLSAuZW52XG4gICAgZW52aXJvbm1lbnQ6XG4gICAgICAtIFZJVEVfQVBJX1VSTD0ke0ZST05URU5EX0hPU1R9XG5cbiAgZGI6XG4gICAgaW1hZ2U6IHBvc3RncmVzOjE1XG4gICAgdm9sdW1lczpcbiAgICAgIC0gYXBwLWRiLWRhdGE6L3Zhci9saWIvcG9zdGdyZXNxbC9kYXRhL3BnZGF0YVxuICAgIGVudl9maWxlOlxuICAgICAgLSAuZW52XG4gICAgZW52aXJvbm1lbnQ6XG4gICAgICAtIFBHREFUQT0vdmFyL2xpYi9wb3N0Z3Jlc3FsL2RhdGEvcGdkYXRhXG4gICAgICAjIOWFtuS7lueOr+Wig+WPmOmHjy4uLlxuLi4uXG5QYXRoOiBiYWNrZW5kL3B5cHJvamVjdC50b21sXG5bcHJvamVjdF1cbm5hbWUgPSBcImFwcFwiXG52ZXJzaW9uID0gXCIwLjEuMFwiXG5kZXNjcmlwdGlvbiA9IFwiXCJcbnJlcXVpcmVzLXB5dGhvbiA9IFwiPj0zLjEwLDw0LjBcIlxuZGVwZW5kZW5jaWVzID0gW1xuICAgIFwiZmFzdGFwaVtzdGFuZGFyZF08MS4wLjAsPj0wLjExNC4yXCIsXG4gICAgXCJweXRob24tbXVsdGlwYXJ0PDEuMC4wLD49MC4wLjdcIixcbiAgICBcImVtYWlsLXZhbGlkYXRvcjwzLjAuMC4wLD49Mi4xLjAucG9zdDFcIixcbiAgICBcInBhc3NsaWJbYmNyeXB0XTwyLjAuMCw+PTEuNy40XCIsXG4gICAgXCJ0ZW5hY2l0eTw5LjAuMCw+PTguMi4zXCIsXG4gICAgXCJweWRhbnRpYz4yLjBcIixcbiAgICBcImVtYWlsczwxLjAsPj0wLjZcIixcbiAgICBcImppbmphMjw0LjAuMCw+PTMuMS40XCIsXG4gICAgXCJhbGVtYmljPDIuMC4wLD49MS4xMi4xXCIsXG4gICAgXCJodHRweDwxLjAuMCw+PTAuMjUuMVwiLFxuICAgIFwicHN5Y29wZ1tiaW5hcnldPDQuMC4wLD49My4xLjEzXCIsXG4gICAgXCJzcWxtb2RlbDwxLjAuMCw+PTAuMC4yMVwiLFxuICAgICMgUGluIGJjcnlwdCB1bnRpbCBwYXNzbGliIHN1cHBvcnRzIHRoZSBsYXRlc3RcbiAgICBcImJjcnlwdD09NC4wLjFcIixcbiAgICBcInB5ZGFudGljLXNldHRpbmdzPDMuMC4wLD49Mi4yLjFcIixcbiAgICBcInNlbnRyeS1zZGtbZmFzdGFwaV08Mi4wLjAsPj0xLjQwLjZcIixcbiAgICBcInB5and0PDMuMC4wLD49Mi44LjBcIixcbl1cbi4uLlxuUGF0aDogZG9ja2VyLWNvbXBvc2Uub3ZlcnJpZGUueW1sXG4uLi5cblxuICBiYWNrZW5kOlxuICAgIHJlc3RhcnQ6IFwibm9cIlxuICAgIHBvcnRzOlxuICAgICAgLSBcIjgwMDA6ODAwMFwiXG4gICAgYnVpbGQ6XG4gICAgICBjb250ZXh0OiAuL2JhY2tlbmRcbiAgICAjIGNvbW1hbmQ6IHNsZWVwIGluZmluaXR5ICAjIEluZmluaXRlIGxvb3AgdG8ga2VlcCBjb250YWluZXIgYWxpdmUgZG9pbmcgbm90aGluZ1xuICAgIGNvbW1hbmQ6XG4gICAgICAtIGZhc3RhcGlcbiAgICAgIC0gcnVuXG4gICAgICAtIC0tcmVsb2FkXG4gICAgICAtIFwiYXBwL21haW4ucHlcIlxuICAgIGRldmVsb3A6XG4gICAgICB3YXRjaDpcbiAgICAgICAgLSBwYXRoOiAuL2JhY2tlbmRcbiAgICAgICAgICBhY3Rpb246IHN5bmNcbiAgICAgICAgICB0YXJnZXQ6IC9hcHBcbiAgICAgICAgICBpZ25vcmU6XG4gICAgICAgICAgICAtIC4vYmFja2VuZC8udmVudlxuICAgICAgICAgICAgLSAudmVudlxuICAgICAgICAtIHBhdGg6IC4vYmFja2VuZC9weXByb2plY3QudG9tbFxuICAgICAgICAgIGFjdGlvbjogcmVidWlsZFxuICAgICMgVE9ETzogcmVtb3ZlIG9uY2UgY292ZXJhZ2UgaXMgZG9uZSBsb2NhbGx5XG4gICAgdm9sdW1lczpcbiAgICAgIC0gLi9iYWNrZW5kL2h0bWxjb3Y6L2FwcC9odG1sY292XG4gICAgZW52aXJvbm1lbnQ6XG4gICAgICBTTVRQX0hPU1Q6IFwibWFpbGNhdGNoZXJcIlxuICAgICAgU01UUF9QT1JUOiBcIjEwMjVcIlxuICAgICAgU01UUF9UTFM6IFwiZmFsc2VcIlxuICAgICAgRU1BSUxTX0ZST01fRU1BSUw6IFwibm9yZXBseUBleGFtcGxlLmNvbVwiXG5cbiAgbWFpbGNhdGNoZXI6XG4gICAgaW1hZ2U6IHNjaGlja2xpbmcvbWFpbGNhdGNoZXJcbiAgICBwb3J0czpcbiAgICAgIC0gXCIxMDgwOjEwODBcIlxuICAgICAgLSBcIjEwMjU6MTAyNVwiXG5cbiAgZnJvbnRlbmQ6XG4gICAgcmVzdGFydDogXCJub1wiXG4gICAgcG9ydHM6XG4gICAgICAtIFwiNTE3Mzo4MFwiXG4gICAgYnVpbGQ6XG4gICAgICBjb250ZXh0OiAuL2Zyb250ZW5kXG4gICAgICBhcmdzOlxuICAgICAgICAtIFZJVEVfQVBJX1VSTD1odHRwOi8vbG9jYWxob3N0OjgwMDBcbiAgICAgICAgLSBOT0RFX0VOVj1kZXZlbG9wbWVudFxuLi4uXG5QYXRoOiBkb2NrZXItY29tcG9zZS55bWxcbnNlcnZpY2VzOlxuXG4gIGRiOlxuICAgIGltYWdlOiBwb3N0Z3JlczoxMlxuICAgIHJlc3RhcnQ6IGFsd2F5c1xuICAgIGhlYWx0aGNoZWNrOlxuICAgICAgdGVzdDogW1wiQ01ELVNIRUxMXCIsIFwicGdfaXNyZWFkeSAtVSAke1BPU1RHUkVTX1VTRVJ9IC1kICR7UE9TVEdSRVNfREJ9XCJdXG4gICAgICBpbnRlcnZhbDogMTBzXG4gICAgICByZXRyaWVzOiA1XG4gICAgICBzdGFydF9wZXJpb2Q6IDMwc1xuICAgICAgdGltZW91dDogMTBzXG4gICAgdm9sdW1lczpcbiAgICAgIC0gYXBwLWRiLWRhdGE6L3Zhci9saWIvcG9zdGdyZXNxbC9kYXRhL3BnZGF0YVxuICAgIGVudl9maWxlOlxuICAgICAgLSAuZW52XG4gICAgZW52aXJvbm1lbnQ6XG4gICAgICAtIFBHREFUQT0vdmFyL2xpYi9wb3N0Z3Jlc3FsL2RhdGEvcGdkYXRhXG4gICAgICAtIFBPU1RHUkVTX1BBU1NXT1JEPSR7UE9TVEdSRVNfUEFTU1dPUkQ/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gUE9TVEdSRVNfVVNFUj0ke1BPU1RHUkVTX1VTRVI/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gUE9TVEdSRVNfREI9JHtQT1NUR1JFU19EQj9WYXJpYWJsZSBub3Qgc2V0fVxuXG4gIGFkbWluZXI6XG4gICAgaW1hZ2U6IGFkbWluZXJcbiAgICByZXN0YXJ0OiBhbHdheXNcbiAgICBuZXR3b3JrczpcbiAgICAgIC0gdHJhZWZpay1wdWJsaWNcbiAgICAgIC0gZGVmYXVsdFxuICAgIGRlcGVuZHNfb246XG4gICAgICAtIGRiXG4gICAgZW52aXJvbm1lbnQ6XG4gICAgICAtIEFETUlORVJfREVTSUdOPXBlcGEtbGluaGEtZGFya1xuICAgIGxhYmVsczpcbiAgICAgIC0gdHJhZWZpay5lbmFibGU9dHJ1ZVxuICAgICAgLSB0cmFlZmlrLmRvY2tlci5uZXR3b3JrPXRyYWVmaWstcHVibGljXG4gICAgICAtIHRyYWVmaWsuY29uc3RyYWludC1sYWJlbD10cmFlZmlrLXB1YmxpY1xuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tYWRtaW5lci1odHRwLnJ1bGU9SG9zdChgYWRtaW5lci4ke0RPTUFJTj9WYXJpYWJsZSBub3Qgc2V0fWApXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1hZG1pbmVyLWh0dHAuZW50cnlwb2ludHM9aHR0cFxuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tYWRtaW5lci1odHRwLm1pZGRsZXdhcmVzPWh0dHBzLXJlZGlyZWN0XG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1hZG1pbmVyLWh0dHBzLnJ1bGU9SG9zdChgYWRtaW5lci4ke0RPTUFJTj9WYXJpYWJsZSBub3Qgc2V0fWApXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1hZG1pbmVyLWh0dHBzLmVudHJ5cG9pbnRzPWh0dHBzXG4uLi5cblxuICBwcmVzdGFydDpcbiAgICBpbWFnZTogJyR7RE9DS0VSX0lNQUdFX0JBQ0tFTkQ/VmFyaWFibGUgbm90IHNldH06JHtUQUctbGF0ZXN0fSdcbiAgICBidWlsZDpcbiAgICAgIGNvbnRleHQ6IC4vYmFja2VuZFxuICAgIG5ldHdvcmtzOlxuICAgICAgLSB0cmFlZmlrLXB1YmxpY1xuICAgICAgLSBkZWZhdWx0XG4gICAgZGVwZW5kc19vbjpcbiAgICAgIGRiOlxuICAgICAgICBjb25kaXRpb246IHNlcnZpY2VfaGVhbHRoeVxuICAgICAgICByZXN0YXJ0OiB0cnVlXG4gICAgY29tbWFuZDogYmFzaCBzY3JpcHRzL3ByZXN0YXJ0LnNoXG4gICAgZW52X2ZpbGU6XG4gICAgICAtIC5lbnZcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgIC0gRE9NQUlOPSR7RE9NQUlOfVxuICAgICAgLSBGUk9OVEVORF9IT1NUPSR7RlJPTlRFTkRfSE9TVD9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBFTlZJUk9OTUVOVD0ke0VOVklST05NRU5UfVxuICAgICAgLSBCQUNLRU5EX0NPUlNfT1JJR0lOUz0ke0JBQ0tFTkRfQ09SU19PUklHSU5TfVxuICAgICAgLSBTRUNSRVRfS0VZPSR7U0VDUkVUX0tFWT9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBGSVJTVF9TVVBFUlVTRVI9JHtGSVJTVF9TVVBFUlVTRVI/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gRklSU1RfU1VQRVJVU0VSX1BBU1NXT1JEPSR7RklSU1RfU1VQRVJVU0VSX1BBU1NXT1JEP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIFNNVFBfSE9TVD0ke1NNVFBfSE9TVH1cbiAgICAgIC0gU01UUF9VU0VSPSR7U01UUF9VU0VSfVxuICAgICAgLSBTTVRQX1BBU1NXT1JEPSR7U01UUF9QQVNTV09SRH1cbiAgICAgIC0gRU1BSUxTX0ZST01fRU1BSUw9JHtFTUFJTFNfRlJPTV9FTUFJTH1cbiAgICAgIC0gUE9TVEdSRVNfU0VSVkVSPWRiXG4gICAgICAtIFBPU1RHUkVTX1BPUlQ9JHtQT1NUR1JFU19QT1JUfVxuICAgICAgLSBQT1NUR1JFU19EQj0ke1BPU1RHUkVTX0RCfVxuICAgICAgLSBQT1NUR1JFU19VU0VSPSR7UE9TVEdSRVNfVVNFUj9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBQT1NUR1JFU19QQVNTV09SRD0ke1BPU1RHUkVTX1BBU1NXT1JEP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIFNFTlRSWV9EU049JHtTRU5UUllfRFNOfVxuXG4gIGJhY2tlbmQ6XG4gICAgaW1hZ2U6ICcke0RPQ0tFUl9JTUFHRV9CQUNLRU5EP1ZhcmlhYmxlIG5vdCBzZXR9OiR7VEFHLWxhdGVzdH0nXG4gICAgcmVzdGFydDogYWx3YXlzXG4gICAgbmV0d29ya3M6XG4gICAgICAtIHRyYWVmaWstcHVibGljXG4gICAgICAtIGRlZmF1bHRcbiAgICBkZXBlbmRzX29uOlxuICAgICAgZGI6XG4gICAgICAgIGNvbmRpdGlvbjogc2VydmljZV9oZWFsdGh5XG4gICAgICAgIHJlc3RhcnQ6IHRydWVcbiAgICAgIHByZXN0YXJ0OlxuICAgICAgICBjb25kaXRpb246IHNlcnZpY2VfY29tcGxldGVkX3N1Y2Nlc3NmdWxseVxuICAgIGVudl9maWxlOlxuICAgICAgLSAuZW52XG4gICAgZW52aXJvbm1lbnQ6XG4gICAgICAtIERPTUFJTj0ke0RPTUFJTn1cbiAgICAgIC0gRlJPTlRFTkRfSE9TVD0ke0ZST05URU5EX0hPU1Q/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gRU5WSVJPTk1FTlQ9JHtFTlZJUk9OTUVOVH1cbiAgICAgIC0gQkFDS0VORF9DT1JTX09SSUdJTlM9JHtCQUNLRU5EX0NPUlNfT1JJR0lOU31cbiAgICAgIC0gU0VDUkVUX0tFWT0ke1NFQ1JFVF9LRVk/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gRklSU1RfU1VQRVJVU0VSPSR7RklSU1RfU1VQRVJVU0VSP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIEZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRD0ke0ZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRD9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBTTVRQX0hPU1Q9JHtTTVRQX0hPU1R9XG4gICAgICAtIFNNVFBfVVNFUj0ke1NNVFBfVVNFUn1cbiAgICAgIC0gU01UUF9QQVNTV09SRD0ke1NNVFBfUEFTU1dPUkR9XG4gICAgICAtIEVNQUlMU19GUk9NX0VNQUlMPSR7RU1BSUxTX0ZST01fRU1BSUx9XG4gICAgICAtIFBPU1RHUkVTX1NFUlZFUj1kYlxuICAgICAgLSBQT1NUR1JFU19QT1JUPSR7UE9TVEdSRVNfUE9SVH1cbiAgICAgIC0gUE9TVEdSRVNfREI9JHtQT1NUR1JFU19EQn1cbiAgICAgIC0gUE9TVEdSRVNfVVNFUj0ke1BPU1RHUkVTX1VTRVI/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gUE9TVEdSRVNfUEFTU1dPUkQ9JHtQT1NUR1JFU19QQVNTV09SRD9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBTRU5UUllfRFNOPSR7U0VOVFJZX0RTTn1cblxuICAgIGhlYWx0aGNoZWNrOlxuICAgICAgdGVzdDogW1wiQ01EXCIsIFwiY3VybFwiLCBcIi1mXCIsIFwiaHR0cDovL2xvY2FsaG9zdDo4MDAwL2FwaS92MS91dGlscy9oZWFsdGgtY2hlY2svXCJdXG4gICAgICBpbnRlcnZhbDogMTBzXG4gICAgICB0aW1lb3V0OiA1c1xuICAgICAgcmV0cmllczogNVxuXG4gICAgYnVpbGQ6XG4gICAgICBjb250ZXh0OiAuL2JhY2tlbmRcbiAgICBsYWJlbHM6XG4gICAgICAtIHRyYWVmaWsuZW5hYmxlPXRydWVcbiAgICAgIC0gdHJhZWZpay5kb2NrZXIubmV0d29yaz10cmFlZmlrLXB1YmxpY1xuICAgICAgLSB0cmFlZmlrLmNvbnN0cmFpbnQtbGFiZWw9dHJhZWZpay1wdWJsaWNcblxuICAgICAgLSB0cmFlZmlrLmh0dHAuc2VydmljZXMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWJhY2tlbmQubG9hZGJhbGFuY2VyLnNlcnZlci5wb3J0PTgwMDBcblxuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tYmFja2VuZC1odHRwLnJ1bGU9SG9zdChgYXBpLiR7RE9NQUlOP1ZhcmlhYmxlIG5vdCBzZXR9YClcbiAgICAgIC0gdHJhZWZpay5odHRwLnJvdXRlcnMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWJhY2tlbmQtaHR0cC5lbnRyeXBvaW50cz1odHRwXG4uLi5cblxuICBmcm9udGVuZDpcbiAgICBpbWFnZTogJyR7RE9DS0VSX0lNQUdFX0ZST05URU5EP1ZhcmlhYmxlIG5vdCBzZXR9OiR7VEFHLWxhdGVzdH0nXG4gICAgcmVzdGFydDogYWx3YXlzXG4gICAgbmV0d29ya3M6XG4gICAgICAtIHRyYWVmaWstcHVibGljXG4gICAgICAtIGRlZmF1bHRcbiAgICBidWlsZDpcbiAgICAgIGNvbnRleHQ6IC4vZnJvbnRlbmRcbiAgICAgIGFyZ3M6XG4gICAgICAgIC0gVklURV9BUElfVVJMPWh0dHBzOi8vYXBpLiR7RE9NQUlOP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAgIC0gTk9ERV9FTlY9cHJvZHVjdGlvblxuICAgIGxhYmVsczpcbiAgICAgIC0gdHJhZWZpay5lbmFibGU9dHJ1ZVxuICAgICAgLSB0cmFlZmlrLmRvY2tlci5uZXR3b3JrPXRyYWVmaWstcHVibGljXG4gICAgICAtIHRyYWVmaWsuY29uc3RyYWludC1sYWJlbD10cmFlZmlrLXB1YmxpY1xuXG4gICAgICAtIHRyYWVmaWsuaHR0cC5zZXJ2aWNlcy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tZnJvbnRlbmQubG9hZGJhbGFuY2VyLnNlcnZlci5wb3J0PTgwXG5cbiAgICAgIC0gdHJhZWZpay5odHRwLnJvdXRlcnMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWZyb250ZW5kLWh0dHAucnVsZT1Ib3N0KGBkYXNoYm9hcmQuJHtET01BSU4/VmFyaWFibGUgbm90IHNldH1gKVxuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tZnJvbnRlbmQtaHR0cC5lbnRyeXBvaW50cz1odHRwXG5cbiAgICAgIC0gdHJhZWZpay5odHRwLnJvdXRlcnMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWZyb250ZW5kLWh0dHBzLnJ1bGU9SG9zdChgZGFzaGJvYXJkLiR7RE9NQUlOP1ZhcmlhYmxlIG5vdCBzZXR9YClcbiAgICAgIC0gdHJhZWZpay5odHRwLnJvdXRlcnMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWZyb250ZW5kLWh0dHBzLmVudHJ5cG9pbnRzPWh0dHBzXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1mcm9udGVuZC1odHRwcy50bHM9dHJ1ZVxuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tZnJvbnRlbmQtaHR0cHMudGxzLmNlcnRyZXNvbHZlcj1sZVxuXG4gICAgICAjIEVuYWJsZSByZWRpcmVjdGlvbiBmb3IgSFRUUCBhbmQgSFRUUFNcbiAgICAgIC0gdHJhZWZpay5odHRwLnJvdXRlcnMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWZyb250ZW5kLWh0dHAubWlkZGxld2FyZXM9aHR0cHMtcmVkaXJlY3RcbnZvbHVtZXM6XG4gIGFwcC1kYi1kYXRhOlxuXG5uZXR3b3JrczpcbiAgdHJhZWZpay1wdWJsaWM6XG4gICAgIyBBbGxvdyBzZXR0aW5nIGl0IHRvIGZhbHNlIGZvciB0ZXN0aW5nXG4gICAgZXh0ZXJuYWw6IHRydWVcbi4uLlxuUGF0aDogc2NyaXB0cy90ZXN0LWxvY2FsLnNoXG4jISAvdXNyL2Jpbi9lbnYgYmFzaFxuXG4jIEV4aXQgaW4gY2FzZSBvZiBlcnJvclxuc2V0IC1lXG5cbmRvY2tlci1jb21wb3NlIGRvd24gLXYgLS1yZW1vdmUtb3JwaGFucyAjIFJlbW92ZSBwb3NzaWJseSBwcmV2aW91cyBicm9rZW4gc3RhY2tzIGxlZnQgaGFuZ2luZyBhZnRlciBhbiBlcnJvclxuXG5pZiBbICQodW5hbWUgLXMpID0gXCJMaW51eFwiIF07IHRoZW5cbiAgICBlY2hvIFwiUmVtb3ZlIF9fcHljYWNoZV9fIGZpbGVzXCJcbiAgICBzdWRvIGZpbmQgLiAtdHlwZSBkIC1uYW1lIF9fcHljYWNoZV9fIC1leGVjIHJtIC1yIHt9IFxcK1xuZmlcblxuZG9ja2VyLWNvbXBvc2UgYnVpbGRcbmRvY2tlci1jb21wb3NlIHVwIC1kXG5kb2NrZXItY29tcG9zZSBleGVjIC1UIGJhY2tlbmQgYmFzaCBzY3JpcHRzL3Rlc3RzLXN0YXJ0LnNoIFwiJEBcIlxuLi4uXG5QYXRoOiBiYWNrZW5kL2FwcC9jb3JlL2NvbmZpZy5weVxuLi4uXG4gICAgQVBJX1YxX1NUUjogc3RyID0gXCIvYXBpL3YxXCJcbiAgICBTRUNSRVRfS0VZOiBzdHIgPSBzZWNyZXRzLnRva2VuX3VybHNhZmUoMzIpXG4gICAgIyA2MCBtaW51dGVzICogMjQgaG91cnMgKiA4IGRheXMgPSA4IGRheXNcbiAgICBBQ0NFU1NfVE9LRU5fRVhQSVJFX01JTlVURVM6IGludCA9IDYwICogMjQgKiA4XG4gICAgRlJPTlRFTkRfSE9TVDogc3RyID0gXCJodHRwOi8vbG9jYWxob3N0OjUxNzNcIlxuICAgIEVOVklST05NRU5UOiBMaXRlcmFsW1wibG9jYWxcIiwgXCJzdGFnaW5nXCIsIFwicHJvZHVjdGlvblwiXSA9IFwibG9jYWxcIlxuXG4gICAgIyBMTE0gc2V0dGluZ3NcbiAgICBPUEVOUk9VVEVSX0FQSV9LRVk6IHN0ciA9IFwiXCJcbiAgICBERUZBVUxUX0xMTV9NT0RFTDogc3RyID0gXCJvcGVuYWkvZ3B0LTRvLW1pbmlcIlxuICAgIE9QRU5ST1VURVJfQkFTRV9VUkw6IHN0ciA9IFwiaHR0cHM6Ly9vcGVucm91dGVyLmFpL2FwaS92MVwiXG5cbiAgICAjIFJBRyBzZXR0aW5nc1xuICAgIE1BWF9ET0NVTUVOVFNfUEVSX1VTRVI6IGludCA9IDUwXG4gICAgTUFYX0RPQ1VNRU5UX1NJWkVfTUI6IGludCA9IDEwXG5cbiAgICBCQUNLRU5EX0NPUlNfT1JJR0lOUzogQW5ub3RhdGVkW1xuICAgICAgICBsaXN0W0FueVVybF0gfCBzdHIsIEJlZm9yZVZhbGlkYXRvcihwYXJzZV9jb3JzKVxuICAgIF0gPSBbXVxuXG4gICAgQGNvbXB1dGVkX2ZpZWxkICAjIHR5cGU6IGlnbm9yZVtwcm9wLWRlY29yYXRvcl1cbiAgICBAcHJvcGVydHlcbiAgICBkZWYgYWxsX2NvcnNfb3JpZ2lucyhzZWxmKSAtPiBsaXN0W3N0cl06XG4gICAgICAgIHJldHVybiBbc3RyKG9yaWdpbikucnN0cmlwKFwiL1wiKSBmb3Igb3JpZ2luIGluIHNlbGYuQkFDS0VORF9DT1JTX09SSUdJTlNdICsgW1xuICAgICAgICAgICAgc2VsZi5GUk9OVEVORF9IT1NUXG4gICAgICAgIF1cblxuICAgIFBST0pFQ1RfTkFNRTogc3RyXG4gICAgU0VOVFJZX0RTTjogSHR0cFVybCB8IE5vbmUgPSBOb25lXG4gICAgUE9TVEdSRVNfU0VSVkVSOiBzdHJcbiAgICBQT1NUR1JFU19QT1JUOiBpbnQgPSA1NDMyXG4gICAgUE9TVEdSRVNfVVNFUjogc3RyXG4gICAgUE9TVEdSRVNfUEFTU1dPUkQ6IHN0ciA9IFwiXCJcbiAgICBQT1NUR1JFU19EQjogc3RyID0gXCJcIlxuXG4gICAgQGNvbXB1dGVkX2ZpZWxkICAjIHR5cGU6IGlnbm9yZVtwcm9wLWRlY29yYXRvcl1cbiAgICBAcHJvcGVydHlcbiAgICBkZWYgU1FMQUxDSEVNWV9EQVRBQkFTRV9VUkkoc2VsZikgLT4gUG9zdGdyZXNEc246XG4gICAgICAgIHJldHVybiBNdWx0aUhvc3RVcmwuYnVpbGQoXG4gICAgICAgICAgICBzY2hlbWU9XCJwb3N0Z3Jlc3FsK3BzeWNvcGdcIixcbiAgICAgICAgICAgIHVzZXJuYW1lPXNlbGYuUE9TVEdSRVNfVVNFUixcbiAgICAgICAgICAgIHBhc3N3b3JkPXNlbGYuUE9TVEdSRVNfUEFTU1dPUkQsXG4gICAgICAgICAgICBob3N0PXNlbGYuUE9TVEdSRVNfU0VSVkVSLFxuICAgICAgICAgICAgcG9ydD1zZWxmLlBPU1RHUkVTX1BPUlQsXG4gICAgICAgICAgICBwYXRoPXNlbGYuUE9TVEdSRVNfREIsXG4gICAgICAgIClcbi4uLlxuUGF0aDogc2NyaXB0cy90ZXN0LnNoXG4jISAvdXNyL2Jpbi9lbnYgc2hcblxuIyBFeGl0IGluIGNhc2Ugb2YgZXJyb3JcbnNldCAtZVxuc2V0IC14XG5cbmRvY2tlciBjb21wb3NlIGJ1aWxkXG5kb2NrZXIgY29tcG9zZSBkb3duIC12IC0tcmVtb3ZlLW9ycGhhbnMgIyBSZW1vdmUgcG9zc2libHkgcHJldmlvdXMgYnJva2VuIHN0YWNrcyBsZWZ0IGhhbmdpbmcgYWZ0ZXIgYW4gZXJyb3JcbmRvY2tlciBjb21wb3NlIHVwIC1kXG5kb2NrZXIgY29tcG9zZSBleGVjIC1UIGJhY2tlbmQgYmFzaCBzY3JpcHRzL3Rlc3RzLXN0YXJ0LnNoIFwiJEBcIlxuZG9ja2VyIGNvbXBvc2UgZG93biAtdiAtLXJlbW92ZS1vcnBoYW5zXG4uLi5cblBhdGg6IHNjcmlwdHMvZGVwbG95LnNoXG4jISAvdXNyL2Jpbi9lbnYgc2hcblxuIyBFeGl0IGluIGNhc2Ugb2YgZXJyb3JcbnNldCAtZVxuXG5ET01BSU49JHtET01BSU4/VmFyaWFibGUgbm90IHNldH0gXFxcblNUQUNLX05BTUU9JHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9IFxcXG5UQUc9JHtUQUc/VmFyaWFibGUgbm90IHNldH0gXFxcbmRvY2tlci1jb21wb3NlIFxcXG4tZiBkb2NrZXItY29tcG9zZS55bWwgXFxcbmNvbmZpZyA+IGRvY2tlci1zdGFjay55bWxcblxuZG9ja2VyLWF1dG8tbGFiZWxzIGRvY2tlci1zdGFjay55bWxcblxuZG9ja2VyIHN0YWNrIGRlcGxveSAtYyBkb2NrZXItc3RhY2sueW1sIC0td2l0aC1yZWdpc3RyeS1hdXRoIFwiJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9XCJcbi4uLlxuUGF0aDogZnJvbnRlbmQvc3JjL21haW4udHN4XG5pbXBvcnQge1xuICBNdXRhdGlvbkNhY2hlLFxuICBRdWVyeUNhY2hlLFxuICBRdWVyeUNsaWVudCxcbiAgUXVlcnlDbGllbnRQcm92aWRlcixcbn0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiXG5pbXBvcnQgeyBSb3V0ZXJQcm92aWRlciwgY3JlYXRlUm91dGVyIH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1yb3V0ZXJcIlxuaW1wb3J0IFJlYWN0LCB7IFN0cmljdE1vZGUgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCJcbmltcG9ydCB7IHJvdXRlVHJlZSB9IGZyb20gXCIuL3JvdXRlVHJlZS5nZW5cIlxuXG5pbXBvcnQgeyBBcGlFcnJvciwgT3BlbkFQSSB9IGZyb20gXCIuL2NsaWVudFwiXG5pbXBvcnQgeyBDdXN0b21Qcm92aWRlciB9IGZyb20gXCIuL2NvbXBvbmVudHMvdWkvcHJvdmlkZXJcIlxuXG5PcGVuQVBJLkJBU0UgPSBpbXBvcnQubWV0YS5lbnYuVklURV9BUElfVVJMXG5PcGVuQVBJLlRPS0VOID0gYXN5bmMgKCkgPT4ge1xuICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJhY2Nlc3NfdG9rZW5cIikgfHwgXCJcIlxufVxuXG5jb25zdCBoYW5kbGVBcGlFcnJvciA9IChlcnJvcjogRXJyb3IpID0+IHtcbiAgaWYgKGVycm9yIGluc3RhbmNlb2YgQXBpRXJyb3IgJiYgWzQwMSwgNDAzXS5pbmNsdWRlcyhlcnJvci5zdGF0dXMpKSB7XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJhY2Nlc3NfdG9rZW5cIilcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IFwiL2xvZ2luXCJcbiAgfVxufVxuY29uc3QgcXVlcnlDbGllbnQgPSBuZXcgUXVlcnlDbGllbnQoe1xuICBxdWVyeUNhY2hlOiBuZXcgUXVlcnlDYWNoZSh7XG4gICAgb25FcnJvcjogaGFuZGxlQXBpRXJyb3IsXG4gIH0pLFxuICBtdXRhdGlvbkNhY2hlOiBuZXcgTXV0YXRpb25DYWNoZSh7XG4gICAgb25FcnJvcjogaGFuZGxlQXBpRXJyb3IsXG4gIH0pLFxufSlcblxuY29uc3Qgcm91dGVyID0gY3JlYXRlUm91dGVyKHsgcm91dGVUcmVlIH0pXG5kZWNsYXJlIG1vZHVsZSBcIkB0YW5zdGFjay9yZWFjdC1yb3V0ZXJcIiB7XG4gIGludGVyZmFjZSBSZWdpc3RlciB7XG4gICAgcm91dGVyOiB0eXBlb2Ygcm91dGVyXG4gIH1cbn1cblxuUmVhY3RET00uY3JlYXRlUm9vdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikhKS5yZW5kZXIoXG4gIDxTdHJpY3RNb2RlPlxuICAgIDxDdXN0b21Qcm92aWRlcj5cbiAgICAgIDxRdWVyeUNsaWVudFByb3ZpZGVyIGNsaWVudD17cXVlcnlDbGllbnR9PlxuICAgICAgICA8Um91dGVyUHJvdmlkZXIgcm91dGVyPXtyb3V0ZS4uLiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMThubVhWOXpSY25tSE42c3ZTNTFINHMifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMTk5ZmQ5NzEtMzlmZi00MTFiLWI3NmMtMjgwOGNkMzgwYTk5IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxM0o3R2o5czNEdWl4NkRYSnVKODJBUyIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiXFx1NjdlNVxcdTYyN2VcXHU5ODc5XFx1NzZlZVxcdTc2ODRcXHU3M2FmXFx1NTg4M1xcdTkxNGRcXHU3ZjZlXFx1NjU4N1xcdTRlZjZcXHVmZjBjXFx1NzI3OVxcdTUyMmJcXHU2NjJmLmVudlxcdTY1ODdcXHU0ZWY2XFx1NjIxNlxcdTUxNzZcXHU0ZWQ2XFx1OTE0ZFxcdTdmNmVcXHU2NTcwXFx1NjM2ZVxcdTVlOTNcXHU4ZmRlXFx1NjNhNVxcdTc2ODRcXHU2NTg3XFx1NGVmNlwifSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogZGV2ZWxvcG1lbnQubWRcbiMgRmFzdEFQSSBQcm9qZWN0IC0gRGV2ZWxvcG1lbnRcblxuIyMgRG9ja2VyIENvbXBvc2VcblxuKiBTdGFydCB0aGUgbG9jYWwgc3RhY2sgd2l0aCBEb2NrZXIgQ29tcG9zZTpcblxuYGBgYmFzaFxuZG9ja2VyIGNvbXBvc2Ugd2F0Y2hcbmBgYFxuXG4qIE5vdyB5b3UgY2FuIG9wZW4geW91ciBicm93c2VyIGFuZCBpbnRlcmFjdCB3aXRoIHRoZXNlIFVSTHM6XG5cbkZyb250ZW5kLCBidWlsdCB3aXRoIERvY2tlciwgd2l0aCByb3V0ZXMgaGFuZGxlZCBiYXNlZCBvbiB0aGUgcGF0aDogaHR0cDovL2xvY2FsaG9zdDo1MTczXG5cbkJhY2tlbmQsIEpTT04gYmFzZWQgd2ViIEFQSSBiYXNlZCBvbiBPcGVuQVBJOiBodHRwOi8vbG9jYWxob3N0OjgwMDBcblxuQXV0b21hdGljIGludGVyYWN0aXZlIGRvY3VtZW50YXRpb24gd2l0aCBTd2FnZ2VyIFVJIChmcm9tIHRoZSBPcGVuQVBJIGJhY2tlbmQpOiBodHRwOi8vbG9jYWxob3N0OjgwMDAvZG9jc1xuXG5BZG1pbmVyLCBkYXRhYmFzZSB3ZWIgYWRtaW5pc3RyYXRpb246IGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MFxuXG5UcmFlZmlrIFVJLCB0byBzZWUgaG93IHRoZSByb3V0ZXMgYXJlIGJlaW5nIGhhbmRsZWQgYnkgdGhlIHByb3h5OiBodHRwOi8vbG9jYWxob3N0OjgwOTBcblxuKipOb3RlKio6IFRoZSBmaXJzdCB0aW1lIHlvdSBzdGFydCB5b3VyIHN0YWNrLCBpdCBtaWdodCB0YWtlIGEgbWludXRlIGZvciBpdCB0byBiZSByZWFkeS4gV2hpbGUgdGhlIGJhY2tlbmQgd2FpdHMgZm9yIHRoZSBkYXRhYmFzZSB0byBiZSByZWFkeSBhbmQgY29uZmlndXJlcyBldmVyeXRoaW5nLiBZb3UgY2FuIGNoZWNrIHRoZSBsb2dzIHRvIG1vbml0b3IgaXQuXG5cblRvIGNoZWNrIHRoZSBsb2dzLCBydW4gKGluIGFub3RoZXIgdGVybWluYWwpOlxuXG5gYGBiYXNoXG5kb2NrZXIgY29tcG9zZSBsb2dzXG5gYGBcblxuVG8gY2hlY2sgdGhlIGxvZ3Mgb2YgYSBzcGVjaWZpYyBzZXJ2aWNlLCBhZGQgdGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UsIGUuZy46XG5cbmBgYGJhc2hcbmRvY2tlciBjb21wb3NlIGxvZ3MgYmFja2VuZFxuYGBgXG5cbiMjIExvY2FsIERldmVsb3BtZW50XG5cblRoZSBEb2NrZXIgQ29tcG9zZSBmaWxlcyBhcmUgY29uZmlndXJlZCBzbyB0aGF0IGVhY2ggb2YgdGhlIHNlcnZpY2VzIGlzIGF2YWlsYWJsZSBpbiBhIGRpZmZlcmVudCBwb3J0IGluIGBsb2NhbGhvc3RgLlxuXG5Gb3IgdGhlIGJhY2tlbmQgYW5kIGZyb250ZW5kLCB0aGV5IHVzZSB0aGUgc2FtZSBwb3J0IHRoYXQgd291bGQgYmUgdXNlZCBieSB0aGVpciBsb2NhbCBkZXZlbG9wbWVudCBzZXJ2ZXIsIHNvLCB0aGUgYmFja2VuZCBpcyBhdCBgaHR0cDovL2xvY2FsaG9zdDo4MDAwYCBhbmQgdGhlIGZyb250ZW5kIGF0IGBodHRwOi8vbG9jYWxob3N0OjUxNzNgLlxuXG5UaGlzIHdheSwgeW91IGNvdWxkIHR1cm4gb2ZmIGEgRG9ja2VyIENvbXBvc2Ugc2VydmljZSBhbmQgc3RhcnQgaXRzIGxvY2FsIGRldmVsb3BtZW50IHNlcnZpY2UsIGFuZCBldmVyeXRoaW5nIHdvdWxkIGtlZXAgd29ya2luZywgYmVjYXVzZSBpdCBhbGwgdXNlcyB0aGUgc2FtZSBwb3J0cy5cblxuRm9yIGV4YW1wbGUsIHlvdSBjYW4gc3RvcCB0aGF0IGBmcm9udGVuZGAgc2VydmljZSBpbiB0aGUgRG9ja2VyIENvbXBvc2UsIGluIGFub3RoZXIgdGVybWluYWwsIHJ1bjpcblxuYGBgYmFzaFxuZG9ja2VyIGNvbXBvc2Ugc3RvcCBmcm9udGVuZFxuYGBgXG5cbkFuZCB0aGVuIHN0YXJ0IHRoZSBsb2NhbCBmcm9udGVuZCBkZXZlbG9wbWVudCBzZXJ2ZXI6XG5cbmBgYGJhc2hcbmNkIGZyb250ZW5kXG5ucG0gcnVuIGRldlxuYGBgXG5cbk9yIHlvdSBjb3VsZCBzdG9wIHRoZSBgYmFja2VuZGAgRG9ja2VyIENvbXBvc2Ugc2VydmljZTpcblxuYGBgYmFzaFxuZG9ja2VyIGNvbXBvc2Ugc3RvcCBiYWNrZW5kXG5gYGBcblxuQW5kIHRoZW4geW91IGNhbiBydW4gdGhlIGxvY2FsIGRldmVsb3BtZW50IHNlcnZlciBmb3IgdGhlIGJhY2tlbmQ6XG5cbmBgYGJhc2hcbmNkIGJhY2tlbmRcbmZhc3RhcGkgZGV2IGFwcC9tYWluLnB5XG5gYGBcblxuIyMgRG9ja2VyIENvbXBvc2UgaW4gYGxvY2FsaG9zdC50aWFuZ29sby5jb21gXG4uLi5cblBhdGg6IHNjcmlwdHMvdGVzdC1sb2NhbC5zaFxuIyEgL3Vzci9iaW4vZW52IGJhc2hcblxuIyBFeGl0IGluIGNhc2Ugb2YgZXJyb3JcbnNldCAtZVxuXG5kb2NrZXItY29tcG9zZSBkb3duIC12IC0tcmVtb3ZlLW9ycGhhbnMgIyBSZW1vdmUgcG9zc2libHkgcHJldmlvdXMgYnJva2VuIHN0YWNrcyBsZWZ0IGhhbmdpbmcgYWZ0ZXIgYW4gZXJyb3JcblxuaWYgWyAkKHVuYW1lIC1zKSA9IFwiTGludXhcIiBdOyB0aGVuXG4gICAgZWNobyBcIlJlbW92ZSBfX3B5Y2FjaGVfXyBmaWxlc1wiXG4gICAgc3VkbyBmaW5kIC4gLXR5cGUgZCAtbmFtZSBfX3B5Y2FjaGVfXyAtZXhlYyBybSAtciB7fSBcXCtcbmZpXG5cbmRvY2tlci1jb21wb3NlIGJ1aWxkXG5kb2NrZXItY29tcG9zZSB1cCAtZFxuZG9ja2VyLWNvbXBvc2UgZXhlYyAtVCBiYWNrZW5kIGJhc2ggc2NyaXB0cy90ZXN0cy1zdGFydC5zaCBcIiRAXCJcbi4uLlxuUGF0aDogYmFja2VuZC9zY3JpcHRzL3ByZXN0YXJ0LnNoXG4jISAvdXNyL2Jpbi9lbnYgYmFzaFxuXG5zZXQgLWVcbnNldCAteFxuXG4jIExldCB0aGUgREIgc3RhcnRcbnB5dGhvbiBhcHAvYmFja2VuZF9wcmVfc3RhcnQucHlcblxuIyBSdW4gbWlncmF0aW9uc1xuYWxlbWJpYyB1cGdyYWRlIGhlYWRcblxuIyBDcmVhdGUgaW5pdGlhbCBkYXRhIGluIERCXG5weXRob24gYXBwL2luaXRpYWxfZGF0YS5weVxuLi4uXG5QYXRoOiBiYWNrZW5kL1JFQURNRS5tZFxuIyBGYXN0QVBJIFByb2plY3QgLSBCYWNrZW5kXG5cbiMjIFJlcXVpcmVtZW50c1xuXG4qIFtEb2NrZXJdKGh0dHBzOi8vd3d3LmRvY2tlci5jb20vKS5cbiogW3V2XShodHRwczovL2RvY3MuYXN0cmFsLnNoL3V2LykgZm9yIFB5dGhvbiBwYWNrYWdlIGFuZCBlbnZpcm9ubWVudCBtYW5hZ2VtZW50LlxuXG4jIyBEb2NrZXIgQ29tcG9zZVxuXG5TdGFydCB0aGUgbG9jYWwgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnQgd2l0aCBEb2NrZXIgQ29tcG9zZSBmb2xsb3dpbmcgdGhlIGd1aWRlIGluIFsuLi9kZXZlbG9wbWVudC5tZF0oLi4vZGV2ZWxvcG1lbnQubWQpLlxuXG4jIyBHZW5lcmFsIFdvcmtmbG93XG5cbkJ5IGRlZmF1bHQsIHRoZSBkZXBlbmRlbmNpZXMgYXJlIG1hbmFnZWQgd2l0aCBbdXZdKGh0dHBzOi8vZG9jcy5hc3RyYWwuc2gvdXYvKSwgZ28gdGhlcmUgYW5kIGluc3RhbGwgaXQuXG5cbkZyb20gYC4vYmFja2VuZC9gIHlvdSBjYW4gaW5zdGFsbCBhbGwgdGhlIGRlcGVuZGVuY2llcyB3aXRoOlxuXG5gYGBjb25zb2xlXG4kIHV2IHN5bmNcbmBgYFxuXG5UaGVuIHlvdSBjYW4gYWN0aXZhdGUgdGhlIHZpcnR1YWwgZW52aXJvbm1lbnQgd2l0aDpcblxuYGBgY29uc29sZVxuJCBzb3VyY2UgLnZlbnYvYmluL2FjdGl2YXRlXG5gYGBcblxuTWFrZSBzdXJlIHlvdXIgZWRpdG9yIGlzIHVzaW5nIHRoZSBjb3JyZWN0IFB5dGhvbiB2aXJ0dWFsIGVudmlyb25tZW50LCB3aXRoIHRoZSBpbnRlcnByZXRlciBhdCBgYmFja2VuZC8udmVudi9iaW4vcHl0aG9uYC5cbi4uLlxuXG5UaGVyZSBpcyBhbHNvIGEgY29tbWFuZCBvdmVycmlkZSB0aGF0IHJ1bnMgYGZhc3RhcGkgcnVuIC0tcmVsb2FkYCBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IGBmYXN0YXBpIHJ1bmAuIEl0IHN0YXJ0cyBhIHNpbmdsZSBzZXJ2ZXIgcHJvY2VzcyAoaW5zdGVhZCBvZiBtdWx0aXBsZSwgYXMgd291bGQgYmUgZm9yIHByb2R1Y3Rpb24pIGFuZCByZWxvYWRzIHRoZSBwcm9jZXNzIHdoZW5ldmVyIHRoZSBjb2RlIGNoYW5nZXMuIEhhdmUgaW4gbWluZCB0aGF0IGlmIHlvdSBoYXZlIGEgc3ludGF4IGVycm9yIGFuZCBzYXZlIHRoZSBQeXRob24gZmlsZSwgaXQgd2lsbCBicmVhayBhbmQgZXhpdCwgYW5kIHRoZSBjb250YWluZXIgd2lsbCBzdG9wLiBBZnRlciB0aGF0LCB5b3UgY2FuIHJlc3RhcnQgdGhlIGNvbnRhaW5lciBieSBmaXhpbmcgdGhlIGVycm9yIGFuZCBydW5uaW5nIGFnYWluOlxuXG5gYGBjb25zb2xlXG4kIGRvY2tlciBjb21wb3NlIHdhdGNoXG5gYGBcblxuVGhlcmUgaXMgYWxzbyBhIGNvbW1lbnRlZCBvdXQgYGNvbW1hbmRgIG92ZXJyaWRlLCB5b3UgY2FuIHVuY29tbWVudCBpdCBhbmQgY29tbWVudCB0aGUgZGVmYXVsdCBvbmUuIEl0IG1ha2VzIHRoZSBiYWNrZW5kIGNvbnRhaW5lciBydW4gYSBwcm9jZXNzIHRoYXQgZG9lcyBcIm5vdGhpbmdcIiwgYnV0IGtlZXBzIHRoZSBjb250YWluZXIgYWxpdmUuIFRoYXQgYWxsb3dzIHlvdSB0byBnZXQgaW5zaWRlIHlvdXIgcnVubmluZyBjb250YWluZXIgYW5kIGV4ZWN1dGUgY29tbWFuZHMgaW5zaWRlLCBmb3IgZXhhbXBsZSBhIFB5dGhvbiBpbnRlcnByZXRlciB0byB0ZXN0IGluc3RhbGxlZCBkZXBlbmRlbmNpZXMsIG9yIHN0YXJ0IHRoZSBkZXZlbG9wbWVudCBzZXJ2ZXIgdGhhdCByZWxvYWRzIHdoZW4gaXQgZGV0ZWN0cyBjaGFuZ2VzLlxuXG5UbyBnZXQgaW5zaWRlIHRoZSBjb250YWluZXIgd2l0aCBhIGBiYXNoYCBzZXNzaW9uIHlvdSBjYW4gc3RhcnQgdGhlIHN0YWNrIHdpdGg6XG5cbmBgYGNvbnNvbGVcbiQgZG9ja2VyIGNvbXBvc2Ugd2F0Y2hcbmBgYFxuXG5hbmQgdGhlbiBpbiBhbm90aGVyIHRlcm1pbmFsLCBgZXhlY2AgaW5zaWRlIHRoZSBydW5uaW5nIGNvbnRhaW5lcjpcblxuYGBgY29uc29sZVxuJCBkb2NrZXIgY29tcG9zZSBleGVjIGJhY2tlbmQgYmFzaFxuYGBgXG5cbllvdSBzaG91bGQgc2VlIGFuIG91dHB1dCBsaWtlOlxuXG5gYGBjb25zb2xlXG5yb290QDdmMjYwN2FmMzFjMzovYXBwI1xuYGBgXG5cbnRoYXQgbWVhbnMgdGhhdCB5b3UgYXJlIGluIGEgYGJhc2hgIHNlc3Npb24gaW5zaWRlIHlvdXIgY29udGFpbmVyLCBhcyBhIGByb290YCB1c2VyLCB1bmRlciB0aGUgYC9hcHBgIGRpcmVjdG9yeSwgdGhpcyBkaXJlY3RvcnkgaGFzIGFub3RoZXIgZGlyZWN0b3J5IGNhbGxlZCBcImFwcFwiIGluc2lkZSwgdGhhdCdzIHdoZXJlIHlvdXIgY29kZSBsaXZlcyBpbnNpZGUgdGhlIGNvbnRhaW5lcjogYC9hcHAvYXBwYC5cblxuVGhlcmUgeW91IGNhbiB1c2UgdGhlIGBmYXN0YXBpIHJ1biAtLXJlbG9hZGAgY29tbWFuZCB0byBydW4gdGhlIGRlYnVnIGxpdmUgcmVsb2FkaW5nIHNlcnZlci5cblxuYGBgY29uc29sZVxuJCBmYXN0YXBpIHJ1biAtLXJlbG9hZCBhcHAvbWFpbi5weVxuYGBgXG5cbi4uLml0IHdpbGwgbG9vayBsaWtlOlxuXG5gYGBjb25zb2xlXG5yb290QDdmMjYwN2FmMzFjMzovYXBwIyBmYXN0YXBpIHJ1biAtLXJlbG9hZCBhcHAvbWFpbi5weVxuYGBgXG5cbmFuZCB0aGVuIGhpdCBlbnRlci4gVGhhdCBydW5zIHRoZSBsaXZlIHJlbG9hZGluZyBzZXJ2ZXIgdGhhdCBhdXRvIHJlbG9hZHMgd2hlbiBpdCBkZXRlY3RzIGNvZGUgY2hhbmdlcy5cbi4uLlxuXG5gYGBiYXNoXG5kb2NrZXIgY29tcG9zZSBleGVjIGJhY2tlbmQgYmFzaCBzY3JpcHRzL3Rlc3RzLXN0YXJ0LnNoXG5gYGBcblxuVGhhdCBgL2FwcC9zY3JpcHRzL3Rlc3RzLXN0YXJ0LnNoYCBzY3JpcHQganVzdCBjYWxscyBgcHl0ZXN0YCBhZnRlciBtYWtpbmcgc3VyZSB0aGF0IHRoZSByZXN0IG9mIHRoZSBzdGFjayBpcyBydW5uaW5nLiBJZiB5b3UgbmVlZCB0byBwYXNzIGV4dHJhIGFyZ3VtZW50cyB0byBgcHl0ZXN0YCwgeW91IGNhbiBwYXNzIHRoZW0gdG8gdGhhdCBjb21tYW5kIGFuZCB0aGV5IHdpbGwgYmUgZm9yd2FyZGVkLlxuXG5Gb3IgZXhhbXBsZSwgdG8gc3RvcCBvbiBmaXJzdCBlcnJvcjpcblxuYGBgYmFzaFxuZG9ja2VyIGNvbXBvc2UgZXhlYyBiYWNrZW5kIGJhc2ggc2NyaXB0cy90ZXN0cy1zdGFydC5zaCAteFxuYGBgXG5cbiMjIyBUZXN0IENvdmVyYWdlXG5cbldoZW4gdGhlIHRlc3RzIGFyZSBydW4sIGEgZmlsZSBgaHRtbGNvdi9pbmRleC5odG1sYCBpcyBnZW5lcmF0ZWQsIHlvdSBjYW4gb3BlbiBpdCBpbiB5b3VyIGJyb3dzZXIgdG8gc2VlIHRoZSBjb3ZlcmFnZSBvZiB0aGUgdGVzdHMuXG5cbiMjIE1pZ3JhdGlvbnNcbi4uLlxuUGF0aDogZG9jL0Z1bGwtU3RhY2stRmFzdEFQSS1UZW1wbGF0ZeWtpuS5oOaJi+WGjC5tZFxuLi4uXG5cbmBgYFxuZnJvbnRlbmQvXG7ilJzilIDilIAgc3JjL1xu4pSCICAg4pSc4pSA4pSAIGFzc2V0cy8gICAgICAgICAjIOmdmeaAgei1hOa6kFxu4pSCICAg4pSc4pSA4pSAIGNsaWVudC8gICAgICAgICAjIOeUn+aIkOeahCBBUEkg5a6i5oi356uvXG7ilIIgICDilJzilIDilIAgY29tcG9uZW50cy8gICAgICMgUmVhY3Qg57uE5Lu2XG7ilIIgICDilJzilIDilIAgaG9va3MvICAgICAgICAgICMg6Ieq5a6a5LmJIGhvb2tzXG7ilIIgICDilJzilIDilIAgcm91dGVzLyAgICAgICAgICMg6Lev55Sx5ZKM6aG16Z2iXG7ilIIgICDilJTilIDilIAgLi4uXG7ilJzilIDilIAgdGVzdHMvICAgICAgICAgICAgICAjIFBsYXl3cmlnaHQg5rWL6K+VXG7ilJTilIDilIAgLi4uXG5gYGBcblxuIyMgNC4g5ZCO56uv5p625p6EXG5cbiMjIyBGYXN0QVBJIOW6lOeUqOe7k+aehFxuXG5GYXN0QVBJIOW6lOeUqOeahOWFpeWPo+eCueaYryBgYmFja2VuZC9hcHAvbWFpbi5weWDvvIzlroPliJ3lp4vljJYgRmFzdEFQSSDlupTnlKjlubbljIXlkKvmiYDmnInot6/nlLHjgIJcblxuYGBgcHl0aG9uXG4jIGJhY2tlbmQvYXBwL21haW4ucHlcbmZyb20gZmFzdGFwaSBpbXBvcnQgRmFzdEFQSVxuZnJvbSBhcHAuYXBpLm1haW4gaW1wb3J0IGFwaV9yb3V0ZXJcbmZyb20gYXBwLmNvcmUuY29uZmlnIGltcG9ydCBzZXR0aW5nc1xuXG5hcHAgPSBGYXN0QVBJKFxuICAgIHRpdGxlPXNldHRpbmdzLlBST0pFQ1RfTkFNRSxcbiAgICBvcGVuYXBpX3VybD1mXCJ7c2V0dGluZ3MuQVBJX1YxX1NUUn0vb3BlbmFwaS5qc29uXCIsXG4pXG4uLi5cbmBgYFxuXG4jIyA2LiDlvIDlj5Hnjq/looPphY3nva5cblxuIyMjIOacrOWcsOW8gOWPkeeOr+Wig1xuXG5GdWxsLVN0YWNrLUZhc3RBUEktVGVtcGxhdGUg5L2/55SoIERvY2tlciBDb21wb3NlIOiuvue9ruacrOWcsOW8gOWPkeeOr+Wig++8mlxuXG5gYGBiYXNoXG4jIOWQr+WKqOW8gOWPkeeOr+Wig1xuZG9ja2VyIGNvbXBvc2Ugd2F0Y2hcbmBgYFxuXG7ov5nlsIblkK/liqjku6XkuIvmnI3liqHvvJpcblxuLSDlkI7nq68gQVBJIChodHRwOi8vbG9jYWxob3N0OjgwMDApXG4tIOWJjeerr+W8gOWPkeacjeWKoeWZqCAoaHR0cDovL2xvY2FsaG9zdDo1MTczKVxuLSBQb3N0Z3JlU1FMIOaVsOaNruW6k1xuLSBBZG1pbmVyIOaVsOaNruW6k+euoeeQhuW3peWFtyAoaHR0cDovL2xvY2FsaG9zdDo4MDgwKVxuLSBUcmFlZmlrIOS7o+eQhiAoaHR0cDovL2xvY2FsaG9zdDo4MDkwKVxuLSBNYWlsQ2F0Y2hlciDpgq7ku7bmtYvor5Xlt6XlhbcgKGh0dHA6Ly9sb2NhbGhvc3Q6MTA4MClcblxuIyMjIOeOr+Wig+WPmOmHj1xuXG7lvIDlj5Hnjq/looPnmoTphY3nva7lrZjlgqjlnKggYC5lbnZgIOaWh+S7tuS4re+8mlxuXG5gYGBcbiMgLmVudlxuRE9NQUlOPWxvY2FsaG9zdFxuU1RBQ0tfTkFNRT1mYXN0YXBpLXByb2plY3RcblBST0pFQ1RfTkFNRT1GYXN0QVBJIFByb2plY3RcblNFQ1JFVF9LRVk9Y2hhbmdldGhpc1xuRklSU1RfU1VQRVJVU0VSPWFkbWluQGV4YW1wbGUuY29tXG5GSVJTVF9TVVBFUlVTRVJfUEFTU1dPUkQ9Y2hhbmdldGhpc1xuUE9TVEdSRVNfUEFTU1dPUkQ9Y2hhbmdldGhpc1xuUE9TVEdSRVNfU0VSVkVSPWRiXG5QT1NUR1JFU19QT1JUPTU0MzJcblBPU1RHUkVTX1VTRVI9cG9zdGdyZXNcblBPU1RHUkVTX0RCPWFwcFxuYGBgXG5cbiMjIyDliY3nq6/lvIDlj5Fcblxu5YmN56uv5byA5Y+R5Y+v5Lul5ZyoIERvY2tlciDlrrnlmajlhoXov5vooYzvvIzkuZ/lj6/ku6XlnKjmnKzlnLDov5vooYzvvJpcblxuYGBgYmFzaFxuIyDmnKzlnLDliY3nq6/lvIDlj5FcbmNkIGZyb250ZW5kXG5ucG0gaW5zdGFsbFxubnBtIHJ1biBkZXZcbmBgYFxuXG4jIyMg5ZCO56uv5byA5Y+RXG5cbuWQjuerr+W8gOWPkeWQjOagt+WPr+S7peWcqCBEb2NrZXIg5a655Zmo5YaF6L+b6KGM77yM5Lmf5Y+v5Lul5Zyo5pys5Zyw6L+b6KGM77yaXG5cbmBgYGJhc2hcbiMg5pys5Zyw5ZCO56uv5byA5Y+RXG5jZCBiYWNrZW5kXG51diBzeW5jXG5zb3VyY2UgLnZlbnYvYmluL2FjdGl2YXRlXG5mYXN0YXBpIGRldiBhcHAvbWFpbi5weVxuYGBgXG5cbiMjIDcuIERvY2tlciDkuI7lrrnlmajljJZcblxuIyMjIERvY2tlciBDb21wb3NlIOmFjee9rlxuXG7pobnnm67kvb/nlKggRG9ja2VyIENvbXBvc2Ug566h55CG5a655Zmo77yaXG5cbmBgYHlhbWxcbiMgZG9ja2VyLWNvbXBvc2UueW1sXG52ZXJzaW9uOiAnMy44J1xuc2VydmljZXM6XG4gIGJhY2tlbmQ6XG4gICAgaW1hZ2U6ICcke0RPQ0tFUl9JTUFHRV9CQUNLRU5EfToke1RBRy1sYXRlc3R9J1xuICAgIGRlcGVuZHNfb246XG4gICAgICAtIGRiXG4gICAgZW52X2ZpbGU6XG4gICAgICAtIC5lbnZcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgIC0gRE9NQUlOPSR7RE9NQUlOfVxuICAgICAgLSBGUk9OVEVORF9IT1NUPSR7RlJPTlRFTkRfSE9TVH1cbiAgICAgICMg5YW25LuW546v5aKD5Y+Y6YePLi4uXG5cbiAgZnJvbnRlbmQ6XG4gICAgaW1hZ2U6ICcke0RPQ0tFUl9JTUFHRV9GUk9OVEVORH06JHtUQUctbGF0ZXN0fSdcbiAgICBlbnZfZmlsZTpcbiAgICAgIC0gLmVudlxuICAgIGVudmlyb25tZW50OlxuICAgICAgLSBWSVRFX0FQSV9VUkw9JHtGUk9OVEVORF9IT1NUfVxuXG4gIGRiOlxuICAgIGltYWdlOiBwb3N0Z3JlczoxNVxuICAgIHZvbHVtZXM6XG4gICAgICAtIGFwcC1kYi1kYXRhOi92YXIvbGliL3Bvc3RncmVzcWwvZGF0YS9wZ2RhdGFcbiAgICBlbnZfZmlsZTpcbiAgICAgIC0gLmVudlxuICAgIGVudmlyb25tZW50OlxuICAgICAgLSBQR0RBVEE9L3Zhci9saWIvcG9zdGdyZXNxbC9kYXRhL3BnZGF0YVxuICAgICAgIyDlhbbku5bnjq/looPlj5jph48uLi5cbi4uLlxuUGF0aDogYmFja2VuZC9zY3JpcHRzL3Rlc3RzLXN0YXJ0LnNoXG4jISAvdXNyL2Jpbi9lbnYgYmFzaFxuc2V0IC1lXG5zZXQgLXhcblxucHl0aG9uIGFwcC90ZXN0c19wcmVfc3RhcnQucHlcblxuYmFzaCBzY3JpcHRzL3Rlc3Quc2ggXCIkQFwiXG4uLi5cblBhdGg6IGRvY2tlci1jb21wb3NlLm92ZXJyaWRlLnltbFxuLi4uXG5cbiAgYmFja2VuZDpcbiAgICByZXN0YXJ0OiBcIm5vXCJcbiAgICBwb3J0czpcbiAgICAgIC0gXCI4MDAwOjgwMDBcIlxuICAgIGJ1aWxkOlxuICAgICAgY29udGV4dDogLi9iYWNrZW5kXG4gICAgIyBjb21tYW5kOiBzbGVlcCBpbmZpbml0eSAgIyBJbmZpbml0ZSBsb29wIHRvIGtlZXAgY29udGFpbmVyIGFsaXZlIGRvaW5nIG5vdGhpbmdcbiAgICBjb21tYW5kOlxuICAgICAgLSBmYXN0YXBpXG4gICAgICAtIHJ1blxuICAgICAgLSAtLXJlbG9hZFxuICAgICAgLSBcImFwcC9tYWluLnB5XCJcbiAgICBkZXZlbG9wOlxuICAgICAgd2F0Y2g6XG4gICAgICAgIC0gcGF0aDogLi9iYWNrZW5kXG4gICAgICAgICAgYWN0aW9uOiBzeW5jXG4gICAgICAgICAgdGFyZ2V0OiAvYXBwXG4gICAgICAgICAgaWdub3JlOlxuICAgICAgICAgICAgLSAuL2JhY2tlbmQvLnZlbnZcbiAgICAgICAgICAgIC0gLnZlbnZcbiAgICAgICAgLSBwYXRoOiAuL2JhY2tlbmQvcHlwcm9qZWN0LnRvbWxcbiAgICAgICAgICBhY3Rpb246IHJlYnVpbGRcbiAgICAjIFRPRE86IHJlbW92ZSBvbmNlIGNvdmVyYWdlIGlzIGRvbmUgbG9jYWxseVxuICAgIHZvbHVtZXM6XG4gICAgICAtIC4vYmFja2VuZC9odG1sY292Oi9hcHAvaHRtbGNvdlxuICAgIGVudmlyb25tZW50OlxuICAgICAgU01UUF9IT1NUOiBcIm1haWxjYXRjaGVyXCJcbiAgICAgIFNNVFBfUE9SVDogXCIxMDI1XCJcbiAgICAgIFNNVFBfVExTOiBcImZhbHNlXCJcbiAgICAgIEVNQUlMU19GUk9NX0VNQUlMOiBcIm5vcmVwbHlAZXhhbXBsZS5jb21cIlxuXG4gIG1haWxjYXRjaGVyOlxuICAgIGltYWdlOiBzY2hpY2tsaW5nL21haWxjYXRjaGVyXG4gICAgcG9ydHM6XG4gICAgICAtIFwiMTA4MDoxMDgwXCJcbiAgICAgIC0gXCIxMDI1OjEwMjVcIlxuXG4gIGZyb250ZW5kOlxuICAgIHJlc3RhcnQ6IFwibm9cIlxuICAgIHBvcnRzOlxuICAgICAgLSBcIjUxNzM6ODBcIlxuICAgIGJ1aWxkOlxuICAgICAgY29udGV4dDogLi9mcm9udGVuZFxuICAgICAgYXJnczpcbiAgICAgICAgLSBWSVRFX0FQSV9VUkw9aHR0cDovL2xvY2FsaG9zdDo4MDAwXG4gICAgICAgIC0gTk9ERV9FTlY9ZGV2ZWxvcG1lbnRcbi4uLlxuUGF0aDogYmFja2VuZC9Eb2NrZXJmaWxlXG4uLi5cblxuIyBJbnN0YWxsIGRlcGVuZGVuY2llc1xuIyBSZWY6IGh0dHBzOi8vZG9jcy5hc3RyYWwuc2gvdXYvZ3VpZGVzL2ludGVncmF0aW9uL2RvY2tlci8jaW50ZXJtZWRpYXRlLWxheWVyc1xuUlVOIC0tbW91bnQ9dHlwZT1jYWNoZSx0YXJnZXQ9L3Jvb3QvLmNhY2hlL3V2IFxcXG4gICAgLS1tb3VudD10eXBlPWJpbmQsc291cmNlPXV2LmxvY2ssdGFyZ2V0PXV2LmxvY2sgXFxcbiAgICAtLW1vdW50PXR5cGU9YmluZCxzb3VyY2U9cHlwcm9qZWN0LnRvbWwsdGFyZ2V0PXB5cHJvamVjdC50b21sIFxcXG4gICAgdXYgc3luYyAtLWZyb3plbiAtLW5vLWluc3RhbGwtcHJvamVjdFxuXG5FTlYgUFlUSE9OUEFUSD0vYXBwXG5cbkNPUFkgLi9zY3JpcHRzIC9hcHAvc2NyaXB0c1xuXG5DT1BZIC4vcHlwcm9qZWN0LnRvbWwgLi91di5sb2NrIC4vYWxlbWJpYy5pbmkgL2FwcC9cblxuQ09QWSAuL2FwcCAvYXBwL2FwcFxuXG4jIFN5bmMgdGhlIHByb2plY3RcbiMgUmVmOiBodHRwczovL2RvY3MuYXN0cmFsLnNoL3V2L2d1aWRlcy9pbnRlZ3JhdGlvbi9kb2NrZXIvI2ludGVybWVkaWF0ZS1sYXllcnNcblJVTiAtLW1vdW50PXR5cGU9Y2FjaGUsdGFyZ2V0PS9yb290Ly5jYWNoZS91diBcXFxuICAgIHV2IHN5bmNcblxuQ01EIFtcImZhc3RhcGlcIiwgXCJydW5cIiwgXCItLXdvcmtlcnNcIiwgXCI0XCIsIFwiYXBwL21haW4ucHlcIl1cbi4uLlxuUGF0aDogc2NyaXB0cy90ZXN0LnNoXG4jISAvdXNyL2Jpbi9lbnYgc2hcblxuIyBFeGl0IGluIGNhc2Ugb2YgZXJyb3JcbnNldCAtZVxuc2V0IC14XG5cbmRvY2tlciBjb21wb3NlIGJ1aWxkXG5kb2NrZXIgY29tcG9zZSBkb3duIC12IC0tcmVtb3ZlLW9ycGhhbnMgIyBSZW1vdmUgcG9zc2libHkgcHJldmlvdXMgYnJva2VuIHN0YWNrcyBsZWZ0IGhhbmdpbmcgYWZ0ZXIgYW4gZXJyb3JcbmRvY2tlciBjb21wb3NlIHVwIC1kXG5kb2NrZXIgY29tcG9zZSBleGVjIC1UIGJhY2tlbmQgYmFzaCBzY3JpcHRzL3Rlc3RzLXN0YXJ0LnNoIFwiJEBcIlxuZG9ja2VyIGNvbXBvc2UgZG93biAtdiAtLXJlbW92ZS1vcnBoYW5zXG4uLi5cblBhdGg6IGJhY2tlbmQvYXBwL21haW4ucHlcbmltcG9ydCBzZW50cnlfc2RrXG5mcm9tIGZhc3RhcGkgaW1wb3J0IEZhc3RBUElcbmZyb20gZmFzdGFwaS5yb3V0aW5nIGltcG9ydCBBUElSb3V0ZVxuZnJvbSBzdGFybGV0dGUubWlkZGxld2FyZS5jb3JzIGltcG9ydCBDT1JTTWlkZGxld2FyZVxuXG5mcm9tIGFwcC5hcGkubWFpbiBpbXBvcnQgYXBpX3JvdXRlclxuZnJvbSBhcHAuY29yZS5jb25maWcgaW1wb3J0IHNldHRpbmdzXG5cblxuZGVmIGN1c3RvbV9nZW5lcmF0ZV91bmlxdWVfaWQocm91dGU6IEFQSVJvdXRlKSAtPiBzdHI6XG4gICAgcmV0dXJuIGZcIntyb3V0ZS50YWdzWzBdfS17cm91dGUubmFtZX1cIlxuXG5cbmlmIHNldHRpbmdzLlNFTlRSWV9EU04gYW5kIHNldHRpbmdzLkVOVklST05NRU5UICE9IFwibG9jYWxcIjpcbiAgICBzZW50cnlfc2RrLmluaXQoZHNuPXN0cihzZXR0aW5ncy5TRU5UUllfRFNOKSwgZW5hYmxlX3RyYWNpbmc9VHJ1ZSlcblxuYXBwID0gRmFzdEFQSShcbiAgICB0aXRsZT1zZXR0aW5ncy5QUk9KRUNUX05BTUUsXG4gICAgb3BlbmFwaV91cmw9Zlwie3NldHRpbmdzLkFQSV9WMV9TVFJ9L29wZW5hcGkuanNvblwiLFxuICAgIGdlbmVyYXRlX3VuaXF1ZV9pZF9mdW5jdGlvbj1jdXN0b21fZ2VuZXJhdGVfdW5pcXVlX2lkLFxuKVxuXG4jIFNldCBhbGwgQ09SUyBlbmFibGVkIG9yaWdpbnNcbmlmIHNldHRpbmdzLmFsbF9jb3JzX29yaWdpbnM6XG4gICAgYXBwLmFkZF9taWRkbGV3YXJlKFxuICAgICAgICBDT1JTTWlkZGxld2FyZSxcbiAgICAgICAgYWxsb3dfb3JpZ2lucz1zZXR0aW5ncy5hbGxfY29yc19vcmlnaW5zLFxuICAgICAgICBhbGxvd19jcmVkZW50aWFscz1UcnVlLFxuICAgICAgICBhbGxvd19tZXRob2RzPVtcIipcIl0sXG4gICAgICAgIGFsbG93X2hlYWRlcnM9W1wiKlwiXSxcbiAgICApXG5cbmFwcC5pbmNsdWRlX3JvdXRlcihhcGlfcm91dGVyLCBwcmVmaXg9c2V0dGluZ3MuQVBJX1YxX1NUUilcbi4uLlxuUGF0aDogZG9ja2VyLWNvbXBvc2UueW1sXG5zZXJ2aWNlczpcblxuICBkYjpcbiAgICBpbWFnZTogcG9zdGdyZXM6MTJcbiAgICByZXN0YXJ0OiBhbHdheXNcbiAgICBoZWFsdGhjaGVjazpcbiAgICAgIHRlc3Q6IFtcIkNNRC1TSEVMTFwiLCBcInBnX2lzcmVhZHkgLVUgJHtQT1NUR1JFU19VU0VSfSAtZCAke1BPU1RHUkVTX0RCfVwiXVxuICAgICAgaW50ZXJ2YWw6IDEwc1xuICAgICAgcmV0cmllczogNVxuICAgICAgc3RhcnRfcGVyaW9kOiAzMHNcbiAgICAgIHRpbWVvdXQ6IDEwc1xuICAgIHZvbHVtZXM6XG4gICAgICAtIGFwcC1kYi1kYXRhOi92YXIvbGliL3Bvc3RncmVzcWwvZGF0YS9wZ2RhdGFcbiAgICBlbnZfZmlsZTpcbiAgICAgIC0gLmVudlxuICAgIGVudmlyb25tZW50OlxuICAgICAgLSBQR0RBVEE9L3Zhci9saWIvcG9zdGdyZXNxbC9kYXRhL3BnZGF0YVxuICAgICAgLSBQT1NUR1JFU19QQVNTV09SRD0ke1BPU1RHUkVTX1BBU1NXT1JEP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIFBPU1RHUkVTX1VTRVI9JHtQT1NUR1JFU19VU0VSP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIFBPU1RHUkVTX0RCPSR7UE9TVEdSRVNfREI/VmFyaWFibGUgbm90IHNldH1cblxuICBhZG1pbmVyOlxuICAgIGltYWdlOiBhZG1pbmVyXG4gICAgcmVzdGFydDogYWx3YXlzXG4gICAgbmV0d29ya3M6XG4gICAgICAtIHRyYWVmaWstcHVibGljXG4gICAgICAtIGRlZmF1bHRcbiAgICBkZXBlbmRzX29uOlxuICAgICAgLSBkYlxuICAgIGVudmlyb25tZW50OlxuICAgICAgLSBBRE1JTkVSX0RFU0lHTj1wZXBhLWxpbmhhLWRhcmtcbiAgICBsYWJlbHM6XG4gICAgICAtIHRyYWVmaWsuZW5hYmxlPXRydWVcbiAgICAgIC0gdHJhZWZpay5kb2NrZXIubmV0d29yaz10cmFlZmlrLXB1YmxpY1xuICAgICAgLSB0cmFlZmlrLmNvbnN0cmFpbnQtbGFiZWw9dHJhZWZpay1wdWJsaWNcbiAgICAgIC0gdHJhZWZpay5odHRwLnJvdXRlcnMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWFkbWluZXItaHR0cC5ydWxlPUhvc3QoYGFkbWluZXIuJHtET01BSU4/VmFyaWFibGUgbm90IHNldH1gKVxuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tYWRtaW5lci1odHRwLmVudHJ5cG9pbnRzPWh0dHBcbiAgICAgIC0gdHJhZWZpay5odHRwLnJvdXRlcnMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWFkbWluZXItaHR0cC5taWRkbGV3YXJlcz1odHRwcy1yZWRpcmVjdFxuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tYWRtaW5lci1odHRwcy5ydWxlPUhvc3QoYGFkbWluZXIuJHtET01BSU4/VmFyaWFibGUgbm90IHNldH1gKVxuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tYWRtaW5lci1odHRwcy5lbnRyeXBvaW50cz1odHRwc1xuLi4uXG5cbiAgcHJlc3RhcnQ6XG4gICAgaW1hZ2U6ICcke0RPQ0tFUl9JTUFHRV9CQUNLRU5EP1ZhcmlhYmxlIG5vdCBzZXR9OiR7VEFHLWxhdGVzdH0nXG4gICAgYnVpbGQ6XG4gICAgICBjb250ZXh0OiAuL2JhY2tlbmRcbiAgICBuZXR3b3JrczpcbiAgICAgIC0gdHJhZWZpay1wdWJsaWNcbiAgICAgIC0gZGVmYXVsdFxuICAgIGRlcGVuZHNfb246XG4gICAgICBkYjpcbiAgICAgICAgY29uZGl0aW9uOiBzZXJ2aWNlX2hlYWx0aHlcbiAgICAgICAgcmVzdGFydDogdHJ1ZVxuICAgIGNvbW1hbmQ6IGJhc2ggc2NyaXB0cy9wcmVzdGFydC5zaFxuICAgIGVudl9maWxlOlxuICAgICAgLSAuZW52XG4gICAgZW52aXJvbm1lbnQ6XG4gICAgICAtIERPTUFJTj0ke0RPTUFJTn1cbiAgICAgIC0gRlJPTlRFTkRfSE9TVD0ke0ZST05URU5EX0hPU1Q/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gRU5WSVJPTk1FTlQ9JHtFTlZJUk9OTUVOVH1cbiAgICAgIC0gQkFDS0VORF9DT1JTX09SSUdJTlM9JHtCQUNLRU5EX0NPUlNfT1JJR0lOU31cbiAgICAgIC0gU0VDUkVUX0tFWT0ke1NFQ1JFVF9LRVk/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gRklSU1RfU1VQRVJVU0VSPSR7RklSU1RfU1VQRVJVU0VSP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIEZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRD0ke0ZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRD9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBTTVRQX0hPU1Q9JHtTTVRQX0hPU1R9XG4gICAgICAtIFNNVFBfVVNFUj0ke1NNVFBfVVNFUn1cbiAgICAgIC0gU01UUF9QQVNTV09SRD0ke1NNVFBfUEFTU1dPUkR9XG4gICAgICAtIEVNQUlMU19GUk9NX0VNQUlMPSR7RU1BSUxTX0ZST01fRU1BSUx9XG4gICAgICAtIFBPU1RHUkVTX1NFUlZFUj1kYlxuICAgICAgLSBQT1NUR1JFU19QT1JUPSR7UE9TVEdSRVNfUE9SVH1cbiAgICAgIC0gUE9TVEdSRVNfREI9JHtQT1NUR1JFU19EQn1cbiAgICAgIC0gUE9TVEdSRVNfVVNFUj0ke1BPU1RHUkVTX1VTRVI/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gUE9TVEdSRVNfUEFTU1dPUkQ9JHtQT1NUR1JFU19QQVNTV09SRD9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBTRU5UUllfRFNOPSR7U0VOVFJZX0RTTn1cblxuICBiYWNrZW5kOlxuICAgIGltYWdlOiAnJHtET0NLRVJfSU1BR0VfQkFDS0VORD9WYXJpYWJsZSBub3Qgc2V0fToke1RBRy1sYXRlc3R9J1xuICAgIHJlc3RhcnQ6IGFsd2F5c1xuICAgIG5ldHdvcmtzOlxuICAgICAgLSB0cmFlZmlrLXB1YmxpY1xuICAgICAgLSBkZWZhdWx0XG4gICAgZGVwZW5kc19vbjpcbiAgICAgIGRiOlxuICAgICAgICBjb25kaXRpb246IHNlcnZpY2VfaGVhbHRoeVxuICAgICAgICByZXN0YXJ0OiB0cnVlXG4gICAgICBwcmVzdGFydDpcbiAgICAgICAgY29uZGl0aW9uOiBzZXJ2aWNlX2NvbXBsZXRlZF9zdWNjZXNzZnVsbHlcbiAgICBlbnZfZmlsZTpcbiAgICAgIC0gLmVudlxuICAgIGVudmlyb25tZW50OlxuICAgICAgLSBET01BSU49JHtET01BSU59XG4gICAgICAtIEZST05URU5EX0hPU1Q9JHtGUk9OVEVORF9IT1NUP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIEVOVklST05NRU5UPSR7RU5WSVJPTk1FTlR9XG4gICAgICAtIEJBQ0tFTkRfQ09SU19PUklHSU5TPSR7QkFDS0VORF9DT1JTX09SSUdJTlN9XG4gICAgICAtIFNFQ1JFVF9LRVk9JHtTRUNSRVRfS0VZP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIEZJUlNUX1NVUEVSVVNFUj0ke0ZJUlNUX1NVUEVSVVNFUj9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBGSVJTVF9TVVBFUlVTRVJfUEFTU1dPUkQ9JHtGSVJTVF9TVVBFUlVTRVJfUEFTU1dPUkQ/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gU01UUF9IT1NUPSR7U01UUF9IT1NUfVxuICAgICAgLSBTTVRQX1VTRVI9JHtTTVRQX1VTRVJ9XG4gICAgICAtIFNNVFBfUEFTU1dPUkQ9JHtTTVRQX1BBU1NXT1JEfVxuICAgICAgLSBFTUFJTFNfRlJPTV9FTUFJTD0ke0VNQUlMU19GUk9NX0VNQUlMfVxuICAgICAgLSBQT1NUR1JFU19TRVJWRVI9ZGJcbiAgICAgIC0gUE9TVEdSRVNfUE9SVD0ke1BPU1RHUkVTX1BPUlR9XG4gICAgICAtIFBPU1RHUkVTX0RCPSR7UE9TVEdSRVNfREJ9XG4gICAgICAtIFBPU1RHUkVTX1VTRVI9JHtQT1NUR1JFU19VU0VSP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIFBPU1RHUkVTX1BBU1NXT1JEPSR7UE9TVEdSRVNfUEFTU1dPUkQ/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gU0VOVFJZX0RTTj0ke1NFTlRSWV9EU059XG5cbiAgICBoZWFsdGhjaGVjazpcbiAgICAgIHRlc3Q6IFtcIkNNRFwiLCBcImN1cmxcIiwgXCItZlwiLCBcImh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9hcGkvdjEvdXRpbHMvaGVhbHRoLWNoZWNrL1wiXVxuICAgICAgaW50ZXJ2YWw6IDEwc1xuICAgICAgdGltZW91dDogNXNcbiAgICAgIHJldHJpZXM6IDVcblxuICAgIGJ1aWxkOlxuICAgICAgY29udGV4dDogLi9iYWNrZW5kXG4gICAgbGFiZWxzOlxuICAgICAgLSB0cmFlZmlrLmVuYWJsZT10cnVlXG4gICAgICAtIHRyYWVmaWsuZG9ja2VyLm5ldHdvcms9dHJhZWZpay1wdWJsaWNcbiAgICAgIC0gdHJhZWZpay5jb25zdHJhaW50LWxhYmVsPXRyYWVmaWstcHVibGljXG5cbiAgICAgIC0gdHJhZWZpay5odHRwLnNlcnZpY2VzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1iYWNrZW5kLmxvYWRiYWxhbmNlci5zZXJ2ZXIucG9ydD04MDAwXG5cbiAgICAgIC0gdHJhZWZpay5odHRwLnJvdXRlcnMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWJhY2tlbmQtaHR0cC5ydWxlPUhvc3QoYGFwaS4ke0RPTUFJTj9WYXJpYWJsZSBub3Qgc2V0fWApXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1iYWNrZW5kLWh0dHAuZW50cnlwb2ludHM9aHR0cFxuLi4uXG5cbiAgZnJvbnRlbmQ6XG4gICAgaW1hZ2U6ICcke0RPQ0tFUl9JTUFHRV9GUk9OVEVORD9WYXJpYWJsZSBub3Qgc2V0fToke1RBRy1sYXRlc3R9J1xuICAgIHJlc3RhcnQ6IGFsd2F5c1xuICAgIG5ldHdvcmtzOlxuICAgICAgLSB0cmFlZmlrLXB1YmxpY1xuICAgICAgLSBkZWZhdWx0XG4gICAgYnVpbGQ6XG4gICAgICBjb250ZXh0OiAuL2Zyb250ZW5kXG4gICAgICBhcmdzOlxuICAgICAgICAtIFZJVEVfQVBJX1VSTD1odHRwczovL2FwaS4ke0RPTUFJTj9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgICAtIE5PREVfRU5WPXByb2R1Y3Rpb25cbiAgICBsYWJlbHM6XG4gICAgICAtIHRyYWVmaWsuZW5hYmxlPXRydWVcbiAgICAgIC0gdHJhZWZpay5kb2NrZXIubmV0d29yaz10cmFlZmlrLXB1YmxpY1xuICAgICAgLSB0cmFlZmlrLmNvbnN0cmFpbnQtbGFiZWw9dHJhZWZpay1wdWJsaWNcblxuICAgICAgLSB0cmFlZmlrLmh0dHAuc2VydmljZXMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWZyb250ZW5kLmxvYWRiYWxhbmNlci5zZXJ2ZXIucG9ydD04MFxuXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1mcm9udGVuZC1odHRwLnJ1bGU9SG9zdChgZGFzaGJvYXJkLiR7RE9NQUlOP1ZhcmlhYmxlIG5vdCBzZXR9YClcbiAgICAgIC0gdHJhZWZpay5odHRwLnJvdXRlcnMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWZyb250ZW5kLWh0dHAuZW50cnlwb2ludHM9aHR0cFxuXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1mcm9udGVuZC1odHRwcy5ydWxlPUhvc3QoYGRhc2hib2FyZC4ke0RPTUFJTj9WYXJpYWJsZSBub3Qgc2V0fWApXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1mcm9udGVuZC1odHRwcy5lbnRyeXBvaW50cz1odHRwc1xuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tZnJvbnRlbmQtaHR0cHMudGxzPXRydWVcbiAgICAgIC0gdHJhZWZpay5odHRwLnJvdXRlcnMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWZyb250ZW5kLWh0dHBzLnRscy5jZXJ0cmVzb2x2ZXI9bGVcblxuICAgICAgIyBFbmFibGUgcmVkaXJlY3Rpb24gZm9yIEhUVFAgYW5kIEhUVFBTXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1mcm9udGVuZC1odHRwLm1pZGRsZXdhcmVzPWh0dHBzLXJlZGlyZWN0XG52b2x1bWVzOlxuICBhcHAtZGItZGF0YTpcblxubmV0d29ya3M6XG4gIHRyYWVmaWstcHVibGljOlxuICAgICMgQWxsb3cgc2V0dGluZyBpdCB0byBmYWxzZSBmb3IgdGVzdGluZ1xuICAgIGV4dGVybmFsOiB0cnVlXG4uLi5cblBhdGg6IGJhY2tlbmQvYXBwL2FwaS9tYWluLnB5XG5mcm9tIGZhc3RhcGkgaW1wb3J0IEFQSVJvdXRlclxuXG5mcm9tIGFwcC5hcGkucm91dGVzIGltcG9ydCBpdGVtcywgbG9naW4sIHByaXZhdGUsIHVzZXJzLCB1dGlscywgY2hpbGRyZW4sIGdyb3d0aF9yZWNvcmRzLCBkb2N1bWVudHMsIGNoYXRcbmZyb20gYXBwLmNvcmUuY29uZmlnIGltcG9ydCBzZXR0aW5nc1xuXG5hcGlfcm91dGVyID0gQVBJUm91dGVyKClcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIobG9naW4ucm91dGVyKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcih1c2Vycy5yb3V0ZXIpXG5hcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKHV0aWxzLnJvdXRlcilcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIoaXRlbXMucm91dGVyKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihjaGlsZHJlbi5yb3V0ZXIsIHByZWZpeD1cIi9jaGlsZHJlblwiLCB0YWdzPVtcImNoaWxkcmVuXCJdKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihncm93dGhfcmVjb3Jkcy5yb3V0ZXIsIHByZWZpeD1cIi9ncm93dGgtcmVjb3Jkc1wiLCB0YWdzPVtcImdyb3d0aC1yZWNvcmRzXCJdKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihkb2N1bWVudHMucm91dGVyLCBwcmVmaXg9XCIvZG9jdW1lbnRzXCIsIHRhZ3M9W1wiZG9jdW1lbnRzXCJdKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihjaGF0LnJvdXRlciwgcHJlZml4PVwiL2NoYXRcIiwgdGFncz1bXCJjaGF0XCJdKVxuXG5cbmlmIHNldHRpbmdzLkVOVklST05NRU5UID09IFwibG9jYWxcIjpcbiAgICBhcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKHByaXZhdGUucm91dGVyKVxuLi4uXG5QYXRoOiBiYWNrZW5kL2FwcC9jb3JlL2NvbmZpZy5weVxuLi4uXG4gICAgQVBJX1YxX1NUUjogc3RyID0gXCIvYXBpL3YxXCJcbiAgICBTRUNSRVRfS0VZOiBzdHIgPSBzZWNyZXRzLnRva2VuX3VybHNhZmUoMzIpXG4gICAgIyA2MCBtaW51dGVzICogMjQgaG91cnMgKiA4IGRheXMgPSA4IGRheXNcbiAgICBBQ0NFU1NfVE9LRU5fRVhQSVJFX01JTlVURVM6IGludCA9IDYwICogMjQgKiA4XG4gICAgRlJPTlRFTkRfSE9TVDogc3RyID0gXCJodHRwOi8vbG9jYWxob3N0OjUxNzNcIlxuICAgIEVOVklST05NRU5UOiBMaXRlcmFsW1wibG9jYWxcIiwgXCJzdGFnaW5nXCIsIFwicHJvZHVjdGlvblwiXSA9IFwibG9jYWxcIlxuXG4gICAgIyBMTE0gc2V0dGluZ3NcbiAgICBPUEVOUk9VVEVSX0FQSV9LRVk6IHN0ciA9IFwiXCJcbiAgICBERUZBVUxUX0xMTV9NT0RFTDogc3RyID0gXCJvcGVuYWkvZ3B0LTRvLW1pbmlcIlxuICAgIE9QRU5ST1VURVJfQkFTRV9VUkw6IHN0ciA9IFwiaHR0cHM6Ly9vcGVucm91dGVyLmFpL2FwaS92MVwiXG5cbiAgICAjIFJBRyBzZXR0aW5nc1xuICAgIE1BWF9ET0NVTUVOVFNfUEVSX1VTRVI6IGludCA9IDUwXG4gICAgTUFYX0RPQ1VNRU5UX1NJWkVfTUI6IGludCA9IDEwXG5cbiAgICBCQUNLRU5EX0NPUlNfT1JJR0lOUzogQW5ub3RhdGVkW1xuICAgICAgICBsaXN0W0FueVVybF0gfCBzdHIsIEJlZm9yZVZhbGlkYXRvcihwYXJzZV9jb3JzKVxuICAgIF0gPSBbXVxuXG4gICAgQGNvbXB1dGVkX2ZpZWxkICAjIHR5cGU6IGlnbm9yZVtwcm9wLWRlY29yYXRvcl1cbiAgICBAcHJvcGVydHlcbiAgICBkZWYgYWxsX2NvcnNfb3JpZ2lucyhzZWxmKSAtPiBsaXN0W3N0cl06XG4gICAgICAgIHJldHVybiBbc3RyKG9yaWdpbikucnN0cmlwKFwiL1wiKSBmb3Igb3JpZ2luIGluIHNlbGYuQkFDS0VORF9DT1JTX09SSUdJTlNdICsgW1xuICAgICAgICAgICAgc2VsZi5GUk9OVEVORF9IT1NUXG4gICAgICAgIF1cblxuICAgIFBST0pFQ1RfTkFNRTogc3RyXG4gICAgU0VOVFJZX0RTTjogSHR0cFVybCB8IE5vbmUgPSBOb25lXG4gICAgUE9TVEdSRVNfU0VSVkVSOiBzdHJcbiAgICBQT1NUR1JFU19QT1JUOiBpbnQgPSA1NDMyXG4gICAgUE9TVEdSRVNfVVNFUjogc3RyXG4gICAgUE9TVEdSRVNfUEFTU1dPUkQ6IHN0ciA9IFwiXCJcbiAgICBQT1NUR1JFU19EQjogc3RyID0gXCJcIlxuXG4gICAgQGNvbXB1dGVkX2ZpZWxkICAjIHR5cGU6IGlnbm9yZVtwcm9wLWRlY29yYXRvcl1cbiAgICBAcHJvcGVydHlcbiAgICBkZWYgU1FMQUxDSEVNWV9EQVRBQkFTRV9VUkkoc2VsZikgLT4gUG9zdGdyZXNEc246XG4gICAgICAgIHJldHVybiBNdWx0aUhvc3RVcmwuYnVpbGQoXG4gICAgICAgICAgICBzY2hlbWU9XCJwb3N0Z3Jlc3FsK3BzeWNvcGdcIixcbiAgICAgICAgICAgIHVzZXJuYW1lPXNlbGYuUE9TVEdSRVNfVVNFUixcbiAgICAgICAgICAgIHBhc3N3b3JkPXNlbGYuUE9TVEdSRVNfUEFTU1dPUkQsXG4gICAgICAgICAgICBob3N0PXNlbGYuUE9TVEdSRVNfU0VSVkVSLFxuICAgICAgICAgICAgcG9ydD1zZWxmLlBPU1RHUkVTX1BPUlQsXG4gICAgICAgICAgICBwYXRoPXNlbGYuUE9TVEdSRVNfREIsXG4gICAgICAgIClcbi4uLlxuUGF0aDogZnJvbnRlbmQvc3JjL21haW4udHN4XG5pbXBvcnQge1xuICBNdXRhdGlvbkNhY2hlLFxuICBRdWVyeUNhY2hlLFxuICBRdWVyeUNsaWVudCxcbiAgUXVlcnlDbGllbnRQcm92aWRlcixcbn0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiXG5pbXBvcnQgeyBSb3V0ZXJQcm92aWRlciwgY3JlYXRlUm91dGVyIH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1yb3V0ZXJcIlxuaW1wb3J0IFJlYWN0LCB7IFN0cmljdE1vZGUgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCJcbmltcG9ydCB7IHJvdXRlVHJlZSB9IGZyb20gXCIuL3JvdXRlVHJlZS5nZW5cIlxuXG5pbXBvcnQgeyBBcGlFcnJvciwgT3BlbkFQSSB9IGZyb20gXCIuL2NsaWVudFwiXG5pbXBvcnQgeyBDdXN0b21Qcm92aWRlciB9IGZyb20gXCIuL2NvbXBvbmVudHMvdWkvcHJvdmlkZXJcIlxuXG5PcGVuQVBJLkJBU0UgPSBpbXBvcnQubWV0YS5lbnYuVklURV9BUElfVVJMXG5PcGVuQVBJLlRPS0VOID0gYXN5bmMgKCkgPT4ge1xuICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJhY2Nlc3NfdG9rZW5cIikgfHwgXCJcIlxufVxuXG5jb25zdCBoYW5kbGVBcGlFcnJvciA9IChlcnJvcjogRXJyb3IpID0+IHtcbiAgaWYgKGVycm9yIGluc3RhbmMuLi4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFIWE0zeWs0cmV6UERNb0pZZVdRQ0ZhIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImU3YWQ0OWRiLWI3YjctNDIyZi05YzBlLTA0Yjc1YjYxN2I1YSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IuWfuuS6juaIkeaUtumbhuWIsOeahOS/oeaBr++8jOaIkeeOsOWcqOWPr+S7peWbnuetlOWmguS9leWcqFB5Q2hhcm3kuK3lvIDlkK/ov5nkuKrpobnnm67nmoRiYWNrZW5k5pyN5Yqh44CC5Lul5LiL5piv6K+m57uG5q2l6aqk77yaXG5cbiMjIOWcqFB5Q2hhcm3kuK3lvIDlkK9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlcueahGJhY2tlbmTmnI3liqFcblxuIyMjIOaWueazleS4gO+8muS9v+eUqERvY2tlciBDb21wb3Nl77yI5o6o6I2Q77yJXG5cbjEuICoq5omT5byA6aG555uuKirvvJpcbiAgIC0g5ZyoUHlDaGFybeS4reaJk+W8gGBwYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlcmDpobnnm65cblxuMi4gKirphY3nva5Eb2NrZXLpm4bmiJAqKu+8mlxuICAgLSDnoa7kv51QeUNoYXJt5bey5a6J6KOFRG9ja2Vy5o+S5Lu2XG4gICAtIOWcqFB5Q2hhcm3kuK3ov57mjqXliLBEb2NrZXJcblxuMy4gKirlkK/liqjmnI3liqEqKu+8mlxuICAgLSDmiZPlvIDnu4jnq6/vvIhUZXJtaW5hbO+8ieeql+WPo1xuICAgLSDmiafooYzku6XkuIvlkb3ku6TlkK/liqjmlbTkuKrlvIDlj5Hnjq/looPvvJpcbiAgIGBgYFxuICAgZG9ja2VyIGNvbXBvc2Ugd2F0Y2hcbiAgIGBgYFxuICAgLSDov5nlsIblkK/liqjljIXmi6xiYWNrZW5k44CBZnJvbnRlbmTjgIHmlbDmja7lupPnrYnlnKjlhoXnmoTmiYDmnInmnI3liqFcbiAgIC0gYmFja2VuZOacjeWKoeWwhuWcqGh0dHA6Ly9sb2NhbGhvc3Q6ODAwMOS4iui/kOihjFxuXG4jIyMg5pa55rOV5LqM77ya5pys5Zyw55u05o6l6L+Q6KGMXG5cbjEuICoq5a6J6KOF5L6d6LWWKirvvJpcbiAgIC0g5omT5byA57uI56uv77yM6L+b5YWlYmFja2VuZOebruW9le+8mlxuICAgYGBgXG4gICBjZCBiYWNrZW5kXG4gICBgYGBcbiAgIC0g5a6J6KOFdXblt6XlhbfvvIjlpoLmnpzlsJrmnKrlronoo4XvvIlcbiAgIC0g5L2/55SodXblronoo4Xkvp3otZbvvJpcbiAgIGBgYFxuICAgdXYgc3luY1xuICAgYGBgXG4gICAtIOa/gOa0u+iZmuaLn+eOr+Wig++8mlxuICAgYGBgXG4gICBzb3VyY2UgLnZlbnYvYmluL2FjdGl2YXRlXG4gICBgYGBcblxuMi4gKirlnKhQeUNoYXJt5Lit6YWN572uUHl0aG9u6Kej6YeK5ZmoKirvvJpcbiAgIC0g5omT5byAUHlDaGFybeiuvue9riDihpIgUHJvamVjdCDihpIgUHl0aG9uIEludGVycHJldGVyXG4gICAtIOa3u+WKoOaWsOeahOino+mHiuWZqO+8jOmAieaLqWBiYWNrZW5kLy52ZW52L2Jpbi9weXRob25g6Lev5b6EXG5cbjMuICoq6YWN572u6L+Q6KGM6YWN572uKirvvJpcbiAgIC0g54K55Ye7XCJBZGQgQ29uZmlndXJhdGlvblwi5oiWXCJFZGl0IENvbmZpZ3VyYXRpb25zXCJcbiAgIC0g5re75Yqg5paw55qEUHl0aG9u6YWN572uXG4gICAtIOiuvue9ruiEmuacrOi3r+W+hOS4umBhcHAvbWFpbi5weWDvvIjkvY3kuo5iYWNrZW5k55uu5b2V5LiL77yJXG4gICAtIOiuvue9ruW3peS9nOebruW9leS4umBiYWNrZW5kYOebruW9lVxuICAgLSDlnKhcIlBhcmFtZXRlcnNcIuS4rea3u+WKoGBmYXN0YXBpIHJ1biAtLXJlbG9hZGBcbiAgIC0g56Gu5L+d546v5aKD5Y+Y6YeP5q2j56Gu6YWN572u77yI5Y+v5Lul5LuOLmVuduaWh+S7tuS4reWKoOi9ve+8iVxuXG40LiAqKui/kOihjOacjeWKoSoq77yaXG4gICAtIOeCueWHu+i/kOihjOaMiemSruaIluS9v+eUqOW/q+aNt+mUrui/kOihjOmFjee9rlxuICAgLSDmiJbogIXlnKjnu4jnq6/kuK3nm7TmjqXov5DooYzvvJpcbiAgIGBgYFxuICAgY2QgYmFja2VuZFxuICAgc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZVxuICAgZmFzdGFwaSBydW4gLS1yZWxvYWQgYXBwL21haW4ucHlcbiAgIGBgYFxuXG4jIyMg5pa55rOV5LiJ77ya5L2/55SoRG9ja2Vy5L2G6L+b5YWl5a655Zmo5YaF6YOoXG5cbjEuICoq5ZCv5YqoRG9ja2Vy5a655ZmoKirvvJpcbiAgIGBgYFxuICAgZG9ja2VyIGNvbXBvc2Ugd2F0Y2hcbiAgIGBgYFxuXG4yLiAqKui/m+WFpWJhY2tlbmTlrrnlmagqKu+8mlxuICAgYGBgXG4gICBkb2NrZXIgY29tcG9zZSBleGVjIGJhY2tlbmQgYmFzaFxuICAgYGBgXG5cbjMuICoq5Zyo5a655Zmo5YaF5ZCv5Yqo5pyN5YqhKirvvJpcbiAgIGBgYFxuICAgZmFzdGFwaSBydW4gLS1yZWxvYWQgYXBwL21haW4ucHlcbiAgIGBgYFxuXG4jIyMg5rOo5oSP5LqL6aG5XG5cbjEuICoq5pWw5o2u5bqT6L+e5o6lKirvvJpcbiAgIC0g6aG555uu5L2/55SoUG9zdGdyZVNRTOaVsOaNruW6k1xuICAgLSDmlbDmja7lupPov57mjqXphY3nva7lnKhgLmVudmDmlofku7bkuK1cbiAgIC0g56Gu5L+d5pWw5o2u5bqT5pyN5Yqh5q2j5bi46L+Q6KGMXG5cbjIuICoq546v5aKD5Y+Y6YePKirvvJpcbiAgIC0g56Gu5L+dYC5lbnZg5paH5Lu25Lit55qE6YWN572u5q2j56GuXG4gICAtIOeJueWIq+aYr+aVsOaNruW6k+i/nuaOpeS/oeaBr++8mlxuICAgICAtIFBPU1RHUkVTX1NFUlZFUlxuICAgICAtIFBPU1RHUkVTX1BPUlRcbiAgICAgLSBQT1NUR1JFU19EQlxuICAgICAtIFBPU1RHUkVTX1VTRVJcbiAgICAgLSBQT1NUR1JFU19QQVNTV09SRFxuXG4zLiAqKkFQSeiuv+mXrioq77yaXG4gICAtIOacjeWKoeWQr+WKqOWQju+8jOWPr+S7pemAmui/h2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMOiuv+mXrkFQSVxuICAgLSBBUEnmlofmoaPlj6/ku6XpgJrov4dodHRwOi8vbG9jYWxob3N0OjgwMDAvZG9jc+iuv+mXrlxuXG40LiAqKueDremHjei9vSoq77yaXG4gICAtIOS9v+eUqGAtLXJlbG9hZGDlj4LmlbDlj6/ku6Xlrp7njrDku6PnoIHkv67mlLnlkI7oh6rliqjph43mlrDliqDovb3mnI3liqFcblxu5L2/55SoRG9ja2VyIENvbXBvc2XmmK/mnIDnroDljZXnmoTmlrnlvI/vvIzlm6DkuLrlroPkvJroh6rliqjlpITnkIbmiYDmnInkvp3otZblhbPns7vvvIzljIXmi6zmlbDmja7lupPlkozlhbbku5bmnI3liqHjgILlpoLmnpzmgqjmg7PopoHmm7Tnm7TmjqXlnLDosIPor5Xku6PnoIHvvIzlj6/ku6XpgInmi6nmnKzlnLDov5DooYznmoTmlrnlvI/jgIJcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IGJhY2tlbmQvYXBwL2NvcmUvY29uZmlnLnB5XG5pbXBvcnQgc2VjcmV0c1xuaW1wb3J0IHdhcm5pbmdzXG5mcm9tIHR5cGluZyBpbXBvcnQgQW5ub3RhdGVkLCBBbnksIExpdGVyYWxcblxuZnJvbSBweWRhbnRpYyBpbXBvcnQgKFxuICAgIEFueVVybCxcbiAgICBCZWZvcmVWYWxpZGF0b3IsXG4gICAgRW1haWxTdHIsXG4gICAgSHR0cFVybCxcbiAgICBQb3N0Z3Jlc0RzbixcbiAgICBjb21wdXRlZF9maWVsZCxcbiAgICBtb2RlbF92YWxpZGF0b3IsXG4pXG5mcm9tIHB5ZGFudGljX2NvcmUgaW1wb3J0IE11bHRpSG9zdFVybFxuZnJvbSBweWRhbnRpY19zZXR0aW5ncyBpbXBvcnQgQmFzZVNldHRpbmdzLCBTZXR0aW5nc0NvbmZpZ0RpY3RcbmZyb20gdHlwaW5nX2V4dGVuc2lvbnMgaW1wb3J0IFNlbGZcblxuXG5kZWYgcGFyc2VfY29ycyh2OiBBbnkpIC0+IGxpc3Rbc3RyXSB8IHN0cjpcbiAgICBpZiBpc2luc3RhbmNlKHYsIHN0cikgYW5kIG5vdCB2LnN0YXJ0c3dpdGgoXCJbXCIpOlxuICAgICAgICByZXR1cm4gW2kuc3RyaXAoKSBmb3IgaSBpbiB2LnNwbGl0KFwiLFwiKV1cbiAgICBlbGlmIGlzaW5zdGFuY2UodiwgbGlzdCB8IHN0cik6XG4gICAgICAgIHJldHVybiB2XG4gICAgcmFpc2UgVmFsdWVFcnJvcih2KVxuXG5cbmNsYXNzIFNldHRpbmdzKEJhc2VTZXR0aW5ncyk6XG4gICAgbW9kZWxfY29uZmlnID0gU2V0dGluZ3NDb25maWdEaWN0KFxuICAgICAgICAjIFVzZSB0b3AgbGV2ZWwgLmVudiBmaWxlIChvbmUgbGV2ZWwgYWJvdmUgLi9iYWNrZW5kLylcbiAgICAgICAgZW52X2ZpbGU9XCIuLi8uZW52XCIsXG4gICAgICAgIGVudl9pZ25vcmVfZW1wdHk9VHJ1ZSxcbiAgICAgICAgZXh0cmE9XCJpZ25vcmVcIixcbiAgICApXG4gICAgQVBJX1YxX1NUUjogc3RyID0gXCIvYXBpL3YxXCJcbiAgICBTRUNSRVRfS0VZOiBzdHIgPSBzZWNyZXRzLnRva2VuX3VybHNhZmUoMzIpXG4gICAgIyA2MCBtaW51dGVzICogMjQgaG91cnMgKiA4IGRheXMgPSA4IGRheXNcbiAgICBBQ0NFU1NfVE9LRU5fRVhQSVJFX01JTlVURVM6IGludCA9IDYwICogMjQgKiA4XG4gICAgRlJPTlRFTkRfSE9TVDogc3RyID0gXCJodHRwOi8vbG9jYWxob3N0OjUxNzNcIlxuICAgIEVOVklST05NRU5UOiBMaXRlcmFsW1wibG9jYWxcIiwgXCJzdGFnaW5nXCIsIFwicHJvZHVjdGlvblwiXSA9IFwibG9jYWxcIlxuXG4gICAgIyBMTE0gc2V0dGluZ3NcbiAgICBPUEVOUk9VVEVSX0FQSV9LRVk6IHN0ciA9IFwiXCJcbiAgICBERUZBVUxUX0xMTV9NT0RFTDogc3RyID0gXCJvcGVuYWkvZ3B0LTRvLW1pbmlcIlxuICAgIE9QRU5ST1VURVJfQkFTRV9VUkw6IHN0ciA9IFwiaHR0cHM6Ly9vcGVucm91dGVyLmFpL2FwaS92MVwiXG5cbiAgICAjIFJBRyBzZXR0aW5nc1xuICAgIE1BWF9ET0NVTUVOVFNfUEVSX1VTRVI6IGludCA9IDUwXG4gICAgTUFYX0RPQ1VNRU5UX1NJWkVfTUI6IGludCA9IDEwXG5cbiAgICBCQUNLRU5EX0NPUlNfT1JJR0lOUzogQW5ub3RhdGVkW1xuICAgICAgICBsaXN0W0FueVVybF0gfCBzdHIsIEJlZm9yZVZhbGlkYXRvcihwYXJzZV9jb3JzKVxuICAgIF0gPSBbXVxuXG4gICAgQGNvbXB1dGVkX2ZpZWxkICAjIHR5cGU6IGlnbm9yZVtwcm9wLWRlY29yYXRvcl1cbiAgICBAcHJvcGVydHlcbiAgICBkZWYgYWxsX2NvcnNfb3JpZ2lucyhzZWxmKSAtPiBsaXN0W3N0cl06XG4gICAgICAgIHJldHVybiBbc3RyKG9yaWdpbikucnN0cmlwKFwiL1wiKSBmb3Igb3JpZ2luIGluIHNlbGYuQkFDS0VORF9DT1JTX09SSUdJTlNdICsgW1xuICAgICAgICAgICAgc2VsZi5GUk9OVEVORF9IT1NUXG4gICAgICAgIF1cblxuICAgIFBST0pFQ1RfTkFNRTogc3RyXG4gICAgU0VOVFJZX0RTTjogSHR0cFVybCB8IE5vbmUgPSBOb25lXG4gICAgUE9TVEdSRVNfU0VSVkVSOiBzdHJcbiAgICBQT1NUR1JFU19QT1JUOiBpbnQgPSA1NDMyXG4gICAgUE9TVEdSRVNfVVNFUjogc3RyXG4gICAgUE9TVEdSRVNfUEFTU1dPUkQ6IHN0ciA9IFwiXCJcbiAgICBQT1NUR1JFU19EQjogc3RyID0gXCJcIlxuXG4gICAgQGNvbXB1dGVkX2ZpZWxkICAjIHR5cGU6IGlnbm9yZVtwcm9wLWRlY29yYXRvcl1cbiAgICBAcHJvcGVydHlcbiAgICBkZWYgU1FMQUxDSEVNWV9EQVRBQkFTRV9VUkkoc2VsZikgLT4gUG9zdGdyZXNEc246XG4gICAgICAgIHJldHVybiBNdWx0aUhvc3RVcmwuYnVpbGQoXG4gICAgICAgICAgICBzY2hlbWU9XCJwb3N0Z3Jlc3FsK3BzeWNvcGdcIixcbiAgICAgICAgICAgIHVzZXJuYW1lPXNlbGYuUE9TVEdSRVNfVVNFUixcbiAgICAgICAgICAgIHBhc3N3b3JkPXNlbGYuUE9TVEdSRVNfUEFTU1dPUkQsXG4gICAgICAgICAgICBob3N0PXNlbGYuUE9TVEdSRVNfU0VSVkVSLFxuICAgICAgICAgICAgcG9ydD1zZWxmLlBPU1RHUkVTX1BPUlQsXG4gICAgICAgICAgICBwYXRoPXNlbGYuUE9TVEdSRVNfREIsXG4gICAgICAgIClcblxuICAgIFNNVFBfVExTOiBib29sID0gVHJ1ZVxuICAgIFNNVFBfU1NMOiBib29sID0gRmFsc2VcbiAgICBTTVRQX1BPUlQ6IGludCA9IDU4N1xuICAgIFNNVFBfSE9TVDogc3RyIHwgTm9uZSA9IE5vbmVcbiAgICBTTVRQX1VTRVI6IHN0ciB8IE5vbmUgPSBOb25lXG4gICAgU01UUF9QQVNTV09SRDogc3RyIHwgTm9uZSA9IE5vbmVcbiAgICBFTUFJTFNfRlJPTV9FTUFJTDogRW1haWxTdHIgfCBOb25lID0gTm9uZVxuICAgIEVNQUlMU19GUk9NX05BTUU6IEVtYWlsU3RyIHwgTm9uZSA9IE5vbmVcblxuICAgIEBtb2RlbF92YWxpZGF0b3IobW9kZT1cImFmdGVyXCIpXG4gICAgZGVmIF9zZXRfZGVmYXVsdF9lbWFpbHNfZnJvbShzZWxmKSAtPiBTZWxmOlxuICAgICAgICBpZiBub3Qgc2VsZi5FTUFJTFNfRlJPTV9OQU1FOlxuICAgICAgICAgICAgc2VsZi5FTUFJTFNfRlJPTV9OQU1FID0gc2VsZi5QUk9KRUNUX05BTUVcbiAgICAgICAgcmV0dXJuIHNlbGZcblxuICAgIEVNQUlMX1JFU0VUX1RPS0VOX0VYUElSRV9IT1VSUzogaW50ID0gNDhcblxuICAgIEBjb21wdXRlZF9maWVsZCAgIyB0eXBlOiBpZ25vcmVbcHJvcC1kZWNvcmF0b3JdXG4gICAgQHByb3BlcnR5XG4gICAgZGVmIGVtYWlsc19lbmFibGVkKHNlbGYpIC0+IGJvb2w6XG4gICAgICAgIHJldHVybiBib29sKHNlbGYuU01UUF9IT1NUIGFuZCBzZWxmLkVNQUlMU19GUk9NX0VNQUlMKVxuXG4gICAgRU1BSUxfVEVTVF9VU0VSOiBFbWFpbFN0ciA9IFwidGVzdEBleGFtcGxlLmNvbVwiXG4gICAgRklSU1RfU1VQRVJVU0VSOiBFbWFpbFN0clxuICAgIEZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRDogc3RyXG5cbiAgICBkZWYgX2NoZWNrX2RlZmF1bHRfc2VjcmV0KHNlbGYsIHZhcl9uYW1lOiBzdHIsIHZhbHVlOiBzdHIgfCBOb25lKSAtPiBOb25lOlxuICAgICAgICBpZiB2YWx1ZSA9PSBcImNoYW5nZXRoaXNcIjpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAoXG4gICAgICAgICAgICAgICAgZidUaGUgdmFsdWUgb2Yge3Zhcl9uYW1lfSBpcyBcImNoYW5nZXRoaXNcIiwgJ1xuICAgICAgICAgICAgICAgIFwiZm9yIHNlY3VyaXR5LCBwbGVhc2UgY2hhbmdlIGl0LCBhdCBsZWFzdCBmb3IgZGVwbG95bWVudHMuXCJcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGlmIHNlbGYuRU5WSVJPTk1FTlQgPT0gXCJsb2NhbFwiOlxuICAgICAgICAgICAgICAgIHdhcm5pbmdzLndhcm4obWVzc2FnZSwgc3RhY2tsZXZlbD0xKVxuICAgICAgICAgICAgZWxzZTpcbiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKG1lc3NhZ2UpXG5cbiAgICBAbW9kZWxfdmFsaWRhdG9yKG1vZGU9XCJhZnRlclwiKVxuICAgIGRlZiBfZW5mb3JjZV9ub25fZGVmYXVsdF9zZWNyZXRzKHNlbGYpIC0+IFNlbGY6XG4gICAgICAgIHNlbGYuX2NoZWNrX2RlZmF1bHRfc2VjcmV0KFwiU0VDUkVUX0tFWVwiLCBzZWxmLlNFQ1JFVF9LRVkpXG4gICAgICAgIHNlbGYuX2NoZWNrX2RlZmF1bHRfc2VjcmV0KFwiUE9TVEdSRVNfUEFTU1dPUkRcIiwgc2VsZi5QT1NUR1JFU19QQVNTV09SRClcbiAgICAgICAgc2VsZi5fY2hlY2tfZGVmYXVsdF9zZWNyZXQoXG4gICAgICAgICAgICBcIkZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRFwiLCBzZWxmLkZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRFxuICAgICAgICApXG5cbiAgICAgICAgcmV0dXJuIHNlbGZcblxuXG5zZXR0aW5ncyA9IFNldHRpbmdzKCkgICMgdHlwZTogaWdub3JlXG4uLi5cblBhdGg6IC5lbnZcbiMgRG9tYWluXG4jIFRoaXMgd291bGQgYmUgc2V0IHRvIHRoZSBwcm9kdWN0aW9uIGRvbWFpbiB3aXRoIGFuIGVudiB2YXIgb24gZGVwbG95bWVudFxuIyB1c2VkIGJ5IFRyYWVmaWsgdG8gdHJhbnNtaXQgdHJhZmZpYyBhbmQgYXFjdWlyZSBUTFMgY2VydGlmaWNhdGVzXG5ET01BSU49bG9jYWxob3N0XG4jIFRvIHRlc3QgdGhlIGxvY2FsIFRyYWVmaWsgY29uZmlnXG4jIERPTUFJTj1sb2NhbGhvc3QudGlhbmdvbG8uY29tXG5cbiMgVXNlZCBieSB0aGUgYmFja2VuZCB0byBnZW5lcmF0ZSBsaW5rcyBpbiBlbWFpbHMgdG8gdGhlIGZyb250ZW5kXG5GUk9OVEVORF9IT1NUPWh0dHA6Ly9sb2NhbGhvc3Q6NTE3M1xuIyBJbiBzdGFnaW5nIGFuZCBwcm9kdWN0aW9uLCBzZXQgdGhpcyBlbnYgdmFyIHRvIHRoZSBmcm9udGVuZCBob3N0LCBlLmcuXG4jIEZST05URU5EX0hPU1Q9aHR0cHM6Ly9kYXNoYm9hcmQuZXhhbXBsZS5jb21cblxuIyBFbnZpcm9ubWVudDogbG9jYWwsIHN0YWdpbmcsIHByb2R1Y3Rpb25cbkVOVklST05NRU5UPWxvY2FsXG5cblBST0pFQ1RfTkFNRT1cIlBhcmVudGluZyBBc3Npc3RhbnRcIlxuU1RBQ0tfTkFNRT1mdWxsLXN0YWNrLWZhc3RhcGktcHJvamVjdFxuXG4jIEJhY2tlbmRcbkJBQ0tFTkRfQ09SU19PUklHSU5TPVwiaHR0cDovL2xvY2FsaG9zdCxodHRwOi8vbG9jYWxob3N0OjUxNzMsaHR0cHM6Ly9sb2NhbGhvc3QsaHR0cHM6Ly9sb2NhbGhvc3Q6NTE3MyxodHRwOi8vbG9jYWxob3N0LnRpYW5nb2xvLmNvbVwiXG5TRUNSRVRfS0VZPUJhVHNaMDJPV3ZZSnpCUlNrQ2ZIX2NiNzF2ejJpLW1Uck9CbTYzM2xHbUlcbkZJUlNUX1NVUEVSVVNFUj0xMzIxNjY5ODk4N0AxNjMuY29tXG5GSVJTVF9TVVBFUlVTRVJfUEFTU1dPUkQ9R3Vhbm1vITAxXG5cbiMgRW1haWxzXG5TTVRQX0hPU1Q9XG5TTVRQX1VTRVI9XG5TTVRQX1BBU1NXT1JEPVxuRU1BSUxTX0ZST01fRU1BSUw9aW5mb0BleGFtcGxlLmNvbVxuU01UUF9UTFM9VHJ1ZVxuU01UUF9TU0w9RmFsc2VcblNNVFBfUE9SVD01ODdcblxuIyBQb3N0Z3Jlc1xuUE9TVEdSRVNfU0VSVkVSPWF3cy0wLWFwLW5vcnRoZWFzdC0xLnBvb2xlci5zdXBhYmFzZS5jb21cblBPU1RHUkVTX1BPUlQ9NjU0M1xuUE9TVEdSRVNfREI9cG9zdGdyZXNcblBPU1RHUkVTX1VTRVI9cG9zdGdyZXMucHZhZXRjcGZ1aGV2Z2VtY3Foc2hcblBPU1RHUkVTX1BBU1NXT1JEPUd1YW5tbyEwMVxuXG5TRU5UUllfRFNOPVxuXG4jIExMTSBTZXR0aW5nc1xuT1BFTlJPVVRFUl9BUElfS0VZPXNrLW9yLXYxLTk4MTg0NGQ4MWNiMTAwNGUwMWNlZTcyZjYzYjdiYmJlNGM5MGFlZWQwZjRhODc0ZjMwZDg1MDFiNWQwMGI2YTVcbkRFRkFVTFRfTExNX01PREVMPWRlZXBzZWVrL2RlZXBzZWVrLWNoYXQtdjMtMDMyNDpmcmVlXG5PUEVOUk9VVEVSX0JBU0VfVVJMPWh0dHBzOi8vb3BlbnJvdXRlci5haS9hcGkvdjFcblxuIyBDb25maWd1cmUgdGhlc2Ugd2l0aCB5b3VyIG93biBEb2NrZXIgcmVnaXN0cnkgaW1hZ2VzXG5ET0NLRVJfSU1BR0VfQkFDS0VORD1iYWNrZW5kXG5ET0NLRVJfSU1BR0VfRlJPTlRFTkQ9ZnJvbnRlbmRcbi4uLlxuUGF0aDogZnJvbnRlbmQvdGVzdHMvY29uZmlnLnRzXG5pbXBvcnQgcGF0aCBmcm9tIFwibm9kZTpwYXRoXCJcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tIFwibm9kZTp1cmxcIlxuaW1wb3J0IGRvdGVudiBmcm9tIFwiZG90ZW52XCJcblxuY29uc3QgX19maWxlbmFtZSA9IGZpbGVVUkxUb1BhdGgoaW1wb3J0Lm1ldGEudXJsKVxuY29uc3QgX19kaXJuYW1lID0gcGF0aC5kaXJuYW1lKF9fZmlsZW5hbWUpXG5cbmRvdGVudi5jb25maWcoeyBwYXRoOiBwYXRoLmpvaW4oX19kaXJuYW1lLCBcIi4uLy4uLy5lbnZcIikgfSlcblxuY29uc3QgeyBGSVJTVF9TVVBFUlVTRVIsIEZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRCB9ID0gcHJvY2Vzcy5lbnZcblxuaWYgKHR5cGVvZiBGSVJTVF9TVVBFUlVTRVIgIT09IFwic3RyaW5nXCIpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwiRW52aXJvbm1lbnQgdmFyaWFibGUgRklSU1RfU1VQRVJVU0VSIGlzIHVuZGVmaW5lZFwiKVxufVxuXG5pZiAodHlwZW9mIEZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRCAhPT0gXCJzdHJpbmdcIikge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJFbnZpcm9ubWVudCB2YXJpYWJsZSBGSVJTVF9TVVBFUlVTRVJfUEFTU1dPUkQgaXMgdW5kZWZpbmVkXCIpXG59XG5cbmV4cG9ydCBjb25zdCBmaXJzdFN1cGVydXNlciA9IEZJUlNUX1NVUEVSVVNFUiBhcyBzdHJpbmdcbmV4cG9ydCBjb25zdCBmaXJzdFN1cGVydXNlclBhc3N3b3JkID0gRklSU1RfU1VQRVJVU0VSX1BBU1NXT1JEIGFzIHN0cmluZ1xuLi4uXG5QYXRoOiBkb2NrZXItY29tcG9zZS5vdmVycmlkZS55bWxcbi4uLlxuXG4gIGJhY2tlbmQ6XG4gICAgcmVzdGFydDogXCJub1wiXG4gICAgcG9ydHM6XG4gICAgICAtIFwiODAwMDo4MDAwXCJcbiAgICBidWlsZDpcbiAgICAgIGNvbnRleHQ6IC4vYmFja2VuZFxuICAgICMgY29tbWFuZDogc2xlZXAgaW5maW5pdHkgICMgSW5maW5pdGUgbG9vcCB0byBrZWVwIGNvbnRhaW5lciBhbGl2ZSBkb2luZyBub3RoaW5nXG4gICAgY29tbWFuZDpcbiAgICAgIC0gZmFzdGFwaVxuICAgICAgLSBydW5cbiAgICAgIC0gLS1yZWxvYWRcbiAgICAgIC0gXCJhcHAvbWFpbi5weVwiXG4gICAgZGV2ZWxvcDpcbiAgICAgIHdhdGNoOlxuICAgICAgICAtIHBhdGg6IC4vYmFja2VuZFxuICAgICAgICAgIGFjdGlvbjogc3luY1xuICAgICAgICAgIHRhcmdldDogL2FwcFxuICAgICAgICAgIGlnbm9yZTpcbiAgICAgICAgICAgIC0gLi9iYWNrZW5kLy52ZW52XG4gICAgICAgICAgICAtIC52ZW52XG4gICAgICAgIC0gcGF0aDogLi9iYWNrZW5kL3B5cHJvamVjdC50b21sXG4gICAgICAgICAgYWN0aW9uOiByZWJ1aWxkXG4gICAgIyBUT0RPOiByZW1vdmUgb25jZSBjb3ZlcmFnZSBpcyBkb25lIGxvY2FsbHlcbiAgICB2b2x1bWVzOlxuICAgICAgLSAuL2JhY2tlbmQvaHRtbGNvdjovYXBwL2h0bWxjb3ZcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgIFNNVFBfSE9TVDogXCJtYWlsY2F0Y2hlclwiXG4gICAgICBTTVRQX1BPUlQ6IFwiMTAyNVwiXG4gICAgICBTTVRQX1RMUzogXCJmYWxzZVwiXG4gICAgICBFTUFJTFNfRlJPTV9FTUFJTDogXCJub3JlcGx5QGV4YW1wbGUuY29tXCJcblxuICBtYWlsY2F0Y2hlcjpcbiAgICBpbWFnZTogc2NoaWNrbGluZy9tYWlsY2F0Y2hlclxuICAgIHBvcnRzOlxuICAgICAgLSBcIjEwODA6MTA4MFwiXG4gICAgICAtIFwiMTAyNToxMDI1XCJcblxuICBmcm9udGVuZDpcbiAgICByZXN0YXJ0OiBcIm5vXCJcbiAgICBwb3J0czpcbiAgICAgIC0gXCI1MTczOjgwXCJcbiAgICBidWlsZDpcbiAgICAgIGNvbnRleHQ6IC4vZnJvbnRlbmRcbiAgICAgIGFyZ3M6XG4gICAgICAgIC0gVklURV9BUElfVVJMPWh0dHA6Ly9sb2NhbGhvc3Q6ODAwMFxuICAgICAgICAtIE5PREVfRU5WPWRldmVsb3BtZW50XG5cbiAgcGxheXdyaWdodDpcbiAgICBidWlsZDpcbiAgICAgIGNvbnRleHQ6IC4vZnJvbnRlbmRcbiAgICAgIGRvY2tlcmZpbGU6IERvY2tlcmZpbGUucGxheXdyaWdodFxuICAgICAgYXJnczpcbiAgICAgICAgLSBWSVRFX0FQSV9VUkw9aHR0cDovL2JhY2tlbmQ6ODAwMFxuICAgICAgICAtIE5PREVfRU5WPXByb2R1Y3Rpb25cbiAgICBpcGM6IGhvc3RcbiAgICBkZXBlbmRzX29uOlxuICAgICAgLSBiYWNrZW5kXG4gICAgICAtIG1haWxjYXRjaGVyXG4gICAgZW52X2ZpbGU6XG4gICAgICAtIC5lbnZcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgIC0gVklURV9BUElfVVJMPWh0dHA6Ly9iYWNrZW5kOjgwMDBcbiAgICAgIC0gTUFJTENBVENIRVJfSE9TVD1odHRwOi8vbWFpbGNhdGNoZXI6MTA4MFxuICAgICAgIyBGb3IgdGhlIHJlcG9ydHMgd2hlbiBydW4gbG9jYWxseVxuICAgICAgLSBQTEFZV1JJR0hUX0hUTUxfSE9TVD0wLjAuMC4wXG4gICAgICAtIENJPSR7Q0l9XG4gICAgdm9sdW1lczpcbiAgICAgIC0gLi9mcm9udGVuZC9ibG9iLXJlcG9ydDovYXBwL2Jsb2ItcmVwb3J0XG4gICAgICAtIC4vZnJvbnRlbmQvdGVzdC1yZXN1bHRzOi9hcHAvdGVzdC1yZXN1bHRzXG4gICAgcG9ydHM6XG4gICAgICAtIDkzMjM6OTMyM1xuXG5uZXR3b3JrczpcbiAgdHJhZWZpay1wdWJsaWM6XG4gICAgIyBGb3IgbG9jYWwgZGV2LCBkb24ndCBleHBlY3QgYW4gZXh0ZXJuYWwgVHJhZWZpayBuZXR3b3JrXG4gICAgZXh0ZXJuYWw6IGZhbHNlXG4uLi5cblBhdGg6IGZyb250ZW5kLy5lbnZcblZJVEVfQVBJX1VSTD1odHRwOi8vbG9jYWxob3N0OjgwMDBcbk1BSUxDQVRDSEVSX0hPU1Q9aHR0cDovL2xvY2FsaG9zdDoxMDgwXG4uLi5cblBhdGg6IC5jb3BpZXIvdXBkYXRlX2RvdGVudi5weVxuLi4uXG5cbiMgVXBkYXRlIHRoZSAuZW52IGZpbGUgd2l0aCB0aGUgYW5zd2VycyBmcm9tIHRoZSAuY29waWVyLWFuc3dlcnMueW1sIGZpbGVcbiMgd2l0aG91dCB1c2luZyBKaW5qYTIgdGVtcGxhdGVzIGluIHRoZSAuZW52IGZpbGUsIHRoaXMgd2F5IHRoZSBjb2RlIHdvcmtzIGFzIGlzXG4jIHdpdGhvdXQgbmVlZGluZyBDb3BpZXIsIGJ1dCBpZiBDb3BpZXIgaXMgdXNlZCwgdGhlIC5lbnYgZmlsZSB3aWxsIGJlIHVwZGF0ZWRcbnJvb3RfcGF0aCA9IFBhdGgoX19maWxlX18pLnBhcmVudC5wYXJlbnRcbmFuc3dlcnNfcGF0aCA9IFBhdGgoX19maWxlX18pLnBhcmVudCAvIFwiLmNvcGllci1hbnN3ZXJzLnltbFwiXG5hbnN3ZXJzID0ganNvbi5sb2FkcyhhbnN3ZXJzX3BhdGgucmVhZF90ZXh0KCkpXG5lbnZfcGF0aCA9IHJvb3RfcGF0aCAvIFwiLmVudlwiXG5lbnZfY29udGVudCA9IGVudl9wYXRoLnJlYWRfdGV4dCgpXG5saW5lcyA9IFtdXG5mb3IgbGluZSBpbiBlbnZfY29udGVudC5zcGxpdGxpbmVzKCk6XG4gICAgZm9yIGtleSwgdmFsdWUgaW4gYW5zd2Vycy5pdGVtcygpOlxuICAgICAgICB1cHBlcl9rZXkgPSBrZXkudXBwZXIoKVxuICAgICAgICBpZiBsaW5lLnN0YXJ0c3dpdGgoZlwie3VwcGVyX2tleX09XCIpOlxuICAgICAgICAgICAgaWYgXCIgXCIgaW4gdmFsdWU6XG4gICAgICAgICAgICAgICAgY29udGVudCA9IGZcInt1cHBlcl9rZXl9PXt2YWx1ZSFyfVwiXG4gICAgICAgICAgICBlbHNlOlxuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBmXCJ7dXBwZXJfa2V5fT17dmFsdWV9XCJcbiAgICAgICAgICAgIG5ld19saW5lID0gbGluZS5yZXBsYWNlKGxpbmUsIGNvbnRlbnQpXG4gICAgICAgICAgICBsaW5lcy5hcHBlbmQobmV3X2xpbmUpXG4gICAgICAgICAgICBicmVha1xuICAgIGVsc2U6XG4uLi5cblBhdGg6IGRvYy9GdWxsLVN0YWNrLUZhc3RBUEktVGVtcGxhdGXlrabkuaDmiYvlhowubWRcbi4uLlxuXG5hcHAuaW5jbHVkZV9yb3V0ZXIoYXBpX3JvdXRlciwgcHJlZml4PXNldHRpbmdzLkFQSV9WMV9TVFIpXG5gYGBcblxuIyMjIOmFjee9rueuoeeQhlxuXG7phY3nva7pgJrov4cgYGJhY2tlbmQvYXBwL2NvcmUvY29uZmlnLnB5YCDnrqHnkIbvvIzkvb/nlKggUHlkYW50aWMg55qEIGBCYXNlU2V0dGluZ3NgIOexu++8mlxuXG5gYGBweXRob25cbiMgYmFja2VuZC9hcHAvY29yZS9jb25maWcucHlcbmZyb20gcHlkYW50aWNfc2V0dGluZ3MgaW1wb3J0IEJhc2VTZXR0aW5nc1xuXG5jbGFzcyBTZXR0aW5ncyhCYXNlU2V0dGluZ3MpOlxuICAgIEFQSV9WMV9TVFI6IHN0ciA9IFwiL2FwaS92MVwiXG4gICAgU0VDUkVUX0tFWTogc3RyXG4gICAgIyDlhbbku5bphY3nva4uLi5cblxuc2V0dGluZ3MgPSBTZXR0aW5ncygpXG5gYGBcblxuIyMjIOaVsOaNruW6k+aooeWei1xuXG7mlbDmja7lupPmqKHlnovkvb/nlKggU1FMTW9kZWwg5a6a5LmJ77yM5a6D57uT5ZCI5LqGIFNRTEFsY2hlbXkg5ZKMIFB5ZGFudGlj77yaXG5cbmBgYHB5dGhvblxuIyBiYWNrZW5kL2FwcC9tb2RlbHMucHlcbmZyb20gc3FsbW9kZWwgaW1wb3J0IEZpZWxkLCBTUUxNb2RlbFxuaW1wb3J0IHV1aWRcblxuY2xhc3MgVXNlcihTUUxNb2RlbCwgdGFibGU9VHJ1ZSk6XG4gICAgaWQ6IHV1aWQuVVVJRCA9IEZpZWxkKGRlZmF1bHRfZmFjdG9yeT11dWlkLnV1aWQ0LCBwcmltYXJ5X2tleT1UcnVlKVxuICAgIGVtYWlsOiBzdHIgPSBGaWVsZCh1bmlxdWU9VHJ1ZSwgaW5kZXg9VHJ1ZSlcbiAgICBoYXNoZWRfcGFzc3dvcmQ6IHN0clxuICAgIGlzX2FjdGl2ZTogYm9vbCA9IFRydWVcbiAgICBpc19zdXBlcnVzZXI6IGJvb2wgPSBGYWxzZVxuICAgICMg5YW25LuW5a2X5q61Li4uXG5gYGBcbi4uLlxuYGBgXG5cbiMjIDYuIOW8gOWPkeeOr+Wig+mFjee9rlxuXG4jIyMg5pys5Zyw5byA5Y+R546v5aKDXG5cbkZ1bGwtU3RhY2stRmFzdEFQSS1UZW1wbGF0ZSDkvb/nlKggRG9ja2VyIENvbXBvc2Ug6K6+572u5pys5Zyw5byA5Y+R546v5aKD77yaXG5cbmBgYGJhc2hcbiMg5ZCv5Yqo5byA5Y+R546v5aKDXG5kb2NrZXIgY29tcG9zZSB3YXRjaFxuYGBgXG5cbui/meWwhuWQr+WKqOS7peS4i+acjeWKoe+8mlxuXG4tIOWQjuerryBBUEkgKGh0dHA6Ly9sb2NhbGhvc3Q6ODAwMClcbi0g5YmN56uv5byA5Y+R5pyN5Yqh5ZmoIChodHRwOi8vbG9jYWxob3N0OjUxNzMpXG4tIFBvc3RncmVTUUwg5pWw5o2u5bqTXG4tIEFkbWluZXIg5pWw5o2u5bqT566h55CG5bel5YW3IChodHRwOi8vbG9jYWxob3N0OjgwODApXG4tIFRyYWVmaWsg5Luj55CGIChodHRwOi8vbG9jYWxob3N0OjgwOTApXG4tIE1haWxDYXRjaGVyIOmCruS7tua1i+ivleW3peWFtyAoaHR0cDovL2xvY2FsaG9zdDoxMDgwKVxuXG4jIyMg546v5aKD5Y+Y6YePXG5cbuW8gOWPkeeOr+Wig+eahOmFjee9ruWtmOWCqOWcqCBgLmVudmAg5paH5Lu25Lit77yaXG5cbmBgYFxuIyAuZW52XG5ET01BSU49bG9jYWxob3N0XG5TVEFDS19OQU1FPWZhc3RhcGktcHJvamVjdFxuUFJPSkVDVF9OQU1FPUZhc3RBUEkgUHJvamVjdFxuU0VDUkVUX0tFWT1jaGFuZ2V0aGlzXG5GSVJTVF9TVVBFUlVTRVI9YWRtaW5AZXhhbXBsZS5jb21cbkZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRD1jaGFuZ2V0aGlzXG5QT1NUR1JFU19QQVNTV09SRD1jaGFuZ2V0aGlzXG5QT1NUR1JFU19TRVJWRVI9ZGJcblBPU1RHUkVTX1BPUlQ9NTQzMlxuUE9TVEdSRVNfVVNFUj1wb3N0Z3Jlc1xuUE9TVEdSRVNfREI9YXBwXG5gYGBcblxuIyMjIOWJjeerr+W8gOWPkVxuXG7liY3nq6/lvIDlj5Hlj6/ku6XlnKggRG9ja2VyIOWuueWZqOWGhei/m+ihjO+8jOS5n+WPr+S7peWcqOacrOWcsOi/m+ihjO+8mlxuXG5gYGBiYXNoXG4jIOacrOWcsOWJjeerr+W8gOWPkVxuY2QgZnJvbnRlbmRcbm5wbSBpbnN0YWxsXG5ucG0gcnVuIGRldlxuYGBgXG5cbiMjIyDlkI7nq6/lvIDlj5Fcblxu5ZCO56uv5byA5Y+R5ZCM5qC35Y+v5Lul5ZyoIERvY2tlciDlrrnlmajlhoXov5vooYzvvIzkuZ/lj6/ku6XlnKjmnKzlnLDov5vooYzvvJpcblxuYGBgYmFzaFxuIyDmnKzlnLDlkI7nq6/lvIDlj5FcbmNkIGJhY2tlbmRcbnV2IHN5bmNcbnNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGVcbmZhc3RhcGkgZGV2IGFwcC9tYWluLnB5XG5gYGBcblxuIyMgNy4gRG9ja2VyIOS4juWuueWZqOWMllxuXG4jIyMgRG9ja2VyIENvbXBvc2Ug6YWN572uXG5cbumhueebruS9v+eUqCBEb2NrZXIgQ29tcG9zZSDnrqHnkIblrrnlmajvvJpcblxuYGBgeWFtbFxuIyBkb2NrZXItY29tcG9zZS55bWxcbnZlcnNpb246ICczLjgnXG5zZXJ2aWNlczpcbiAgYmFja2VuZDpcbiAgICBpbWFnZTogJyR7RE9DS0VSX0lNQUdFX0JBQ0tFTkR9OiR7VEFHLWxhdGVzdH0nXG4gICAgZGVwZW5kc19vbjpcbiAgICAgIC0gZGJcbiAgICBlbnZfZmlsZTpcbiAgICAgIC0gLmVudlxuICAgIGVudmlyb25tZW50OlxuICAgICAgLSBET01BSU49JHtET01BSU59XG4gICAgICAtIEZST05URU5EX0hPU1Q9JHtGUk9OVEVORF9IT1NUfVxuICAgICAgIyDlhbbku5bnjq/looPlj5jph48uLi5cblxuICBmcm9udGVuZDpcbiAgICBpbWFnZTogJyR7RE9DS0VSX0lNQUdFX0ZST05URU5EfToke1RBRy1sYXRlc3R9J1xuICAgIGVudl9maWxlOlxuICAgICAgLSAuZW52XG4gICAgZW52aXJvbm1lbnQ6XG4gICAgICAtIFZJVEVfQVBJX1VSTD0ke0ZST05URU5EX0hPU1R9XG5cbiAgZGI6XG4gICAgaW1hZ2U6IHBvc3RncmVzOjE1XG4gICAgdm9sdW1lczpcbiAgICAgIC0gYXBwLWRiLWRhdGE6L3Zhci9saWIvcG9zdGdyZXNxbC9kYXRhL3BnZGF0YVxuICAgIGVudl9maWxlOlxuICAgICAgLSAuZW52XG4gICAgZW52aXJvbm1lbnQ6XG4gICAgICAtIFBHREFUQT0vdmFyL2xpYi9wb3N0Z3Jlc3FsL2RhdGEvcGdkYXRhXG4gICAgICAjIOWFtuS7lueOr+Wig+WPmOmHjy4uLlxuXG52b2x1bWVzOlxuICBhcHAtZGItZGF0YTpcbmBgYFxuXG4jIyMg5byA5Y+R546v5aKD6KaG55uWXG5cbmBkb2NrZXItY29tcG9zZS5vdmVycmlkZS55bWxgIOaWh+S7tuWMheWQq+W8gOWPkeeOr+Wig+eJueWumueahOmFjee9ru+8mlxuXG5gYGB5YW1sXG4jIGRvY2tlci1jb21wb3NlLm92ZXJyaWRlLnltbFxudmVyc2lvbjogJzMuOCdcbnNlcnZpY2VzOlxuICBiYWNrZW5kOlxuICAgIGJ1aWxkOlxuICAgICAgY29udGV4dDogLi9iYWNrZW5kXG4gICAgICBkb2NrZXJmaWxlOiBEb2NrZXJmaWxlXG4gICAgdm9sdW1lczpcbiAgICAgIC0gLi9iYWNrZW5kL2FwcDovYXBwL2FwcFxuICAgIGNvbW1hbmQ6IGZhc3RhcGkgcnVuIC0tcmVsb2FkIGFwcC9tYWluLnB5XG5cbiAgZnJvbnRlbmQ6XG4gICAgYnVpbGQ6XG4gICAgICBjb250ZXh0OiAuL2Zyb250ZW5kXG4gICAgICBkb2NrZXJmaWxlOiBEb2NrZXJmaWxlXG4gICAgdm9sdW1lczpcbiAgICAgIC0gLi9mcm9udGVuZDovYXBwXG4gICAgICAtIC9hcHAvbm9kZV9tb2R1bGVzXG4gICAgY29tbWFuZDogbnBtIHJ1biBkZXZcblxuICAjIOWFtuS7luacjeWKoS4uLlxuYGBgXG5cbiMjIDguIOaVsOaNruW6k+S4jui/geenu1xuXG4jIyMg5pWw5o2u5bqT6K6+572uXG5cbumhueebruS9v+eUqCBQb3N0Z3JlU1FMIOS9nOS4uuaVsOaNruW6k++8jOmAmui/hyBTUUxNb2RlbCDov5vooYwgT1JNIOaTjeS9nO+8mlxuXG5gYGBweXRob25cbiMgYmFja2VuZC9hcHAvY29yZS9kYi5weVxuZnJvbSBzcWxtb2RlbCBpbXBvcnQgY3JlYXRlX2VuZ2luZSwgU1FMTW9kZWwsIFNlc3Npb25cbmZyb20gYXBwLmNvcmUuY29uZmlnIGltcG9ydCBzZXR0aW5nc1xuXG5lbmdpbmUgPSBjcmVhdGVfZW5naW5lKHNldHRpbmdzLlNRTEFMQ0hFTVlfREFUQUJBU0VfVVJJKVxuXG5kZWYgZ2V0X3Nlc3Npb24oKTpcbiAgICB3aXRoIFNlc3Npb24oZW5naW5lKSBhcyBzZXNzaW9uOlxuICAgICAgICB5aWVsZCBzZXNzaW9uXG5gYGBcbi4uLlxuUGF0aDogZG9ja2VyLWNvbXBvc2UueW1sXG5zZXJ2aWNlczpcblxuICBkYjpcbiAgICBpbWFnZTogcG9zdGdyZXM6MTJcbiAgICByZXN0YXJ0OiBhbHdheXNcbiAgICBoZWFsdGhjaGVjazpcbiAgICAgIHRlc3Q6IFtcIkNNRC1TSEVMTFwiLCBcInBnX2lzcmVhZHkgLVUgJHtQT1NUR1JFU19VU0VSfSAtZCAke1BPU1RHUkVTX0RCfVwiXVxuICAgICAgaW50ZXJ2YWw6IDEwc1xuICAgICAgcmV0cmllczogNVxuICAgICAgc3RhcnRfcGVyaW9kOiAzMHNcbiAgICAgIHRpbWVvdXQ6IDEwc1xuICAgIHZvbHVtZXM6XG4gICAgICAtIGFwcC1kYi1kYXRhOi92YXIvbGliL3Bvc3RncmVzcWwvZGF0YS9wZ2RhdGFcbiAgICBlbnZfZmlsZTpcbiAgICAgIC0gLmVudlxuICAgIGVudmlyb25tZW50OlxuICAgICAgLSBQR0RBVEE9L3Zhci9saWIvcG9zdGdyZXNxbC9kYXRhL3BnZGF0YVxuICAgICAgLSBQT1NUR1JFU19QQVNTV09SRD0ke1BPU1RHUkVTX1BBU1NXT1JEP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIFBPU1RHUkVTX1VTRVI9JHtQT1NUR1JFU19VU0VSP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIFBPU1RHUkVTX0RCPSR7UE9TVEdSRVNfREI/VmFyaWFibGUgbm90IHNldH1cbi4uLlxuXG4gIGJhY2tlbmQ6XG4gICAgaW1hZ2U6ICcke0RPQ0tFUl9JTUFHRV9CQUNLRU5EP1ZhcmlhYmxlIG5vdCBzZXR9OiR7VEFHLWxhdGVzdH0nXG4gICAgcmVzdGFydDogYWx3YXlzXG4gICAgbmV0d29ya3M6XG4gICAgICAtIHRyYWVmaWstcHVibGljXG4gICAgICAtIGRlZmF1bHRcbiAgICBkZXBlbmRzX29uOlxuICAgICAgZGI6XG4gICAgICAgIGNvbmRpdGlvbjogc2VydmljZV9oZWFsdGh5XG4gICAgICAgIHJlc3RhcnQ6IHRydWVcbiAgICAgIHByZXN0YXJ0OlxuICAgICAgICBjb25kaXRpb246IHNlcnZpY2VfY29tcGxldGVkX3N1Y2Nlc3NmdWxseVxuICAgIGVudl9maWxlOlxuICAgICAgLSAuZW52XG4gICAgZW52aXJvbm1lbnQ6XG4gICAgICAtIERPTUFJTj0ke0RPTUFJTn1cbiAgICAgIC0gRlJPTlRFTkRfSE9TVD0ke0ZST05URU5EX0hPU1Q/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gRU5WSVJPTk1FTlQ9JHtFTlZJUk9OTUVOVH1cbiAgICAgIC0gQkFDS0VORF9DT1JTX09SSUdJTlM9JHtCQUNLRU5EX0NPUlNfT1JJR0lOU31cbiAgICAgIC0gU0VDUkVUX0tFWT0ke1NFQ1JFVF9LRVk/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gRklSU1RfU1VQRVJVU0VSPSR7RklSU1RfU1VQRVJVU0VSP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIEZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRD0ke0ZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRD9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBTTVRQX0hPU1Q9JHtTTVRQX0hPU1R9XG4gICAgICAtIFNNVFBfVVNFUj0ke1NNVFBfVVNFUn1cbiAgICAgIC0gU01UUF9QQVNTV09SRD0ke1NNVFBfUEFTU1dPUkR9XG4gICAgICAtIEVNQUlMU19GUk9NX0VNQUlMPSR7RU1BSUxTX0ZST01fRU1BSUx9XG4gICAgICAtIFBPU1RHUkVTX1NFUlZFUj1kYlxuICAgICAgLSBQT1NUR1JFU19QT1JUPSR7UE9TVEdSRVNfUE9SVH1cbi4uLlxuXG4gIGZyb250ZW5kOlxuICAgIGltYWdlOiAnJHtET0NLRVJfSU1BR0VfRlJPTlRFTkQ/VmFyaWFibGUgbm90IHNldH06JHtUQUctbGF0ZXN0fSdcbiAgICByZXN0YXJ0OiBhbHdheXNcbiAgICBuZXR3b3JrczpcbiAgICAgIC0gdHJhZWZpay1wdWJsaWNcbiAgICAgIC0gZGVmYXVsdFxuICAgIGJ1aWxkOlxuICAgICAgY29udGV4dDogLi9mcm9udGVuZFxuICAgICAgYXJnczpcbiAgICAgICAgLSBWSVRFX0FQSV9VUkw9aHR0cHM6Ly9hcGkuJHtET01BSU4/VmFyaWFibGUgbm90IHNldH1cbiAgICAgICAgLSBOT0RFX0VOVj1wcm9kdWN0aW9uXG4gICAgbGFiZWxzOlxuICAgICAgLSB0cmFlZmlrLmVuYWJsZT10cnVlXG4gICAgICAtIHRyYWVmaWsuZG9ja2VyLm5ldHdvcms9dHJhZWZpay1wdWJsaWNcbiAgICAgIC0gdHJhZWZpay5jb25zdHJhaW50LWxhYmVsPXRyYWVmaWstcHVibGljXG5cbiAgICAgIC0gdHJhZWZpay5odHRwLnNlcnZpY2VzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1mcm9udGVuZC5sb2FkYmFsYW5jZXIuc2VydmVyLnBvcnQ9ODBcblxuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tZnJvbnRlbmQtaHR0cC5ydWxlPUhvc3QoYGRhc2hib2FyZC4ke0RPTUFJTj9WYXJpYWJsZSBub3Qgc2V0fWApXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1mcm9udGVuZC1odHRwLmVudHJ5cG9pbnRzPWh0dHBcbi4uLlxuUGF0aDogZnJvbnRlbmQvRG9ja2VyZmlsZVxuIyBTdGFnZSAwLCBcImJ1aWxkLXN0YWdlXCIsIGJhc2VkIG9uIE5vZGUuanMsIHRvIGJ1aWxkIGFuZCBjb21waWxlIHRoZSBmcm9udGVuZFxuRlJPTSBub2RlOjIwIEFTIGJ1aWxkLXN0YWdlXG5cbldPUktESVIgL2FwcFxuXG5DT1BZIHBhY2thZ2UqLmpzb24gL2FwcC9cblxuUlVOIG5wbSBpbnN0YWxsXG5cbkNPUFkgLi8gL2FwcC9cblxuQVJHIFZJVEVfQVBJX1VSTD0ke1ZJVEVfQVBJX1VSTH1cblxuUlVOIG5wbSBydW4gYnVpbGRcblxuXG4jIFN0YWdlIDEsIGJhc2VkIG9uIE5naW54LCB0byBoYXZlIG9ubHkgdGhlIGNvbXBpbGVkIGFwcCwgcmVhZHkgZm9yIHByb2R1Y3Rpb24gd2l0aCBOZ2lueFxuRlJPTSBuZ2lueDoxXG5cbkNPUFkgLS1mcm9tPWJ1aWxkLXN0YWdlIC9hcHAvZGlzdC8gL3Vzci9zaGFyZS9uZ2lueC9odG1sXG5cbkNPUFkgLi9uZ2lueC5jb25mIC9ldGMvbmdpbngvY29uZi5kL2RlZmF1bHQuY29uZlxuQ09QWSAuL25naW54LWJhY2tlbmQtbm90LWZvdW5kLmNvbmYgL2V0Yy9uZ2lueC9leHRyYS1jb25mLmQvYmFja2VuZC1ub3QtZm91bmQuY29uZlxuLi4uXG5QYXRoOiBmcm9udGVuZC9SRUFETUUubWRcbi4uLlxuXG4qIERvd25sb2FkIHRoZSBPcGVuQVBJIEpTT04gZmlsZSBmcm9tIGBodHRwOi8vbG9jYWxob3N0L2FwaS92MS9vcGVuYXBpLmpzb25gIGFuZCBjb3B5IGl0IHRvIGEgbmV3IGZpbGUgYG9wZW5hcGkuanNvbmAgYXQgdGhlIHJvb3Qgb2YgdGhlIGBmcm9udGVuZGAgZGlyZWN0b3J5LlxuXG4qIFRvIGdlbmVyYXRlIHRoZSBmcm9udGVuZCBjbGllbnQsIHJ1bjpcblxuYGBgYmFzaFxubnBtIHJ1biBnZW5lcmF0ZS1jbGllbnRcbmBgYFxuXG4qIENvbW1pdCB0aGUgY2hhbmdlcy5cblxuTm90aWNlIHRoYXQgZXZlcnl0aW1lIHRoZSBiYWNrZW5kIGNoYW5nZXMgKGNoYW5naW5nIHRoZSBPcGVuQVBJIHNjaGVtYSksIHlvdSBzaG91bGQgZm9sbG93IHRoZXNlIHN0ZXBzIGFnYWluIHRvIHVwZGF0ZSB0aGUgZnJvbnRlbmQgY2xpZW50LlxuXG4jIyBVc2luZyBhIFJlbW90ZSBBUElcblxuSWYgeW91IHdhbnQgdG8gdXNlIGEgcmVtb3RlIEFQSSwgeW91IGNhbiBzZXQgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIGBWSVRFX0FQSV9VUkxgIHRvIHRoZSBVUkwgb2YgdGhlIHJlbW90ZSBBUEkuIEZvciBleGFtcGxlLCB5b3UgY2FuIHNldCBpdCBpbiB0aGUgYGZyb250ZW5kLy5lbnZgIGZpbGU6XG5cbmBgYGVudlxuVklURV9BUElfVVJMPWh0dHBzOi8vYXBpLm15LWRvbWFpbi5leGFtcGxlLmNvbVxuYGBgXG5cblRoZW4sIHdoZW4geW91IHJ1biB0aGUgZnJvbnRlbmQsIGl0IHdpbGwgdXNlIHRoYXQgVVJMIGFzIHRoZSBiYXNlIFVSTCBmb3IgdGhlIEFQSS5cblxuIyMgQ29kZSBTdHJ1Y3R1cmVcbi4uLlxuUGF0aDogY29waWVyLnltbFxucHJvamVjdF9uYW1lOlxuICB0eXBlOiBzdHJcbiAgaGVscDogVGhlIG5hbWUgb2YgdGhlIHByb2plY3QsIHNob3duIHRvIEFQSSB1c2VycyAoaW4gLmVudilcbiAgZGVmYXVsdDogRmFzdEFQSSBQcm9qZWN0XG5cbnN0YWNrX25hbWU6XG4gIHR5cGU6IHN0clxuICBoZWxwOiBUaGUgbmFtZSBvZiB0aGUgc3RhY2sgdXNlZCBmb3IgRG9ja2VyIENvbXBvc2UgbGFiZWxzIChubyBzcGFjZXMpIChpbiAuZW52KVxuICBkZWZhdWx0OiBmYXN0YXBpLXByb2plY3Rcblxuc2VjcmV0X2tleTpcbiAgdHlwZTogc3RyXG4gIGhlbHA6IHxcbiAgICAnVGhlIHNlY3JldCBrZXkgZm9yIHRoZSBwcm9qZWN0LCB1c2VkIGZvciBzZWN1cml0eSxcbiAgICBzdG9yZWQgaW4gLmVudiwgeW91IGNhbiBnZW5lcmF0ZSBvbmUgd2l0aDpcbiAgICBweXRob24gLWMgXCJpbXBvcnQgc2VjcmV0czsgcHJpbnQoc2VjcmV0cy50b2tlbl91cmxzYWZlKDMyKSlcIidcbiAgZGVmYXVsdDogY2hhbmdldGhpc1xuXG5maXJzdF9zdXBlcnVzZXI6XG4gIHR5cGU6IHN0clxuICBoZWxwOiBUaGUgZW1haWwgb2YgdGhlIGZpcnN0IHN1cGVydXNlciAoaW4gLmVudilcbiAgZGVmYXVsdDogYWRtaW5AZXhhbXBsZS5jb21cblxuZmlyc3Rfc3VwZXJ1c2VyX3Bhc3N3b3JkOlxuICB0eXBlOiBzdHJcbiAgaGVscDogVGhlIHBhc3N3b3JkIG9mIHRoZSBmaXJzdCBzdXBlcnVzZXIgKGluIC5lbnYpXG4gIGRlZmF1bHQ6IGNoYW5nZXRoaXNcblxuc210cF9ob3N0OlxuICB0eXBlOiBzdHJcbiAgaGVscDogVGhlIFNNVFAgc2VydmVyIGhvc3QgdG8gc2VuZCBlbWFpbHMsIHlvdSBjYW4gc2V0IGl0IGxhdGVyIGluIC5lbnZcbiAgZGVmYXVsdDogXCJcIlxuLi4uXG5QYXRoOiBiYWNrZW5kL2FwcC9jb3JlL2RiLnB5XG5mcm9tIHNxbG1vZGVsIGltcG9ydCBTZXNzaW9uLCBjcmVhdGVfZW5naW5lLCBzZWxlY3RcblxuZnJvbSBhcHAgaW1wb3J0IGNydWRcbmZyb20gYXBwLmNvcmUuY29uZmlnIGltcG9ydCBzZXR0aW5nc1xuZnJvbSBhcHAubW9kZWxzIGltcG9ydCBVc2VyLCBVc2VyQ3JlYXRlXG5cbmVuZ2luZSA9IGNyZWF0ZV9lbmdpbmUoc3RyKHNldHRpbmdzLlNRTEFMQ0hFTVlfREFUQUJBU0VfVVJJKSlcblxuXG4jIG1ha2Ugc3VyZSBhbGwgU1FMTW9kZWwgbW9kZWxzIGFyZSBpbXBvcnRlZCAoYXBwLm1vZGVscykgYmVmb3JlIGluaXRpYWxpemluZyBEQlxuIyBvdGhlcndpc2UsIFNRTE1vZGVsIG1pZ2h0IGZhaWwgdG8gaW5pdGlhbGl6ZSByZWxhdGlvbnNoaXBzIHByb3Blcmx5XG4jIGZvciBtb3JlIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYXN0YXBpL2Z1bGwtc3RhY2stZmFzdGFwaS10ZW1wbGF0ZS9pc3N1ZXMvMjhcblxuXG5kZWYgaW5pdF9kYihzZXNzaW9uOiBTZXNzaW9uKSAtPiBOb25lOlxuICAgICMgVGFibGVzIHNob3VsZCBiZSBjcmVhdGVkIHdpdGggQWxlbWJpYyBtaWdyYXRpb25zXG4gICAgIyBCdXQgaWYgeW91IGRvbid0IHdhbnQgdG8gdXNlIG1pZ3JhdGlvbnMsIGNyZWF0ZVxuICAgICMgdGhlIHRhYmxlcyB1bi1jb21tZW50aW5nIHRoZSBuZXh0IGxpbmVzXG4gICAgIyBmcm9tIHNxbG1vZGVsIGltcG9ydCBTUUxNb2RlbFxuXG4gICAgIyBUaGlzIHdvcmtzIGJlY2F1c2UgdGhlIG1vZGVscyBhcmUgYWxyZWFkeSBpbXBvcnRlZCBhbmQgcmVnaXN0ZXJlZCBmcm9tIGFwcC5tb2RlbHNcbiAgICAjIFNRTE1vZGVsLm1ldGFkYXRhLmNyZWF0ZV9hbGwoZW5naW5lKVxuXG4gICAgdXNlciA9IHNlc3Npb24uZXhlYyhcbiAgICAgICAgc2VsZWN0KFVzZXIpLndoZXJlKFVzZXIuZW1haWwgPT0gc2V0dGluZ3MuRklSU1RfU1VQRVJVU0VSKVxuICAgICkuZmlyc3QoKVxuICAgIGlmIG5vdCB1c2VyOlxuICAgICAgICB1c2VyX2luID0gVXNlckNyZWF0ZShcbiAgICAgICAgICAgIGVtYWlsPXNldHRpbmdzLkZJUlNUX1NVUEVSVVNFUixcbiAgICAgICAgICAgIHBhc3N3b3JkPXNldHRpbmdzLkZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRCxcbiAgICAgICAgICAgIGlzX3N1cGVydXNlcj1UcnVlLFxuICAgICAgICApXG4gICAgICAgIHVzZXIgPSBjcnVkLmNyZWF0ZV91c2VyKHNlc3Npb249c2Vzc2lvbiwgdXNlcl9jcmVhdGU9dXNlcl9pbilcbi4uLlxuUGF0aDogZnJvbnRlbmQvc3JjL21haW4udHN4XG5pbXBvcnQge1xuICBNdXRhdGlvbkNhY2hlLFxuICBRdWVyeUNhY2hlLFxuICBRdWVyeUNsaWVudCxcbiAgUXVlcnlDbGllbnRQcm92aWRlcixcbn0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiXG5pbXBvcnQgeyBSb3V0ZXJQcm92aWRlciwgY3JlYXRlUm91dGVyIH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1yb3V0ZXJcIlxuaW1wb3J0IFJlYWN0LCB7IFN0cmljdE1vZGUgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCJcbmltcG9ydCB7IHJvdXRlVHJlZSB9IGZyb20gXCIuL3JvdXRlVHJlZS5nZW5cIlxuXG5pbXBvcnQgeyBBcGlFcnJvciwgT3BlbkFQSSB9IGZyb20gXCIuL2NsaWVudFwiXG5pbXBvcnQgeyBDdXN0b21Qcm92aWRlciB9IGZyb20gXCIuL2NvbXBvbmVudHMvdWkvcHJvdmlkZXJcIlxuXG5PcGVuQVBJLkJBU0UgPSBpbXBvcnQubWV0YS5lbnYuVklURV9BUElfVVJMXG5PcGVuQVBJLlRPS0VOID0gYXN5bmMgKCkgPT4ge1xuICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJhY2Nlc3NfdG9rZW5cIikgfHwgXCJcIlxufVxuXG5jb25zdCBoYW5kbGVBcGlFcnJvciA9IChlcnJvcjogRXJyb3IpID0+IHtcbiAgaWYgKGVycm9yIGluc3RhbmNlb2YgQXBpRXJyb3IgJiYgWzQwMSwgNDAzXS5pbmNsdWRlcyhlcnJvci5zdGF0dXMpKSB7XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJhY2Nlc3NfdG9rZW5cIilcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IFwiL2xvZ2luXCJcbiAgfVxufVxuLi4uXG5QYXRoOiBiYWNrZW5kL2FsZW1iaWMuaW5pXG4jIEEgZ2VuZXJpYywgc2luZ2xlIGRhdGFiYXNlIGNvbmZpZ3VyYXRpb24uXG5cblthbGVtYmljXVxuIyBwYXRoIHRvIG1pZ3JhdGlvbiBzY3JpcHRzXG5zY3JpcHRfbG9jYXRpb24gPSBhcHAvYWxlbWJpY1xuXG4jIHRlbXBsYXRlIHVzZWQgdG8gZ2VuZXJhdGUgbWlncmF0aW9uIGZpbGVzXG4jIGZpbGVfdGVtcGxhdGUgPSAlJShyZXYpc18lJShzbHVnKXNcblxuIyB0aW1lem9uZSB0byB1c2Ugd2hlbiByZW5kZXJpbmcgdGhlIGRhdGVcbiMgd2l0aGluIHRoZSBtaWdyYXRpb24gZmlsZSBhcyB3ZWxsIGFzIHRoZSBmaWxlbmFtZS5cbiMgc3RyaW5nIHZhbHVlIGlzIHBhc3NlZCB0byBkYXRldXRpbC50ei5nZXR0eigpXG4jIGxlYXZlIGJsYW5rIGZvciBsb2NhbHRpbWVcbiMgdGltZXpvbmUgPVxuXG4jIG1heCBsZW5ndGggb2YgY2hhcmFjdGVycyB0byBhcHBseSB0byB0aGVcbiMgXCJzbHVnXCIgZmllbGRcbiN0cnVuY2F0ZV9zbHVnX2xlbmd0aCA9IDQwXG5cbiMgc2V0IHRvICd0cnVlJyB0byBydW4gdGhlIGVudmlyb25tZW50IGR1cmluZ1xuIyB0aGUgJ3JldmlzaW9uJyBjb21tYW5kLCByZWdhcmRsZXNzIG9mIGF1dG9nZW5lcmF0ZVxuIyByZXZpc2lvbl9lbnZpcm9ubWVudCA9IGZhbHNlXG5cbiMgc2V0IHRvICd0cnVlJyB0byBhbGxvdyAucHljIGFuZCAucHlvIGZpbGVzIHdpdGhvdXRcbiMgYSBzb3VyY2UgLnB5IGZpbGUgdG8gYmUgZGV0ZWN0ZWQgYXMgcmV2aXNpb25zIGluIHRoZVxuIyB2ZXJzaW9ucy8gZGlyZWN0b3J5XG4jIHNvdXJjZWxlc3MgPSBmYWxzZVxuLi4uXG5QYXRoOiBiYWNrZW5kL0RvY2tlcmZpbGVcbi4uLlxuXG4jIEluc3RhbGwgZGVwZW5kZW5jaWVzXG4jIFJlZjogaHR0cHM6Ly9kb2NzLmFzdHJhbC5zaC91di9ndWlkZXMvaW50ZWdyYXRpb24vZG9ja2VyLyNpbnRlcm1lZGlhdGUtbGF5ZXJzXG5SVU4gLS1tb3VudD10eXBlPWNhY2hlLHRhcmdldD0vcm9vdC8uY2FjaGUvdXYgXFxcbiAgICAtLW1vdW50PXR5cGU9YmluZCxzb3VyY2U9dXYubG9jayx0YXJnZXQ9dXYubG9jayBcXFxuICAgIC0tbW91bnQ9dHlwZT1iaW5kLHNvdXJjZT1weXByb2plY3QudG9tbCx0YXJnZXQ9cHlwcm9qZWN0LnRvbWwgXFxcbiAgICB1diBzeW5jIC0tZnJvemVuIC0tbm8taW5zdGFsbC1wcm9qZWN0XG5cbkVOViBQWVRIT05QQVRIPS9hcHBcblxuQ09QWSAuL3NjcmlwdHMgL2FwcC9zY3JpcHRzXG5cbkNPUFkgLi9weXByb2plY3QudG9tbCAuL3V2LmxvY2sgLi9hbGVtYmljLmluaSAvYS4uLiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTNKN0dqOXMzRHVpeDZEWEp1SjgyQVMifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInJlc3BvbnNlX3RleHQiOiLln7rkuo7miJHmlLbpm4bliLDnmoTkv6Hmga/vvIzmiJHnjrDlnKjlj6/ku6Xlm57nrZTlpoLkvZXlnKhQeUNoYXJt5Lit5byA5ZCv6L+Z5Liq6aG555uu55qEYmFja2VuZOacjeWKoeOAguS7peS4i+aYr+ivpue7huatpemqpO+8mlxuXG4jIyDlnKhQeUNoYXJt5Lit5byA5ZCvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXLnmoRiYWNrZW5k5pyN5YqhXG5cbiMjIyDmlrnms5XkuIDvvJrkvb/nlKhEb2NrZXIgQ29tcG9zZe+8iOaOqOiNkO+8iVxuXG4xLiAqKuaJk+W8gOmhueebrioq77yaXG4gICAtIOWcqFB5Q2hhcm3kuK3miZPlvIBgcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXJg6aG555uuXG5cbjIuICoq6YWN572uRG9ja2Vy6ZuG5oiQKirvvJpcbiAgIC0g56Gu5L+dUHlDaGFybeW3suWuieijhURvY2tlcuaPkuS7tlxuICAgLSDlnKhQeUNoYXJt5Lit6L+e5o6l5YiwRG9ja2VyXG5cbjMuICoq5ZCv5Yqo5pyN5YqhKirvvJpcbiAgIC0g5omT5byA57uI56uv77yIVGVybWluYWzvvInnqpflj6NcbiAgIC0g5omn6KGM5Lul5LiL5ZG95Luk5ZCv5Yqo5pW05Liq5byA5Y+R546v5aKD77yaXG4gICBgYGBcbiAgIGRvY2tlciBjb21wb3NlIHdhdGNoXG4gICBgYGBcbiAgIC0g6L+Z5bCG5ZCv5Yqo5YyF5ousYmFja2VuZOOAgWZyb250ZW5k44CB5pWw5o2u5bqT562J5Zyo5YaF55qE5omA5pyJ5pyN5YqhXG4gICAtIGJhY2tlbmTmnI3liqHlsIblnKhodHRwOi8vbG9jYWxob3N0OjgwMDDkuIrov5DooYxcblxuIyMjIOaWueazleS6jO+8muacrOWcsOebtOaOpei/kOihjFxuXG4xLiAqKuWuieijheS+nei1lioq77yaXG4gICAtIOaJk+W8gOe7iOerr++8jOi/m+WFpWJhY2tlbmTnm67lvZXvvJpcbiAgIGBgYFxuICAgY2QgYmFja2VuZFxuICAgYGBgXG4gICAtIOWuieijhXV25bel5YW377yI5aaC5p6c5bCa5pyq5a6J6KOF77yJXG4gICAtIOS9v+eUqHV25a6J6KOF5L6d6LWW77yaXG4gICBgYGBcbiAgIHV2IHN5bmNcbiAgIGBgYFxuICAgLSDmv4DmtLvomZrmi5/njq/looPvvJpcbiAgIGBgYFxuICAgc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZVxuICAgYGBgXG5cbjIuICoq5ZyoUHlDaGFybeS4remFjee9rlB5dGhvbuino+mHiuWZqCoq77yaXG4gICAtIOaJk+W8gFB5Q2hhcm3orr7nva4g4oaSIFByb2plY3Qg4oaSIFB5dGhvbiBJbnRlcnByZXRlclxuICAgLSDmt7vliqDmlrDnmoTop6Pph4rlmajvvIzpgInmi6lgYmFja2VuZC8udmVudi9iaW4vcHl0aG9uYOi3r+W+hFxuXG4zLiAqKumFjee9rui/kOihjOmFjee9rioq77yaXG4gICAtIOeCueWHu1wiQWRkIENvbmZpZ3VyYXRpb25cIuaIllwiRWRpdCBDb25maWd1cmF0aW9uc1wiXG4gICAtIOa3u+WKoOaWsOeahFB5dGhvbumFjee9rlxuICAgLSDorr7nva7ohJrmnKzot6/lvoTkuLpgYXBwL21haW4ucHlg77yI5L2N5LqOYmFja2VuZOebruW9leS4i++8iVxuICAgLSDorr7nva7lt6XkvZznm67lvZXkuLpgYmFja2VuZGDnm67lvZVcbiAgIC0g5ZyoXCJQYXJhbWV0ZXJzXCLkuK3mt7vliqBgZmFzdGFwaSBydW4gLS1yZWxvYWRgXG4gICAtIOehruS/neeOr+Wig+WPmOmHj+ato+ehrumFjee9ru+8iOWPr+S7peS7ji5lbnbmlofku7bkuK3liqDovb3vvIlcblxuNC4gKirov5DooYzmnI3liqEqKu+8mlxuICAgLSDngrnlh7vov5DooYzmjInpkq7miJbkvb/nlKjlv6vmjbfplK7ov5DooYzphY3nva5cbiAgIC0g5oiW6ICF5Zyo57uI56uv5Lit55u05o6l6L+Q6KGM77yaXG4gICBgYGBcbiAgIGNkIGJhY2tlbmRcbiAgIHNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGVcbiAgIGZhc3RhcGkgcnVuIC0tcmVsb2FkIGFwcC9tYWluLnB5XG4gICBgYGBcblxuIyMjIOaWueazleS4ie+8muS9v+eUqERvY2tlcuS9hui/m+WFpeWuueWZqOWGhemDqFxuXG4xLiAqKuWQr+WKqERvY2tlcuWuueWZqCoq77yaXG4gICBgYGBcbiAgIGRvY2tlciBjb21wb3NlIHdhdGNoXG4gICBgYGBcblxuMi4gKirov5vlhaViYWNrZW5k5a655ZmoKirvvJpcbiAgIGBgYFxuICAgZG9ja2VyIGNvbXBvc2UgZXhlYyBiYWNrZW5kIGJhc2hcbiAgIGBgYFxuXG4zLiAqKuWcqOWuueWZqOWGheWQr+WKqOacjeWKoSoq77yaXG4gICBgYGBcbiAgIGZhc3RhcGkgcnVuIC0tcmVsb2FkIGFwcC9tYWluLnB5XG4gICBgYGBcblxuIyMjIOazqOaEj+S6i+mhuVxuXG4xLiAqKuaVsOaNruW6k+i/nuaOpSoq77yaXG4gICAtIOmhueebruS9v+eUqFBvc3RncmVTUUzmlbDmja7lupNcbiAgIC0g5pWw5o2u5bqT6L+e5o6l6YWN572u5ZyoYC5lbnZg5paH5Lu25LitXG4gICAtIOehruS/neaVsOaNruW6k+acjeWKoeato+W4uOi/kOihjFxuXG4yLiAqKueOr+Wig+WPmOmHjyoq77yaXG4gICAtIOehruS/nWAuZW52YOaWh+S7tuS4reeahOmFjee9ruato+ehrlxuICAgLSDnibnliKvmmK/mlbDmja7lupPov57mjqXkv6Hmga/vvJpcbiAgICAgLSBQT1NUR1JFU19TRVJWRVJcbiAgICAgLSBQT1NUR1JFU19QT1JUXG4gICAgIC0gUE9TVEdSRVNfREJcbiAgICAgLSBQT1NUR1JFU19VU0VSXG4gICAgIC0gUE9TVEdSRVNfUEFTU1dPUkRcblxuMy4gKipBUEnorr/pl64qKu+8mlxuICAgLSDmnI3liqHlkK/liqjlkI7vvIzlj6/ku6XpgJrov4dodHRwOi8vbG9jYWxob3N0OjgwMDDorr/pl65BUElcbiAgIC0gQVBJ5paH5qGj5Y+v5Lul6YCa6L+HaHR0cDovL2xvY2FsaG9zdDo4MDAwL2RvY3Porr/pl65cblxuNC4gKirng63ph43ovb0qKu+8mlxuICAgLSDkvb/nlKhgLS1yZWxvYWRg5Y+C5pWw5Y+v5Lul5a6e546w5Luj56CB5L+u5pS55ZCO6Ieq5Yqo6YeN5paw5Yqg6L295pyN5YqhXG5cbuS9v+eUqERvY2tlciBDb21wb3Nl5piv5pyA566A5Y2V55qE5pa55byP77yM5Zug5Li65a6D5Lya6Ieq5Yqo5aSE55CG5omA5pyJ5L6d6LWW5YWz57O777yM5YyF5ous5pWw5o2u5bqT5ZKM5YW25LuW5pyN5Yqh44CC5aaC5p6c5oKo5oOz6KaB5pu055u05o6l5Zyw6LCD6K+V5Luj56CB77yM5Y+v5Lul6YCJ5oup5pys5Zyw6L+Q6KGM55qE5pa55byP44CCXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiIwY2Q5NjEwYy1lNzM5LTRmZjEtOGU2NC03ODc4NzFlMWU0NTMiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjA1YzVhNzUyLTJkOWUtNDRhNC05MjVlLTQwNTdkNDFiN2E2MiIsInJlcXVlc3RfbWVzc2FnZSI6InB5dGhvbiDop6Pph4rlmajnsbvlnovlupTor6XpgInmi6nlk6rkuKoiLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0IjoicHl0aG9uIOino+mHiuWZqOexu+Wei+W6lOivpemAieaLqeWTquS4qiJ9XX1dfSwibWVudGlvbmVkX2l0ZW1zIjpbXSwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi5ZyoUHlDaGFybeS4reS4uui/meS4qumhueebrumFjee9rlB5dGhvbuino+mHiuWZqOaXtu+8jOaCqOW6lOivpemAieaLqeS7peS4i+exu+Wei+eahOino+mHiuWZqO+8mlxuXG4jIyDmjqjojZDnmoRQeXRob27op6Pph4rlmajnsbvlnotcblxuIyMjIDEuIOiZmuaLn+eOr+Wig+ino+mHiuWZqO+8iOmmlumAie+8iVxuXG7ov5nkuKrpobnnm67kvb/nlKhgdXZg5bel5YW3566h55CGUHl0aG9u6Jma5ouf546v5aKD77yM5omA5Lul5pyA5aW96YCJ5oup6aG555uu55qE6Jma5ouf546v5aKD6Kej6YeK5Zmo77yaXG5cbjEuIOWcqFB5Q2hhcm3kuK3vvIzovazliLAgKipGaWxlID4gU2V0dGluZ3MgPiBQcm9qZWN0ID4gUHl0aG9uIEludGVycHJldGVyKipcbjIuIOeCueWHu+m9v+i9ruWbvuagh++8jOmAieaLqSAqKkFkZC4uLioqXG4zLiDpgInmi6kgKipFeGlzdGluZyBFbnZpcm9ubWVudCoqXG40LiDmtY/op4jlubbpgInmi6npobnnm67omZrmi5/njq/looPkuK3nmoRQeXRob27op6Pph4rlmajvvJpcbiAgIC0g6Lev5b6E5bqU6K+l5piv77yaYC9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvYmluL3B5dGhvbmBcbiAgIC0g5aaC5p6c5oKo5bey57uP5oyJ54Wn6aG555uu6K+05piO6L+Q6KGM5LqGYHV2IHN5bmNg5bm25Yib5bu65LqG6Jma5ouf546v5aKD77yM6L+Z5Liq6Lev5b6E5bqU6K+l5a2Y5ZyoXG5cbui/meaYr+acgOaOqOiNkOeahOaWueW8j++8jOWboOS4uuWug+S8muS9v+eUqOmhueebruS4k+eUqOeahOiZmuaLn+eOr+Wig++8jOWFtuS4reWMheWQq+S6humhueebruaJgOmcgOeahOaJgOacieS+nei1lumhueOAglxuXG4jIyMgMi4g57O757uf6Kej6YeK5Zmo77yI5aSH6YCJ77yJXG5cbuWmguaenOaCqOi/mOayoeacieWIm+W7uuiZmuaLn+eOr+Wig++8jOWPr+S7peS4tOaXtuS9v+eUqOezu+e7n+ino+mHiuWZqO+8mlxuXG4xLiDpgInmi6kgKipTeXN0ZW0gSW50ZXJwcmV0ZXIqKlxuMi4g6YCJ5oupUHl0aG9uIDMuMTDmiJbmm7Tpq5jniYjmnKzvvIjpobnnm67opoHmsYJQeXRob24gPj0gMy4xMO+8iVxuXG7kvYbor7fms6jmhI/vvIzkvb/nlKjns7vnu5/op6Pph4rlmajlkI7vvIzmgqjpnIDopoHmiYvliqjlronoo4Xpobnnm67kvp3otZbpobnjgIJcblxuIyMjIDMuIERvY2tlcuino+mHiuWZqO+8iOWmguaenOS9v+eUqERvY2tlcuW8gOWPke+8iVxuXG7lpoLmnpzmgqjmiZPnrpfkuLvopoHpgJrov4dEb2NrZXLov5vooYzlvIDlj5HvvJpcblxuMS4g6YCJ5oupICoqRG9ja2VyKipcbjIuIOmFjee9rkRvY2tlcuino+mHiuWZqO+8jOaMh+WQkemhueebrueahGJhY2tlbmTlrrnlmahcbjMuIFB5Q2hhcm3kvJrkvb/nlKhEb2NrZXLlrrnlmajkuK3nmoRQeXRob27njq/looNcblxuIyMg5Yib5bu66Jma5ouf546v5aKD55qE5q2l6aqkXG5cbuWmguaenOaCqOi/mOayoeacieWIm+W7uuiZmuaLn+eOr+Wig++8jOW7uuiuruaMieeFp+S7peS4i+atpemqpOWIm+W7uu+8mlxuXG4xLiDlronoo4VgdXZg5bel5YW377yI5aaC5p6c5bCa5pyq5a6J6KOF77yJXG4yLiDlnKjnu4jnq6/kuK3miafooYzvvJpcbiAgIGBgYGJhc2hcbiAgIGNkIC9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmRcbiAgIHV2IHN5bmNcbiAgIGBgYFxuMy4g6L+Z5bCG5Yib5bu65LiA5LiqYC52ZW52YOebruW9le+8jOWFtuS4reWMheWQq+mhueebrueahOiZmuaLn+eOr+Wig1xuXG4jIyDms6jmhI/kuovpoblcblxuLSDpobnnm67opoHmsYJQeXRob27niYjmnKwgPj0gMy4xMO+8jDwgNC4w77yI5ZyocHlwcm9qZWN0LnRvbWzkuK3mjIflrprvvIlcbi0g56Gu5L+d6YCJ5oup55qE6Kej6YeK5Zmo6IO95aSf6K6/6Zeu5Yiw6aG555uu5omA6ZyA55qE5omA5pyJ5L6d6LWW6aG5XG4tIOWmguaenOS9v+eUqOiZmuaLn+eOr+Wig+ino+mHiuWZqO+8jFB5Q2hhcm3kvJroh6rliqjor4bliKvpobnnm67kvp3otZbpoblcbi0g5L2/55So6aG555uu55qE6Jma5ouf546v5aKD5Y+v5Lul6YG/5YWN5L6d6LWW5Yay56qB6Zeu6aKYXG5cbuWujOaIkOino+mHiuWZqOmFjee9ruWQju+8jOaCqOWwseWPr+S7peWcqFB5Q2hhcm3kuK3ov5DooYzlkozosIPor5ViYWNrZW5k5pyN5Yqh5LqG44CCXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjowLCJ0ZXh0X25vZGUiOnsiY29udGVudCI6InB5dGhvbiDop6Pph4rlmajnsbvlnovlupTor6XpgInmi6nlk6rkuKoifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInJlc3BvbnNlX3RleHQiOiLlnKhQeUNoYXJt5Lit5Li66L+Z5Liq6aG555uu6YWN572uUHl0aG9u6Kej6YeK5Zmo5pe277yM5oKo5bqU6K+l6YCJ5oup5Lul5LiL57G75Z6L55qE6Kej6YeK5Zmo77yaXG5cbiMjIOaOqOiNkOeahFB5dGhvbuino+mHiuWZqOexu+Wei1xuXG4jIyMgMS4g6Jma5ouf546v5aKD6Kej6YeK5Zmo77yI6aaW6YCJ77yJXG5cbui/meS4qumhueebruS9v+eUqGB1dmDlt6XlhbfnrqHnkIZQeXRob27omZrmi5/njq/looPvvIzmiYDku6XmnIDlpb3pgInmi6npobnnm67nmoTomZrmi5/njq/looPop6Pph4rlmajvvJpcblxuMS4g5ZyoUHlDaGFybeS4re+8jOi9rOWIsCAqKkZpbGUgPiBTZXR0aW5ncyA+IFByb2plY3QgPiBQeXRob24gSW50ZXJwcmV0ZXIqKlxuMi4g54K55Ye76b2/6L2u5Zu+5qCH77yM6YCJ5oupICoqQWRkLi4uKipcbjMuIOmAieaLqSAqKkV4aXN0aW5nIEVudmlyb25tZW50KipcbjQuIOa1j+iniOW5tumAieaLqemhueebruiZmuaLn+eOr+Wig+S4reeahFB5dGhvbuino+mHiuWZqO+8mlxuICAgLSDot6/lvoTlupTor6XmmK/vvJpgL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9iaW4vcHl0aG9uYFxuICAgLSDlpoLmnpzmgqjlt7Lnu4/mjInnhafpobnnm67or7TmmI7ov5DooYzkuoZgdXYgc3luY2DlubbliJvlu7rkuobomZrmi5/njq/looPvvIzov5nkuKrot6/lvoTlupTor6XlrZjlnKhcblxu6L+Z5piv5pyA5o6o6I2Q55qE5pa55byP77yM5Zug5Li65a6D5Lya5L2/55So6aG555uu5LiT55So55qE6Jma5ouf546v5aKD77yM5YW25Lit5YyF5ZCr5LqG6aG555uu5omA6ZyA55qE5omA5pyJ5L6d6LWW6aG544CCXG5cbiMjIyAyLiDns7vnu5/op6Pph4rlmajvvIjlpIfpgInvvIlcblxu5aaC5p6c5oKo6L+Y5rKh5pyJ5Yib5bu66Jma5ouf546v5aKD77yM5Y+v5Lul5Li05pe25L2/55So57O757uf6Kej6YeK5Zmo77yaXG5cbjEuIOmAieaLqSAqKlN5c3RlbSBJbnRlcnByZXRlcioqXG4yLiDpgInmi6lQeXRob24gMy4xMOaIluabtOmrmOeJiOacrO+8iOmhueebruimgeaxglB5dGhvbiA+PSAzLjEw77yJXG5cbuS9huivt+azqOaEj++8jOS9v+eUqOezu+e7n+ino+mHiuWZqOWQju+8jOaCqOmcgOimgeaJi+WKqOWuieijhemhueebruS+nei1lumhueOAglxuXG4jIyMgMy4gRG9ja2Vy6Kej6YeK5Zmo77yI5aaC5p6c5L2/55SoRG9ja2Vy5byA5Y+R77yJXG5cbuWmguaenOaCqOaJk+eul+S4u+imgemAmui/h0RvY2tlcui/m+ihjOW8gOWPke+8mlxuXG4xLiDpgInmi6kgKipEb2NrZXIqKlxuMi4g6YWN572uRG9ja2Vy6Kej6YeK5Zmo77yM5oyH5ZCR6aG555uu55qEYmFja2VuZOWuueWZqFxuMy4gUHlDaGFybeS8muS9v+eUqERvY2tlcuWuueWZqOS4reeahFB5dGhvbueOr+Wig1xuXG4jIyDliJvlu7romZrmi5/njq/looPnmoTmraXpqqRcblxu5aaC5p6c5oKo6L+Y5rKh5pyJ5Yib5bu66Jma5ouf546v5aKD77yM5bu66K6u5oyJ54Wn5Lul5LiL5q2l6aqk5Yib5bu677yaXG5cbjEuIOWuieijhWB1dmDlt6XlhbfvvIjlpoLmnpzlsJrmnKrlronoo4XvvIlcbjIuIOWcqOe7iOerr+S4reaJp+ihjO+8mlxuICAgYGBgYmFzaFxuICAgY2QgL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZFxuICAgdXYgc3luY1xuICAgYGBgXG4zLiDov5nlsIbliJvlu7rkuIDkuKpgLnZlbnZg55uu5b2V77yM5YW25Lit5YyF5ZCr6aG555uu55qE6Jma5ouf546v5aKDXG5cbiMjIOazqOaEj+S6i+mhuVxuXG4tIOmhueebruimgeaxglB5dGhvbueJiOacrCA+PSAzLjEw77yMPCA0LjDvvIjlnKhweXByb2plY3QudG9tbOS4reaMh+Wumu+8iVxuLSDnoa7kv53pgInmi6nnmoTop6Pph4rlmajog73lpJ/orr/pl67liLDpobnnm67miYDpnIDnmoTmiYDmnInkvp3otZbpoblcbi0g5aaC5p6c5L2/55So6Jma5ouf546v5aKD6Kej6YeK5Zmo77yMUHlDaGFybeS8muiHquWKqOivhuWIq+mhueebruS+nei1lumhuVxuLSDkvb/nlKjpobnnm67nmoTomZrmi5/njq/looPlj6/ku6Xpgb/lhY3kvp3otZblhrLnqoHpl67pophcblxu5a6M5oiQ6Kej6YeK5Zmo6YWN572u5ZCO77yM5oKo5bCx5Y+v5Lul5ZyoUHlDaGFybeS4rei/kOihjOWSjOiwg+ivlWJhY2tlbmTmnI3liqHkuobjgIJcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsicmVxdWVzdF9pZCI6ImUwZDg3ODJjLTU3MTAtNGI4NC04ZWUxLWIyMTg1NjQ0OGU0NCIsInN0YXR1cyI6ImNhbmNlbGxlZCIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtdHVybi1kZWxpbWl0ZXIifSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiOTg4Y2FmZDgtMWViNy00NjJiLTk1ZGUtZDQ1MmMyMGE0YzdlIiwicmVxdWVzdF9tZXNzYWdlIjoi5oiR5ZyoIGJhY2tlbmTkuIvmiafooYwgdXYgc3luYyDmiqXplJnvvJpcbndhcm5pbmc6IGBWSVJUVUFMX0VOVj0vVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9hdWdtZW50LXByb2plY3RzL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnZgIGRvZXMgbm90IG1hdGNoIHRoZSBwcm9qZWN0IGVudmlyb25tZW50IHBhdGggYC52ZW52YCBhbmQgd2lsbCBiZSBpZ25vcmVkOyB1c2UgYC0tYWN0aXZlYCB0byB0YXJnZXQgdGhlIGFjdGl2ZSBlbnZpcm9ubWVudCBpbnN0ZWFkIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IuaIkeWcqCBiYWNrZW5k5LiL5omn6KGMIHV2IHN5bmMg5oql6ZSZ77yaIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJ3YXJuaW5nOiBgVklSVFVBTF9FTlY9L1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYXVnbWVudC1wcm9qZWN0cy9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52YCBkb2VzIG5vdCBtYXRjaCB0aGUgcHJvamVjdCBlbnZpcm9ubWVudCBwYXRoIGAudmVudmAgYW5kIHdpbGwgYmUgaWdub3JlZDsgdXNlIGAtLWFjdGl2ZWAgdG8gdGFyZ2V0IHRoZSBhY3RpdmUgZW52aXJvbm1lbnQgaW5zdGVhZCJ9XX1dfSwibWVudGlvbmVkX2l0ZW1zIjpbXSwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi6L+Z5Liq6K2m5ZGK6KGo5piO5oKo55qE546v5aKD5Y+Y6YePYFZJUlRVQUxfRU5WYOaMh+WQkeeahOi3r+W+hOS4jumhueebrumihOacn+eahOiZmuaLn+eOr+Wig+i3r+W+hOS4jeWMuemFjeOAguiuqeaIkeW4ruaCqOino+WGs+i/meS4qumXrumimOOAglxuXG4jIyDop6PlhrMgdXYgc3luYyDorablkYrnmoTmraXpqqRcblxuIyMjIOaWueazleS4gO+8muS9v+eUqCAtLWFjdGl2ZSDlj4LmlbBcblxu5pyA566A5Y2V55qE6Kej5Yaz5pa55rOV5piv5L2/55SoYC0tYWN0aXZlYOWPguaVsO+8jOi/meS8muWRiuiviWB1dmDkvb/nlKjlvZPliY3mv4DmtLvnmoTomZrmi5/njq/looPvvJpcblxuYGBgYmFzaFxuY2QgL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZFxudXYgc3luYyAtLWFjdGl2ZVxuYGBgXG5cbiMjIyDmlrnms5XkuozvvJrliJvlu7rmlrDnmoTomZrmi5/njq/looNcblxu5aaC5p6c5oKo5oOz5LuO5aS05byA5aeL5Yib5bu65LiA5Liq5bmy5YeA55qE6Jma5ouf546v5aKD77yaXG5cbjEuIOmmluWFiOWIoOmZpOeOsOacieeahOiZmuaLn+eOr+Wig++8iOWmguaenOWtmOWcqO+8ie+8mlxuICAgYGBgYmFzaFxuICAgcm0gLXJmIC52ZW52XG4gICBgYGBcblxuMi4g5L2/55SoYHV2YOWIm+W7uuaWsOeahOiZmuaLn+eOr+Wig+W5tuWuieijheS+nei1lu+8mlxuICAgYGBgYmFzaFxuICAgdXYgdmVudlxuICAgc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZVxuICAgdXYgc3luY1xuICAgYGBgXG5cbiMjIyDmlrnms5XkuInvvJrmjIflrpromZrmi5/njq/looPot6/lvoRcblxu5oKo5Y+v5Lul5piO56Gu5oyH5a6a6Jma5ouf546v5aKD55qE6Lev5b6E77yaXG5cbmBgYGJhc2hcbnV2IHN5bmMgLS12ZW52IC52ZW52XG5gYGBcblxu6L+Z5Lya5ZGK6K+JYHV2YOS9v+eUqOmhueebruebruW9leS4i+eahGAudmVudmDnm67lvZXkvZzkuLromZrmi5/njq/looPjgIJcblxuIyMg5a6M5pW055qE6K6+572u5q2l6aqkXG5cbuS7peS4i+aYr+S7juWktOW8gOWni+iuvue9rueOr+Wig+eahOWujOaVtOatpemqpO+8mlxuXG5gYGBiYXNoXG4jIOi/m+WFpWJhY2tlbmTnm67lvZVcbmNkIC9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmRcblxuIyDliKDpmaTnjrDmnInomZrmi5/njq/looPvvIjlpoLmnpzlrZjlnKjvvIlcbnJtIC1yZiAudmVudlxuXG4jIOWIm+W7uuaWsOeahOiZmuaLn+eOr+Wig1xudXYgdmVudlxuXG4jIOa/gOa0u+iZmuaLn+eOr+Wig1xuc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZVxuXG4jIOWuieijheS+nei1llxudXYgc3luY1xuYGBgXG5cbiMjIOWcqFB5Q2hhcm3kuK3phY3nva7op6Pph4rlmahcblxu5a6M5oiQ5LiK6L+w5q2l6aqk5ZCO77yM5oKo5Y+v5Lul5ZyoUHlDaGFybeS4remFjee9rlB5dGhvbuino+mHiuWZqO+8mlxuXG4xLiDovazliLAgKipGaWxlID4gU2V0dGluZ3MgPiBQcm9qZWN0ID4gUHl0aG9uIEludGVycHJldGVyKipcbjIuIOeCueWHu+m9v+i9ruWbvuagh++8jOmAieaLqSAqKkFkZC4uLioqXG4zLiDpgInmi6kgKipFeGlzdGluZyBFbnZpcm9ubWVudCoqXG40LiDmtY/op4jlubbpgInmi6nmlrDliJvlu7rnmoTomZrmi5/njq/looPkuK3nmoRQeXRob27op6Pph4rlmajvvJpcbiAgIC0g6Lev5b6E5bqU6K+l5piv77yaYC9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvYmluL3B5dGhvbmBcblxuIyMg5rOo5oSP5LqL6aG5XG5cbi0g56Gu5L+d5oKo5bey57uP5a6J6KOF5LqG5pyA5paw54mI5pys55qEYHV2YOW3peWFt1xuLSDlpoLmnpzmgqjkvb/nlKjnmoTmmK/kuI3lkIznmoRzaGVsbO+8iOWmgnpzaOaIlmZpc2jvvInvvIzmv4DmtLvlkb3ku6Tlj6/og73nlaXmnInkuI3lkIxcbi0g5aaC5p6c5oKo5ZyoV2luZG93c+S4iu+8jOa/gOa0u+WRveS7pOW6lOivpeaYr2AudmVudlxcU2NyaXB0c1xcYWN0aXZhdGVgXG4tIOmhueebruimgeaxglB5dGhvbueJiOacrCA+PSAzLjEw77yMPCA0LjDvvIznoa7kv53mgqjkvb/nlKjnmoTmmK/lhbzlrrnnmoRQeXRob27niYjmnKxcblxu5a6M5oiQ6L+Z5Lqb5q2l6aqk5ZCO77yM5oKo5bqU6K+l6IO95aSf5oiQ5Yqf6L+Q6KGMYHV2IHN5bmNg6ICM5LiN5Lya5pS25Yiw6K2m5ZGK77yM5bm25LiU5Y+v5Lul5ZyoUHlDaGFybeS4reato+ehrumFjee9rlB5dGhvbuino+mHiuWZqOOAglxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiLmiJHlnKggYmFja2VuZOS4i+aJp+ihjCB1diBzeW5jIOaKpemUme+8mlxud2FybmluZzogYFZJUlRVQUxfRU5WPS9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2F1Z21lbnQtcHJvamVjdHMvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudmAgZG9lcyBub3QgbWF0Y2ggdGhlIHByb2plY3QgZW52aXJvbm1lbnQgcGF0aCBgLnZlbnZgIGFuZCB3aWxsIGJlIGlnbm9yZWQ7IHVzZSBgLS1hY3RpdmVgIHRvIHRhcmdldCB0aGUgYWN0aXZlIGVudmlyb25tZW50IGluc3RlYWQifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInJlc3BvbnNlX3RleHQiOiLov5nkuKrorablkYrooajmmI7mgqjnmoTnjq/looPlj5jph49gVklSVFVBTF9FTlZg5oyH5ZCR55qE6Lev5b6E5LiO6aG555uu6aKE5pyf55qE6Jma5ouf546v5aKD6Lev5b6E5LiN5Yy56YWN44CC6K6p5oiR5biu5oKo6Kej5Yaz6L+Z5Liq6Zeu6aKY44CCXG5cbiMjIOino+WGsyB1diBzeW5jIOitpuWRiueahOatpemqpFxuXG4jIyMg5pa55rOV5LiA77ya5L2/55SoIC0tYWN0aXZlIOWPguaVsFxuXG7mnIDnroDljZXnmoTop6PlhrPmlrnms5XmmK/kvb/nlKhgLS1hY3RpdmVg5Y+C5pWw77yM6L+Z5Lya5ZGK6K+JYHV2YOS9v+eUqOW9k+WJjea/gOa0u+eahOiZmuaLn+eOr+Wig++8mlxuXG5gYGBiYXNoXG5jZCAvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kXG51diBzeW5jIC0tYWN0aXZlXG5gYGBcblxuIyMjIOaWueazleS6jO+8muWIm+W7uuaWsOeahOiZmuaLn+eOr+Wig1xuXG7lpoLmnpzmgqjmg7Pku47lpLTlvIDlp4vliJvlu7rkuIDkuKrlubLlh4DnmoTomZrmi5/njq/looPvvJpcblxuMS4g6aaW5YWI5Yig6Zmk546w5pyJ55qE6Jma5ouf546v5aKD77yI5aaC5p6c5a2Y5Zyo77yJ77yaXG4gICBgYGBiYXNoXG4gICBybSAtcmYgLnZlbnZcbiAgIGBgYFxuXG4yLiDkvb/nlKhgdXZg5Yib5bu65paw55qE6Jma5ouf546v5aKD5bm25a6J6KOF5L6d6LWW77yaXG4gICBgYGBiYXNoXG4gICB1diB2ZW52XG4gICBzb3VyY2UgLnZlbnYvYmluL2FjdGl2YXRlXG4gICB1diBzeW5jXG4gICBgYGBcblxuIyMjIOaWueazleS4ie+8muaMh+WumuiZmuaLn+eOr+Wig+i3r+W+hFxuXG7mgqjlj6/ku6XmmI7noa7mjIflrpromZrmi5/njq/looPnmoTot6/lvoTvvJpcblxuYGBgYmFzaFxudXYgc3luYyAtLXZlbnYgLnZlbnZcbmBgYFxuXG7ov5nkvJrlkYror4lgdXZg5L2/55So6aG555uu55uu5b2V5LiL55qEYC52ZW52YOebruW9leS9nOS4uuiZmuaLn+eOr+Wig+OAglxuXG4jIyDlrozmlbTnmoTorr7nva7mraXpqqRcblxu5Lul5LiL5piv5LuO5aS05byA5aeL6K6+572u546v5aKD55qE5a6M5pW05q2l6aqk77yaXG5cbmBgYGJhc2hcbiMg6L+b5YWlYmFja2VuZOebruW9lVxuY2QgL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZFxuXG4jIOWIoOmZpOeOsOacieiZmuaLn+eOr+Wig++8iOWmguaenOWtmOWcqO+8iVxucm0gLXJmIC52ZW52XG5cbiMg5Yib5bu65paw55qE6Jma5ouf546v5aKDXG51diB2ZW52XG5cbiMg5r+A5rS76Jma5ouf546v5aKDXG5zb3VyY2UgLnZlbnYvYmluL2FjdGl2YXRlXG5cbiMg5a6J6KOF5L6d6LWWXG51diBzeW5jXG5gYGBcblxuIyMg5ZyoUHlDaGFybeS4remFjee9ruino+mHiuWZqFxuXG7lrozmiJDkuIrov7DmraXpqqTlkI7vvIzmgqjlj6/ku6XlnKhQeUNoYXJt5Lit6YWN572uUHl0aG9u6Kej6YeK5Zmo77yaXG5cbjEuIOi9rOWIsCAqKkZpbGUgPiBTZXR0aW5ncyA+IFByb2plY3QgPiBQeXRob24gSW50ZXJwcmV0ZXIqKlxuMi4g54K55Ye76b2/6L2u5Zu+5qCH77yM6YCJ5oupICoqQWRkLi4uKipcbjMuIOmAieaLqSAqKkV4aXN0aW5nIEVudmlyb25tZW50KipcbjQuIOa1j+iniOW5tumAieaLqeaWsOWIm+W7uueahOiZmuaLn+eOr+Wig+S4reeahFB5dGhvbuino+mHiuWZqO+8mlxuICAgLSDot6/lvoTlupTor6XmmK/vvJpgL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9iaW4vcHl0aG9uYFxuXG4jIyDms6jmhI/kuovpoblcblxuLSDnoa7kv53mgqjlt7Lnu4/lronoo4XkuobmnIDmlrDniYjmnKznmoRgdXZg5bel5YW3XG4tIOWmguaenOaCqOS9v+eUqOeahOaYr+S4jeWQjOeahHNoZWxs77yI5aaCenNo5oiWZmlzaO+8ie+8jOa/gOa0u+WRveS7pOWPr+iDveeVpeacieS4jeWQjFxuLSDlpoLmnpzmgqjlnKhXaW5kb3dz5LiK77yM5r+A5rS75ZG95Luk5bqU6K+l5pivYC52ZW52XFxTY3JpcHRzXFxhY3RpdmF0ZWBcbi0g6aG555uu6KaB5rGCUHl0aG9u54mI5pysID49IDMuMTDvvIw8IDQuMO+8jOehruS/neaCqOS9v+eUqOeahOaYr+WFvOWuueeahFB5dGhvbueJiOacrFxuXG7lrozmiJDov5nkupvmraXpqqTlkI7vvIzmgqjlupTor6Xog73lpJ/miJDlip/ov5DooYxgdXYgc3luY2DogIzkuI3kvJrmlLbliLDorablkYrvvIzlubbkuJTlj6/ku6XlnKhQeUNoYXJt5Lit5q2j56Gu6YWN572uUHl0aG9u6Kej6YeK5Zmo44CCXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiI0MmI0MGU2Yy1kOTY2LTQxOWYtOGY3OC01OTdiOGZhZWI3YWUiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjMzYmMxODQzLTYyYjEtNDY0Ni05YjBmLWE0NmI4ZWJhMzJiOCIsInJlcXVlc3RfbWVzc2FnZSI6IuS4uuS7gOS5iOayoeacieeci+WIsCBbaW52YWxpZF0gdXYgKHBhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyKSAoMikgUHl0aG9uIDMuMTAuNCB+L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci8udmVudi9iaW4vcHl0aG9uIOi/meS4qumAiemhuSIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiLkuLrku4DkuYjmsqHmnInnnIvliLAgW2ludmFsaWRdIHV2IChwYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlcikgKDIpIFB5dGhvbiAzLjEwLjQgfi9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvLnZlbnYvYmluL3B5dGhvbiDov5nkuKrpgInpobkifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IuaCqOayoeacieeci+WIsOmihOacn+eahFB5dGhvbuino+mHiuWZqOmAiemhueWPr+iDveacieWHoOS4quWOn+WboOOAguiuqeaIkeW4ruaCqOaOkuafpeW5tuino+WGs+i/meS4qumXrumimOOAglxuXG4jIyDlj6/og73nmoTljp/lm6Dlkozop6PlhrPmlrnmoYhcblxuIyMjIDEuIOiZmuaLn+eOr+Wig+i3r+W+hOS4jeato+ehrlxuXG7mgqjmj5DliLDnmoTot6/lvoTmmK8gYH4vRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyLy52ZW52L2Jpbi9weXRob25g77yM5L2G5qC55o2u5LmL5YmN55qE5L+h5oGv77yM6Jma5ouf546v5aKD5bqU6K+l5ZyoIGBiYWNrZW5kYCDlrZDnm67lvZXkuIvvvJpcblxuYGBgXG5+L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2Jpbi9weXRob25cbmBgYFxuXG4qKuino+WGs+aWueahiCoq77yaXG4tIOehruiupOiZmuaLn+eOr+Wig+eahOWunumZheS9jee9rlxuLSDlnKjmraPnoa7nmoTnm67lvZXkuK3liJvlu7romZrmi5/njq/looNcblxuIyMjIDIuIOiZmuaLn+eOr+Wig+WwmuacquWIm+W7uuaIluWIm+W7uuWksei0pVxuXG4qKuino+WGs+aWueahiCoq77yaXG5gYGBiYXNoXG4jIOi/m+WFpeato+ehrueahOebruW9lVxuY2Qgfi9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZFxuXG4jIOehruiupOaYr+WQpuWtmOWcqC52ZW5255uu5b2VXG5scyAtbGEgfCBncmVwIC52ZW52XG5cbiMg5aaC5p6c5LiN5a2Y5Zyo77yM5Yib5bu65paw55qE6Jma5ouf546v5aKDXG51diB2ZW52XG5cbiMg5r+A5rS75bm25a6J6KOF5L6d6LWWXG5zb3VyY2UgLnZlbnYvYmluL2FjdGl2YXRlXG51diBzeW5jXG5gYGBcblxuIyMjIDMuIFB5Q2hhcm3msqHmnInliLfmlrDlj6/nlKjop6Pph4rlmajliJfooahcblxuKirop6PlhrPmlrnmoYgqKu+8mlxuLSDlhbPpl63lubbph43mlrDmiZPlvIDop6Pph4rlmajorr7nva7lr7nor53moYZcbi0g5oiW6ICF6YeN5ZCvUHlDaGFybVxuXG4jIyMgNC4g5omL5Yqo5re75Yqg6Kej6YeK5ZmoXG5cbuWmguaenOiHquWKqOajgOa1i+Wksei0pe+8jOaCqOWPr+S7peaJi+WKqOa3u+WKoOino+mHiuWZqO+8mlxuXG4xLiDlnKhQeUNoYXJt5Lit77yM6L2s5YiwICoqRmlsZSA+IFNldHRpbmdzID4gUHJvamVjdCA+IFB5dGhvbiBJbnRlcnByZXRlcioqXG4yLiDngrnlh7vpvb/ova7lm77moIfvvIzpgInmi6kgKipBZGQuLi4qKlxuMy4g6YCJ5oupICoqRXhpc3RpbmcgRW52aXJvbm1lbnQqKlxuNC4g54K55Ye7ICoqLi4uKiog5oyJ6ZKu5rWP6KeI5paH5Lu257O757ufXG41LiDmiYvliqjlr7zoiKrliLDomZrmi5/njq/looPnmoRQeXRob27op6Pph4rlmajvvJpcbiAgIC0g6Lev5b6E5bqU6K+l5piv77yaYC9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvYmluL3B5dGhvbmBcbiAgIC0g5oiW6ICF5ZyobWFjT1PkuIrvvIzmgqjlj6/ku6Xkvb/nlKggYH4vRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvYmluL3B5dGhvbmBcblxuIyMjIDUuIOS9v+eUqOe7iOerr+mqjOivgeiZmuaLn+eOr+Wig1xuXG7lnKjmt7vliqDop6Pph4rlmajkuYvliY3vvIzlhYjpqozor4HomZrmi5/njq/looPmmK/lkKbmraPnoa7liJvlu7rvvJpcblxuYGBgYmFzaFxuIyDmo4Dmn6VQeXRob27op6Pph4rlmajmmK/lkKblrZjlnKhcbmxzIC1sYSB+L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2Jpbi9weXRob25cblxuIyDlpoLmnpzlrZjlnKjvvIzmtYvor5XlroPmmK/lkKblj6/ku6Xov5DooYxcbn4vRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvYmluL3B5dGhvbiAtLXZlcnNpb25cbmBgYFxuXG4jIyMgNi4g5Yib5bu65paw55qE6aG555uu57qn6Jma5ouf546v5aKDXG5cbuWmguaenOaCqOW4jOacm+WcqOmhueebruagueebruW9leiAjOS4jeaYr2JhY2tlbmTnm67lvZXkuIvliJvlu7romZrmi5/njq/looPvvJpcblxuYGBgYmFzaFxuY2Qgfi9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXJcbnB5dGhvbiAtbSB2ZW52IC52ZW52XG5zb3VyY2UgLnZlbnYvYmluL2FjdGl2YXRlXG5jZCBiYWNrZW5kXG51diBzeW5jXG5gYGBcblxu54S25ZCO5ZyoUHlDaGFybeS4rea3u+WKoCBgfi9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvLnZlbnYvYmluL3B5dGhvbmAg5L2c5Li66Kej6YeK5Zmo44CCXG5cbiMjIOWFtuS7luWPr+iDveeahOino+WGs+aWueahiFxuXG4xLiAqKuS9v+eUqFB5Q2hhcm3liJvlu7romZrmi5/njq/looMqKu+8mlxuICAgLSDlnKjop6Pph4rlmajorr7nva7kuK3pgInmi6kgKipOZXcgRW52aXJvbm1lbnQqKlxuICAgLSDpgInmi6lWaXJ0dWFsZW525oiWQ29uZGHkvZzkuLrnjq/looPnsbvlnotcbiAgIC0g5oyH5a6a5L2N572u5Li6IGB+L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52YFxuICAgLSDpgInmi6nln7rnoYDop6Pph4rlmajvvIhQeXRob24gMy4xMOaIluabtOmrmOeJiOacrO+8iVxuXG4yLiAqKuajgOafpeaWh+S7tuadg+mZkCoq77yaXG4gICAtIOehruS/neaCqOacieadg+mZkOiuv+mXruWSjOaJp+ihjOiZmuaLn+eOr+Wig+S4reeahFB5dGhvblxuXG4zLiAqKuS9v+eUqOezu+e7n+ino+mHiuWZqCoq77yaXG4gICAtIOWmguaenOiZmuaLn+eOr+Wig+mXrumimOaXoOazleino+WGs++8jOWPr+S7peS4tOaXtuS9v+eUqOezu+e7n+ino+mHiuWZqFxuICAgLSDkuYvlkI7miYvliqjlronoo4Xpobnnm67kvp3otZbvvJpgcGlwIGluc3RhbGwgLXIgcmVxdWlyZW1lbnRzLnR4dGDmiJbkvb/nlKjpobnnm67nmoRweXByb2plY3QudG9tbFxuXG7or7flsJ3or5Xov5nkupvop6PlhrPmlrnmoYjvvIznhLblkI7orqnmiJHnn6XpgZPnu5PmnpzvvIzmiJHlj6/ku6Xmj5Dkvpvov5vkuIDmraXnmoTluK7liqnjgIJcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50Ijoi5Li65LuA5LmI5rKh5pyJ55yL5YiwIFtpbnZhbGlkXSB1diAocGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIpICgyKSBQeXRob24gMy4xMC40IH4vRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyLy52ZW52L2Jpbi9weXRob24g6L+Z5Liq6YCJ6aG5In19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJyZXNwb25zZV90ZXh0Ijoi5oKo5rKh5pyJ55yL5Yiw6aKE5pyf55qEUHl0aG9u6Kej6YeK5Zmo6YCJ6aG55Y+v6IO95pyJ5Yeg5Liq5Y6f5Zug44CC6K6p5oiR5biu5oKo5o6S5p+l5bm26Kej5Yaz6L+Z5Liq6Zeu6aKY44CCXG5cbiMjIOWPr+iDveeahOWOn+WboOWSjOino+WGs+aWueahiFxuXG4jIyMgMS4g6Jma5ouf546v5aKD6Lev5b6E5LiN5q2j56GuXG5cbuaCqOaPkOWIsOeahOi3r+W+hOaYryBgfi9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvLnZlbnYvYmluL3B5dGhvbmDvvIzkvYbmoLnmja7kuYvliY3nmoTkv6Hmga/vvIzomZrmi5/njq/looPlupTor6XlnKggYGJhY2tlbmRgIOWtkOebruW9leS4i++8mlxuXG5gYGBcbn4vRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvYmluL3B5dGhvblxuYGBgXG5cbioq6Kej5Yaz5pa55qGIKirvvJpcbi0g56Gu6K6k6Jma5ouf546v5aKD55qE5a6e6ZmF5L2N572uXG4tIOWcqOato+ehrueahOebruW9leS4reWIm+W7uuiZmuaLn+eOr+Wig1xuXG4jIyMgMi4g6Jma5ouf546v5aKD5bCa5pyq5Yib5bu65oiW5Yib5bu65aSx6LSlXG5cbioq6Kej5Yaz5pa55qGIKirvvJpcbmBgYGJhc2hcbiMg6L+b5YWl5q2j56Gu55qE55uu5b2VXG5jZCB+L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kXG5cbiMg56Gu6K6k5piv5ZCm5a2Y5ZyoLnZlbnbnm67lvZVcbmxzIC1sYSB8IGdyZXAgLnZlbnZcblxuIyDlpoLmnpzkuI3lrZjlnKjvvIzliJvlu7rmlrDnmoTomZrmi5/njq/looNcbnV2IHZlbnZcblxuIyDmv4DmtLvlubblronoo4Xkvp3otZZcbnNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGVcbnV2IHN5bmNcbmBgYFxuXG4jIyMgMy4gUHlDaGFybeayoeacieWIt+aWsOWPr+eUqOino+mHiuWZqOWIl+ihqFxuXG4qKuino+WGs+aWueahiCoq77yaXG4tIOWFs+mXreW5tumHjeaWsOaJk+W8gOino+mHiuWZqOiuvue9ruWvueivneahhlxuLSDmiJbogIXph43lkK9QeUNoYXJtXG5cbiMjIyA0LiDmiYvliqjmt7vliqDop6Pph4rlmahcblxu5aaC5p6c6Ieq5Yqo5qOA5rWL5aSx6LSl77yM5oKo5Y+v5Lul5omL5Yqo5re75Yqg6Kej6YeK5Zmo77yaXG5cbjEuIOWcqFB5Q2hhcm3kuK3vvIzovazliLAgKipGaWxlID4gU2V0dGluZ3MgPiBQcm9qZWN0ID4gUHl0aG9uIEludGVycHJldGVyKipcbjIuIOeCueWHu+m9v+i9ruWbvuagh++8jOmAieaLqSAqKkFkZC4uLioqXG4zLiDpgInmi6kgKipFeGlzdGluZyBFbnZpcm9ubWVudCoqXG40LiDngrnlh7sgKiouLi4qKiDmjInpkq7mtY/op4jmlofku7bns7vnu59cbjUuIOaJi+WKqOWvvOiIquWIsOiZmuaLn+eOr+Wig+eahFB5dGhvbuino+mHiuWZqO+8mlxuICAgLSDot6/lvoTlupTor6XmmK/vvJpgL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9iaW4vcHl0aG9uYFxuICAgLSDmiJbogIXlnKhtYWNPU+S4iu+8jOaCqOWPr+S7peS9v+eUqCBgfi9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9iaW4vcHl0aG9uYFxuXG4jIyMgNS4g5L2/55So57uI56uv6aqM6K+B6Jma5ouf546v5aKDXG5cbuWcqOa3u+WKoOino+mHiuWZqOS5i+WJje+8jOWFiOmqjOivgeiZmuaLn+eOr+Wig+aYr+WQpuato+ehruWIm+W7uu+8mlxuXG5gYGBiYXNoXG4jIOajgOafpVB5dGhvbuino+mHiuWZqOaYr+WQpuWtmOWcqFxubHMgLWxhIH4vRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvYmluL3B5dGhvblxuXG4jIOWmguaenOWtmOWcqO+8jOa1i+ivleWug+aYr+WQpuWPr+S7pei/kOihjFxufi9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9iaW4vcHl0aG9uIC0tdmVyc2lvblxuYGBgXG5cbiMjIyA2LiDliJvlu7rmlrDnmoTpobnnm67nuqfomZrmi5/njq/looNcblxu5aaC5p6c5oKo5biM5pyb5Zyo6aG555uu5qC555uu5b2V6ICM5LiN5pivYmFja2VuZOebruW9leS4i+WIm+W7uuiZmuaLn+eOr+Wig++8mlxuXG5gYGBiYXNoXG5jZCB+L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlclxucHl0aG9uIC1tIHZlbnYgLnZlbnZcbnNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGVcbmNkIGJhY2tlbmRcbnV2IHN5bmNcbmBgYFxuXG7nhLblkI7lnKhQeUNoYXJt5Lit5re75YqgIGB+L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci8udmVudi9iaW4vcHl0aG9uYCDkvZzkuLrop6Pph4rlmajjgIJcblxuIyMg5YW25LuW5Y+v6IO955qE6Kej5Yaz5pa55qGIXG5cbjEuICoq5L2/55SoUHlDaGFybeWIm+W7uuiZmuaLn+eOr+Wigyoq77yaXG4gICAtIOWcqOino+mHiuWZqOiuvue9ruS4remAieaLqSAqKk5ldyBFbnZpcm9ubWVudCoqXG4gICAtIOmAieaLqVZpcnR1YWxlbnbmiJZDb25kYeS9nOS4uueOr+Wig+exu+Wei1xuICAgLSDmjIflrprkvY3nva7kuLogYH4vRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnZgXG4gICAtIOmAieaLqeWfuuehgOino+mHiuWZqO+8iFB5dGhvbiAzLjEw5oiW5pu06auY54mI5pys77yJXG5cbjIuICoq5qOA5p+l5paH5Lu25p2D6ZmQKirvvJpcbiAgIC0g56Gu5L+d5oKo5pyJ5p2D6ZmQ6K6/6Zeu5ZKM5omn6KGM6Jma5ouf546v5aKD5Lit55qEUHl0aG9uXG5cbjMuICoq5L2/55So57O757uf6Kej6YeK5ZmoKirvvJpcbiAgIC0g5aaC5p6c6Jma5ouf546v5aKD6Zeu6aKY5peg5rOV6Kej5Yaz77yM5Y+v5Lul5Li05pe25L2/55So57O757uf6Kej6YeK5ZmoXG4gICAtIOS5i+WQjuaJi+WKqOWuieijhemhueebruS+nei1lu+8mmBwaXAgaW5zdGFsbCAtciByZXF1aXJlbWVudHMudHh0YOaIluS9v+eUqOmhueebrueahHB5cHJvamVjdC50b21sXG5cbuivt+Wwneivlei/meS6m+ino+WGs+aWueahiO+8jOeEtuWQjuiuqeaIkeefpemBk+e7k+aenO+8jOaIkeWPr+S7peaPkOS+m+i/m+S4gOatpeeahOW4ruWKqeOAglxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJyZXF1ZXN0X2lkIjoiNDk4NmY0MzgtMTkyNy00YTRjLThjMzctZDkwMTliNDMwMDg5Iiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJiYmRkY2RlMi0xZjJhLTQ2ZDEtODIzOC02YWEzMDcwNjUyMGMiLCJyZXF1ZXN0X21lc3NhZ2UiOiLopoHlpoLkvZXphY3nva7ov5DooYzphY3nva4iLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0Ijoi6KaB5aaC5L2V6YWN572u6L+Q6KGM6YWN572uIn1dfV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIjIOWcqFB5Q2hhcm3kuK3phY3nva7ov5DooYzphY3nva5cblxu5LiL6Z2i5piv5Li6cGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXLpobnnm67phY3nva5QeUNoYXJt6L+Q6KGM6YWN572u55qE6K+m57uG5q2l6aqk77yaXG5cbiMjIOWIm+W7ukZhc3RBUEnov5DooYzphY3nva5cblxuIyMjIDEuIOaJk+W8gOi/kOihjOmFjee9ruWvueivneahhlxuXG4tIOeCueWHu+Wxj+W5leWPs+S4iuinkueahFwiQWRkIENvbmZpZ3VyYXRpb25cIuaIllwiRWRpdCBDb25maWd1cmF0aW9uc1wiXG4tIOaIluiAheS7juiPnOWNleagj+mAieaLqSAqKlJ1biA+IEVkaXQgQ29uZmlndXJhdGlvbnMqKlxuXG4jIyMgMi4g5re75Yqg5paw6YWN572uXG5cbi0g54K55Ye75bem5LiK6KeS55qEICoqKyoqIOaMiemSrlxuLSDku47kuIvmi4noj5zljZXkuK3pgInmi6kgKipQeXRob24qKlxuXG4jIyMgMy4g6YWN572u5Z+65pys6K6+572uXG5cbi0gKirlkI3np7AoTmFtZSkqKjog6L6T5YWl5LiA5Liq5o+P6L+w5oCn5ZCN56ew77yM5L6L5aaCIGBGYXN0QVBJIEJhY2tlbmRgXG4tICoq6ISa5pys6Lev5b6EKFNjcmlwdCBwYXRoKSoqOiDmtY/op4jlubbpgInmi6kgYGFwcC9tYWluLnB5YCDmlofku7ZcbiAgLSDlrozmlbTot6/lvoTlupTor6XmmK8gYC9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvYXBwL21haW4ucHlgXG4tICoq5Y+C5pWwKFBhcmFtZXRlcnMpKio6IOeVmeepuu+8iOaIkeS7rOWwhuS9v+eUqFB5dGhvbuaooeWdl+iAjOS4jeaYr+ebtOaOpei/kOihjOiEmuacrO+8iVxuLSAqKlB5dGhvbuino+mHiuWZqChQeXRob24gaW50ZXJwcmV0ZXIpKio6IOmAieaLqeaCqOS5i+WJjemFjee9rueahOiZmuaLn+eOr+Wig+ino+mHiuWZqFxuLSAqKuW3peS9nOebruW9lShXb3JraW5nIGRpcmVjdG9yeSkqKjog6K6+572u5Li6IGAvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kYFxuXG4jIyMgNC4g6YWN572u5qih5Z2X6K6+572uXG5cbi0g5Y+W5raI6YCJ5oupICoqU2NyaXB0IHBhdGgqKiDpgInpoblcbi0g6YCJ5oupICoqTW9kdWxlIG5hbWUqKiDpgInpoblcbi0g5ZyoICoqTW9kdWxlIG5hbWUqKiDlrZfmrrXkuK3ovpPlhaUgYGZhc3RhcGlgXG4tIOWcqCAqKlBhcmFtZXRlcnMqKiDlrZfmrrXkuK3ovpPlhaUgYHJ1biAtLXJlbG9hZCBhcHAvbWFpbi5weWBcblxuIyMjIDUuIOmFjee9rueOr+Wig+WPmOmHj1xuXG4tIOWxleW8gCAqKkVudmlyb25tZW50IHZhcmlhYmxlcyoqIOmDqOWIhlxuLSDngrnlh7vmlofku7blpLnlm77moIfmiZPlvIDnjq/looPlj5jph4/lr7nor53moYZcbi0g5re75Yqg6aG555uu5omA6ZyA55qE546v5aKD5Y+Y6YeP77yI5Y+v5Lul5LuOYC5lbnZg5paH5Lu25Lit5aSN5Yi277yJXG4tIOaIluiAhe+8jOWLvumAiSAqKkluY2x1ZGUgcGFyZW50IGVudmlyb25tZW50IHZhcmlhYmxlcyoqIOmAiemhue+8jOW5tuehruS/nWAuZW52YOaWh+S7tuWcqOW3peS9nOebruW9leS4rVxuXG4jIyMgNi4g5L+d5a2Y6YWN572uXG5cbi0g54K55Ye7ICoqQXBwbHkqKiDnhLblkI7ngrnlh7sgKipPSyoqIOS/neWtmOmFjee9rlxuXG4jIyDmm7/ku6Pmlrnms5XvvJrkvb/nlKhTaGVsbOiEmuacrOmFjee9rlxuXG7lpoLmnpzmgqjmm7TllpzmrKLkvb/nlKhTaGVsbOiEmuacrOi/kOihjOacjeWKoe+8mlxuXG4xLiDmt7vliqDkuIDkuKogKipTaGVsbCBTY3JpcHQqKiDnsbvlnovnmoTphY3nva5cbjIuIOmFjee9ruiEmuacrOWGheWuue+8mlxuICAgYGBgYmFzaFxuICAgY2QgL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZFxuICAgc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZVxuICAgZmFzdGFwaSBydW4gLS1yZWxvYWQgYXBwL21haW4ucHlcbiAgIGBgYFxuMy4g6K6+572u5bel5L2c55uu5b2V5Li66aG555uu55qEYmFja2VuZOebruW9lVxuXG4jIyDkvb/nlKhQeXRob27ku6PnoIHphY3nva5cblxu5oiW6ICF77yM5oKo5Y+v5Lul5Yib5bu65LiA5Liq566A5Y2V55qEUHl0aG9u5ZCv5Yqo6ISa5pys77yaXG5cbjEuIOWcqGJhY2tlbmTnm67lvZXkuK3liJvlu7rkuIDkuKpgcnVuX3NlcnZlci5weWDmlofku7bvvJpcbiAgIGBgYHB5dGhvblxuICAgaW1wb3J0IG9zXG4gICBpbXBvcnQgc3lzXG4gICBpbXBvcnQgc3VicHJvY2Vzc1xuXG4gICAjIOiuvue9ruW3peS9nOebruW9lVxuICAgb3MuY2hkaXIob3MucGF0aC5kaXJuYW1lKG9zLnBhdGguYWJzcGF0aChfX2ZpbGVfXykpKVxuICAgXG4gICAjIOi/kOihjEZhc3RBUEnmnI3liqHlmahcbiAgIHN1YnByb2Nlc3MucnVuKFtcImZhc3RhcGlcIiwgXCJydW5cIiwgXCItLXJlbG9hZFwiLCBcImFwcC9tYWluLnB5XCJdLCBjaGVjaz1UcnVlKVxuICAgYGBgXG5cbjIuIOeEtuWQjuWIm+W7uuS4gOS4qui/kOihjOatpOiEmuacrOeahFB5Q2hhcm3phY3nva5cblxuIyMg6YWN572u6LCD6K+V6YCJ6aG5XG5cbuWmguaenOaCqOmcgOimgeiwg+ivleWQjuerr+S7o+egge+8mlxuXG4xLiDlnKjov5DooYzphY3nva7kuK3vvIzlsZXlvIAgKipFeGVjdXRpb24qKiDpg6jliIZcbjIuIOWLvumAiSAqKlJ1biB3aXRoIFB5dGhvbiBjb25zb2xlKipcbjMuIOWcqCAqKkJlZm9yZSBsYXVuY2gqKiDpg6jliIbvvIzlj6/ku6Xmt7vliqDku7vkvZXpnIDopoHlnKjlkK/liqjliY3ov5DooYznmoTku7vliqFcblxuIyMg6L+Q6KGM6YWN572uXG5cbumFjee9ruWujOaIkOWQju+8mlxuXG4xLiDku47lj7PkuIrop5LnmoTkuIvmi4noj5zljZXkuK3pgInmi6nmgqjliJvlu7rnmoTphY3nva5cbjIuIOeCueWHu+e7v+iJsueahOi/kOihjOaMiemSrijilrbvuI8p5oiW5L2/55So5b+r5o236ZSuKOmAmuW4uOaYr1NoaWZ0K0YxMCnlkK/liqjmnI3liqFcbjMuIOacjeWKoeWwhuWcqGh0dHA6Ly9sb2NhbGhvc3Q6ODAwMOS4iui/kOihjFxuXG4jIyDpqozor4HmnI3liqHmmK/lkKbmraPluLjov5DooYxcblxu5ZCv5Yqo5pyN5Yqh5ZCO77yM5oKo5Y+v5Lul6YCa6L+H5Lul5LiL5pa55byP6aqM6K+B5a6D5piv5ZCm5q2j5bi46L+Q6KGM77yaXG5cbjEuIOWcqOa1j+iniOWZqOS4reiuv+mXriBodHRwOi8vbG9jYWxob3N0OjgwMDAvZG9jcyDmn6XnnItBUEnmlofmoaNcbjIuIOaIluiAheiuv+mXriBodHRwOi8vbG9jYWxob3N0OjgwMDAvYXBpL3YxL3V0aWxzL2hlYWx0aC1jaGVjay8g5qOA5p+l5YGl5bq354q25oCBXG5cbiMjIOaVhemanOaOkumZpFxuXG7lpoLmnpzpgYfliLDpl67popjvvJpcblxuLSDmo4Dmn6XmjqfliLblj7DovpPlh7rkuK3nmoTplJnor6/kv6Hmga9cbi0g56Gu5L+d5omA5pyJ5L6d6LWW6aG56YO95bey5q2j56Gu5a6J6KOFXG4tIOmqjOivgeeOr+Wig+WPmOmHj+aYr+WQpuato+ehruiuvue9rlxuLSDnoa7kv53mlbDmja7lupPov57mjqXphY3nva7mraPnoa7vvIjlpoLmnpzkvb/nlKjmnKzlnLDmlbDmja7lupPvvIlcblxu6L+Z5Lqb5q2l6aqk5bqU6K+l6IO95biu5Yqp5oKo5ZyoUHlDaGFybeS4reaIkOWKn+mFjee9ruWSjOi/kOihjHBhcmVudGluZy1hc3Npc3RhbnQtc2VydmVy55qE5ZCO56uv5pyN5Yqh44CCXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjowLCJ0ZXh0X25vZGUiOnsiY29udGVudCI6IuimgeWmguS9lemFjee9rui/kOihjOmFjee9riJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwicmVzcG9uc2VfdGV4dCI6IiMg5ZyoUHlDaGFybeS4remFjee9rui/kOihjOmFjee9rlxuXG7kuIvpnaLmmK/kuLpwYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlcumhueebrumFjee9rlB5Q2hhcm3ov5DooYzphY3nva7nmoTor6bnu4bmraXpqqTvvJpcblxuIyMg5Yib5bu6RmFzdEFQSei/kOihjOmFjee9rlxuXG4jIyMgMS4g5omT5byA6L+Q6KGM6YWN572u5a+56K+d5qGGXG5cbi0g54K55Ye75bGP5bmV5Y+z5LiK6KeS55qEXCJBZGQgQ29uZmlndXJhdGlvblwi5oiWXCJFZGl0IENvbmZpZ3VyYXRpb25zXCJcbi0g5oiW6ICF5LuO6I+c5Y2V5qCP6YCJ5oupICoqUnVuID4gRWRpdCBDb25maWd1cmF0aW9ucyoqXG5cbiMjIyAyLiDmt7vliqDmlrDphY3nva5cblxuLSDngrnlh7vlt6bkuIrop5LnmoQgKiorKiog5oyJ6ZKuXG4tIOS7juS4i+aLieiPnOWNleS4remAieaLqSAqKlB5dGhvbioqXG5cbiMjIyAzLiDphY3nva7ln7rmnKzorr7nva5cblxuLSAqKuWQjeensChOYW1lKSoqOiDovpPlhaXkuIDkuKrmj4/ov7DmgKflkI3np7DvvIzkvovlpoIgYEZhc3RBUEkgQmFja2VuZGBcbi0gKirohJrmnKzot6/lvoQoU2NyaXB0IHBhdGgpKio6IOa1j+iniOW5tumAieaLqSBgYXBwL21haW4ucHlgIOaWh+S7tlxuICAtIOWujOaVtOi3r+W+hOW6lOivpeaYryBgL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC9hcHAvbWFpbi5weWBcbi0gKirlj4LmlbAoUGFyYW1ldGVycykqKjog55WZ56m677yI5oiR5Lus5bCG5L2/55SoUHl0aG9u5qih5Z2X6ICM5LiN5piv55u05o6l6L+Q6KGM6ISa5pys77yJXG4tICoqUHl0aG9u6Kej6YeK5ZmoKFB5dGhvbiBpbnRlcnByZXRlcikqKjog6YCJ5oup5oKo5LmL5YmN6YWN572u55qE6Jma5ouf546v5aKD6Kej6YeK5ZmoXG4tICoq5bel5L2c55uu5b2VKFdvcmtpbmcgZGlyZWN0b3J5KSoqOiDorr7nva7kuLogYC9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmRgXG5cbiMjIyA0LiDphY3nva7mqKHlnZforr7nva5cblxuLSDlj5bmtojpgInmi6kgKipTY3JpcHQgcGF0aCoqIOmAiemhuVxuLSDpgInmi6kgKipNb2R1bGUgbmFtZSoqIOmAiemhuVxuLSDlnKggKipNb2R1bGUgbmFtZSoqIOWtl+auteS4rei+k+WFpSBgZmFzdGFwaWBcbi0g5ZyoICoqUGFyYW1ldGVycyoqIOWtl+auteS4rei+k+WFpSBgcnVuIC0tcmVsb2FkIGFwcC9tYWluLnB5YFxuXG4jIyMgNS4g6YWN572u546v5aKD5Y+Y6YePXG5cbi0g5bGV5byAICoqRW52aXJvbm1lbnQgdmFyaWFibGVzKiog6YOo5YiGXG4tIOeCueWHu+aWh+S7tuWkueWbvuagh+aJk+W8gOeOr+Wig+WPmOmHj+WvueivneahhlxuLSDmt7vliqDpobnnm67miYDpnIDnmoTnjq/looPlj5jph4/vvIjlj6/ku6Xku45gLmVudmDmlofku7bkuK3lpI3liLbvvIlcbi0g5oiW6ICF77yM5Yu+6YCJICoqSW5jbHVkZSBwYXJlbnQgZW52aXJvbm1lbnQgdmFyaWFibGVzKiog6YCJ6aG577yM5bm256Gu5L+dYC5lbnZg5paH5Lu25Zyo5bel5L2c55uu5b2V5LitXG5cbiMjIyA2LiDkv53lrZjphY3nva5cblxuLSDngrnlh7sgKipBcHBseSoqIOeEtuWQjueCueWHuyAqKk9LKiog5L+d5a2Y6YWN572uXG5cbiMjIOabv+S7o+aWueazle+8muS9v+eUqFNoZWxs6ISa5pys6YWN572uXG5cbuWmguaenOaCqOabtOWWnOasouS9v+eUqFNoZWxs6ISa5pys6L+Q6KGM5pyN5Yqh77yaXG5cbjEuIOa3u+WKoOS4gOS4qiAqKlNoZWxsIFNjcmlwdCoqIOexu+Wei+eahOmFjee9rlxuMi4g6YWN572u6ISa5pys5YaF5a6577yaXG4gICBgYGBiYXNoXG4gICBjZCAvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kXG4gICBzb3VyY2UgLnZlbnYvYmluL2FjdGl2YXRlXG4gICBmYXN0YXBpIHJ1biAtLXJlbG9hZCBhcHAvbWFpbi5weVxuICAgYGBgXG4zLiDorr7nva7lt6XkvZznm67lvZXkuLrpobnnm67nmoRiYWNrZW5k55uu5b2VXG5cbiMjIOS9v+eUqFB5dGhvbuS7o+eggemFjee9rlxuXG7miJbogIXvvIzmgqjlj6/ku6XliJvlu7rkuIDkuKrnroDljZXnmoRQeXRob27lkK/liqjohJrmnKzvvJpcblxuMS4g5ZyoYmFja2VuZOebruW9leS4reWIm+W7uuS4gOS4qmBydW5fc2VydmVyLnB5YOaWh+S7tu+8mlxuICAgYGBgcHl0aG9uXG4gICBpbXBvcnQgb3NcbiAgIGltcG9ydCBzeXNcbiAgIGltcG9ydCBzdWJwcm9jZXNzXG5cbiAgICMg6K6+572u5bel5L2c55uu5b2VXG4gICBvcy5jaGRpcihvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5hYnNwYXRoKF9fZmlsZV9fKSkpXG4gICBcbiAgICMg6L+Q6KGMRmFzdEFQSeacjeWKoeWZqFxuICAgc3VicHJvY2Vzcy5ydW4oW1wiZmFzdGFwaVwiLCBcInJ1blwiLCBcIi0tcmVsb2FkXCIsIFwiYXBwL21haW4ucHlcIl0sIGNoZWNrPVRydWUpXG4gICBgYGBcblxuMi4g54S25ZCO5Yib5bu65LiA5Liq6L+Q6KGM5q2k6ISa5pys55qEUHlDaGFybemFjee9rlxuXG4jIyDphY3nva7osIPor5XpgInpoblcblxu5aaC5p6c5oKo6ZyA6KaB6LCD6K+V5ZCO56uv5Luj56CB77yaXG5cbjEuIOWcqOi/kOihjOmFjee9ruS4re+8jOWxleW8gCAqKkV4ZWN1dGlvbioqIOmDqOWIhlxuMi4g5Yu+6YCJICoqUnVuIHdpdGggUHl0aG9uIGNvbnNvbGUqKlxuMy4g5ZyoICoqQmVmb3JlIGxhdW5jaCoqIOmDqOWIhu+8jOWPr+S7pea3u+WKoOS7u+S9lemcgOimgeWcqOWQr+WKqOWJjei/kOihjOeahOS7u+WKoVxuXG4jIyDov5DooYzphY3nva5cblxu6YWN572u5a6M5oiQ5ZCO77yaXG5cbjEuIOS7juWPs+S4iuinkueahOS4i+aLieiPnOWNleS4remAieaLqeaCqOWIm+W7uueahOmFjee9rlxuMi4g54K55Ye757u/6Imy55qE6L+Q6KGM5oyJ6ZKuKOKWtu+4jynmiJbkvb/nlKjlv6vmjbfplK4o6YCa5bi45pivU2hpZnQrRjEwKeWQr+WKqOacjeWKoVxuMy4g5pyN5Yqh5bCG5ZyoaHR0cDovL2xvY2FsaG9zdDo4MDAw5LiK6L+Q6KGMXG5cbiMjIOmqjOivgeacjeWKoeaYr+WQpuato+W4uOi/kOihjFxuXG7lkK/liqjmnI3liqHlkI7vvIzmgqjlj6/ku6XpgJrov4fku6XkuIvmlrnlvI/pqozor4HlroPmmK/lkKbmraPluLjov5DooYzvvJpcblxuMS4g5Zyo5rWP6KeI5Zmo5Lit6K6/6ZeuIGh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9kb2NzIOafpeeci0FQSeaWh+aho1xuMi4g5oiW6ICF6K6/6ZeuIGh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9hcGkvdjEvdXRpbHMvaGVhbHRoLWNoZWNrLyDmo4Dmn6XlgaXlurfnirbmgIFcblxuIyMg5pWF6Zqc5o6S6ZmkXG5cbuWmguaenOmBh+WIsOmXrumimO+8mlxuXG4tIOajgOafpeaOp+WItuWPsOi+k+WHuuS4reeahOmUmeivr+S/oeaBr1xuLSDnoa7kv53miYDmnInkvp3otZbpobnpg73lt7LmraPnoa7lronoo4Vcbi0g6aqM6K+B546v5aKD5Y+Y6YeP5piv5ZCm5q2j56Gu6K6+572uXG4tIOehruS/neaVsOaNruW6k+i/nuaOpemFjee9ruato+ehru+8iOWmguaenOS9v+eUqOacrOWcsOaVsOaNruW6k++8iVxuXG7ov5nkupvmraXpqqTlupTor6Xog73luK7liqnmgqjlnKhQeUNoYXJt5Lit5oiQ5Yqf6YWN572u5ZKM6L+Q6KGMcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXLnmoTlkI7nq6/mnI3liqHjgIJcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsicmVxdWVzdF9pZCI6IjJkNzY1ZDlmLTBlY2EtNDMxZS1hZDVkLWZmMTFhZWI1NDljNSIsInN0YXR1cyI6ImNhbmNlbGxlZCIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtdHVybi1kZWxpbWl0ZXIifSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiODY4ZTk1ZjktODk5OC00MDVhLWE1NDAtMjBmYjNjMGM3NGU4IiwicmVxdWVzdF9tZXNzYWdlIjoi5oql6ZSZ77yaTW9kdWxlTm90Rm91bmRFcnJvcjogTm8gbW9kdWxlIG5hbWVkICdsYW5nY2hhaW5fY29tbXVuaXR5J1xuIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IuaKpemUme+8mk1vZHVsZU5vdEZvdW5kRXJyb3I6IE5vIG1vZHVsZSBuYW1lZCAnbGFuZ2NoYWluX2NvbW11bml0eScifSx7InR5cGUiOiJoYXJkQnJlYWsifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVJ4RGNmTlljVWI1NEoyU2tjUnp6TjgiLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIlxcdTY3ZTVcXHU2MjdlXFx1OTg3OVxcdTc2ZWVcXHU0ZTJkXFx1NGUwZWxhbmdjaGFpblxcdTc2ZjhcXHU1MTczXFx1NzY4NFxcdTRmOWRcXHU4ZDU2XFx1OTE0ZFxcdTdmNmVcXHVmZjBjXFx1NzI3OVxcdTUyMmJcXHU2NjJmXFx1NTcyOHB5cHJvamVjdC50b21sXFx1NjIxNnJlcXVpcmVtZW50cy50eHRcXHU0ZTJkXFx1NzY4NFxcdTkxNGRcXHU3ZjZlXCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLov5nkuKrplJnor6/ooajmmI7mgqjnmoTnjq/looPkuK3nvLrlsJEgYGxhbmdjaGFpbl9jb21tdW5pdHlgIOaooeWdl+OAgui/meaYr+S4gOS4quS4jkxhbmdDaGFpbuahhuaetuebuOWFs+eahOS+nei1lumhue+8jOmcgOimgeWuieijheaJjeiDvei/kOihjOmhueebruOAguiuqeaIkeW4ruaCqOino+WGs+i/meS4qumXrumimOOAglxuXG4jIyDop6PlhrMgYE1vZHVsZU5vdEZvdW5kRXJyb3I6IE5vIG1vZHVsZSBuYW1lZCAnbGFuZ2NoYWluX2NvbW11bml0eSdgIOmUmeivr1xuXG4jIyMg5pa55rOVMe+8muS9v+eUqCB1diDlronoo4XnvLrlpLHnmoTkvp3otZZcblxu5aaC5p6c5oKo5q2j5Zyo5L2/55So6aG555uu5o6o6I2Q55qEIGB1dmAg5bel5YW3566h55CG5L6d6LWW77yaXG5cbmBgYGJhc2hcbiMg6L+b5YWlYmFja2VuZOebruW9lVxuY2QgL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZFxuXG4jIOa/gOa0u+iZmuaLn+eOr+Wig1xuc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZVxuXG4jIOWuieijhWxhbmdjaGFpbl9jb21tdW5pdHlcbnV2IHBpcCBpbnN0YWxsIGxhbmdjaGFpbl9jb21tdW5pdHlcbmBgYFxuXG4jIyMg5pa55rOVMu+8muS9v+eUqCBwaXAg5a6J6KOF57y65aSx55qE5L6d6LWWXG5cbuWmguaenCBgdXZgIOWuieijheS4jeaIkOWKn++8jOWPr+S7peWwneivleS9v+eUqOS8oOe7n+eahCBwaXDvvJpcblxuYGBgYmFzaFxuIyDnoa7kv53omZrmi5/njq/looPlt7Lmv4DmtLtcbnNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGVcblxuIyDlronoo4VsYW5nY2hhaW5fY29tbXVuaXR5XG5waXAgaW5zdGFsbCBsYW5nY2hhaW5fY29tbXVuaXR5XG5gYGBcblxuIyMjIOaWueazlTPvvJrmo4Dmn6Xlubblronoo4XmiYDmnInpobnnm67kvp3otZZcblxu5Y+v6IO95LiN5Y+q5piv57y65bCRIGBsYW5nY2hhaW5fY29tbXVuaXR5YO+8jOiAjOaYr+mhueebrueahOS+nei1luayoeacieWujOWFqOWuieijheOAguaCqOWPr+S7peWwneivle+8mlxuXG5gYGBiYXNoXG4jIOi/m+WFpWJhY2tlbmTnm67lvZVcbmNkIC9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmRcblxuIyDmv4DmtLvomZrmi5/njq/looNcbnNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGVcblxuIyDkvb/nlKh1dumHjeaWsOWuieijheaJgOacieS+nei1llxudXYgcGlwIGluc3RhbGwgLWUgLlxuYGBgXG5cbuaIluiAhe+8jOWmguaenOmhueebruS9v+eUqHJlcXVpcmVtZW50cy50eHTvvJpcblxuYGBgYmFzaFxudXYgcGlwIGluc3RhbGwgLXIgcmVxdWlyZW1lbnRzLnR4dFxuYGBgXG5cbiMjIyDmlrnms5U077ya5qOA5p+lcHlwcm9qZWN0LnRvbWzlubblronoo4Xkvp3otZZcblxu5aaC5p6c6aG555uu5L2/55SocHlwcm9qZWN0LnRvbWznrqHnkIbkvp3otZbvvJpcblxuYGBgYmFzaFxuIyDmn6XnnItweXByb2plY3QudG9tbOS4reaYr+WQpuWMheWQq2xhbmdjaGFpbl9jb21tdW5pdHlcbmNhdCBweXByb2plY3QudG9tbFxuXG4jIOWmguaenOayoeacieaYjuehruWIl+WHuu+8jOWPr+iDvemcgOimgeaJi+WKqOa3u+WKoOW5tumHjeaWsOWuieijhVxudXYgcGlwIGluc3RhbGwgbGFuZ2NoYWluIGxhbmdjaGFpbl9jb21tdW5pdHlcbmBgYFxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiLmiqXplJnvvJpNb2R1bGVOb3RGb3VuZEVycm9yOiBObyBtb2R1bGUgbmFtZWQgJ2xhbmdjaGFpbl9jb21tdW5pdHknXG4ifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInJlc3BvbnNlX3RleHQiOiLov5nkuKrplJnor6/ooajmmI7mgqjnmoTnjq/looPkuK3nvLrlsJEgYGxhbmdjaGFpbl9jb21tdW5pdHlgIOaooeWdl+OAgui/meaYr+S4gOS4quS4jkxhbmdDaGFpbuahhuaetuebuOWFs+eahOS+nei1lumhue+8jOmcgOimgeWuieijheaJjeiDvei/kOihjOmhueebruOAguiuqeaIkeW4ruaCqOino+WGs+i/meS4qumXrumimOOAglxuXG4jIyDop6PlhrMgYE1vZHVsZU5vdEZvdW5kRXJyb3I6IE5vIG1vZHVsZSBuYW1lZCAnbGFuZ2NoYWluX2NvbW11bml0eSdgIOmUmeivr1xuXG4jIyMg5pa55rOVMe+8muS9v+eUqCB1diDlronoo4XnvLrlpLHnmoTkvp3otZZcblxu5aaC5p6c5oKo5q2j5Zyo5L2/55So6aG555uu5o6o6I2Q55qEIGB1dmAg5bel5YW3566h55CG5L6d6LWW77yaXG5cbmBgYGJhc2hcbiMg6L+b5YWlYmFja2VuZOebruW9lVxuY2QgL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZFxuXG4jIOa/gOa0u+iZmuaLn+eOr+Wig1xuc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZVxuXG4jIOWuieijhWxhbmdjaGFpbl9jb21tdW5pdHlcbnV2IHBpcCBpbnN0YWxsIGxhbmdjaGFpbl9jb21tdW5pdHlcbmBgYFxuXG4jIyMg5pa55rOVMu+8muS9v+eUqCBwaXAg5a6J6KOF57y65aSx55qE5L6d6LWWXG5cbuWmguaenCBgdXZgIOWuieijheS4jeaIkOWKn++8jOWPr+S7peWwneivleS9v+eUqOS8oOe7n+eahCBwaXDvvJpcblxuYGBgYmFzaFxuIyDnoa7kv53omZrmi5/njq/looPlt7Lmv4DmtLtcbnNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGVcblxuIyDlronoo4VsYW5nY2hhaW5fY29tbXVuaXR5XG5waXAgaW5zdGFsbCBsYW5nY2hhaW5fY29tbXVuaXR5XG5gYGBcblxuIyMjIOaWueazlTPvvJrmo4Dmn6Xlubblronoo4XmiYDmnInpobnnm67kvp3otZZcblxu5Y+v6IO95LiN5Y+q5piv57y65bCRIGBsYW5nY2hhaW5fY29tbXVuaXR5YO+8jOiAjOaYr+mhueebrueahOS+nei1luayoeacieWujOWFqOWuieijheOAguaCqOWPr+S7peWwneivle+8mlxuXG5gYGBiYXNoXG4jIOi/m+WFpWJhY2tlbmTnm67lvZVcbmNkIC9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmRcblxuIyDmv4DmtLvomZrmi5/njq/looNcbnNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGVcblxuIyDkvb/nlKh1dumHjeaWsOWuieijheaJgOacieS+nei1llxudXYgcGlwIGluc3RhbGwgLWUgLlxuYGBgXG5cbuaIluiAhe+8jOWmguaenOmhueebruS9v+eUqHJlcXVpcmVtZW50cy50eHTvvJpcblxuYGBgYmFzaFxudXYgcGlwIGluc3RhbGwgLXIgcmVxdWlyZW1lbnRzLnR4dFxuYGBgXG5cbiMjIyDmlrnms5U077ya5qOA5p+lcHlwcm9qZWN0LnRvbWzlubblronoo4Xkvp3otZZcblxu5aaC5p6c6aG555uu5L2/55SocHlwcm9qZWN0LnRvbWznrqHnkIbkvp3otZbvvJpcblxuYGBgYmFzaFxuIyDmn6XnnItweXByb2plY3QudG9tbOS4reaYr+WQpuWMheWQq2xhbmdjaGFpbl9jb21tdW5pdHlcbmNhdCBweXByb2plY3QudG9tbFxuXG4jIOWmguaenOayoeacieaYjuehruWIl+WHuu+8jOWPr+iDvemcgOimgeaJi+WKqOa3u+WKoOW5tumHjeaWsOWuieijhVxudXYgcGlwIGluc3RhbGwgbGFuZ2NoYWluIGxhbmdjaGFpbl9jb21tdW5pdHlcbmBgYFxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjZhNmI3ODBmLWQ0MjUtNDgxMS05ZTc2LTdkZjNiNjhjMjlkZCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IuagueaNrumhueebruS7o+egge+8jOaIkeWPkeeOsOmhueebruehruWunuS+nei1luS6jmBsYW5nY2hhaW5fY29tbXVuaXR5YO+8jOS9hui/meS4quS+nei1luWcqGBweXByb2plY3QudG9tbGDkuK3msqHmnInmmI7noa7liJflh7rvvIzogIzmmK/lnKhgcmVxdWlyZW1lbnRzLnR4dGDmlofku7bkuK3lrprkuYnnmoTjgILorqnmiJHluK7mgqjop6PlhrPov5nkuKrpl67popjjgIJcblxuIyMg6Kej5YazIGBsYW5nY2hhaW5fY29tbXVuaXR5YCDnvLrlpLHpl67pophcblxuIyMjIOaWueazlTHvvJrlronoo4UgcmVxdWlyZW1lbnRzLnR4dCDkuK3nmoTkvp3otZZcblxu6aG555uu55qEYGJhY2tlbmQvcmVxdWlyZW1lbnRzLnR4dGDmlofku7bkuK3ljIXlkKvkuobmiYDmnInpnIDopoHnmoRMYW5nQ2hhaW7nm7jlhbPkvp3otZbvvJpcblxuYGBgYmFzaFxuIyDov5vlhaViYWNrZW5k55uu5b2VXG5jZCAvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kXG5cbiMg5r+A5rS76Jma5ouf546v5aKDXG5zb3VyY2UgLnZlbnYvYmluL2FjdGl2YXRlXG5cbiMg5a6J6KOFcmVxdWlyZW1lbnRzLnR4dOS4reeahOaJgOacieS+nei1llxucGlwIGluc3RhbGwgLXIgcmVxdWlyZW1lbnRzLnR4dFxuYGBgXG5cbuaIluiAheS9v+eUqHV277yaXG5cbmBgYGJhc2hcbnV2IHBpcCBpbnN0YWxsIC1yIHJlcXVpcmVtZW50cy50eHRcbmBgYFxuXG4jIyMg5pa55rOVMu+8muWPquWuieijhee8uuWkseeahExhbmdDaGFpbuebuOWFs+S+nei1llxuXG7lpoLmnpzmgqjlj6rmg7Plronoo4XnvLrlpLHnmoRMYW5nQ2hhaW7nm7jlhbPkvp3otZbvvJpcblxuYGBgYmFzaFxuIyDnoa7kv53omZrmi5/njq/looPlt7Lmv4DmtLtcbnNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGVcblxuIyDlronoo4VMYW5nQ2hhaW7nm7jlhbPkvp3otZZcbnBpcCBpbnN0YWxsIGxhbmdjaGFpbiBsYW5nY2hhaW4tY29yZSBsYW5nY2hhaW4tY29tbXVuaXR5IGxhbmdjaGFpbi1jaHJvbWEgY2hyb21hZGIgaHR0cHggcHlwZGYgZG9jeDJ0eHQgdW5zdHJ1Y3R1cmVkXG5gYGBcblxuIyMjIOaWueazlTPvvJrmm7TmlrBweXByb2plY3QudG9tbOW5tumHjeaWsOWuieijhVxuXG7mgqjkuZ/lj6/ku6XlsIbov5nkupvkvp3otZbmt7vliqDliLBgcHlwcm9qZWN0LnRvbWxg5paH5Lu25Lit77yM54S25ZCO6YeN5paw5a6J6KOF77yaXG5cbjEuIOe8lui+kWBiYWNrZW5kL3B5cHJvamVjdC50b21sYOaWh+S7tu+8jOWcqGRlcGVuZGVuY2llc+WIl+ihqOS4rea3u+WKoO+8mlxuICAgYGBgXG4gICBcImxhbmdjaGFpbj49MC4xLjBcIixcbiAgIFwibGFuZ2NoYWluLWNvcmU+PTAuMS4wXCIsXG4gICBcImxhbmdjaGFpbi1jb21tdW5pdHk+PTAuMS4wXCIsXG4gICBcImxhbmdjaGFpbi1jaHJvbWE+PTAuMS4wXCIsXG4gICBcImNocm9tYWRiPj0wLjQuMFwiLFxuICAgXCJweXBkZj49NC4wLjBcIixcbiAgIFwiZG9jeDJ0eHQ+PTAuOFwiLFxuICAgXCJ1bnN0cnVjdHVyZWQ+PTAuMTIuMFwiLFxuICAgYGBgXG5cbjIuIOeEtuWQjumHjeaWsOWuieijheS+nei1lu+8mlxuICAgYGBgYmFzaFxuICAgdXYgc3luY1xuICAgYGBgXG5cbiMjIOmqjOivgeWuieijhVxuXG7lronoo4XlrozmiJDlkI7vvIzmgqjlj6/ku6Xpqozor4Hkvp3otZbmmK/lkKbmraPnoa7lronoo4XvvJpcblxuYGBgYmFzaFxuIyDnoa7kv53omZrmi5/njq/looPlt7Lmv4DmtLtcbnNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGVcblxuIyDpqozor4FsYW5nY2hhaW5fY29tbXVuaXR55piv5ZCm5bey5a6J6KOFXG5weXRob24gLWMgXCJpbXBvcnQgbGFuZ2NoYWluX2NvbW11bml0eTsgcHJpbnQobGFuZ2NoYWluX2NvbW11bml0eS5fX3ZlcnNpb25fXylcIlxuYGBgXG5cbuWmguaenOayoeacieaKpemUmeW5tuaYvuekuueJiOacrOWPt++8jOivtOaYjuWuieijheaIkOWKn+OAglxuXG4jIyDph43mlrDov5DooYzmnI3liqFcblxu5a6J6KOF5a6M5L6d6LWW5ZCO77yM6YeN5paw5bCd6K+V6L+Q6KGM5pyN5Yqh77yaXG5cbmBgYGJhc2hcbiMg5ZyoUHlDaGFybeS4reS9v+eUqOaCqOS5i+WJjemFjee9rueahOi/kOihjOmFjee9rlxuIyDmiJbogIXlnKjnu4jnq6/kuK3ov5DooYxcbmNkIC9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmRcbnNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGVcbmZhc3RhcGkgcnVuIC0tcmVsb2FkIGFwcC9tYWluLnB5XG5gYGBcblxu6L+Z5bqU6K+l6IO96Kej5YazYE1vZHVsZU5vdEZvdW5kRXJyb3I6IE5vIG1vZHVsZSBuYW1lZCAnbGFuZ2NoYWluX2NvbW11bml0eSdg6ZSZ6K+v44CC5aaC5p6c5oKo6YGH5Yiw5YW25LuW57y65aSx5qih5Z2X55qE6ZSZ6K+v77yM5Y+v5Lul5L2/55So57G75Ly855qE5pa55rOV5a6J6KOF5a6D5Lus44CCXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBiYWNrZW5kL3JlcXVpcmVtZW50cy50eHRcbiMgRmFzdEFQSVxuZmFzdGFwaT49MC4xMTUuMFxudXZpY29ybj49MC4zMC4wXG5weWRhbnRpYz49Mi45LjBcbnB5ZGFudGljLXNldHRpbmdzPj0yLjUuMFxuc3FsbW9kZWw+PTAuMC4yMlxuZW1haWwtdmFsaWRhdG9yPj0yLjIuMFxucHl0aG9uLW11bHRpcGFydD49MC4wLjEwXG5cbiMgRGF0YWJhc2VcbnBzeWNvcGc+PTMuMi4wXG5hbGVtYmljPj0xLjEzLjBcblxuIyBTZWN1cml0eVxucHl0aG9uLWpvc2U+PTMuMy4wXG5wYXNzbGliPj0xLjcuNFxuYmNyeXB0Pj00LjAuMVxuXG4jIEVtYWlsXG5lbWFpbHM+PTAuNlxuamluamEyPj0zLjEuNFxuXG4jIFJBRyBTeXN0ZW1cbmxhbmdjaGFpbj49MC4xLjBcbmxhbmdjaGFpbi1jb3JlPj0wLjEuMFxubGFuZ2NoYWluLWNvbW11bml0eT49MC4xLjBcbmxhbmdjaGFpbi1jaHJvbWE+PTAuMS4wXG5jaHJvbWFkYj49MC40LjBcbmh0dHB4Pj0wLjI3LjBcbnB5cGRmPj00LjAuMFxuZG9jeDJ0eHQ+PTAuOFxudW5zdHJ1Y3R1cmVkPj0wLjEyLjBcbi4uLlxuUGF0aDogYmFja2VuZC9weXByb2plY3QudG9tbFxuW3Byb2plY3RdXG5uYW1lID0gXCJhcHBcIlxudmVyc2lvbiA9IFwiMC4xLjBcIlxuZGVzY3JpcHRpb24gPSBcIlwiXG5yZXF1aXJlcy1weXRob24gPSBcIj49My4xMCw8NC4wXCJcbmRlcGVuZGVuY2llcyA9IFtcbiAgICBcImZhc3RhcGlbc3RhbmRhcmRdPDEuMC4wLD49MC4xMTQuMlwiLFxuICAgIFwicHl0aG9uLW11bHRpcGFydDwxLjAuMCw+PTAuMC43XCIsXG4gICAgXCJlbWFpbC12YWxpZGF0b3I8My4wLjAuMCw+PTIuMS4wLnBvc3QxXCIsXG4gICAgXCJwYXNzbGliW2JjcnlwdF08Mi4wLjAsPj0xLjcuNFwiLFxuICAgIFwidGVuYWNpdHk8OS4wLjAsPj04LjIuM1wiLFxuICAgIFwicHlkYW50aWM+Mi4wXCIsXG4gICAgXCJlbWFpbHM8MS4wLD49MC42XCIsXG4gICAgXCJqaW5qYTI8NC4wLjAsPj0zLjEuNFwiLFxuICAgIFwiYWxlbWJpYzwyLjAuMCw+PTEuMTIuMVwiLFxuICAgIFwiaHR0cHg8MS4wLjAsPj0wLjI1LjFcIixcbiAgICBcInBzeWNvcGdbYmluYXJ5XTw0LjAuMCw+PTMuMS4xM1wiLFxuICAgIFwic3FsbW9kZWw8MS4wLjAsPj0wLjAuMjFcIixcbiAgICAjIFBpbiBiY3J5cHQgdW50aWwgcGFzc2xpYiBzdXBwb3J0cyB0aGUgbGF0ZXN0XG4gICAgXCJiY3J5cHQ9PTQuMC4xXCIsXG4gICAgXCJweWRhbnRpYy1zZXR0aW5nczwzLjAuMCw+PTIuMi4xXCIsXG4gICAgXCJzZW50cnktc2RrW2Zhc3RhcGldPDIuMC4wLD49MS40MC42XCIsXG4gICAgXCJweWp3dDwzLjAuMCw+PTIuOC4wXCIsXG5dXG5cblt0b29sLnV2XVxuZGV2LWRlcGVuZGVuY2llcyA9IFtcbiAgICBcInB5dGVzdDw4LjAuMCw+PTcuNC4zXCIsXG4gICAgXCJteXB5PDIuMC4wLD49MS44LjBcIixcbiAgICBcInJ1ZmY8MS4wLjAsPj0wLjIuMlwiLFxuICAgIFwicHJlLWNvbW1pdDw0LjAuMCw+PTMuNi4yXCIsXG4gICAgXCJ0eXBlcy1wYXNzbGliPDIuMC4wLjAsPj0xLjcuNy4yMDI0MDEwNlwiLFxuICAgIFwiY292ZXJhZ2U8OC4wLjAsPj03LjQuM1wiLFxuXVxuXG5bYnVpbGQtc3lzdGVtXVxucmVxdWlyZXMgPSBbXCJoYXRjaGxpbmdcIl1cbmJ1aWxkLWJhY2tlbmQgPSBcImhhdGNobGluZy5idWlsZFwiXG5cblt0b29sLm15cHldXG5zdHJpY3QgPSB0cnVlXG5leGNsdWRlID0gW1widmVudlwiLCBcIi52ZW52XCIsIFwiYWxlbWJpY1wiXVxuXG5bdG9vbC5ydWZmXVxudGFyZ2V0LXZlcnNpb24gPSBcInB5MzEwXCJcbmV4Y2x1ZGUgPSBbXCJhbGVtYmljXCJdXG5cblt0b29sLnJ1ZmYubGludF1cbnNlbGVjdCA9IFtcbiAgICBcIkVcIiwgICMgcHljb2Rlc3R5bGUgZXJyb3JzXG4gICAgXCJXXCIsICAjIHB5Y29kZXN0eWxlIHdhcm5pbmdzXG4gICAgXCJGXCIsICAjIHB5Zmxha2VzXG4gICAgXCJJXCIsICAjIGlzb3J0XG4gICAgXCJCXCIsICAjIGZsYWtlOC1idWdiZWFyXG4gICAgXCJDNFwiLCAgIyBmbGFrZTgtY29tcHJlaGVuc2lvbnNcbiAgICBcIlVQXCIsICAjIHB5dXBncmFkZVxuICAgIFwiQVJHMDAxXCIsICMgdW51c2VkIGFyZ3VtZW50cyBpbiBmdW5jdGlvbnNcbl1cbi4uLlxuUGF0aDogZG9jL2Zhc3RBcGkgUmFn5py65Zmo5Lq6Lm1kXG4uLi5cblxu5YWz5rOo54K55YiG56a777ya5q+P5Liq5paH5Lu26LSf6LSj54m55a6a5Yqf6IO9XG7mqKHlnZfljJbvvJrnu4Tku7blj6/ku6Xni6znq4vlvIDlj5HlkozmtYvor5VcbuWPr+aJqeWxleaAp++8mumaj+edgOmhueebruWinumVv++8jOWPr+S7pei9u+advua3u+WKoOaWsOWKn+iDvVxu5Y+v6K+75oCn77ya5riF5pmw55qE5paH5Lu25ZG95ZCN5ZKM5YiG56a755qE5YWz5rOo54K55L2/5paw5byA5Y+R5Lq65ZGY6IO95aSf5b+r6YCf55CG6Kej6aG555uuIDUuIOeOr+Wig+iuvue9rlxu5Yib5bu66aG555uu55uu5b2V77yaXG5ta2RpciByYWctZmFzdGFwaS1wcm9qZWN0XG5jZCByYWctZmFzdGFwaS1wcm9qZWN0XG7lronoo4Xkvp3otZbvvJpcbuWIm+W7uiByZXF1aXJlbWVudHMudHh0IOaWh+S7tu+8mlxuXG5sYW5nY2hhaW5cbmxhbmdjaGFpbi1vcGVuYWlcbmxhbmdjaGFpbi1jb3JlXG5sYW5nY2hhaW5fY29tbXVuaXR5XG5kb2N4MnR4dFxucHlwZGZcbmxhbmdjaGFpbl9jaHJvbWFcbnB5dGhvbi1tdWx0aXBhcnRcbmZhc3RhcGlcbnV2aWNvcm5cbuWuieijheS+nei1lu+8mlxuXG42LiDmlbDmja7mqKHlnovlrprkuYlcbiAgIOS9v+eUqCBQeWRhbnRpYyDlrprkuYnor7fmsYLlkozlk43lupTmqKHlnovmmK8gRmFzdEFQSSDnmoTmnIDkvbPlrp7ot7XjgILlnKggcHlkYW50aWNfbW9kZWxzLnB5IOS4re+8mlxuXG7ov5nkupvmqKHlnovnoa7kv53vvJpcblxu6L6T5YWl5pWw5o2u6aqM6K+BXG7muIXmmbDnmoQgQVBJIOWlkee6plxu6Ieq5YqoIEFQSSDmlofmoaPnlJ/miJBcbuexu+Wei+WuieWFqFxu5Zyo5LiL5LiA6YOo5YiG5Lit77yM5oiR5bCG6K+m57uG5LuL57uN5pWw5o2u5bqT6K6+572u44CB5ZCR6YeP5a2Y5YKo6ZuG5oiQ5Lul5Y+KIExhbmdDaGFpbiBSQUcg5a6e546w44CCXG4uLi5cblBhdGg6IGJhY2tlbmQvdXYubG9ja1xuLi4uXG5cbltbcGFja2FnZV1dXG5uYW1lID0gXCJhcHBcIlxudmVyc2lvbiA9IFwiMC4xLjBcIlxuc291cmNlID0geyBlZGl0YWJsZSA9IFwiLlwiIH1cbmRlcGVuZGVuY2llcyA9IFtcbiAgICB7IG5hbWUgPSBcImFsZW1iaWNcIiB9LFxuICAgIHsgbmFtZSA9IFwiYmNyeXB0XCIgfSxcbiAgICB7IG5hbWUgPSBcImVtYWlsLXZhbGlkYXRvclwiIH0sXG4gICAgeyBuYW1lID0gXCJlbWFpbHNcIiB9LFxuICAgIHsgbmFtZSA9IFwiZmFzdGFwaVwiLCBleHRyYSA9IFtcInN0YW5kYXJkXCJdIH0sXG4gICAgeyBuYW1lID0gXCJodHRweFwiIH0sXG4gICAgeyBuYW1lID0gXCJqaW5qYTJcIiB9LFxuICAgIHsgbmFtZSA9IFwicGFzc2xpYlwiLCBleHRyYSA9IFtcImJjcnlwdFwiXSB9LFxuICAgIHsgbmFtZSA9IFwicHN5Y29wZ1wiLCBleHRyYSA9IFtcImJpbmFyeVwiXSB9LFxuICAgIHsgbmFtZSA9IFwicHlkYW50aWNcIiB9LFxuICAgIHsgbmFtZSA9IFwicHlkYW50aWMtc2V0dGluZ3NcIiB9LFxuICAgIHsgbmFtZSA9IFwicHlqd3RcIiB9LFxuICAgIHsgbmFtZSA9IFwicHl0aG9uLW11bHRpcGFydFwiIH0sXG4gICAgeyBuYW1lID0gXCJzZW50cnktc2RrXCIsIGV4dHJhID0gW1wiZmFzdGFwaVwiXSB9LFxuICAgIHsgbmFtZSA9IFwic3FsbW9kZWxcIiB9LFxuICAgIHsgbmFtZSA9IFwidGVuYWNpdHlcIiB9LFxuXVxuXG5bcGFja2FnZS5kZXYtZGVwZW5kZW5jaWVzXVxuZGV2ID0gW1xuICAgIHsgbmFtZSA9IFwiY292ZXJhZ2VcIiB9LFxuICAgIHsgbmFtZSA9IFwibXlweVwiIH0sXG4gICAgeyBuYW1lID0gXCJwcmUtY29tbWl0XCIgfSxcbiAgICB7IG5hbWUgPSBcInB5dGVzdFwiIH0sXG4gICAgeyBuYW1lID0gXCJydWZmXCIgfSxcbiAgICB7IG5hbWUgPSBcInR5cGVzLXBhc3NsaWJcIiB9LFxuXVxuXG5bcGFja2FnZS5tZXRhZGF0YV1cbnJlcXVpcmVzLWRpc3QgPSBbXG4gICAgeyBuYW1lID0gXCJhbGVtYmljXCIsIHNwZWNpZmllciA9IFwiPj0xLjEyLjEsPDIuMC4wXCIgfSxcbiAgICB7IG5hbWUgPSBcImJjcnlwdFwiLCBzcGVjaWZpZXIgPSBcIj09NC4wLjFcIiB9LFxuICAgIHsgbmFtZSA9IFwiZW1haWwtdmFsaWRhdG9yXCIsIHNwZWNpZmllciA9IFwiPj0yLjEuMC5wb3N0MSw8My4wLjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJlbWFpbHNcIiwgc3BlY2lmaWVyID0gXCI+PTAuNiw8MS4wXCIgfSxcbiAgICB7IG5hbWUgPSBcImZhc3RhcGlcIiwgZXh0cmFzID0gW1wic3RhbmRhcmRcIl0sIHNwZWNpZmllciA9IFwiPj0wLjExNC4yLDwxLjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJodHRweFwiLCBzcGVjaWZpZXIgPSBcIj49MC4yNS4xLDwxLjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJqaW5qYTJcIiwgc3BlY2lmaWVyID0gXCI+PTMuMS40LDw0LjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJwYXNzbGliXCIsIGV4dHJhcyA9IFtcImJjcnlwdFwiXSwgc3BlY2lmaWVyID0gXCI+PTEuNy40LDwyLjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJwc3ljb3BnXCIsIGV4dHJhcyA9IFtcImJpbmFyeVwiXSwgc3BlY2lmaWVyID0gXCI+PTMuMS4xMyw8NC4wLjBcIiB9LFxuICAgIHsgbmFtZSA9IFwicHlkYW50aWNcIiwgc3BlY2lmaWVyID0gXCI+Mi4wXCIgfSxcbiAgICB7IG5hbWUgPSBcInB5ZGFudGljLXNldHRpbmdzXCIsIHNwZWNpZmllciA9IFwiPj0yLjIuMSw8My4wLjBcIiB9LFxuICAgIHsgbmFtZSA9IFwicHlqd3RcIiwgc3BlY2lmaWVyID0gXCI+PTIuOC4wLDwzLjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJweXRob24tbXVsdGlwYXJ0XCIsIHNwZWNpZmllciA9IFwiPj0wLjAuNyw8MS4wLjBcIiB9LFxuICAgIHsgbmFtZSA9IFwic2VudHJ5LXNka1wiLCBleHRyYXMgPSBbXCJmYXN0YXBpXCJdLCBzcGVjaWZpZXIgPSBcIj49MS40MC42LDwyLjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJzcWxtb2RlbFwiLCBzcGVjaWZpZXIgPSBcIj49MC4wLjIxLDwxLjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJ0ZW5hY2l0eVwiLCBzcGVjaWZpZXIgPSBcIj49OC4yLjMsPDkuMC4wXCIgfSxcbl1cblxuW3BhY2thZ2UubWV0YWRhdGEucmVxdWlyZXMtZGV2XVxuZGV2ID0gW1xuICAgIHsgbmFtZSA9IFwiY292ZXJhZ2VcIiwgc3BlY2lmaWVyID0gXCI+PTcuNC4zLDw4LjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJteXB5XCIsIHNwZWNpZmllciA9IFwiPj0xLjguMCw8Mi4wLjBcIiB9LFxuICAgIHsgbmFtZSA9IFwicHJlLWNvbW1pdFwiLCBzcGVjaWZpZXIgPSBcIj49My42LjIsPDQuMC4wXCIgfSxcbiAgICB7IG5hbWUgPSBcInB5dGVzdFwiLCBzcGVjaWZpZXIgPSBcIj49Ny40LjMsPDguMC4wXCIgfSxcbiAgICB7IG5hbWUgPSBcInJ1ZmZcIiwgc3BlY2lmaWVyID0gXCI+PTAuMi4yLDwxLjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJ0eXBlcy1wYXNzbGliXCIsIHNwZWNpZmllciA9IFwiPj0xLjcuNy4yMDI0MDEwNiw8Mi4wLjAuMFwiIH0sXG5dXG4uLi5cblxuW3BhY2thZ2Uub3B0aW9uYWwtZGVwZW5kZW5jaWVzXVxuc3RhbmRhcmQgPSBbXG4gICAgeyBuYW1lID0gXCJlbWFpbC12YWxpZGF0b3JcIiB9LFxuICAgIHsgbmFtZSA9IFwiZmFzdGFwaS1jbGlcIiwgZXh0cmEgPSBbXCJzdGFuZGFyZFwiXSB9LFxuICAgIHsgbmFtZSA9IFwiaHR0cHhcIiB9LFxuICAgIHsgbmFtZSA9IFwiamluamEyXCIgfSxcbiAgICB7IG5hbWUgPSBcInB5dGhvbi1tdWx0aXBhcnRcIiB9LFxuICAgIHsgbmFtZSA9IFwidXZpY29yblwiLCBleHRyYSA9IFtcInN0YW5kYXJkXCJdIH0sXG5dXG5cbltbcGFja2FnZV1dXG5uYW1lID0gXCJmYXN0YXBpLWNsaVwiXG52ZXJzaW9uID0gXCIwLjAuNVwiXG5zb3VyY2UgPSB7IHJlZ2lzdHJ5ID0gXCJodHRwczovL3B5cGkub3JnL3NpbXBsZVwiIH1cbmRlcGVuZGVuY2llcyA9IFtcbiAgICB7IG5hbWUgPSBcInR5cGVyXCIgfSxcbiAgICB7IG5hbWUgPSBcInV2aWNvcm5cIiwgZXh0cmEgPSBbXCJzdGFuZGFyZFwiXSB9LFxuXVxuLi4uXG4gICAgeyB1cmwgPSBcImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9hOS9mOS9iNmJjYWY4NzRmNDEwNTY0YTc4OTA4NzM5YzgwODYxYTE3MTc4OGVmNGQ0Zjc2ZjUwMDk2NTY2NzJkZmUvcHlkYW50aWNfY29yZS0yLjIzLjQtcHAzMTAtcHlweTMxMF9wcDczLXdpbl9hbWQ2NC53aGxcIiwgaGFzaCA9IFwic2hhMjU2OjlhNWJjZTlkMjNhYWM4ZjBjZjA4MzZlY2ZjMDMzODk2YWE4NDQzYjUwMWM1OGQwNjAyZGJmZDViZDViMzc3NTNcIiwgc2l6ZSA9IDE5MjAzNDQgfSxcbl1cblxuW1twYWNrYWdlXV1cbm5hbWUgPSBcInB5ZGFudGljLXNldHRpbmdzXCJcbnZlcnNpb24gPSBcIjIuNS4yXCJcbnNvdXJjZSA9IHsgcmVnaXN0cnkgPSBcImh0dHBzOi8vcHlwaS5vcmcvc2ltcGxlXCIgfVxuZGVwZW5kZW5jaWVzID0gW1xuICAgIHsgbmFtZSA9IFwicHlkYW50aWNcIiB9LFxuICAgIHsgbmFtZSA9IFwicHl0aG9uLWRvdGVudlwiIH0sXG5dXG4uLi5cblxuW3BhY2thZ2Uub3B0aW9uYWwtZGVwZW5kZW5jaWVzXVxuc3RhbmRhcmQgPSBbXG4gICAgeyBuYW1lID0gXCJjb2xvcmFtYVwiLCBtYXJrZXIgPSBcInN5c19wbGF0Zm9ybSA9PSAnd2luMzInXCIgfSxcbiAgICB7IG5hbWUgPSBcImh0dHB0b29sc1wiIH0sXG4gICAgeyBuYW1lID0gXCJweXRob24tZG90ZW52XCIgfSxcbiAgICB7IG5hbWUgPSBcInB5eWFtbFwiIH0sXG4gICAgeyBuYW1lID0gXCJ1dmxvb3BcIiwgbWFya2VyID0gXCJwbGF0Zm9ybV9weXRob25faW1wbGVtZW50YXRpb24gIT0gJ1B5UHknIGFuZCBzeXNfcGxhdGZvcm0gIT0gJ2N5Z3dpbicgYW5kIHN5c19wbGF0Zm9ybSAhPSAnd2luMzInXCIgfSxcbiAgICB7IG5hbWUgPSBcIndhdGNoZmlsZXNcIiB9LFxuICAgIHsgbmFtZSA9IFwid2Vic29ja2V0c1wiIH0sXG5dXG4uLi5cblBhdGg6IHB5cHJvamVjdC50b21sXG5bcHJvamVjdF1cbm5hbWUgPSBcInBhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyXCJcbnZlcnNpb24gPSBcIjAuMS4wXCJcbmRlc2NyaXB0aW9uID0gXCJBZGQgeW91ciBkZXNjcmlwdGlvbiBoZXJlXCJcbnJlcXVpcmVzLXB5dGhvbiA9IFwiPj0zLjEwXCJcbmRlcGVuZGVuY2llcyA9IFtdXG4uLi5cblBhdGg6IGZyb250ZW5kL3BucG0tbG9jay55YW1sXG4uLi5cblxuICAuOlxuICAgIGRlcGVuZGVuY2llczpcbiAgICAgICdAY2hha3JhLXVpL3JlYWN0JzpcbiAgICAgICAgc3BlY2lmaWVyOiBeMy44LjBcbiAgICAgICAgdmVyc2lvbjogMy4xNS4xKEBlbW90aW9uL3JlYWN0QDExLjE0LjApKHJlYWN0LWRvbUAxOC4zLjEpKHJlYWN0QDE4LjMuMSlcbiAgICAgICdAZW1vdGlvbi9yZWFjdCc6XG4gICAgICAgIHNwZWNpZmllcjogXjExLjE0LjBcbiAgICAgICAgdmVyc2lvbjogMTEuMTQuMChAdHlwZXMvcmVhY3RAMTguMy4yMCkocmVhY3RAMTguMy4xKVxuICAgICAgJ0B0YW5zdGFjay9yZWFjdC1xdWVyeSc6XG4gICAgICAgIHNwZWNpZmllcjogXjUuMjguMTRcbiAgICAgICAgdmVyc2lvbjogNS43Mi4xKHJlYWN0QDE4LjMuMSlcbiAgICAgICdAdGFuc3RhY2svcmVhY3QtcXVlcnktZGV2dG9vbHMnOlxuICAgICAgICBzcGVjaWZpZXI6IF41LjI4LjE0XG4gICAgICAgIHZlcnNpb246IDUuNzIuMShAdGFuc3RhY2svcmVhY3QtcXVlcnlANS43Mi4xKShyZWFjdEAxOC4zLjEpXG4gICAgICAnQHRhbnN0YWNrL3JlYWN0LXJvdXRlcic6XG4gICAgICAgIHNwZWNpZmllcjogMS4xOS4xXG4gICAgICAgIHZlcnNpb246IDEuMTkuMShyZWFjdC1kb21AMTguMy4xKShyZWFjdEAxOC4zLjEpXG4gICAgICBheGlvczpcbiAgICAgICAgc3BlY2lmaWVyOiAxLjcuNFxuICAgICAgICB2ZXJzaW9uOiAxLjcuNFxuICAgICAgZm9ybS1kYXRhOlxuICAgICAgICBzcGVjaWZpZXI6IDQuMC4wXG4gICAgICAgIHZlcnNpb246IDQuMC4wXG4gICAgICBuZXh0LXRoZW1lczpcbiAgICAgICAgc3BlY2lmaWVyOiBeMC40LjRcbiAgICAgICAgdmVyc2lvbjogMC40LjYocmVhY3QtZG9tQDE4LjMuMSkocmVhY3RAMTguMy4xKVxuICAgICAgcmVhY3Q6XG4gICAgICAgIHNwZWNpZmllcjogXjE4LjIuMFxuICAgICAgICB2ZXJzaW9uOiAxOC4zLjFcbiAgICAgIHJlYWN0LWRvbTpcbiAgICAgICAgc3BlY2lmaWVyOiBeMTguMi4wXG4gICAgICAgIHZlcnNpb246IDE4LjMuMShyZWFjdEAxOC4zLjEpXG4gICAgICByZWFjdC1lcnJvci1ib3VuZGFyeTpcbiAgICAgICAgc3BlY2lmaWVyOiBeNC4wLjEzXG4gICAgICAgIHZlcnNpb246IDQuMS4yKHJlYWN0QDE4LjMuMSlcbiAgICAgIHJlYWN0LWhvb2stZm9ybTpcbiAgICAgICAgc3BlY2lmaWVyOiA3LjQ5LjNcbiAgICAgICAgdmVyc2lvbjogNy40OS4zKHJlYWN0QDE4LjMuMSlcbiAgICAgIHJlYWN0LWljb25zOlxuICAgICAgICBzcGVjaWZpZXI6IF41LjQuMFxuICAgICAgICB2ZXJzaW9uOiA1LjUuMChyZWFjdEAxOC4zLjEpXG4gICAgICB6b2Q6XG4gICAgICAgIHNwZWNpZmllcjogXjMuMjQuMlxuICAgICAgICB2ZXJzaW9uOiAzLjI0LjJcbiAgICBkZXZEZXBlbmRlbmNpZXM6XG4gICAgICAnQGJpb21lanMvYmlvbWUnOlxuICAgICAgICBzcGVjaWZpZXI6IDEuNi4xXG4gICAgICAgIHZlcnNpb246IDEuNi4xXG4gICAgICAnQGhleS1hcGkvb3BlbmFwaS10cyc6XG4gICAgICAgIHNwZWNpZmllcjogXjAuNTcuMFxuICAgICAgICB2ZXJzaW9uOiAwLjU3LjEodHlwZXNjcmlwdEA1LjguMylcbiAgICAgICdAcGxheXdyaWdodC90ZXN0JzpcbiAgICAgICAgc3BlY2lmaWVyOiBeMS40NS4yXG4gICAgICAgIHZlcnNpb246IDEuNTEuMVxuICAgICAgJ0B0YW5zdGFjay9yb3V0ZXItZGV2dG9vbHMnOlxuICAgICAgICBzcGVjaWZpZXI6IDEuMTkuMVxuICAgICAgICB2ZXJzaW9uOiAxLjE5LjEoY3NzdHlwZUAzLjEuMykocmVhY3QtZG9tQDE4LjMuMSkocmVhY3RAMTguMy4xKVxuICAgICAgJ0B0YW5zdGFjay9yb3V0ZXItdml0ZS1wbHVnaW4nOlxuICAgICAgICBzcGVjaWZpZXI6IDEuMTkuMFxuICAgICAgICB2ZXJzaW9uOiAxLjE5LjBcbiAgICAgICdAdHlwZXMvbm9kZSc6XG4gICAgICAgIHNwZWNpZmllcjogXjIwLjEwLjVcbiAgICAgICAgdmVyc2lvbjogMjAuMTcuMzBcbiAgICAgICdAdHlwZXMvcmVhY3QnOlxuICAgICAgICBzcGVjaWZpZXI6IF4xOC4yLjM3XG4gICAgICAgIHZlcnNpb246IDE4LjMuMjBcbiAgICAgICdAdHlwZXMvcmVhY3QtZG9tJzpcbiAgICAgICAgc3BlY2lmaWVyOiBeMTguMi4xNVxuLi4uXG5cbiAgJ0B0YW5zdGFjay9oaXN0b3J5QDEuMTUuMTMnOiB7fVxuXG4gICdAdGFuc3RhY2svcXVlcnktY29yZUA1LjcyLjEnOiB7fVxuXG4gICdAdGFuc3RhY2svcXVlcnktZGV2dG9vbHNANS43Mi4xJzoge31cblxuICAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5LWRldnRvb2xzQDUuNzIuMShAdGFuc3RhY2svcmVhY3QtcXVlcnlANS43Mi4xKShyZWFjdEAxOC4zLjEpJzpcbiAgICBkZXBlbmRlbmNpZXM6XG4gICAgICAnQHRhbnN0YWNrL3F1ZXJ5LWRldnRvb2xzJzogNS43Mi4xXG4gICAgICAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JzogNS43Mi4xKHJlYWN0QDE4LjMuMSlcbiAgICAgIHJlYWN0OiAxOC4zLjFcblxuICAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5QDUuNzIuMShyZWFjdEAxOC4zLjEpJzpcbiAgICBkZXBlbmRlbmNpZXM6XG4gICAgICAnQHRhbnN0YWNrL3F1ZXJ5LWNvcmUnOiA1LjcyLjFcbiAgICAgIHJlYWN0OiAxOC4zLjFcblxuICAnQHRhbnN0YWNrL3JlYWN0LXJvdXRlckAxLjE5LjEocmVhY3QtZG9tQDE4LjMuMSkocmVhY3RAMTguMy4xKSc6XG4gICAgZGVwZW5kZW5jaWVzOlxuICAgICAgJ0B0YW5zdGFjay9oaXN0b3J5JzogMS4xNS4xM1xuICAgICAgJ0B0YW5zdGFjay9yZWFjdC1zdG9yZSc6IDAuMi4xKHJlYWN0LWRvbUAxOC4zLjEpKHJlYWN0QDE4LjMuMSlcbiAgICAgIHJlYWN0OiAxOC4zLjFcbiAgICAgIHJlYWN0LWRvbTogMTguMy4xKHJlYWN0QDE4LjMuMSlcbiAgICAgIHRpbnktaW52YXJpYW50OiAxLjMuM1xuICAgICAgdGlueS13YXJuaW5nOiAxLjAuM1xuLi4uXG5QYXRoOiBmcm9udGVuZC9wYWNrYWdlLmpzb25cbntcbiAgXCJuYW1lXCI6IFwiZnJvbnRlbmRcIixcbiAgXCJwcml2YXRlXCI6IHRydWUsXG4gIFwidmVyc2lvblwiOiBcIjAuMC4wXCIsXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiZGV2XCI6IFwidml0ZVwiLFxuICAgIFwiYnVpbGRcIjogXCJ0c2MgLXAgdHNjb25maWcuYnVpbGQuanNvbiAmJiB2aXRlIGJ1aWxkXCIsXG4gICAgXCJsaW50XCI6IFwiYmlvbWUgY2hlY2sgLS1hcHBseS11bnNhZmUgLS1uby1lcnJvcnMtb24tdW5tYXRjaGVkIC0tZmlsZXMtaWdub3JlLXVua25vd249dHJ1ZSAuL1wiLFxuICAgIFwicHJldmlld1wiOiBcInZpdGUgcHJldmlld1wiLFxuICAgIFwiZ2VuZXJhdGUtY2xpZW50XCI6IFwib3BlbmFwaS10c1wiXG4gIH0sXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkBjaGFrcmEtdWkvcmVhY3RcIjogXCJeMy44LjBcIixcbiAgICBcIkBlbW90aW9uL3JlYWN0XCI6IFwiXjExLjE0LjBcIixcbiAgICBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiOiBcIl41LjI4LjE0XCIsXG4gICAgXCJAdGFuc3RhY2svcmVhY3QtcXVlcnktZGV2dG9vbHNcIjogXCJeNS4yOC4xNFwiLFxuICAgIFwiQHRhbnN0YWNrL3JlYWN0LXJvdXRlclwiOiBcIjEuMTkuMVwiLFxuICAgIFwiYXhpb3NcIjogXCIxLjcuNFwiLFxuICAgIFwiZm9ybS1kYXRhXCI6IFwiNC4wLjBcIixcbiAgICBcIm5leHQtdGhlbWVzXCI6IFwiXjAuNC40XCIsXG4gICAgXCJyZWFjdFwiOiBcIl4xOC4yLjBcIixcbiAgICBcInJlYWN0LWRvbVwiOiBcIl4xOC4yLjBcIixcbiAgICBcInJlYWN0LWVycm9yLWJvdW5kYXJ5XCI6IFwiXjQuMC4xM1wiLFxuICAgIFwicmVhY3QtaG9vay1mb3JtXCI6IFwiNy40OS4zXCIsXG4gICAgXCJyZWFjdC1pY29uc1wiOiBcIl41LjQuMFwiLFxuICAgIFwiem9kXCI6IFwiXjMuMjQuMlwiXG4gIH0sXG4uLi5cblBhdGg6IGJhY2tlbmQvYXBwL3JhZy9yYWdfY2hhaW4ucHlcblwiXCJcIlxuUkFHIGNoYWluIGltcGxlbWVudGF0aW9uIGZvciB0aGUgcGFyZW50aW5nIGFzc2lzdGFudC5cblwiXCJcIlxuZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QsIERpY3QsIEFueSwgT3B0aW9uYWxcbmltcG9ydCB1dWlkXG5cbmZyb20gbGFuZ2NoYWluX2NvcmUub3V0cHV0X3BhcnNlcnMgaW1wb3J0IFN0ck91dHB1dFBhcnNlclxuZnJvbSBsYW5nY2hhaW5fY29yZS5wcm9tcHRzIGltcG9ydCBDaGF0UHJvbXB0VGVtcGxhdGUsIE1lc3NhZ2VzUGxhY2Vob2xkZXJcbmZyb20gbGFuZ2NoYWluLmNoYWlucyBpbXBvcnQgY3JlYXRlX2hpc3RvcnlfYXdhcmVfcmV0cmlldmVyLCBjcmVhdGVfcmV0cmlldmFsX2NoYWluXG5mcm9tIGxhbmdjaGFpbi5jaGFpbnMuY29tYmluZV9kb2N1bWVudHMgaW1wb3J0IGNyZWF0ZV9zdHVmZl9kb2N1bWVudHNfY2hhaW5cblxuZnJvbSBhcHAucmFnLnZlY3RvcnN0b3JlIGltcG9ydCBnZXRfcmV0cmlldmVyXG5mcm9tIGFwcC5yYWcub3BlbnJvdXRlcl9jbGllbnQgaW1wb3J0IGdldF9vcGVucm91dGVyX2NoYXRfbW9kZWxcbmZyb20gYXBwLmNvcmUuY29uZmlnIGltcG9ydCBzZXR0aW5nc1xuXG5cbiMgSW5pdGlhbGl6ZSBvdXRwdXQgcGFyc2VyXG5vdXRwdXRfcGFyc2VyID0gU3RyT3V0cHV0UGFyc2VyKClcbi4uLlxuXG5cbmRlZiBnZXRfcmFnX2NoYWluKG1vZGVsX25hbWU6IHN0ciA9IE5vbmUsIGNoaWxkX2luZm86IE9wdGlvbmFsW0RpY3Rbc3RyLCBBbnldXSA9IE5vbmUpOlxuICAgIFwiXCJcIlxuICAgIENyZWF0ZSBhIFJBRyBjaGFpbiBmb3IgdGhlIHBhcmVudGluZyBhc3Npc3RhbnQuXG5cbiAgICBBcmdzOlxuICAgICAgICBtb2RlbF9uYW1lOiBOYW1lIG9mIHRoZSBtb2RlbCB0byB1c2UgKGUuZy4sIFwib3BlbmFpL2dwdC00by1taW5pXCIsIFwiYW50aHJvcGljL2NsYXVkZS0zLW9wdXNcIilcbiAgICAgICAgY2hpbGRfaW5mbzogT3B0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNoaWxkXG5cbiAgICBSZXR1cm5zOlxuICAgICAgICBBIFJBRyBjaGFpblxuICAgIFwiXCJcIlxuICAgICMgSW5pdGlhbGl6ZSBsYW5ndWFnZSBtb2RlbFxuICAgIGxsbSA9IGdldF9vcGVucm91dGVyX2NoYXRfbW9kZWwoXG4gICAgICAgIG1vZGVsPW1vZGVsX25hbWUgb3Igc2V0dGluZ3MuREVGQVVMVF9MTE1fTU9ERUwsXG4gICAgICAgIHRlbXBlcmF0dXJlPTAuN1xuICAgIClcblxuICAgICMgR2V0IHJldHJpZXZlclxuICAgIHJldHJpZXZlciA9IGdldF9yZXRyaWV2ZXIoc2VhcmNoX2t3YXJncz17XCJrXCI6IDN9KVxuXG4gICAgIyBDcmVhdGUgaGlzdG9yeS1hd2FyZSByZXRyaWV2ZXJcbiAgICBoaXN0b3J5X2F3YXJlX3JldHJpZXZlciA9IGNyZWF0ZV9oaXN0b3J5X2F3YXJlX3JldHJpZXZlcihcbiAgICAgICAgbGxtLFxuICAgICAgICByZXRyaWV2ZXIsXG4gICAgICAgIGNvbnRleHR1YWxpemVfcV9wcm9tcHRcbiAgICApXG5cbiAgICAjIENyZWF0ZSBxdWVzdGlvbi1hbnN3ZXJpbmcgY2hhaW5cbiAgICBxdWVzdGlvbl9hbnN3ZXJfY2hhaW4gPSBjcmVhdGVfc3R1ZmZfZG9jdW1lbnRzX2NoYWluKFxuICAgICAgICBsbG0sXG4gICAgICAgIHFhX3Byb21wdFxuICAgIClcblxuICAgICMgQ3JlYXRlIHJldHJpZXZhbCBjaGFpblxuICAgIHJhZ19jaGFpbiA9IGNyZWF0ZV9yZXRyaWV2YWxfY2hhaW4oXG4gICAgICAgIGhpc3RvcnlfYXdhcmVfcmV0cmlldmVyLFxuICAgICAgICBxdWVzdGlvbl9hbnN3ZXJfY2hhaW5cbiAgICApXG5cbiAgICByZXR1cm4gcmFnX2NoYWluXG5cblxuYXN5bmMgZGVmIGdlbmVyYXRlX3Jlc3BvbnNlKFxuICAgIHF1ZXN0aW9uOiBzdHIsXG4gICAgY2hhdF9oaXN0b3J5OiBMaXN0W0RpY3Rbc3RyLCBzdHJdXSxcbiAgICBzZXNzaW9uX2lkOiBzdHIsXG4gICAgY2hpbGRfaW5mbzogT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dID0gTm9uZSxcbiAgICBtb2RlbF9uYW1lOiBzdHIgPSBcImdwdC00by1taW5pXCJcbikgLT4gRGljdFtzdHIsIEFueV06XG4gICAgXCJcIlwiXG4gICAgR2VuZXJhdGUgYSByZXNwb25zZSB1c2luZyB0aGUgUkFHIGNoYWluLlxuXG4gICAgQXJnczpcbiAgICAgICAgcXVlc3Rpb246IFVzZXIncyBxdWVzdGlvblxuICAgICAgICBjaGF0X2hpc3Rvcnk6IExpc3Qgb2YgcHJldmlvdXMgbWVzc2FnZXNcbiAgICAgICAgc2Vzc2lvbl9pZDogU2Vzc2lvbiBJRFxuICAgICAgICBjaGlsZF9pbmZvOiBPcHRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hpbGRcbiAgICAgICAgbW9kZWxfbmFtZTogTmFtZSBvZiB0aGUgT3BlbkFJIG1vZGVsIHRvIHVzZVxuXG4gICAgUmV0dXJuczpcbiAgICAgICAgRGljdGlvbmFyeSBjb250YWluaW5nIHRoZSBhbnN3ZXIgYW5kIHNvdXJjZSBkb2N1bWVudHNcbiAgICBcIlwiXCJcbiAgICAjIEdldCBSQUcgY2hhaW5cbiAgICByYWdfY2hhaW4gPSBnZXRfcmFnX2NoYWluKG1vZGVsX25hbWUsIGNoaWxkX2luZm8pXG5cbiAgICAjIFByZXBhcmUgaW5wdXRcbiAgICBjaGFpbl9pbnB1dCA9IHtcbiAgICAgICAgXCJpbnB1dFwiOiBxdWVzdGlvbixcbiAgICAgICAgXCJjaGF0X2hpc3RvcnlcIjogY2hhdF9oaXN0b3J5XG4gICAgfVxuXG4gICAgIyBBZGQgY2hpbGQgaW5mbyBpZiBhdmFpbGFibGVcbiAgICBpZiBjaGlsZF9pbmZvOlxuICAgICAgICBjaGFpbl9pbnB1dFtcImNoaWxkX2luZm9cIl0gPSBzdHIoY2hpbGRfaW5mbylcbiAgICBlbHNlOlxuICAgICAgICBjaGFpbl9pbnB1dFtcImNoaWxkX2luZm9cIl0gPSBcIk5vIHNwZWNpZmljIGNoaWxkIGluZm9ybWF0aW9uIHByb3ZpZGVkLlwiXG5cbiAgICAjIEludm9rZSBjaGFpblxuICAgIHJlc3VsdCA9IHJhZ19jaGFpbi5pbnZva2UoY2hhaW5faW5wdXQpXG5cbiAgICAjIEV4dHJhY3QgYW5zd2VyIGFuZCBzb3VyY2UgZG9jdW1lbnRzXG4gICAgYW5zd2VyID0gcmVzdWx0LmdldChcImFuc3dlclwiLCBcIkkgY291bGRuJ3QgZ2VuZXJhdGUgYW4gYW5zd2VyLlwiKVxuICAgIHNvdXJjZV9kb2N1bWVudHMgPSByZXN1bHQuZ2V0KFwic291cmNlX2RvY3VtZW50c1wiLCBbXSlcblxuICAgICMgRm9ybWF0IHNvdXJjZSBkb2N1bWVudHNcbiAgICBzb3VyY2VzID0gW11cbiAgICBmb3IgZG9jIGluIHNvdXJjZV9kb2N1bWVudHM6XG4gICAgICAgIGlmIGhhc2F0dHIoZG9jLCAnbWV0YWRhdGEnKTpcbiAgICAgICAgICAgIHNvdXJjZXMuYXBwZW5kKGRvYy5tZXRhZGF0YSlcblxuICAgIHJldHVybiB7XG4gICAgICAgIFwiYW5zd2VyXCI6IGFuc3dlcixcbiAgICAgICAgXCJzZXNzaW9uX2lkXCI6IHNlc3Npb25faWQsXG4gICAgICAgIFwic291cmNlc1wiOiBzb3VyY2VzXG4gICAgfVxuLi4uXG5QYXRoOiBiYWNrZW5kL2FwcC9yYWcvdmVjdG9yc3RvcmUucHlcbi4uLlxuXG5cbmNsYXNzIE9wZW5Sb3V0ZXJFbWJlZGRpbmdzKEVtYmVkZGluZ3MpOlxuICAgIFwiXCJcIk9wZW5Sb3V0ZXIgZW1iZWRkaW5ncyB3cmFwcGVyLlwiXCJcIlxuXG4gICAgZGVmIF9faW5pdF9fKFxuICAgICAgICBzZWxmLFxuICAgICAgICBhcGlfa2V5OiBzdHIgPSBzZXR0aW5ncy5PUEVOUk9VVEVSX0FQSV9LRVksXG4gICAgICAgIGJhc2VfdXJsOiBzdHIgPSBzZXR0aW5ncy5PUEVOUk9VVEVSX0JBU0VfVVJMLFxuICAgICAgICBtb2RlbDogc3RyID0gXCJvcGVuYWkvdGV4dC1lbWJlZGRpbmctMy1zbWFsbFwiXG4gICAgKTpcbiAgICAgICAgc2VsZi5hcGlfa2V5ID0gYXBpX2tleVxuICAgICAgICBzZWxmLmJhc2VfdXJsID0gYmFzZV91cmxcbiAgICAgICAgc2VsZi5tb2RlbCA9IG1vZGVsXG5cbiAgICBkZWYgZW1iZWRfZG9jdW1lbnRzKHNlbGYsIHRleHRzOiBMaXN0W3N0cl0pIC0+IExpc3RbTGlzdFtmbG9hdF1dOlxuICAgICAgICBcIlwiXCJFbWJlZCBkb2N1bWVudHMgdXNpbmcgT3BlblJvdXRlciBBUEkuXCJcIlwiXG4gICAgICAgIGVtYmVkZGluZ3MgPSBbXVxuXG4gICAgICAgICMgUHJvY2VzcyBpbiBiYXRjaGVzIHRvIGF2b2lkIEFQSSBsaW1pdHNcbiAgICAgICAgYmF0Y2hfc2l6ZSA9IDIwXG4gICAgICAgIGZvciBpIGluIHJhbmdlKDAsIGxlbih0ZXh0cyksIGJhdGNoX3NpemUpOlxuICAgICAgICAgICAgYmF0Y2ggPSB0ZXh0c1tpOmkrYmF0Y2hfc2l6ZV1cbiAgICAgICAgICAgIGJhdGNoX2VtYmVkZGluZ3MgPSBzZWxmLl9nZXRfZW1iZWRkaW5ncyhiYXRjaClcbiAgICAgICAgICAgIGVtYmVkZGluZ3MuZXh0ZW5kKGJhdGNoX2VtYmVkZGluZ3MpXG5cbiAgICAgICAgcmV0dXJuIGVtYmVkZGluZ3Ncbi4uLlxuXG4gICAgZGVmIF9nZXRfZW1iZWRkaW5ncyhzZWxmLCB0ZXh0czogTGlzdFtzdHJdKSAtPiBMaXN0W0xpc3RbZmxvYXRdXTpcbiAgICAgICAgXCJcIlwiR2V0IGVtYmVkZGluZ3MgZnJvbSBPcGVuUm91dGVyIEFQSS5cIlwiXCJcbiAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgIFwiQXV0aG9yaXphdGlvblwiOiBmXCJCZWFyZXIge3NlbGYuYXBpX2tleX1cIixcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgXCJIVFRQLVJlZmVyZXJcIjogc2V0dGluZ3MuRlJPTlRFTkRfSE9TVCxcbiAgICAgICAgICAgIFwiWC1UaXRsZVwiOiBzZXR0aW5ncy5QUk9KRUNUX05BTUUsXG4gICAgICAgIH1cblxuICAgICAgICBwYXlsb2FkID0ge1xuICAgICAgICAgICAgXCJtb2RlbFwiOiBzZWxmLm1vZGVsLFxuICAgICAgICAgICAgXCJpbnB1dFwiOiB0ZXh0cyxcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeTpcbiAgICAgICAgICAgIHdpdGggaHR0cHguQ2xpZW50KHRpbWVvdXQ9NjAuMCkgYXMgY2xpZW50OlxuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gY2xpZW50LnBvc3QoXG4gICAgICAgICAgICAgICAgICAgIGZcIntzZWxmLmJhc2VfdXJsfS9lbWJlZGRpbmdzXCIsXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9aGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAganNvbj1wYXlsb2FkLFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICByZXNwb25zZS5yYWlzZV9mb3Jfc3RhdHVzKClcbiAgICAgICAgICAgICAgICBkYXRhID0gcmVzcG9uc2UuanNvbigpXG5cbiAgICAgICAgICAgICAgICAjIEV4dHJhY3QgZW1iZWRkaW5ncyBmcm9tIHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgZW1iZWRkaW5ncyA9IFtpdGVtW1wiZW1iZWRkaW5nXCJdIGZvciBpdGVtIGluIGRhdGFbXCJkYXRhXCJdXVxuICAgICAgICAgICAgICAgIHJldHVybiBlbWJlZGRpbmdzXG5cbiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcihmXCJFcnJvciBjYWxsaW5nIE9wZW5Sb3V0ZXIgQVBJOiB7c3RyKGUpfVwiKVxuXG5cbiMgSW5pdGlhbGl6ZSBlbWJlZGRpbmcgZnVuY3Rpb25cbmVtYmVkZGluZ19mdW5jdGlvbiA9IE9wZW5Sb3V0ZXJFbWJlZGRpbmdzKClcblxuIyBJbml0aWFsaXplIENocm9tYSB2ZWN0b3Igc3RvcmVcbkNIUk9NQV9QRVJTSVNUX0RJUkVDVE9SWSA9IG9zLnBhdGguam9pbihvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5kaXJuYW1lKG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXykpKSwgXCJjaHJvbWFfZGJcIilcbm9zLm1ha2VkaXJzKENIUk9NQV9QRVJTSVNUX0RJUkVDVE9SWSwgZXhpc3Rfb2s9VHJ1ZSlcblxudmVjdG9yc3RvcmUgPSBDaHJvbWEoXG4gICAgcGVyc2lzdF9kaXJlY3Rvcnk9Q0hST01BX1BFUlNJU1RfRElSRUNUT1JZLFxuICAgIGVtYmVkZGluZ19mdW5jdGlvbj1lbWJlZGRpbmdfZnVuY3Rpb25cbilcbi4uLlxuXG5cbmRlZiBpbmRleF9kb2N1bWVudChmaWxlX3BhdGg6IHN0ciwgZG9jdW1lbnRfaWQ6IHV1aWQuVVVJRCwgbWV0YWRhdGE6IE9wdGlvbmFsW0RpY3Rbc3RyLCBBbnldXSA9IE5vbmUpIC0+IGludDpcbiAgICBcIlwiXCJcbiAgICBQcm9jZXNzIGFuZCBpbmRleCBhIGRvY3VtZW50IHRvIHRoZSB2ZWN0b3Igc3RvcmUuXG5cbiAgICBBcmdzOlxuICAgICAgICBmaWxlX3BhdGg6IFBhdGggdG8gdGhlIGRvY3VtZW50IGZpbGVcbiAgICAgICAgZG9jdW1lbnRfaWQ6IFVVSUQgb2YgdGhlIGRvY3VtZW50XG4gICAgICAgIG1ldGFkYXRhOiBBZGRpdGlvbmFsIG1ldGFkYXRhIHRvIHN0b3JlIHdpdGggdGhlIGRvY3VtZW50XG5cbiAgICBSZXR1cm5zOlxuICAgICAgICBOdW1iZXIgb2YgY2h1bmtzIGluZGV4ZWRcbiAgICBcIlwiXCJcbiAgICB0cnk6XG4gICAgICAgICMgTG9hZCBhbmQgc3BsaXQgdGhlIGRvY3VtZW50XG4gICAgICAgIHNwbGl0cyA9IGxvYWRfYW5kX3NwbGl0X2RvY3VtZW50KGZpbGVfcGF0aClcblxuICAgICAgICAjIEFkZCBtZXRhZGF0YSB0byBlYWNoIHNwbGl0XG4gICAgICAgIGZvciBzcGxpdCBpbiBzcGxpdHM6XG4gICAgICAgICAgICBzcGxpdC5tZXRhZGF0YVsnZG9jdW1lbnRfaWQnXSA9IHN0cihkb2N1bWVudF9pZClcbiAgICAgICAgICAgIGlmIG1ldGFkYXRhOlxuICAgICAgICAgICAgICAgIHNwbGl0Lm1ldGFkYXRhLnVwZGF0ZShtZXRhZGF0YSlcblxuICAgICAgICAjIEFkZCBkb2N1bWVudHMgdG8gdGhlIHZlY3RvciBzdG9yZVxuICAgICAgICB2ZWN0b3JzdG9yZS5hZGRfZG9jdW1lbnRzKHNwbGl0cylcblxuICAgICAgICByZXR1cm4gbGVuKHNwbGl0cylcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIkVycm9yIGluZGV4aW5nIGRvY3VtZW50OiB7ZX1cIilcbiAgICAgICAgcmFpc2Vcbi4uLlxuUGF0aDogYmFja2VuZC9hcHAvcmFnL29wZW5yb3V0ZXJfY2xpZW50LnB5XG5cIlwiXCJcbk9wZW5Sb3V0ZXIgY2xpZW50IGZvciBMTE0gaW50ZWdyYXRpb24uXG5cIlwiXCJcbmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBMaXN0LCBBbnksIE9wdGlvbmFsXG5pbXBvcnQganNvblxuaW1wb3J0IGh0dHB4XG5mcm9tIGxhbmdjaGFpbl9jb3JlLmxhbmd1YWdlX21vZGVscy5jaGF0X21vZGVscyBpbXBvcnQgQmFzZUNoYXRNb2RlbFxuZnJvbSBsYW5nY2hhaW5fY29yZS5tZXNzYWdlcyBpbXBvcnQgKFxuICAgIEFJTWVzc2FnZSxcbiAgICBCYXNlTWVzc2FnZSxcbiAgICBDaGF0TWVzc2FnZSxcbiAgICBIdW1hbk1lc3NhZ2UsXG4gICAgU3lzdGVtTWVzc2FnZSxcbilcbmZyb20gbGFuZ2NoYWluX2NvcmUub3V0cHV0cyBpbXBvcnQgQ2hhdEdlbmVyYXRpb24sIENoYXRSZXN1bHRcbmZyb20gbGFuZ2NoYWluX2NvcmUuY2FsbGJhY2tzLm1hbmFnZXIgaW1wb3J0IENhbGxiYWNrTWFuYWdlckZvckxMTVJ1blxuXG5mcm9tIGFwcC5jb3JlLmNvbmZpZyBpbXBvcnQgc2V0dGluZ3NcblxuXG5jbGFzcyBPcGVuUm91dGVyQ2hhdE1vZGVsKEJhc2VDaGF0TW9kZWwpOlxuICAgIFwiXCJcIkNoYXQgbW9kZWwgdGhhdCB1c2VzIE9wZW5Sb3V0ZXIgQVBJLlwiXCJcIlxuICAgIFxuICAgIGFwaV9rZXk6IHN0clxuICAgIGJhc2VfdXJsOiBzdHIgPSBcImh0dHBzOi8vb3BlbnJvdXRlci5haS9hcGkvdjFcIlxuICAgIG1vZGVsOiBzdHIgPSBcIm9wZW5haS9ncHQtNG8tbWluaVwiXG4gICAgdGVtcGVyYXR1cmU6IGZsb2F0ID0gMC43XG4gICAgbWF4X3Rva2VuczogT3B0aW9uYWxbaW50XSA9IE5vbmVcbiAgICB0b3BfcDogT3B0aW9uYWxbZmxvYXRdID0gTm9uZVxuLi4uXG4gICAgICAgIFxuICAgICAgICAjIENvbnZlcnQgTGFuZ0NoYWluIG1lc3NhZ2VzIHRvIE9wZW5Sb3V0ZXIgZm9ybWF0XG4gICAgICAgIGZvciBtZXNzYWdlIGluIG1lc3NhZ2VzOlxuICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShtZXNzYWdlLCBTeXN0ZW1NZXNzYWdlKTpcbiAgICAgICAgICAgICAgICBtZXNzYWdlX2RpY3RzLmFwcGVuZCh7XCJyb2xlXCI6IFwic3lzdGVtXCIsIFwiY29udGVudFwiOiBtZXNzYWdlLmNvbnRlbnR9KVxuICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKG1lc3NhZ2UsIEh1bWFuTWVzc2FnZSk6XG4gICAgICAgICAgICAgICAgbWVzc2FnZV9kaWN0cy5hcHBlbmQoe1wicm9sZVwiOiBcInVzZXJcIiwgXCJjb250ZW50XCI6IG1lc3NhZ2UuY29udGVudH0pXG4gICAgICAgICAgICBlbGlmIGlzaW5zdGFuY2UobWVzc2FnZSwgQUlNZXNzYWdlKTpcbiAgICAgICAgICAgICAgICBtZXNzYWdlX2RpY3RzLmFwcGVuZCh7XCJyb2xlXCI6IFwiYXNzaXN0YW50XCIsIFwiY29udGVudFwiOiBtZXNzYWdlLmNvbnRlbnR9KVxuICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKG1lc3NhZ2UsIENoYXRNZXNzYWdlKTpcbiAgICAgICAgICAgICAgICBtZXNzYWdlX2RpY3RzLmFwcGVuZCh7XCJyb2xlXCI6IG1lc3NhZ2Uucm9sZSwgXCJjb250ZW50XCI6IG1lc3NhZ2UuY29udGVudH0pXG4gICAgICAgICAgICBlbHNlOlxuICAgICAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoZlwiR290IHVua25vd24gbWVzc2FnZSB0eXBlOiB7bWVzc2FnZX1cIilcbiAgICAgICAgXG4gICAgICAgICMgUHJlcGFyZSB0aGUgcmVxdWVzdCBwYXlsb2FkXG4gICAgICAgIHBheWxvYWQgPSB7XG4gICAgICAgICAgICBcIm1vZGVsXCI6IHNlbGYubW9kZWwsXG4gICAgICAgICAgICBcIm1lc3NhZ2VzXCI6IG1lc3NhZ2VfZGljdHMsXG4gICAgICAgICAgICBcInRlbXBlcmF0dXJlXCI6IHNlbGYudGVtcGVyYXR1cmUsXG4gICAgICAgIH1cbi4uLlxuICAgICAgICBcbiAgICAgICAgdHJ5OlxuICAgICAgICAgICAgd2l0aCBodHRweC5DbGllbnQodGltZW91dD02MC4wKSBhcyBjbGllbnQ6XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBjbGllbnQucG9zdChcbiAgICAgICAgICAgICAgICAgICAgZlwie3NlbGYuYmFzZV91cmx9L2NoYXQvY29tcGxldGlvbnNcIixcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycz1oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBqc29uPXBheWxvYWQsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKVxuICAgICAgICAgICAgICAgIHJlc3BvbnNlX2RhdGEgPSByZXNwb25zZS5qc29uKClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAjIEV4dHJhY3QgdGhlIHJlc3BvbnNlIGNvbnRlbnRcbiAgICAgICAgICAgICAgICBtZXNzYWdlX2NvbnRlbnQgPSByZXNwb25zZV9kYXRhW1wiY2hvaWNlc1wiXVswXVtcIm1lc3NhZ2VcIl1bXCJjb250ZW50XCJdXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgIyBDcmVhdGUgYSBDaGF0R2VuZXJhdGlvbiBvYmplY3RcbiAgICAgICAgICAgICAgICBnZW5lcmF0aW9uID0gQ2hhdEdlbmVyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U9QUlNZXNzYWdlKGNvbnRlbnQ9bWVzc2FnZV9jb250ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGlvbl9pbmZvPXtcImZpbmlzaF9yZWFzb25cIjogcmVzcG9uc2VfZGF0YVtcImNob2ljZXNcIl1bMF0uZ2V0KFwiZmluaXNoX3JlYXNvblwiKX1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgIyBSZXR1cm4gdGhlIENoYXRSZXN1bHRcbiAgICAgICAgICAgICAgICByZXR1cm4gQ2hhdFJlc3VsdChnZW5lcmF0aW9ucz1bZ2VuZXJhdGlvbl0pXG4gICAgICAgIFxuICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKGZcIkVycm9yIGNhbGxpbmcgT3BlblJvdXRlciBBUEk6IHtzdHIoZSl9XCIpXG4gICAgXG4gICAgQHByb3BlcnR5XG4gICAgZGVmIF9sbG1fdHlwZShzZWxmKSAtPiBzdHI6XG4gICAgICAgIFwiXCJcIlJldHVybiB0aGUgdHlwZSBvZiBMTE0uXCJcIlwiXG4gICAgICAgIHJldHVybiBcIm9wZW5yb3V0ZXJcIlxuXG5cbmRlZiBnZXRfb3BlbnJvdXRlcl9jaGF0X21vZGVsKFxuICAgIG1vZGVsOiBzdHIgPSBOb25lLFxuICAgIHRlbXBlcmF0dXJlOiBmbG9hdCA9IDAuNyxcbiAgICBtYXhfdG9rZW5zOiBPcHRpb25hbFtpbnRdID0gTm9uZSxcbiAgICB0b3BfcDogT3B0aW9uYWxbZmxvYXRdID0gTm9uZSxcbikgLT4gT3BlblJvdXRlckNoYXRNb2RlbDpcbiAgICBcIlwiXCJcbiAgICBHZXQgYW4gT3BlblJvdXRlckNoYXRNb2RlbCBpbnN0YW5jZS5cbiAgICBcbiAgICBBcmdzOlxuICAgICAgICBtb2RlbDogTW9kZWwgbmFtZSAoZS5nLiwgXCJvcGVuYWkvZ3B0LTRvLW1pbmlcIiwgXCJhbnRocm9waWMvY2xhdWRlLTMtb3B1c1wiKVxuICAgICAgICB0ZW1wZXJhdHVyZTogVGVtcGVyYXR1cmUgZm9yIGdlbmVyYXRpb25cbiAgICAgICAgbWF4X3Rva2VuczogTWF4aW11bSB0b2tlbnMgdG8gZ2VuZXJhdGVcbiAgICAgICAgdG9wX3A6IFRvcC1wIHNhbXBsaW5nIHBhcmFtZXRlclxuICAgICAgICBcbiAgICBSZXR1cm5zOlxuICAgICAgICBPcGVuUm91dGVyQ2hhdE1vZGVsIGluc3RhbmNlXG4gICAgXCJcIlwiXG4gICAgcmV0dXJuIE9wZW5Sb3V0ZXJDaGF0TW9kZWwoXG4gICAgICAgIGFwaV9rZXk9c2V0dGluZ3MuT1BFTlJPVVRFUl9BUElfS0VZLFxuICAgICAgICBiYXNlX3VybD1zZXR0aW5ncy5PUEVOUk9VVEVSX0JBU0VfVVJMLFxuICAgICAgICBtb2RlbD1tb2RlbCBvciBzZXR0aW5ncy5ERUZBVUxUX0xMTV9NT0RFTCxcbiAgICAgICAgdGVtcGVyYXR1cmU9dGVtcGVyYXR1cmUsXG4gICAgICAgIG1heF90b2tlbnM9bWF4X3Rva2VucyxcbiAgICAgICAgdG9wX3A9dG9wX3AuLi4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFSeERjZk5ZY1ViNTRKMlNrY1J6ek44In19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJyZXNwb25zZV90ZXh0Ijoi5qC55o2u6aG555uu5Luj56CB77yM5oiR5Y+R546w6aG555uu56Gu5a6e5L6d6LWW5LqOYGxhbmdjaGFpbl9jb21tdW5pdHlg77yM5L2G6L+Z5Liq5L6d6LWW5ZyoYHB5cHJvamVjdC50b21sYOS4reayoeacieaYjuehruWIl+WHuu+8jOiAjOaYr+WcqGByZXF1aXJlbWVudHMudHh0YOaWh+S7tuS4reWumuS5ieeahOOAguiuqeaIkeW4ruaCqOino+WGs+i/meS4qumXrumimOOAglxuXG4jIyDop6PlhrMgYGxhbmdjaGFpbl9jb21tdW5pdHlgIOe8uuWksemXrumimFxuXG4jIyMg5pa55rOVMe+8muWuieijhSByZXF1aXJlbWVudHMudHh0IOS4reeahOS+nei1llxuXG7pobnnm67nmoRgYmFja2VuZC9yZXF1aXJlbWVudHMudHh0YOaWh+S7tuS4reWMheWQq+S6huaJgOaciemcgOimgeeahExhbmdDaGFpbuebuOWFs+S+nei1lu+8mlxuXG5gYGBiYXNoXG4jIOi/m+WFpWJhY2tlbmTnm67lvZVcbmNkIC9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmRcblxuIyDmv4DmtLvomZrmi5/njq/looNcbnNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGVcblxuIyDlronoo4VyZXF1aXJlbWVudHMudHh05Lit55qE5omA5pyJ5L6d6LWWXG5waXAgaW5zdGFsbCAtciByZXF1aXJlbWVudHMudHh0XG5gYGBcblxu5oiW6ICF5L2/55SodXbvvJpcblxuYGBgYmFzaFxudXYgcGlwIGluc3RhbGwgLXIgcmVxdWlyZW1lbnRzLnR4dFxuYGBgXG5cbiMjIyDmlrnms5Uy77ya5Y+q5a6J6KOF57y65aSx55qETGFuZ0NoYWlu55u45YWz5L6d6LWWXG5cbuWmguaenOaCqOWPquaDs+Wuieijhee8uuWkseeahExhbmdDaGFpbuebuOWFs+S+nei1lu+8mlxuXG5gYGBiYXNoXG4jIOehruS/neiZmuaLn+eOr+Wig+W3sua/gOa0u1xuc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZVxuXG4jIOWuieijhUxhbmdDaGFpbuebuOWFs+S+nei1llxucGlwIGluc3RhbGwgbGFuZ2NoYWluIGxhbmdjaGFpbi1jb3JlIGxhbmdjaGFpbi1jb21tdW5pdHkgbGFuZ2NoYWluLWNocm9tYSBjaHJvbWFkYiBodHRweCBweXBkZiBkb2N4MnR4dCB1bnN0cnVjdHVyZWRcbmBgYFxuXG4jIyMg5pa55rOVM++8muabtOaWsHB5cHJvamVjdC50b21s5bm26YeN5paw5a6J6KOFXG5cbuaCqOS5n+WPr+S7peWwhui/meS6m+S+nei1lua3u+WKoOWIsGBweXByb2plY3QudG9tbGDmlofku7bkuK3vvIznhLblkI7ph43mlrDlronoo4XvvJpcblxuMS4g57yW6L6RYGJhY2tlbmQvcHlwcm9qZWN0LnRvbWxg5paH5Lu277yM5ZyoZGVwZW5kZW5jaWVz5YiX6KGo5Lit5re75Yqg77yaXG4gICBgYGBcbiAgIFwibGFuZ2NoYWluPj0wLjEuMFwiLFxuICAgXCJsYW5nY2hhaW4tY29yZT49MC4xLjBcIixcbiAgIFwibGFuZ2NoYWluLWNvbW11bml0eT49MC4xLjBcIixcbiAgIFwibGFuZ2NoYWluLWNocm9tYT49MC4xLjBcIixcbiAgIFwiY2hyb21hZGI+PTAuNC4wXCIsXG4gICBcInB5cGRmPj00LjAuMFwiLFxuICAgXCJkb2N4MnR4dD49MC44XCIsXG4gICBcInVuc3RydWN0dXJlZD49MC4xMi4wXCIsXG4gICBgYGBcblxuMi4g54S25ZCO6YeN5paw5a6J6KOF5L6d6LWW77yaXG4gICBgYGBiYXNoXG4gICB1diBzeW5jXG4gICBgYGBcblxuIyMg6aqM6K+B5a6J6KOFXG5cbuWuieijheWujOaIkOWQju+8jOaCqOWPr+S7pemqjOivgeS+nei1luaYr+WQpuato+ehruWuieijhe+8mlxuXG5gYGBiYXNoXG4jIOehruS/neiZmuaLn+eOr+Wig+W3sua/gOa0u1xuc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZVxuXG4jIOmqjOivgWxhbmdjaGFpbl9jb21tdW5pdHnmmK/lkKblt7Llronoo4VcbnB5dGhvbiAtYyBcImltcG9ydCBsYW5nY2hhaW5fY29tbXVuaXR5OyBwcmludChsYW5nY2hhaW5fY29tbXVuaXR5Ll9fdmVyc2lvbl9fKVwiXG5gYGBcblxu5aaC5p6c5rKh5pyJ5oql6ZSZ5bm25pi+56S654mI5pys5Y+377yM6K+05piO5a6J6KOF5oiQ5Yqf44CCXG5cbiMjIOmHjeaWsOi/kOihjOacjeWKoVxuXG7lronoo4Xlrozkvp3otZblkI7vvIzph43mlrDlsJ3or5Xov5DooYzmnI3liqHvvJpcblxuYGBgYmFzaFxuIyDlnKhQeUNoYXJt5Lit5L2/55So5oKo5LmL5YmN6YWN572u55qE6L+Q6KGM6YWN572uXG4jIOaIluiAheWcqOe7iOerr+S4rei/kOihjFxuY2QgL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZFxuc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZVxuZmFzdGFwaSBydW4gLS1yZWxvYWQgYXBwL21haW4ucHlcbmBgYFxuXG7ov5nlupTor6Xog73op6PlhrNgTW9kdWxlTm90Rm91bmRFcnJvcjogTm8gbW9kdWxlIG5hbWVkICdsYW5nY2hhaW5fY29tbXVuaXR5J2DplJnor6/jgILlpoLmnpzmgqjpgYfliLDlhbbku5bnvLrlpLHmqKHlnZfnmoTplJnor6/vvIzlj6/ku6Xkvb/nlKjnsbvkvLznmoTmlrnms5Xlronoo4XlroPku6zjgIJcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsicmVxdWVzdF9pZCI6ImIxNDg3ZTI0LTZhNDQtNGRhNS04MTE1LWI2OGZkNTg3YjcxNSIsInN0YXR1cyI6ImNhbmNlbGxlZCIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtdHVybi1kZWxpbWl0ZXIifSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZmJlNjBmNmUtY2EzNC00NGE2LWEyNzgtMmJmZjcxNjQwNGE5IiwicmVxdWVzdF9tZXNzYWdlIjoi6K+35L2g5biu5oiR5ZCv5Yqo6aG555uu77yM5bm26Kej5Yaz5ZCv5Yqo6aG555uu6L+H56iL5Lit6YGH5Yiw55qE6Zeu6aKYIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Iuivt+S9oOW4ruaIkeWQr+WKqOmhueebru+8jOW5tuino+WGs+WQr+WKqOmhueebrui/h+eoi+S4remBh+WIsOeahOmXrumimCJ9XX1dfSwibWVudGlvbmVkX2l0ZW1zIjpbXSwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxMVVvbU42NXJhVmlFWnJoRjdZYWpBWCIsInRvb2xfbmFtZSI6ImxhdW5jaC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJjZCAvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kICYmIHB5dGhvbiAtbSB2ZW52IC52ZW52ICYmIHNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGUgJiYgcGlwIGluc3RhbGwgLXIgcmVxdWlyZW1lbnRzLnR4dFwiLCBcIndhaXRcIjogdHJ1ZX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IuaIkeS8muW4ruaCqOWQr+WKqOmhueebruW5tuino+WGs+i/h+eoi+S4remBh+WIsOeahOmXrumimOOAguiuqeaIkeS7rOS4gOatpeatpeadpe+8mlxuXG4jIyDlkK/liqggcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIg6aG555uuXG5cbiMjIyDmraXpqqQgMTog5a6J6KOF5L6d6LWWXG5cbummluWFiO+8jOaIkeS7rOmcgOimgeehruS/neaJgOacieS+nei1lumDveW3suato+ehruWuieijhe+8mlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiLor7fkvaDluK7miJHlkK/liqjpobnnm67vvIzlubbop6PlhrPlkK/liqjpobnnm67ov4fnqIvkuK3pgYfliLDnmoTpl67popgifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInJlc3BvbnNlX3RleHQiOiLmiJHkvJrluK7mgqjlkK/liqjpobnnm67lubbop6PlhrPov4fnqIvkuK3pgYfliLDnmoTpl67popjjgILorqnmiJHku6zkuIDmraXmraXmnaXvvJpcblxuIyMg5ZCv5YqoIHBhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIOmhueebrlxuXG4jIyMg5q2l6aqkIDE6IOWuieijheS+nei1llxuXG7pppblhYjvvIzmiJHku6zpnIDopoHnoa7kv53miYDmnInkvp3otZbpg73lt7LmraPnoa7lronoo4XvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJlMTc2ZmMzYi01ODJiLTRkOTgtODY3MS05MTZjMjM5Mzc0MmYiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFOS3Y5N1I5bXBHeEVEQ1FHV3V2a1c0IiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImxzIC1sYVwiLCBcIndhaXRcIjogdHJ1ZX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IuiuqeaIkeS7rOe7p+e7reWQr+WKqOmhueebruOAguaIkeazqOaEj+WIsOaIkeS7rOeOsOWcqOW3sue7j+WcqOmhueebruagueebruW9leS6hu+8jOi/meagt+abtOaWueS+v+aTjeS9nOOAglxuXG7pppblhYjvvIzorqnmiJHmo4Dmn6XkuIDkuIvpobnnm67nmoTnu5PmnoTvvIzku6Xkvr/mm7Tlpb3lnLDkuobop6PlpoLkvZXlkK/liqjlroPvvJpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkNvbW1hbmQgaXMgc3RpbGwgcnVubmluZyBhZnRlciAwIHNlY29uZHMuIFlvdSBjYW4gdXNlIHJlYWQtcHJvY2VzcyB0byBnZXQgbW9yZSBvdXRwdXRcbmFuZCBraWxsLXByb2Nlc3MgdG8gdGVybWluYXRlIGl0IGlmIG5lZWRlZC5cblBJRCA0XG5PdXRwdXQgc28gZmFyOlxuPHN0ZG91dD5cblxuPC9zdGRvdXQ+XG48c3RkZXJyPlxuXG48L3N0ZGVycj4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDExVW9tTjY1cmFWaUVacmhGN1lhakFYIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9fX1dLCJyZXNwb25zZV90ZXh0Ijoi6K6p5oiR5Lus57un57ut5ZCv5Yqo6aG555uu44CC5oiR5rOo5oSP5Yiw5oiR5Lus546w5Zyo5bey57uP5Zyo6aG555uu5qC555uu5b2V5LqG77yM6L+Z5qC35pu05pa55L6/5pON5L2c44CCXG5cbummluWFiO+8jOiuqeaIkeajgOafpeS4gOS4i+mhueebrueahOe7k+aehO+8jOS7peS+v+abtOWlveWcsOS6huino+WmguS9leWQr+WKqOWug++8mlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImY1MWQyNGFjLTRiOWItNDhhNi05YzNlLTljMDU4NjAyNGM4MiIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUR0M1ZzblF1VzdYZndKR0M3SlByWUQiLCJ0b29sX25hbWUiOiJyZWFkLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1widGVybWluYWxfaWRcIjogNX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkNvbW1hbmQgaXMgc3RpbGwgcnVubmluZyBhZnRlciAwIHNlY29uZHMuIFlvdSBjYW4gdXNlIHJlYWQtcHJvY2VzcyB0byBnZXQgbW9yZSBvdXRwdXRcbmFuZCBraWxsLXByb2Nlc3MgdG8gdGVybWluYXRlIGl0IGlmIG5lZWRlZC5cblBJRCA1XG5PdXRwdXQgc28gZmFyOlxuPHN0ZG91dD5cblxuPC9zdGRvdXQ+XG48c3RkZXJyPlxuXG48L3N0ZGVycj4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFOS3Y5N1I5bXBHeEVEQ1FHV3V2a1c0In19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjUyNDExM2RlLTRiMTgtNDk5OS05ZDkzLWY2MTkwNTZmMGVjOSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUF1UWRVZW5BOW12eEFHdWJFWDR0a2YiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwiLmVudlwifSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi546w5Zyo6K6p5oiR5Lus5qOA5p+l5LiA5LiLIGAuZW52YCDmlofku7bvvIznoa7kv53njq/looPlj5jph4/phY3nva7mraPnoa7vvJpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDUgKHN0YXR1czogY29tcGxldGVkKTpcbjxvdXRwdXQ+dG90YWwgMzIwXHJcbmRyd3hyLXhyLXhAIDMyIHBpcGlsdSAgc3RhZmYgICAxMDI0IEFwciAxMCAxNDo1MCAuXHJcbmRyd3hyLXhyLXhAICA4IHBpcGlsdSAgc3RhZmYgICAgMjU2IEFwciAxMCAxMzo0NyAuLlxyXG5kcnd4ci14ci14ICAgNCBwaXBpbHUgIHN0YWZmICAgIDEyOCBBcHIgMTAgMDk6MjAgLmNvcGllclxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgMTUwOSBBcHIgMTAgMTM6MTMgLmVudlxyXG5kcnd4ci14ci14ICAxNCBwaXBpbHUgIHN0YWZmICAgIDQ0OCBBcHIgMTAgMTQ6NTAgLmdpdFxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgICAyOSBBcHIgMTAgMDk6MjAgLmdpdGF0dHJpYnV0ZXNcclxuZHJ3eHIteHIteCAgIDggcGlwaWx1ICBzdGFmZiAgICAyNTYgQXByIDEwIDA5OjIwIC5naXRodWJcclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgICAgOTEgQXByIDEwIDA5OjIwIC5naXRpZ25vcmVcclxuZHJ3eHIteHIteEAgMTEgcGlwaWx1ICBzdGFmZiAgICAzNTIgQXByIDEwIDE1OjAyIC5pZGVhXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgODc0IEFwciAxMCAwOToyMCAucHJlLWNvbW1pdC1jb25maWcueWFtbFxyXG5kcnd4ci14ci14QCAgMyBwaXBpbHUgIHN0YWZmICAgICA5NiBBcHIgMTAgMTM6NDggLnZzY29kZVxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgMTA3NiBBcHIgMTAgMDk6MjAgTElDRU5TRVxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgODgzNiBBcHIgMTAgMDk6MjAgUkVBRE1FLm1kXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAxMTA4IEFwciAxMCAwOToyMCBTRUNVUklUWS5tZFxyXG5kcnd4ci14ci14ICAxNSBwaXBpbHUgIHN0YWZmICAgIDQ4MCBBcHIgMTAgMTQ6NTIgYmFja2VuZFxyXG5kcnd4ci14ci14ICAgMiBwaXBpbHUgIHN0YWZmICAgICA2NCBBcHIgMTAgMTE6MzIgY2hyb21hX2RiXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAyMTE4IEFwciAxMCAwOToyMCBjb3BpZXIueW1sXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgIDExMzUyIEFwciAxMCAwOToyMCBkZXBsb3ltZW50Lm1kXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICA3Nzc2IEFwciAxMCAwOToyMCBkZXZlbG9wbWVudC5tZFxyXG5kcnd4ci14ci14ICAgOCBwaXBpbHUgIHN0YWZmICAgIDI1NiBBcHIgMTAgMDk6NTkgZG9jXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAzNzQ0IEFwciAxMCAwOToyMCBkb2NrZXItY29tcG9zZS5vdmVycmlkZS55bWxcclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgIDM5ODEgQXByIDEwIDA5OjIwIGRvY2tlci1jb21wb3NlLnRyYWVmaWsueW1sXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICA2NDY0IEFwciAxMCAwOToyMCBkb2NrZXItY29tcG9zZS55bWxcclxuZHJ3eHIteHIteCAgMjYgcGlwaWx1ICBzdGFmZiAgICA4MzIgQXByIDEwIDE0OjE4IGZyb250ZW5kXHJcbmRyd3hyLXhyLXggICAzIHBpcGlsdSAgc3RhZmYgICAgIDk2IEFwciAxMCAwOToyMCBob29rc1xyXG5kcnd4ci14ci14ICAxMSBwaXBpbHUgIHN0YWZmICAgIDM1MiBBcHIgMTAgMDk6MjAgaW1nXHJcbi1ydy1yLS1yLS1AICAxIHBpcGlsdSAgc3RhZmYgICAgMTA0IEFwciAxMCAxMzozMCBtYWluLnB5XHJcbi1ydy1yLS1yLS1AICAxIHBpcGlsdSAgc3RhZmYgICAgMTUxIEFwciAxMCAxMzozMCBweXByb2plY3QudG9tbFxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICA3MDI0MiBBcHIgMTAgMDk6MjAgcmVsZWFzZS1ub3Rlcy5tZFxyXG5kcnd4ci14ci14ICAgOCBwaXBpbHUgIHN0YWZmICAgIDI1NiBBcHIgMTAgMDk6MjAgc2NyaXB0c1xyXG5kcnd4ci14ci14ICAgMiBwaXBpbHUgIHN0YWZmICAgICA2NCBBcHIgMTAgMTE6MzIgdXBsb2Fkc1xyXG4tcnctci0tci0tQCAgMSBwaXBpbHUgIHN0YWZmICAgIDE0NiBBcHIgMTAgMTQ6NDAgdXYubG9ja1xyXG48L291dHB1dD5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFEdDNWc25RdVc3WGZ3SkdDN0pQcllEIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9fX1dLCJyZXNwb25zZV90ZXh0Ijoi546w5Zyo6K6p5oiR5Lus5qOA5p+l5LiA5LiLIGAuZW52YCDmlofku7bvvIznoa7kv53njq/looPlj5jph4/phY3nva7mraPnoa7vvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIxOGQyYWM4My00NzliLTQ4ZTgtOTcyZC1jZWYwNDIxMWJkZjMiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFCQkt0OWVnelZERVc1SzQxWjNiUXU3IiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImxzIC1sYSBiYWNrZW5kXCIsIFwid2FpdFwiOiB0cnVlfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi546w5Zyo6K6p5oiR5Lus5qOA5p+l5LiA5LiLIGJhY2tlbmQg55uu5b2V55qE57uT5p6E77yaXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIC5lbnY6XG4gICAgIDFcdCMgRG9tYWluXG4gICAgIDJcdCMgVGhpcyB3b3VsZCBiZSBzZXQgdG8gdGhlIHByb2R1Y3Rpb24gZG9tYWluIHdpdGggYW4gZW52IHZhciBvbiBkZXBsb3ltZW50XG4gICAgIDNcdCMgdXNlZCBieSBUcmFlZmlrIHRvIHRyYW5zbWl0IHRyYWZmaWMgYW5kIGFxY3VpcmUgVExTIGNlcnRpZmljYXRlc1xuICAgICA0XHRET01BSU49bG9jYWxob3N0XG4gICAgIDVcdCMgVG8gdGVzdCB0aGUgbG9jYWwgVHJhZWZpayBjb25maWdcbiAgICAgNlx0IyBET01BSU49bG9jYWxob3N0LnRpYW5nb2xvLmNvbVxuICAgICA3XHRcbiAgICAgOFx0IyBVc2VkIGJ5IHRoZSBiYWNrZW5kIHRvIGdlbmVyYXRlIGxpbmtzIGluIGVtYWlscyB0byB0aGUgZnJvbnRlbmRcbiAgICAgOVx0RlJPTlRFTkRfSE9TVD1odHRwOi8vbG9jYWxob3N0OjUxNzNcbiAgICAxMFx0IyBJbiBzdGFnaW5nIGFuZCBwcm9kdWN0aW9uLCBzZXQgdGhpcyBlbnYgdmFyIHRvIHRoZSBmcm9udGVuZCBob3N0LCBlLmcuXG4gICAgMTFcdCMgRlJPTlRFTkRfSE9TVD1odHRwczovL2Rhc2hib2FyZC5leGFtcGxlLmNvbVxuICAgIDEyXHRcbiAgICAxM1x0IyBFbnZpcm9ubWVudDogbG9jYWwsIHN0YWdpbmcsIHByb2R1Y3Rpb25cbiAgICAxNFx0RU5WSVJPTk1FTlQ9bG9jYWxcbiAgICAxNVx0XG4gICAgMTZcdFBST0pFQ1RfTkFNRT1cIlBhcmVudGluZyBBc3Npc3RhbnRcIlxuICAgIDE3XHRTVEFDS19OQU1FPWZ1bGwtc3RhY2stZmFzdGFwaS1wcm9qZWN0XG4gICAgMThcdFxuICAgIDE5XHQjIEJhY2tlbmRcbiAgICAyMFx0QkFDS0VORF9DT1JTX09SSUdJTlM9XCJodHRwOi8vbG9jYWxob3N0LGh0dHA6Ly9sb2NhbGhvc3Q6NTE3MyxodHRwczovL2xvY2FsaG9zdCxodHRwczovL2xvY2FsaG9zdDo1MTczLGh0dHA6Ly9sb2NhbGhvc3QudGlhbmdvbG8uY29tXCJcbiAgICAyMVx0U0VDUkVUX0tFWT1CYVRzWjAyT1d2WUp6QlJTa0NmSF9jYjcxdnoyaS1tVHJPQm02MzNsR21JXG4gICAgMjJcdEZJUlNUX1NVUEVSVVNFUj0xMzIxNjY5ODk4N0AxNjMuY29tXG4gICAgMjNcdEZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRD1HdWFubW8hMDFcbiAgICAyNFx0XG4gICAgMjVcdCMgRW1haWxzXG4gICAgMjZcdFNNVFBfSE9TVD1cbiAgICAyN1x0U01UUF9VU0VSPVxuICAgIDI4XHRTTVRQX1BBU1NXT1JEPVxuICAgIDI5XHRFTUFJTFNfRlJPTV9FTUFJTD1pbmZvQGV4YW1wbGUuY29tXG4gICAgMzBcdFNNVFBfVExTPVRydWVcbiAgICAzMVx0U01UUF9TU0w9RmFsc2VcbiAgICAzMlx0U01UUF9QT1JUPTU4N1xuICAgIDMzXHRcbiAgICAzNFx0IyBQb3N0Z3Jlc1xuICAgIDM1XHRQT1NUR1JFU19TRVJWRVI9YXdzLTAtYXAtbm9ydGhlYXN0LTEucG9vbGVyLnN1cGFiYXNlLmNvbVxuICAgIDM2XHRQT1NUR1JFU19QT1JUPTY1NDNcbiAgICAzN1x0UE9TVEdSRVNfREI9cG9zdGdyZXNcbiAgICAzOFx0UE9TVEdSRVNfVVNFUj1wb3N0Z3Jlcy5wdmFldGNwZnVoZXZnZW1jcWhzaFxuICAgIDM5XHRQT1NUR1JFU19QQVNTV09SRD1HdWFubW8hMDFcbiAgICA0MFx0XG4gICAgNDFcdFNFTlRSWV9EU049XG4gICAgNDJcdFxuICAgIDQzXHQjIExMTSBTZXR0aW5nc1xuICAgIDQ0XHRPUEVOUk9VVEVSX0FQSV9LRVk9c2stb3ItdjEtOTgxODQ0ZDgxY2IxMDA0ZTAxY2VlNzJmNjNiN2JiYmU0YzkwYWVlZDBmNGE4NzRmMzBkODUwMWI1ZDAwYjZhNVxuICAgIDQ1XHRERUZBVUxUX0xMTV9NT0RFTD1kZWVwc2Vlay9kZWVwc2Vlay1jaGF0LXYzLTAzMjQ6ZnJlZVxuICAgIDQ2XHRPUEVOUk9VVEVSX0JBU0VfVVJMPWh0dHBzOi8vb3BlbnJvdXRlci5haS9hcGkvdjFcbiAgICA0N1x0XG4gICAgNDhcdCMgQ29uZmlndXJlIHRoZXNlIHdpdGggeW91ciBvd24gRG9ja2VyIHJlZ2lzdHJ5IGltYWdlc1xuICAgIDQ5XHRET0NLRVJfSU1BR0VfQkFDS0VORD1iYWNrZW5kXG4gICAgNTBcdERPQ0tFUl9JTUFHRV9GUk9OVEVORD1mcm9udGVuZFxuICAgIDUxXHRcblRvdGFsIGxpbmVzIGluIGZpbGU6IDUxXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFBdVFkVWVuQTltdnhBR3ViRVg0dGtmIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9fX1dLCJyZXNwb25zZV90ZXh0Ijoi546w5Zyo6K6p5oiR5Lus5qOA5p+l5LiA5LiLIGJhY2tlbmQg55uu5b2V55qE57uT5p6E77yaXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNTcyOGVmYmEtZTRiOS00NDEyLWJmMDctZjY0YjA4OWZhMjI0IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxTDVnZno0VGlaY2pVREJlaEpMaW9RciIsInRvb2xfbmFtZSI6InJlYWQtcHJvY2VzcyIsImlucHV0X2pzb24iOiJ7XCJ0ZXJtaW5hbF9pZFwiOiA2fSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiQ29tbWFuZCBpcyBzdGlsbCBydW5uaW5nIGFmdGVyIDAgc2Vjb25kcy4gWW91IGNhbiB1c2UgcmVhZC1wcm9jZXNzIHRvIGdldCBtb3JlIG91dHB1dFxuYW5kIGtpbGwtcHJvY2VzcyB0byB0ZXJtaW5hdGUgaXQgaWYgbmVlZGVkLlxuUElEIDZcbk91dHB1dCBzbyBmYXI6XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUJCS3Q5ZWd6VkRFVzVLNDFaM2JRdTcifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo0LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiYTFjYTQ0MTItY2FiYi00ZWY1LTg2ZTItMjYwY2Q5MTRmNDZjIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxQzNHN1F2OTlUR2d2ZXA3NUh5YlAxViIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJiYWNrZW5kL3JlcXVpcmVtZW50cy50eHRcIn0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IuiuqeaIkeS7rOajgOafpeS4gOS4iyByZXF1aXJlbWVudHMudHh0IOaWh+S7tu+8jOehruS/neaIkeS7rOefpemBk+mcgOimgeWuieijheWTquS6m+S+nei1lu+8mlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSBpcyB0aGUgb3V0cHV0IGZyb20gdGVybWluYWwgNiAoc3RhdHVzOiBjb21wbGV0ZWQpOlxuPG91dHB1dD50b3RhbCA0OTZcclxuZHJ3eHIteHIteCAgMTUgcGlwaWx1ICBzdGFmZiAgICAgNDgwIEFwciAxMCAxNDo1MiAuXHJcbmRyd3hyLXhyLXhAIDMyIHBpcGlsdSAgc3RhZmYgICAgMTAyNCBBcHIgMTAgMTQ6NTAgLi5cclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgICAgIDc2IEFwciAxMCAwOToyMCAuZG9ja2VyaWdub3JlXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgICA3NCBBcHIgMTAgMDk6MjAgLmdpdGlnbm9yZVxyXG5kcnd4ci14ci14QCAgOCBwaXBpbHUgIHN0YWZmICAgICAyNTYgQXByIDEwIDE1OjA0IC52ZW52XHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgMTI2MiBBcHIgMTAgMDk6MjAgRG9ja2VyZmlsZVxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgIDc3NjMgQXByIDEwIDA5OjIwIFJFQURNRS5tZFxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgIDE1OTYgQXByIDEwIDA5OjIwIGFsZW1iaWMuaW5pXHJcbmRyd3hyLXhyLXggIDE3IHBpcGlsdSAgc3RhZmYgICAgIDU0NCBBcHIgMTAgMTE6MjggYXBwXHJcbmRyd3hyLXhyLXhAICAzIHBpcGlsdSAgc3RhZmYgICAgICA5NiBBcHIgMTAgMTQ6MDQgY2hyb21hX2RiXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgMTc0MiBBcHIgMTAgMDk6MjAgcHlwcm9qZWN0LnRvbWxcclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgICAgNDY5IEFwciAxMCAxMzoxMSByZXF1aXJlbWVudHMudHh0XHJcbmRyd3hyLXhyLXggICA4IHBpcGlsdSAgc3RhZmYgICAgIDI1NiBBcHIgMTAgMDk6MjAgc2NyaXB0c1xyXG5kcnd4ci14ci14QCAgMiBwaXBpbHUgIHN0YWZmICAgICAgNjQgQXByIDEwIDE0OjA0IHVwbG9hZHNcclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgMjE5ODE2IEFwciAxMCAwOToyMCB1di5sb2NrXHJcbjwvb3V0cHV0PlxuPHJldHVybi1jb2RlPlxuMFxuPC9yZXR1cm4tY29kZT5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUw1Z2Z6NFRpWmNqVURCZWhKTGlvUXIifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo0LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiLorqnmiJHku6zmo4Dmn6XkuIDkuIsgcmVxdWlyZW1lbnRzLnR4dCDmlofku7bvvIznoa7kv53miJHku6znn6XpgZPpnIDopoHlronoo4Xlk6rkupvkvp3otZbvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIxODE2N2Q0NC1jYWU5LTRmMTAtYjRhYy04MzI3MTFkNTUwZDYiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE2cGV0WXV5RUg4ZHVkaGZhaW5IR1lyIiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImNkIGJhY2tlbmQgJiYgcHl0aG9uIC1tIHZlbnYgLnZlbnYgJiYgc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZSAmJiBwaXAgaW5zdGFsbCAtciByZXF1aXJlbWVudHMudHh0XCIsIFwid2FpdFwiOiB0cnVlfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi546w5Zyo77yM6K6p5oiR5Lus5Yib5bu66Jma5ouf546v5aKD5bm25a6J6KOF5omA5pyJ5L6d6LWW77yaXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGJhY2tlbmQvcmVxdWlyZW1lbnRzLnR4dDpcbiAgICAgMVx0IyBGYXN0QVBJXG4gICAgIDJcdGZhc3RhcGk+PTAuMTE1LjBcbiAgICAgM1x0dXZpY29ybj49MC4zMC4wXG4gICAgIDRcdHB5ZGFudGljPj0yLjkuMFxuICAgICA1XHRweWRhbnRpYy1zZXR0aW5ncz49Mi41LjBcbiAgICAgNlx0c3FsbW9kZWw+PTAuMC4yMlxuICAgICA3XHRlbWFpbC12YWxpZGF0b3I+PTIuMi4wXG4gICAgIDhcdHB5dGhvbi1tdWx0aXBhcnQ+PTAuMC4xMFxuICAgICA5XHRcbiAgICAxMFx0IyBEYXRhYmFzZVxuICAgIDExXHRwc3ljb3BnPj0zLjIuMFxuICAgIDEyXHRhbGVtYmljPj0xLjEzLjBcbiAgICAxM1x0XG4gICAgMTRcdCMgU2VjdXJpdHlcbiAgICAxNVx0cHl0aG9uLWpvc2U+PTMuMy4wXG4gICAgMTZcdHBhc3NsaWI+PTEuNy40XG4gICAgMTdcdGJjcnlwdD49NC4wLjFcbiAgICAxOFx0XG4gICAgMTlcdCMgRW1haWxcbiAgICAyMFx0ZW1haWxzPj0wLjZcbiAgICAyMVx0amluamEyPj0zLjEuNFxuICAgIDIyXHRcbiAgICAyM1x0IyBSQUcgU3lzdGVtXG4gICAgMjRcdGxhbmdjaGFpbj49MC4xLjBcbiAgICAyNVx0bGFuZ2NoYWluLWNvcmU+PTAuMS4wXG4gICAgMjZcdGxhbmdjaGFpbi1jb21tdW5pdHk+PTAuMS4wXG4gICAgMjdcdGxhbmdjaGFpbi1jaHJvbWE+PTAuMS4wXG4gICAgMjhcdGNocm9tYWRiPj0wLjQuMFxuICAgIDI5XHRodHRweD49MC4yNy4wXG4gICAgMzBcdHB5cGRmPj00LjAuMFxuICAgIDMxXHRkb2N4MnR4dD49MC44XG4gICAgMzJcdHVuc3RydWN0dXJlZD49MC4xMi4wXG4gICAgMzNcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogMzNcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUMzRzdRdjk5VEdndmVwNzVIeWJQMVYifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo0LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiLnjrDlnKjvvIzorqnmiJHku6zliJvlu7romZrmi5/njq/looPlubblronoo4XmiYDmnInkvp3otZbvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJhNDA3OTg3My0wM2FkLTQ5MWQtYmJlNS00MTFiOWRhMjcxZTkiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFCdFFrMkU2clRhWGVxRzFubnM3RGpQIiwidG9vbF9uYW1lIjoicmVhZC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcInRlcm1pbmFsX2lkXCI6IDd9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJDb21tYW5kIGlzIHN0aWxsIHJ1bm5pbmcgYWZ0ZXIgMCBzZWNvbmRzLiBZb3UgY2FuIHVzZSByZWFkLXByb2Nlc3MgdG8gZ2V0IG1vcmUgb3V0cHV0XG5hbmQga2lsbC1wcm9jZXNzIHRvIHRlcm1pbmF0ZSBpdCBpZiBuZWVkZWQuXG5QSUQgN1xuT3V0cHV0IHNvIGZhcjpcbjxzdGRvdXQ+XG5cbjwvc3Rkb3V0PlxuPHN0ZGVycj5cblxuPC9zdGRlcnI+IiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxNnBldFl1eUVIOGR1ZGhmYWluSEdZciJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjQsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifX19XSwicmVzcG9uc2VfdGV4dCI6IiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIzYWE4N2IxYi00ZWI5LTRmZmEtYmY1Zi1hMDdhNTJhMDg1NTMiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFLYmdBSnV5YmZXOGhKRVJkU0gxeDlhIiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImNkIGJhY2tlbmQgJiYgc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZSAmJiBmYXN0YXBpIHJ1biAtLXJlbG9hZCBhcHAvbWFpbi5weVwiLCBcIndhaXRcIjogZmFsc2V9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLlvojlpb3vvIzkvp3otZblt7Lnu4/lronoo4XlrozmiJDjgILnjrDlnKjorqnmiJHku6zlsJ3or5XlkK/liqjlkI7nq6/mnI3liqHvvJpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDcgKHN0YXR1czogY29tcGxldGVkKTpcbjxvdXRwdXQ+UmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGZhc3RhcGk+PTAuMTE1LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIC1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMikpICgwLjExNS4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogdXZpY29ybj49MC4zMC4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMpKSAoMC4zMC42KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHlkYW50aWM+PTIuOS4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDQpKSAoMi4xMS4zKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHlkYW50aWMtc2V0dGluZ3M+PTIuNS4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDUpKSAoMi41LjIpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBzcWxtb2RlbD49MC4wLjIyIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDYpKSAoMC4wLjIyKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogZW1haWwtdmFsaWRhdG9yPj0yLjIuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gLXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSA3KSkgKDIuMi4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHl0aG9uLW11bHRpcGFydD49MC4wLjEwIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDgpKSAoMC4wLjEwKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHN5Y29wZz49My4yLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIC1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMTEpKSAoMy4yLjIpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBhbGVtYmljPj0xLjEzLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIC1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMTIpKSAoMS4xMy4yKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHl0aG9uLWpvc2U+PTMuMy4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDE1KSkgKDMuNC4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcGFzc2xpYj49MS43LjQgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIC1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMTYpKSAoMS43LjQpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBiY3J5cHQ+PTQuMC4xIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDE3KSkgKDQuMC4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogZW1haWxzPj0wLjYgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIC1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjApKSAoMC42KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogamluamEyPj0zLjEuNCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gLXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyMSkpICgzLjEuNClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGxhbmdjaGFpbj49MC4xLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIC1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjQpKSAoMC4zLjIzKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogbGFuZ2NoYWluLWNvcmU+PTAuMS4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI1KSkgKDAuMy41MSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGxhbmdjaGFpbi1jb21tdW5pdHk+PTAuMS4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI2KSkgKDAuMy4yMSlcclxuQ29sbGVjdGluZyBsYW5nY2hhaW4tY2hyb21hPj0wLjEuMCAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI3KSlcclxuICBVc2luZyBjYWNoZWQgbGFuZ2NoYWluX2Nocm9tYS0wLjIuMi1weTMtbm9uZS1hbnkud2hsLm1ldGFkYXRhICgxLjMga0IpXHJcbkNvbGxlY3RpbmcgY2hyb21hZGI+PTAuNC4wIChmcm9tIC1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKVxyXG4gIFVzaW5nIGNhY2hlZCBjaHJvbWFkYi0xLjAuNC1jcDM5LWFiaTMtbWFjb3N4XzExXzBfYXJtNjQud2hsLm1ldGFkYXRhICg2Ljkga0IpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBodHRweD49MC4yNy4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI5KSkgKDAuMjcuMilcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHB5cGRmPj00LjAuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gLXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAzMCkpICg1LjQuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGRvY3gydHh0Pj0wLjggaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIC1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzEpKSAoMC45KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogdW5zdHJ1Y3R1cmVkPj0wLjEyLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIC1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoMC4xNy4yKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogc3RhcmxldHRlPDAuMzkuMCw+PTAuMzcuMiBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gZmFzdGFwaT49MC4xMTUuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyKSkgKDAuMzguNilcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHR5cGluZy1leHRlbnNpb25zPj00LjguMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gZmFzdGFwaT49MC4xMTUuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyKSkgKDQuMTIuMilcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGNsaWNrPj03LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHV2aWNvcm4+PTAuMzAuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAzKSkgKDguMS43KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogaDExPj0wLjggaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHV2aWNvcm4+PTAuMzAuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAzKSkgKDAuMTQuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGFubm90YXRlZC10eXBlcz49MC42LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHB5ZGFudGljPj0yLjkuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSA0KSkgKDAuNy4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHlkYW50aWMtY29yZT09Mi4zMy4xIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBweWRhbnRpYz49Mi45LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgNCkpICgyLjMzLjEpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiB0eXBpbmctaW5zcGVjdGlvbj49MC40LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHB5ZGFudGljPj0yLjkuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSA0KSkgKDAuNC4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHl0aG9uLWRvdGVudj49MC4yMS4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBweWRhbnRpYy1zZXR0aW5ncz49Mi41LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgNSkpICgxLjAuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IFNRTEFsY2hlbXk8Mi4xLjAsPj0yLjAuMTQgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHNxbG1vZGVsPj0wLjAuMjItPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgNikpICgyLjAuMzUpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBkbnNweXRob24+PTIuMC4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBlbWFpbC12YWxpZGF0b3I+PTIuMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDcpKSAoMi42LjEpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBpZG5hPj0yLjAuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gZW1haWwtdmFsaWRhdG9yPj0yLjIuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSA3KSkgKDMuMTApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBNYWtvIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBhbGVtYmljPj0xLjEzLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMTIpKSAoMS4zLjUpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBlY2RzYSE9MC4xNSBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gcHl0aG9uLWpvc2U+PTMuMy4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDE1KSkgKDAuMTkuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHJzYSE9NC4xLjEsIT00LjQsPDUuMCw+PTQuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gcHl0aG9uLWpvc2U+PTMuMy4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDE1KSkgKDQuOSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHB5YXNuMTwwLjUuMCw+PTAuNC4xIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBweXRob24tam9zZT49My4zLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMTUpKSAoMC40LjgpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBjc3N1dGlscyBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gZW1haWxzPj0wLjYtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjApKSAoMi4xMS4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogbHhtbCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gZW1haWxzPj0wLjYtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjApKSAoNS4zLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBjaGFyZGV0IGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBlbWFpbHM+PTAuNi0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyMCkpICg1LjIuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHB5dGhvbi1kYXRldXRpbCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gZW1haWxzPj0wLjYtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjApKSAoMi45LjAucG9zdDApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiByZXF1ZXN0cyBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gZW1haWxzPj0wLjYtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjApKSAoMi4zMi4zKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHJlbWFpbGVyIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBlbWFpbHM+PTAuNi0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyMCkpICgzLjEwLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBNYXJrdXBTYWZlPj0yLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGppbmphMj49My4xLjQtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjEpKSAoMi4xLjUpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBsYW5nY2hhaW4tdGV4dC1zcGxpdHRlcnM8MS4wLjAsPj0wLjMuOCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gbGFuZ2NoYWluPj0wLjEuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyNCkpICgwLjMuOClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGxhbmdzbWl0aDwwLjQsPj0wLjEuMTcgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGxhbmdjaGFpbj49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjQpKSAoMC4zLjI4KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogUHlZQU1MPj01LjMgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGxhbmdjaGFpbj49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjQpKSAoNi4wLjIpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiB0ZW5hY2l0eSE9OC40LjAsPDEwLjAuMCw+PTguMS4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBsYW5nY2hhaW4tY29yZT49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjUpKSAoOC41LjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBqc29ucGF0Y2g8Mi4wLD49MS4zMyBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gbGFuZ2NoYWluLWNvcmU+PTAuMS4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI1KSkgKDEuMzMpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBwYWNrYWdpbmc8MjUsPj0yMy4yIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBsYW5nY2hhaW4tY29yZT49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjUpKSAoMjQuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGFpb2h0dHA8NC4wLjAsPj0zLjguMyBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gbGFuZ2NoYWluLWNvbW11bml0eT49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjYpKSAoMy4xMS4xNilcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGRhdGFjbGFzc2VzLWpzb248MC43LD49MC41LjcgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGxhbmdjaGFpbi1jb21tdW5pdHk+PTAuMS4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI2KSkgKDAuNi43KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogaHR0cHgtc3NlPDEuMC4wLD49MC40LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGxhbmdjaGFpbi1jb21tdW5pdHk+PTAuMS4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI2KSkgKDAuNC4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogbnVtcHk8Myw+PTEuMjYuMiBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gbGFuZ2NoYWluLWNvbW11bml0eT49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjYpKSAoMS4yNi40KVxyXG4gIFVzaW5nIGNhY2hlZCBjaHJvbWFkYi0wLjYuMy1weTMtbm9uZS1hbnkud2hsLm1ldGFkYXRhICg2Ljgga0IpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBidWlsZD49MS4wLjMgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgxLjIuMi5wb3N0MSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGNocm9tYS1obnN3bGliPT0wLjcuNiBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gY2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDAuNy42KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcG9zdGhvZz49Mi40LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgzLjIzLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBvbm54cnVudGltZT49MS4xNC4xIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMS4yMS4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogb3BlbnRlbGVtZXRyeS1hcGk+PTEuMi4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMS4zMS4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogb3BlbnRlbGVtZXRyeS1leHBvcnRlci1vdGxwLXByb3RvLWdycGM+PTEuMi4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMS4zMS4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24tZmFzdGFwaT49MC40MWIwIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMC41MmIxKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogb3BlbnRlbGVtZXRyeS1zZGs+PTEuMi4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMS4zMS4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogdG9rZW5pemVycz49MC4xMy4yIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMC4yMS4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHlwaWthPj0wLjQ4LjkgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgwLjQ4LjkpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiB0cWRtPj00LjY1LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICg0LjY3LjEpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBvdmVycmlkZXM+PTcuMy4xIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoNy43LjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBpbXBvcnRsaWItcmVzb3VyY2VzIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoNi41LjIpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBncnBjaW8+PTEuNTguMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gY2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDEuNzEuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHR5cGVyPj0wLjkuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gY2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDAuMTIuNSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGt1YmVybmV0ZXM+PTI4LjEuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gY2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDMyLjAuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IG1taDM+PTQuMC4xIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoNS4xLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBvcmpzb24+PTMuOS4xMiBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gY2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDMuMTAuMTYpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiByaWNoPj0xMC4xMS4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMTMuOC4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogYW55aW8gaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGh0dHB4Pj0wLjI3LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjkpKSAoNC42LjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBjZXJ0aWZpIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBodHRweD49MC4yNy4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI5KSkgKDIwMjQuOC4zMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGh0dHBjb3JlPT0xLiogaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGh0dHB4Pj0wLjI3LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjkpKSAoMS4wLjUpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBzbmlmZmlvIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBodHRweD49MC4yNy4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI5KSkgKDEuMy4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogZmlsZXR5cGUgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDEuMi4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHl0aG9uLW1hZ2ljIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSB1bnN0cnVjdHVyZWQ+PTAuMTIuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAzMikpICgwLjQuMjcpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBubHRrIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSB1bnN0cnVjdHVyZWQ+PTAuMTIuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAzMikpICgzLjkuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGJlYXV0aWZ1bHNvdXA0IGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSB1bnN0cnVjdHVyZWQ+PTAuMTIuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAzMikpICg0LjEzLjMpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBlbW9qaSBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gdW5zdHJ1Y3R1cmVkPj0wLjEyLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoMi4xNC4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHl0aG9uLWlzbzYzOSBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gdW5zdHJ1Y3R1cmVkPj0wLjEyLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoMjAyNS4yLjE4KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogbGFuZ2RldGVjdCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gdW5zdHJ1Y3R1cmVkPj0wLjEyLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoMS4wLjkpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiByYXBpZGZ1enogaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDMuMTMuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGJhY2tvZmYgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDIuMi4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogdW5zdHJ1Y3R1cmVkLWNsaWVudCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gdW5zdHJ1Y3R1cmVkPj0wLjEyLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoMC4zMi4zKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogd3JhcHQgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDEuMTcuMilcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHBzdXRpbCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gdW5zdHJ1Y3R1cmVkPj0wLjEyLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoNy4wLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBweXRob24tb3htc2cgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDAuMC4yKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogaHRtbDVsaWIgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDEuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGFpb2hhcHB5ZXllYmFsbHM+PTIuMy4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBhaW9odHRwPDQuMC4wLD49My44LjMtPmxhbmdjaGFpbi1jb21tdW5pdHk+PTAuMS4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI2KSkgKDIuNi4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogYWlvc2lnbmFsPj0xLjEuMiBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gYWlvaHR0cDw0LjAuMCw+PTMuOC4zLT5sYW5nY2hhaW4tY29tbXVuaXR5Pj0wLjEuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyNikpICgxLjMuMilcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGF0dHJzPj0xNy4zLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGFpb2h0dHA8NC4wLjAsPj0zLjguMy0+bGFuZ2NoYWluLWNvbW11bml0eT49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjYpKSAoMjUuMy4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogZnJvemVubGlzdD49MS4xLjEgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGFpb2h0dHA8NC4wLjAsPj0zLjguMy0+bGFuZ2NoYWluLWNvbW11bml0eT49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjYpKSAoMS41LjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBtdWx0aWRpY3Q8Ny4wLD49NC41IGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBhaW9odHRwPDQuMC4wLD49My44LjMtPmxhbmdjaGFpbi1jb21tdW5pdHk+PTAuMS4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI2KSkgKDYuNC4yKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHJvcGNhY2hlPj0wLjIuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gYWlvaHR0cDw0LjAuMCw+PTMuOC4zLT5sYW5nY2hhaW4tY29tbXVuaXR5Pj0wLjEuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyNikpICgwLjMuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHlhcmw8Mi4wLD49MS4xNy4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBhaW9odHRwPDQuMC4wLD49My44LjMtPmxhbmdjaGFpbi1jb21tdW5pdHk+PTAuMS4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI2KSkgKDEuMTkuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHB5cHJvamVjdF9ob29rcyBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gYnVpbGQ+PTEuMC4zLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMS4yLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBtYXJzaG1hbGxvdzw0LjAuMCw+PTMuMTguMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gZGF0YWNsYXNzZXMtanNvbjwwLjcsPj0wLjUuNy0+bGFuZ2NoYWluLWNvbW11bml0eT49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjYpKSAoMy4yNi4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogdHlwaW5nLWluc3BlY3Q8MSw+PTAuNC4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBkYXRhY2xhc3Nlcy1qc29uPDAuNyw+PTAuNS43LT5sYW5nY2hhaW4tY29tbXVuaXR5Pj0wLjEuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyNikpICgwLjkuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHNpeD49MS45LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGVjZHNhIT0wLjE1LT5weXRob24tam9zZT49My4zLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMTUpKSAoMS4xNi4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDoganNvbnBvaW50ZXI+PTEuOSBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20ganNvbnBhdGNoPDIuMCw+PTEuMzMtPmxhbmdjaGFpbi1jb3JlPj0wLjEuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyNSkpICgzLjAuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGdvb2dsZS1hdXRoPj0xLjAuMSBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20ga3ViZXJuZXRlcz49MjguMS4wLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMi4zOC4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogd2Vic29ja2V0LWNsaWVudCE9MC40MC4wLCE9MC40MS4qLCE9MC40Mi4qLD49MC4zMi4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBrdWJlcm5ldGVzPj0yOC4xLjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgxLjguMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHJlcXVlc3RzLW9hdXRobGliIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBrdWJlcm5ldGVzPj0yOC4xLjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgyLjAuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IG9hdXRobGliPj0zLjIuMiBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20ga3ViZXJuZXRlcz49MjguMS4wLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMy4yLjIpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiB1cmxsaWIzPj0xLjI0LjIgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGt1YmVybmV0ZXM+PTI4LjEuMC0+Y2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDIuMi4zKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogZHVyYXRpb25weT49MC43IGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBrdWJlcm5ldGVzPj0yOC4xLjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgwLjkpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiByZXF1ZXN0cy10b29sYmVsdDwyLjAuMCw+PTEuMC4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBsYW5nc21pdGg8MC40LD49MC4xLjE3LT5sYW5nY2hhaW4+PTAuMS4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI0KSkgKDEuMC4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogenN0YW5kYXJkPDAuMjQuMCw+PTAuMjMuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gbGFuZ3NtaXRoPDAuNCw+PTAuMS4xNy0+bGFuZ2NoYWluPj0wLjEuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyNCkpICgwLjIzLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBjb2xvcmVkbG9ncyBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gb25ueHJ1bnRpbWU+PTEuMTQuMS0+Y2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDE1LjAuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGZsYXRidWZmZXJzIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBvbm54cnVudGltZT49MS4xNC4xLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMjUuMi4xMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHByb3RvYnVmIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBvbm54cnVudGltZT49MS4xNC4xLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoNS4yOS40KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogc3ltcHkgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIG9ubnhydW50aW1lPj0xLjE0LjEtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgxLjEzLjMpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBkZXByZWNhdGVkPj0xLjIuNiBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gb3BlbnRlbGVtZXRyeS1hcGk+PTEuMi4wLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMS4yLjE4KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogaW1wb3J0bGliLW1ldGFkYXRhPDguNy4wLD49Ni4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBvcGVudGVsZW1ldHJ5LWFwaT49MS4yLjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICg4LjYuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGdvb2dsZWFwaXMtY29tbW9uLXByb3Rvc349MS41MiBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gb3BlbnRlbGVtZXRyeS1leHBvcnRlci1vdGxwLXByb3RvLWdycGM+PTEuMi4wLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMS42OS4yKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogb3BlbnRlbGVtZXRyeS1leHBvcnRlci1vdGxwLXByb3RvLWNvbW1vbj09MS4zMS4xIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBvcGVudGVsZW1ldHJ5LWV4cG9ydGVyLW90bHAtcHJvdG8tZ3JwYz49MS4yLjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgxLjMxLjEpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBvcGVudGVsZW1ldHJ5LXByb3RvPT0xLjMxLjEgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIG9wZW50ZWxlbWV0cnktZXhwb3J0ZXItb3RscC1wcm90by1ncnBjPj0xLjIuMC0+Y2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDEuMzEuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IG9wZW50ZWxlbWV0cnktaW5zdHJ1bWVudGF0aW9uLWFzZ2k9PTAuNTJiMSBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24tZmFzdGFwaT49MC40MWIwLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMC41MmIxKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb249PTAuNTJiMSBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24tZmFzdGFwaT49MC40MWIwLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMC41MmIxKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogb3BlbnRlbGVtZXRyeS1zZW1hbnRpYy1jb252ZW50aW9ucz09MC41MmIxIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBvcGVudGVsZW1ldHJ5LWluc3RydW1lbnRhdGlvbi1mYXN0YXBpPj0wLjQxYjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgwLjUyYjEpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBvcGVudGVsZW1ldHJ5LXV0aWwtaHR0cD09MC41MmIxIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBvcGVudGVsZW1ldHJ5LWluc3RydW1lbnRhdGlvbi1mYXN0YXBpPj0wLjQxYjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgwLjUyYjEpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBhc2dpcmVmfj0zLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIG9wZW50ZWxlbWV0cnktaW5zdHJ1bWVudGF0aW9uLWFzZ2k9PTAuNTJiMS0+b3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24tZmFzdGFwaT49MC40MWIwLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMy44LjEpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBtb25vdG9uaWM+PTEuNSBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gcG9zdGhvZz49Mi40LjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgxLjYpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBkaXN0cm8+PTEuNS4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBwb3N0aG9nPj0yLjQuMC0+Y2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDEuOS4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogY2hhcnNldC1ub3JtYWxpemVyPDQsPj0yIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSByZXF1ZXN0cy0+ZW1haWxzPj0wLjYtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjApKSAoMy4zLjIpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBtYXJrZG93bi1pdC1weT49Mi4yLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHJpY2g+PTEwLjExLjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgzLjAuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHB5Z21lbnRzPDMuMC4wLD49Mi4xMy4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSByaWNoPj0xMC4xMS4wLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMi4xOC4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogaHVnZ2luZ2ZhY2UtaHViPDEuMCw+PTAuMTYuNCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gdG9rZW5pemVycz49MC4xMy4yLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMC4zMC4yKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogc2hlbGxpbmdoYW0+PTEuMy4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSB0eXBlcj49MC45LjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgxLjUuNClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGh0dHB0b29scz49MC41LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHV2aWNvcm5bc3RhbmRhcmRdPj0wLjE4LjMtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgwLjYuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHV2bG9vcCE9MC4xNS4wLCE9MC4xNS4xLD49MC4xNC4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSB1dmljb3JuW3N0YW5kYXJkXT49MC4xOC4zLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMC4yMC4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogd2F0Y2hmaWxlcz49MC4xMyBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gdXZpY29ybltzdGFuZGFyZF0+PTAuMTguMy0+Y2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDAuMjQuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHdlYnNvY2tldHM+PTEwLjQgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHV2aWNvcm5bc3RhbmRhcmRdPj0wLjE4LjMtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgxMy4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogc291cHNpZXZlPjEuMiBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gYmVhdXRpZnVsc291cDQtPnVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDIuNilcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IG1vcmUtaXRlcnRvb2xzIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjc3N1dGlscy0+ZW1haWxzPj0wLjYtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjApKSAoMTAuNS4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogd2ViZW5jb2RpbmdzIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBodG1sNWxpYi0+dW5zdHJ1Y3R1cmVkPj0wLjEyLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoMC41LjEpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBqb2JsaWIgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIG5sdGstPnVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDEuNC4yKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcmVnZXg+PTIwMjEuOC4zIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBubHRrLT51bnN0cnVjdHVyZWQ+PTAuMTIuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAzMikpICgyMDI0LjExLjYpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBjc3NzZWxlY3QgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHByZW1haWxlci0+ZW1haWxzPj0wLjYtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjApKSAoMS4yLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBjYWNoZXRvb2xzIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBwcmVtYWlsZXItPmVtYWlscz49MC42LT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDIwKSkgKDUuNS4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogb2xlZmlsZSBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gcHl0aG9uLW94bXNnLT51bnN0cnVjdHVyZWQ+PTAuMTIuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAzMikpICgwLjQ3KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogYWlvZmlsZXM+PTI0LjEuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gdW5zdHJ1Y3R1cmVkLWNsaWVudC0+dW5zdHJ1Y3R1cmVkPj0wLjEyLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoMjQuMS4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogY3J5cHRvZ3JhcGh5Pj0zLjEgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHVuc3RydWN0dXJlZC1jbGllbnQtPnVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDQ0LjAuMilcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGV2YWwtdHlwZS1iYWNrcG9ydD49MC4yLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHVuc3RydWN0dXJlZC1jbGllbnQtPnVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDAuMi4yKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogbmVzdC1hc3luY2lvPj0xLjYuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gdW5zdHJ1Y3R1cmVkLWNsaWVudC0+dW5zdHJ1Y3R1cmVkPj0wLjEyLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoMS42LjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBjZmZpPj0xLjEyIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjcnlwdG9ncmFwaHk+PTMuMS0+dW5zdHJ1Y3R1cmVkLWNsaWVudC0+dW5zdHJ1Y3R1cmVkPj0wLjEyLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoMS4xNy4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHlhc24xLW1vZHVsZXM+PTAuMi4xIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBnb29nbGUtYXV0aD49MS4wLjEtPmt1YmVybmV0ZXM+PTI4LjEuMC0+Y2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDAuNC4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogZmlsZWxvY2sgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGh1Z2dpbmdmYWNlLWh1YjwxLjAsPj0wLjE2LjQtPnRva2VuaXplcnM+PTAuMTMuMi0+Y2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDMuMTYuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGZzc3BlYz49MjAyMy41LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGh1Z2dpbmdmYWNlLWh1YjwxLjAsPj0wLjE2LjQtPnRva2VuaXplcnM+PTAuMTMuMi0+Y2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDIwMjUuMy4yKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogemlwcD49My4yMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gaW1wb3J0bGliLW1ldGFkYXRhPDguNy4wLD49Ni4wLT5vcGVudGVsZW1ldHJ5LWFwaT49MS4yLjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgzLjIxLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBtZHVybH49MC4xIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBtYXJrZG93bi1pdC1weT49Mi4yLjAtPnJpY2g+PTEwLjExLjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgwLjEuMilcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IG15cHktZXh0ZW5zaW9ucz49MC4zLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHR5cGluZy1pbnNwZWN0PDEsPj0wLjQuMC0+ZGF0YWNsYXNzZXMtanNvbjwwLjcsPj0wLjUuNy0+bGFuZ2NoYWluLWNvbW11bml0eT49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjYpKSAoMS4wLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBodW1hbmZyaWVuZGx5Pj05LjEgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGNvbG9yZWRsb2dzLT5vbm54cnVudGltZT49MS4xNC4xLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMTAuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IG1wbWF0aDwxLjQsPj0xLjEuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gc3ltcHktPm9ubnhydW50aW1lPj0xLjE0LjEtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgxLjMuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHB5Y3BhcnNlciBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gY2ZmaT49MS4xMi0+Y3J5cHRvZ3JhcGh5Pj0zLjEtPnVuc3RydWN0dXJlZC1jbGllbnQtPnVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDIuMjIpXHJcblVzaW5nIGNhY2hlZCBsYW5nY2hhaW5fY2hyb21hLTAuMi4yLXB5My1ub25lLWFueS53aGwgKDExIGtCKVxyXG5Vc2luZyBjYWNoZWQgY2hyb21hZGItMC42LjMtcHkzLW5vbmUtYW55LndobCAoNjExIGtCKVxyXG5JbnN0YWxsaW5nIGNvbGxlY3RlZCBwYWNrYWdlczogY2hyb21hZGIsIGxhbmdjaGFpbi1jaHJvbWFcclxuU3VjY2Vzc2Z1bGx5IGluc3RhbGxlZCBjaHJvbWFkYi0wLjYuMyBsYW5nY2hhaW4tY2hyb21hLTAuMi4yXHJcblxyXG5cdTAwMWJbMW1bXHUwMDFiWzBtXHUwMDFiWzM0OzQ5bW5vdGljZVx1MDAxYlswbVx1MDAxYlsxOzM5OzQ5bV1cdTAwMWJbMG1cdTAwMWJbMzk7NDltIEEgbmV3IHJlbGVhc2Ugb2YgcGlwIGlzIGF2YWlsYWJsZTogXHUwMDFiWzBtXHUwMDFiWzMxOzQ5bTI0LjMuMVx1MDAxYlswbVx1MDAxYlszOTs0OW0gLT4gXHUwMDFiWzBtXHUwMDFiWzMyOzQ5bTI1LjAuMVx1MDAxYlswbVxyXG5cdTAwMWJbMW1bXHUwMDFiWzBtXHUwMDFiWzM0OzQ5bW5vdGljZVx1MDAxYlswbVx1MDAxYlsxOzM5OzQ5bV1cdTAwMWJbMG1cdTAwMWJbMzk7NDltIFRvIHVwZGF0ZSwgcnVuOiBcdTAwMWJbMG1cdTAwMWJbMzI7NDltcGlwIGluc3RhbGwgLS11cGdyYWRlIHBpcFx1MDAxYlswbVxyXG48L291dHB1dD5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFCdFFrMkU2clRhWGVxRzFubnM3RGpQIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9fX1dLCJyZXNwb25zZV90ZXh0Ijoi5b6I5aW977yM5L6d6LWW5bey57uP5a6J6KOF5a6M5oiQ44CC546w5Zyo6K6p5oiR5Lus5bCd6K+V5ZCv5Yqo5ZCO56uv5pyN5Yqh77yaXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiYzVkZjA5YzQtNmFmYi00OTVlLTlhMzEtMjhhZmQxNzFjYmVhIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxS2M4dnZXWjRYdHBjd0Nuc3FoMXdURyIsInRvb2xfbmFtZSI6InJlYWQtcHJvY2VzcyIsImlucHV0X2pzb24iOiJ7XCJ0ZXJtaW5hbF9pZFwiOiA4fSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiUHJvY2VzcyBsYXVuY2hlZCB3aXRoIFBJRCA4IiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxS2JnQUp1eWJmVzhoSkVSZFNIMXg5YSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjQsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifX19XSwicmVzcG9uc2VfdGV4dCI6IiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIyOTEwNWE3OS01YzM3LTRjZDUtYmIyOS0wZTg5MDE2ZmFlY2YiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFDNkh0ZXFUVG85cEp5WFdGNEJIMUN4IiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImxzIC1sYSBmcm9udGVuZFwiLCBcIndhaXRcIjogdHJ1ZX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IuWkquWlveS6hu+8geWQjuerr+acjeWKoeW3sue7j+aIkOWKn+WQr+WKqO+8jOW5tuS4lOato+WcqOebkeWQrCBodHRwOi8vMC4wLjAuMDo4MDAw44CCXG5cbueOsOWcqOiuqeaIkeS7rOajgOafpeS4gOS4i+WJjeerr+ebruW9le+8jOeci+eci+WmguS9leWQr+WKqOWJjeerr+acjeWKoe+8mlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSBpcyB0aGUgb3V0cHV0IGZyb20gdGVybWluYWwgOCAoc3RhdHVzOiBzdGlsbCBydW5uaW5nKTpcbjxvdXRwdXQ+XHUwMDFiWzM0bUlORk8gICAgXHUwMDFiWzBtIFVzaW5nIHBhdGggXHUwMDFiWzM0bWFwcC9tYWluLnB5XHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cdTAwMWJbMzRtSU5GTyAgICBcdTAwMWJbMG0gUmVzb2x2ZWQgYWJzb2x1dGUgcGF0aCBcdTAwMWJbMzVtL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC9hcHAvXHUwMDFiWzBtXHUwMDFiWzk1bW1haW4ucHlcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cdTAwMWJbMzRtSU5GTyAgICBcdTAwMWJbMG0gU2VhcmNoaW5nIGZvciBwYWNrYWdlIGZpbGUgc3RydWN0dXJlIGZyb20gZGlyZWN0b3JpZXMgd2l0aCBcdTAwMWJbMzRtX19pbml0X18ucHlcdTAwMWJbMG0gZmlsZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcblx1MDAxYlszNG1JTkZPICAgIFx1MDAxYlswbSBJbXBvcnRpbmcgZnJvbSBcdTAwMWJbMzVtL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvXHUwMDFiWzBtXHUwMDFiWzk1bWJhY2tlbmRcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDila3ilIAgXHUwMDFiWzE7MzJtUHl0aG9uIHBhY2thZ2UgZmlsZSBzdHJ1Y3R1cmVcdTAwMWJbMG0g4pSA4pWuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilIIgIPCfk4EgYXBwICAgICAgICAgICAgICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilIIgIOKUnOKUgOKUgCBcdTAwMWJbMm3wn5CNIF9faW5pdF9fLnB5XHUwMDFiWzBtICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilIIgIOKUlOKUgOKUgCDwn5CNIG1haW4ucHkgICAgICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pWw4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pWvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuXHUwMDFiWzM0bUlORk8gICAgXHUwMDFiWzBtIEltcG9ydGluZyBtb2R1bGUgXHUwMDFiWzMybWFwcC5tYWluXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5JTkZPOmNocm9tYWRiLnRlbGVtZXRyeS5wcm9kdWN0LnBvc3Rob2c6QW5vbnltaXplZCB0ZWxlbWV0cnkgZW5hYmxlZC4gU2VlICAgICAgICAgICAgICAgICAgICAgaHR0cHM6Ly9kb2NzLnRyeWNocm9tYS5jb20vdGVsZW1ldHJ5IGZvciBtb3JlIGluZm9ybWF0aW9uLlxyXG5cdTAwMWJbMzRtSU5GTyAgICBcdTAwMWJbMG0gRm91bmQgaW1wb3J0YWJsZSBGYXN0QVBJIGFwcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKVreKUgOKUgCBcdTAwMWJbMTszMm1JbXBvcnRhYmxlIEZhc3RBUEkgYXBwXHUwMDFiWzBtIOKUgOKUgOKVriAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilIIgIFx1MDAxYlszODs1OzIwNDs0ODs1OzIzNW1mcm9tXHUwMDFiWzBtXHUwMDFiWzM4OzU7MjMxOzQ4OzU7MjM1bSBcdTAwMWJbMG1cdTAwMWJbMzg7NTsyMzE7NDg7NTsyMzVtYXBwXHUwMDFiWzBtXHUwMDFiWzM4OzU7MjMxOzQ4OzU7MjM1bS5cdTAwMWJbMG1cdTAwMWJbMzg7NTsyMzE7NDg7NTsyMzVtbWFpblx1MDAxYlswbVx1MDAxYlszODs1OzIzMTs0ODs1OzIzNW0gXHUwMDFiWzBtXHUwMDFiWzM4OzU7MjA0OzQ4OzU7MjM1bWltcG9ydFx1MDAxYlswbVx1MDAxYlszODs1OzIzMTs0ODs1OzIzNW0gXHUwMDFiWzBtXHUwMDFiWzM4OzU7MjMxOzQ4OzU7MjM1bWFwcFx1MDAxYlswbSAg4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKVsOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKVryAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuXHUwMDFiWzM0bUlORk8gICAgXHUwMDFiWzBtIFVzaW5nIGltcG9ydCBzdHJpbmcgXHUwMDFiWzE7MzJtYXBwLm1haW46YXBwXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pWt4pSAXHUwMDFiWzBtXHUwMDFiWzMybeKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgFx1MDAxYlswbSBGYXN0QVBJIENMSSAtIFByb2R1Y3Rpb24gbW9kZSBcdTAwMWJbMzJt4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAXHUwMDFiWzBtXHUwMDFiWzMybeKUgOKVrlx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKUglx1MDAxYlswbVx1MDAxYlszMm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx1MDAxYlswbVx1MDAxYlszMm3ilIJcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilIJcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMjszMm1TZXJ2aW5nIGF0Olx1MDAxYlswbVx1MDAxYlszMm0gXHUwMDFiWzBtXHUwMDFiWzMybWh0dHA6Ly8wLjAuMC4wOjgwMDBcdTAwMWJbMG1cdTAwMWJbMzJtICAgICAgICAgICAgICAgICAgXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybeKUglx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKUglx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybeKUglx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKUglx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlsyOzMybUFQSSBkb2NzOlx1MDAxYlswbVx1MDAxYlszMm0gXHUwMDFiWzBtXHUwMDFiWzMybWh0dHA6Ly8wLjAuMC4wOjgwMDAvZG9jc1x1MDAxYlswbVx1MDAxYlszMm0gICAgICAgICAgICAgICBcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJt4pSCXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pSCXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJt4pSCXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pSCXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzI7MzJtUnVubmluZyBpbiBwcm9kdWN0aW9uIG1vZGUsIGZvciBkZXZlbG9wbWVudCB1c2U6XHUwMDFiWzBtXHUwMDFiWzMybSBcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJt4pSCXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pSCXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJt4pSCXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pSCXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzE7MzJtZmFzdGFwaSBkZXZcdTAwMWJbMG1cdTAwMWJbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJt4pSCXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pSCXHUwMDFiWzBtXHUwMDFiWzMybSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHUwMDFiWzBtXHUwMDFiWzMybeKUglx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKVsOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKVr1x1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cdTAwMWJbMzJtSU5GT1x1MDAxYlswbTogICAgIFdpbGwgd2F0Y2ggZm9yIGNoYW5nZXMgaW4gdGhlc2UgZGlyZWN0b3JpZXM6IFsnL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZCddXHJcblx1MDAxYlszMm1JTkZPXHUwMDFiWzBtOiAgICAgVXZpY29ybiBydW5uaW5nIG9uIFx1MDAxYlsxbWh0dHA6Ly8wLjAuMC4wOjgwMDBcdTAwMWJbMG0gKFByZXNzIENUUkwrQyB0byBxdWl0KVxyXG5cdTAwMWJbMzJtSU5GT1x1MDAxYlswbTogICAgIFN0YXJ0ZWQgcmVsb2FkZXIgcHJvY2VzcyBbXHUwMDFiWzM2bVx1MDAxYlsxbTY4OTIyXHUwMDFiWzBtXSB1c2luZyBcdTAwMWJbMzZtXHUwMDFiWzFtV2F0Y2hGaWxlc1x1MDAxYlswbVxyXG48L291dHB1dD5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUtjOHZ2V1o0WHRwY3dDbnNxaDF3VEcifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo0LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiLlpKrlpb3kuobvvIHlkI7nq6/mnI3liqHlt7Lnu4/miJDlip/lkK/liqjvvIzlubbkuJTmraPlnKjnm5HlkKwgaHR0cDovLzAuMC4wLjA6ODAwMOOAglxuXG7njrDlnKjorqnmiJHku6zmo4Dmn6XkuIDkuIvliY3nq6/nm67lvZXvvIznnIvnnIvlpoLkvZXlkK/liqjliY3nq6/mnI3liqHvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJkYjhlY2I0YS1hZmY0LTRhOTMtOGY3NS0xODNiZGEzNzNkMmIiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDEzZE5IdjFEUG9qdUVjVE11SDdEU0pFIiwidG9vbF9uYW1lIjoicmVhZC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcInRlcm1pbmFsX2lkXCI6IDl9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJDb21tYW5kIGlzIHN0aWxsIHJ1bm5pbmcgYWZ0ZXIgMCBzZWNvbmRzLiBZb3UgY2FuIHVzZSByZWFkLXByb2Nlc3MgdG8gZ2V0IG1vcmUgb3V0cHV0XG5hbmQga2lsbC1wcm9jZXNzIHRvIHRlcm1pbmF0ZSBpdCBpZiBuZWVkZWQuXG5QSUQgOVxuT3V0cHV0IHNvIGZhcjpcbjxzdGRvdXQ+XG5cbjwvc3Rkb3V0PlxuPHN0ZGVycj5cblxuPC9zdGRlcnI+IiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxQzZIdGVxVFRvOXBKeVhXRjRCSDFDeCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjksImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifX19XSwicmVzcG9uc2VfdGV4dCI6IiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJjZjE3NjU5ZS0zNzA5LTQzZTYtYjVjZS1jNGVhNjI4YWY3ZTgiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFDc2IyYVRZd2NiRjZzZHM1VDlUaVF1IiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJ2aWV3XCIsIFwicGF0aFwiOiBcImZyb250ZW5kL3BhY2thZ2UuanNvblwifSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi546w5Zyo6K6p5oiR5Lus5p+l55yL5YmN56uv55qEIHBhY2thZ2UuanNvbiDmlofku7bvvIzkuobop6PlpoLkvZXlkK/liqjliY3nq6/mnI3liqHvvJpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDkgKHN0YXR1czogY29tcGxldGVkKTpcbjxvdXRwdXQ+dG90YWwgODQ4XHJcbmRyd3hyLXhyLXggIDI2IHBpcGlsdSAgc3RhZmYgICAgIDgzMiBBcHIgMTAgMTQ6MTggLlxyXG5kcnd4ci14ci14QCAzMiBwaXBpbHUgIHN0YWZmICAgIDEwMjQgQXByIDEwIDE0OjUwIC4uXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgICAxOCBBcHIgMTAgMDk6MjAgLmRvY2tlcmlnbm9yZVxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgICAgNzQgQXByIDEwIDA5OjIwIC5lbnZcclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgICAgMzUzIEFwciAxMCAwOToyMCAuZ2l0aWdub3JlXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgICAgMyBBcHIgMTAgMDk6MjAgLm52bXJjXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgIDUyNyBBcHIgMTAgMDk6MjAgRG9ja2VyZmlsZVxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgICAxNjIgQXByIDEwIDA5OjIwIERvY2tlcmZpbGUucGxheXdyaWdodFxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgIDQ3NDcgQXByIDEwIDA5OjIwIFJFQURNRS5tZFxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgICA2NjQgQXByIDEwIDA5OjIwIGJpb21lLmpzb25cclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgICAgNDU0IEFwciAxMCAwOToyMCBpbmRleC5odG1sXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgIDEwNSBBcHIgMTAgMDk6MjAgbmdpbngtYmFja2VuZC1ub3QtZm91bmQuY29uZlxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgICAxODggQXByIDEwIDA5OjIwIG5naW54LmNvbmZcclxuZHJ3eHIteHIteCAgMjcgcGlwaWx1ICBzdGFmZiAgICAgODY0IEFwciAxMCAxNDoxOCBub2RlX21vZHVsZXNcclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgICAgNzI0IEFwciAxMCAwOToyMCBvcGVuYXBpLXRzLmNvbmZpZy50c1xyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAyNjE4NzYgQXByIDEwIDA5OjIwIHBhY2thZ2UtbG9jay5qc29uXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgMTI1OSBBcHIgMTAgMDk6MjAgcGFja2FnZS5qc29uXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgMjQ4MCBBcHIgMTAgMDk6MjAgcGxheXdyaWdodC5jb25maWcudHNcclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgIDkyNDkwIEFwciAxMCAxMDo1MiBwbnBtLWxvY2sueWFtbFxyXG5kcnd4ci14ci14ICAgMyBwaXBpbHUgIHN0YWZmICAgICAgOTYgQXByIDEwIDA5OjIwIHB1YmxpY1xyXG5kcnd4ci14ci14ICAxMiBwaXBpbHUgIHN0YWZmICAgICAzODQgQXByIDEwIDA5OjIwIHNyY1xyXG5kcnd4ci14ci14ICAgOSBwaXBpbHUgIHN0YWZmICAgICAyODggQXByIDEwIDA5OjIwIHRlc3RzXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgICA2NyBBcHIgMTAgMDk6MjAgdHNjb25maWcuYnVpbGQuanNvblxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgICA3MTcgQXByIDEwIDA5OjIwIHRzY29uZmlnLmpzb25cclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgICAgMjEzIEFwciAxMCAwOToyMCB0c2NvbmZpZy5ub2RlLmpzb25cclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgICAgMzY3IEFwciAxMCAwOToyMCB2aXRlLmNvbmZpZy50c1xyXG48L291dHB1dD5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDEzZE5IdjFEUG9qdUVjVE11SDdEU0pFIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6OSwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9fX1dLCJyZXNwb25zZV90ZXh0Ijoi546w5Zyo6K6p5oiR5Lus5p+l55yL5YmN56uv55qEIHBhY2thZ2UuanNvbiDmlofku7bvvIzkuobop6PlpoLkvZXlkK/liqjliY3nq6/mnI3liqHvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI3MDllZDU0Mi0xNzgxLTRiNmYtOWNhZC0wY2Q0NGIyZTk5ZjMiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFLbkgyd1pNMlhaNmhMZFE0MkVoS3p4IiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImNkIGZyb250ZW5kICYmIG5wbSBydW4gZGV2XCIsIFwid2FpdFwiOiBmYWxzZX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IuiuqeaIkeS7rOWwneivleWQr+WKqOWJjeerr+acjeWKoe+8mlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBmcm9udGVuZC9wYWNrYWdlLmpzb246XG4gICAgIDFcdHtcbiAgICAgMlx0ICBcIm5hbWVcIjogXCJmcm9udGVuZFwiLFxuICAgICAzXHQgIFwicHJpdmF0ZVwiOiB0cnVlLFxuICAgICA0XHQgIFwidmVyc2lvblwiOiBcIjAuMC4wXCIsXG4gICAgIDVcdCAgXCJ0eXBlXCI6IFwibW9kdWxlXCIsXG4gICAgIDZcdCAgXCJzY3JpcHRzXCI6IHtcbiAgICAgN1x0ICAgIFwiZGV2XCI6IFwidml0ZVwiLFxuICAgICA4XHQgICAgXCJidWlsZFwiOiBcInRzYyAtcCB0c2NvbmZpZy5idWlsZC5qc29uICYmIHZpdGUgYnVpbGRcIixcbiAgICAgOVx0ICAgIFwibGludFwiOiBcImJpb21lIGNoZWNrIC0tYXBwbHktdW5zYWZlIC0tbm8tZXJyb3JzLW9uLXVubWF0Y2hlZCAtLWZpbGVzLWlnbm9yZS11bmtub3duPXRydWUgLi9cIixcbiAgICAxMFx0ICAgIFwicHJldmlld1wiOiBcInZpdGUgcHJldmlld1wiLFxuICAgIDExXHQgICAgXCJnZW5lcmF0ZS1jbGllbnRcIjogXCJvcGVuYXBpLXRzXCJcbiAgICAxMlx0ICB9LFxuICAgIDEzXHQgIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICAxNFx0ICAgIFwiQGNoYWtyYS11aS9yZWFjdFwiOiBcIl4zLjguMFwiLFxuICAgIDE1XHQgICAgXCJAZW1vdGlvbi9yZWFjdFwiOiBcIl4xMS4xNC4wXCIsXG4gICAgMTZcdCAgICBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiOiBcIl41LjI4LjE0XCIsXG4gICAgMTdcdCAgICBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeS1kZXZ0b29sc1wiOiBcIl41LjI4LjE0XCIsXG4gICAgMThcdCAgICBcIkB0YW5zdGFjay9yZWFjdC1yb3V0ZXJcIjogXCIxLjE5LjFcIixcbiAgICAxOVx0ICAgIFwiYXhpb3NcIjogXCIxLjcuNFwiLFxuICAgIDIwXHQgICAgXCJmb3JtLWRhdGFcIjogXCI0LjAuMFwiLFxuICAgIDIxXHQgICAgXCJuZXh0LXRoZW1lc1wiOiBcIl4wLjQuNFwiLFxuICAgIDIyXHQgICAgXCJyZWFjdFwiOiBcIl4xOC4yLjBcIixcbiAgICAyM1x0ICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4LjIuMFwiLFxuICAgIDI0XHQgICAgXCJyZWFjdC1lcnJvci1ib3VuZGFyeVwiOiBcIl40LjAuMTNcIixcbiAgICAyNVx0ICAgIFwicmVhY3QtaG9vay1mb3JtXCI6IFwiNy40OS4zXCIsXG4gICAgMjZcdCAgICBcInJlYWN0LWljb25zXCI6IFwiXjUuNC4wXCIsXG4gICAgMjdcdCAgICBcInpvZFwiOiBcIl4zLjI0LjJcIlxuICAgIDI4XHQgIH0sXG4gICAgMjlcdCAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIDMwXHQgICAgXCJAYmlvbWVqcy9iaW9tZVwiOiBcIjEuNi4xXCIsXG4gICAgMzFcdCAgICBcIkBoZXktYXBpL29wZW5hcGktdHNcIjogXCJeMC41Ny4wXCIsXG4gICAgMzJcdCAgICBcIkBwbGF5d3JpZ2h0L3Rlc3RcIjogXCJeMS40NS4yXCIsXG4gICAgMzNcdCAgICBcIkB0YW5zdGFjay9yb3V0ZXItZGV2dG9vbHNcIjogXCIxLjE5LjFcIixcbiAgICAzNFx0ICAgIFwiQHRhbnN0YWNrL3JvdXRlci12aXRlLXBsdWdpblwiOiBcIjEuMTkuMFwiLFxuICAgIDM1XHQgICAgXCJAdHlwZXMvbm9kZVwiOiBcIl4yMC4xMC41XCIsXG4gICAgMzZcdCAgICBcIkB0eXBlcy9yZWFjdFwiOiBcIl4xOC4yLjM3XCIsXG4gICAgMzdcdCAgICBcIkB0eXBlcy9yZWFjdC1kb21cIjogXCJeMTguMi4xNVwiLFxuICAgIDM4XHQgICAgXCJAdml0ZWpzL3BsdWdpbi1yZWFjdC1zd2NcIjogXCJeMy41LjBcIixcbiAgICAzOVx0ICAgIFwiZG90ZW52XCI6IFwiXjE2LjQuNVwiLFxuICAgIDQwXHQgICAgXCJ0eXBlc2NyaXB0XCI6IFwiXjUuMi4yXCIsXG4gICAgNDFcdCAgICBcInZpdGVcIjogXCJeNS40LjE0XCJcbiAgICA0Mlx0ICB9XG4gICAgNDNcdH1cbiAgICA0NFx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiA0NFxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxQ3NiMmFUWXdjYkY2c2RzNVQ5VGlRdSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjksImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifX19XSwicmVzcG9uc2VfdGV4dCI6IuiuqeaIkeS7rOWwneivleWQr+WKqOWJjeerr+acjeWKoe+8mlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImZlNjY1MDNmLTNhNTEtNDYwNS04YzZiLWI2NTdhZWEyOTliNSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUM1RVNDTG1HOWJwVmpmZlF3QWNoVU0iLCJ0b29sX25hbWUiOiJyZWFkLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1widGVybWluYWxfaWRcIjogMTB9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLorqnmiJHku6zmo4Dmn6XliY3nq6/mnI3liqHmmK/lkKbmiJDlip/lkK/liqjvvJpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlByb2Nlc3MgbGF1bmNoZWQgd2l0aCBQSUQgMTAiLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFLbkgyd1pNMlhaNmhMZFE0MkVoS3p4In19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MTAsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifX19XSwicmVzcG9uc2VfdGV4dCI6IuiuqeaIkeS7rOajgOafpeWJjeerr+acjeWKoeaYr+WQpuaIkOWKn+WQr+WKqO+8mlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjEyZGQ5ODcyLTRjZTEtNGNkZi1hODNhLTNkMDIwNzIxN2Y2NCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUNRU1JwTldrR0E2emJIQ3doanRuQ0giLCJ0b29sX25hbWUiOiJyZWFkLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1widGVybWluYWxfaWRcIjogOH0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IuWkquWlveS6hu+8geWJjeerr+acjeWKoeS5n+aIkOWKn+WQr+WKqOS6hu+8jOW5tuS4lOato+WcqOebkeWQrCBodHRwOi8vbG9jYWxob3N0OjUxNzQv44CCXG5cbueOsOWcqOiuqeaIkeS7rOajgOafpeS4gOS4i+WQjuerr+acjeWKoeeahOeKtuaAge+8jOehruS/neWug+S7jeeEtuWcqOi/kOihjO+8mlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSBpcyB0aGUgb3V0cHV0IGZyb20gdGVybWluYWwgMTAgKHN0YXR1czogc3RpbGwgcnVubmluZyk6XG48b3V0cHV0PlxyXG4+IGZyb250ZW5kQDAuMC4wIGRldlxyXG4+IHZpdGVcclxuXHJcblx1MDAxYlsxR1x1MDAxYlswS1xyXG7imbvvuI8gIEdlbmVyYXRpbmcgcm91dGVzLi4uXHJcbuKchSBQcm9jZXNzZWQgcm91dGVzIGluIDY2bXNcclxuUmUtb3B0aW1pemluZyBkZXBlbmRlbmNpZXMgYmVjYXVzZSBsb2NrZmlsZSBoYXMgY2hhbmdlZFxyXG5Qb3J0IDUxNzMgaXMgaW4gdXNlLCB0cnlpbmcgYW5vdGhlciBvbmUuLi5cclxuXHJcbiAgXHUwMDFiWzMybVx1MDAxYlsxbVZJVEVcdTAwMWJbMjJtIHY1LjQuMTdcdTAwMWJbMzltICBcdTAwMWJbMm1yZWFkeSBpbiBcdTAwMWJbMG1cdTAwMWJbMW0yOTNcdTAwMWJbMjJtXHUwMDFiWzJtXHUwMDFiWzBtIG1zXHUwMDFiWzIybVxyXG5cclxuICBcdTAwMWJbMzJt4p6cXHUwMDFiWzM5bSAgXHUwMDFiWzFtTG9jYWxcdTAwMWJbMjJtOiAgIFx1MDAxYlszNm1odHRwOi8vbG9jYWxob3N0Olx1MDAxYlsxbTUxNzRcdTAwMWJbMjJtL1x1MDAxYlszOW1cclxuXHUwMDFiWzJtICBcdTAwMWJbMzJt4p6cXHUwMDFiWzM5bSAgXHUwMDFiWzFtTmV0d29ya1x1MDAxYlsyMm1cdTAwMWJbMm06IHVzZSBcdTAwMWJbMjJtXHUwMDFiWzFtLS1ob3N0XHUwMDFiWzIybVx1MDAxYlsybSB0byBleHBvc2VcdTAwMWJbMjJtXHJcblx1MDAxYlsybVx1MDAxYlszMm0gIOKenFx1MDAxYlszOW1cdTAwMWJbMjJtXHUwMDFiWzJtICBwcmVzcyBcdTAwMWJbMjJtXHUwMDFiWzFtaCArIGVudGVyXHUwMDFiWzIybVx1MDAxYlsybSB0byBzaG93IGhlbHBcdTAwMWJbMjJtXHJcbjwvb3V0cHV0PlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxQzVFU0NMbUc5YnBWamZmUXdBY2hVTSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjEwLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiLlpKrlpb3kuobvvIHliY3nq6/mnI3liqHkuZ/miJDlip/lkK/liqjkuobvvIzlubbkuJTmraPlnKjnm5HlkKwgaHR0cDovL2xvY2FsaG9zdDo1MTc0L+OAglxuXG7njrDlnKjorqnmiJHku6zmo4Dmn6XkuIDkuIvlkI7nq6/mnI3liqHnmoTnirbmgIHvvIznoa7kv53lroPku43nhLblnKjov5DooYzvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJmYmZkNjJkNi05ZWI4LTRiYTQtOTFmMi0yMTBkYjY3MjE5YTgiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDExbTlLWmtLWXZpOFRDTHZRc0JXMjVUIiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImN1cmwgaHR0cDovL2xvY2FsaG9zdDo4MDAwL2FwaS92MS91dGlscy9oZWFsdGgtY2hlY2svXCIsIFwid2FpdFwiOiB0cnVlfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi546w5Zyo6K6p5oiR5Lus5qOA5p+l5LiA5LiL5pWw5o2u5bqT6L+e5o6l5piv5ZCm5q2j5bi444CC5oiR5Lus5Y+v5Lul5bCd6K+V6K6/6Zeu5ZCO56uv55qE5YGl5bq35qOA5p+l56uv54K577yaXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGlzIHRoZSBvdXRwdXQgZnJvbSB0ZXJtaW5hbCA4IChzdGF0dXM6IHN0aWxsIHJ1bm5pbmcpOlxuPG91dHB1dD5cdTAwMWJbMzRtSU5GTyAgICBcdTAwMWJbMG0gVXNpbmcgcGF0aCBcdTAwMWJbMzRtYXBwL21haW4ucHlcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcblx1MDAxYlszNG1JTkZPICAgIFx1MDAxYlswbSBSZXNvbHZlZCBhYnNvbHV0ZSBwYXRoIFx1MDAxYlszNW0vVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kL2FwcC9cdTAwMWJbMG1cdTAwMWJbOTVtbWFpbi5weVx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcblx1MDAxYlszNG1JTkZPICAgIFx1MDAxYlswbSBTZWFyY2hpbmcgZm9yIHBhY2thZ2UgZmlsZSBzdHJ1Y3R1cmUgZnJvbSBkaXJlY3RvcmllcyB3aXRoIFx1MDAxYlszNG1fX2luaXRfXy5weVx1MDAxYlswbSBmaWxlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuXHUwMDFiWzM0bUlORk8gICAgXHUwMDFiWzBtIEltcG9ydGluZyBmcm9tIFx1MDAxYlszNW0vVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9cdTAwMWJbMG1cdTAwMWJbOTVtYmFja2VuZFx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKVreKUgCBcdTAwMWJbMTszMm1QeXRob24gcGFja2FnZSBmaWxlIHN0cnVjdHVyZVx1MDAxYlswbSDilIDila4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKUgiAg8J+TgSBhcHAgICAgICAgICAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKUgiAg4pSc4pSA4pSAIFx1MDAxYlsybfCfkI0gX19pbml0X18ucHlcdTAwMWJbMG0gICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKUgiAg4pSU4pSA4pSAIPCfkI0gbWFpbi5weSAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilbDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDila8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cdTAwMWJbMzRtSU5GTyAgICBcdTAwMWJbMG0gSW1wb3J0aW5nIG1vZHVsZSBcdTAwMWJbMzJtYXBwLm1haW5cdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbklORk86Y2hyb21hZGIudGVsZW1ldHJ5LnByb2R1Y3QucG9zdGhvZzpBbm9ueW1pemVkIHRlbGVtZXRyeSBlbmFibGVkLiBTZWUgICAgICAgICAgICAgICAgICAgICBodHRwczovL2RvY3MudHJ5Y2hyb21hLmNvbS90ZWxlbWV0cnkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXHJcblx1MDAxYlszNG1JTkZPICAgIFx1MDAxYlswbSBGb3VuZCBpbXBvcnRhYmxlIEZhc3RBUEkgYXBwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pWt4pSA4pSAIFx1MDAxYlsxOzMybUltcG9ydGFibGUgRmFzdEFQSSBhcHBcdTAwMWJbMG0g4pSA4pSA4pWuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKUgiAgXHUwMDFiWzM4OzU7MjA0OzQ4OzU7MjM1bWZyb21cdTAwMWJbMG1cdTAwMWJbMzg7NTsyMzE7NDg7NTsyMzVtIFx1MDAxYlswbVx1MDAxYlszODs1OzIzMTs0ODs1OzIzNW1hcHBcdTAwMWJbMG1cdTAwMWJbMzg7NTsyMzE7NDg7NTsyMzVtLlx1MDAxYlswbVx1MDAxYlszODs1OzIzMTs0ODs1OzIzNW1tYWluXHUwMDFiWzBtXHUwMDFiWzM4OzU7MjMxOzQ4OzU7MjM1bSBcdTAwMWJbMG1cdTAwMWJbMzg7NTsyMDQ7NDg7NTsyMzVtaW1wb3J0XHUwMDFiWzBtXHUwMDFiWzM4OzU7MjMxOzQ4OzU7MjM1bSBcdTAwMWJbMG1cdTAwMWJbMzg7NTsyMzE7NDg7NTsyMzVtYXBwXHUwMDFiWzBtICDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pWw4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pWvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cdTAwMWJbMzRtSU5GTyAgICBcdTAwMWJbMG0gVXNpbmcgaW1wb3J0IHN0cmluZyBcdTAwMWJbMTszMm1hcHAubWFpbjphcHBcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ila3ilIBcdTAwMWJbMG1cdTAwMWJbMzJt4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAXHUwMDFiWzBtIEZhc3RBUEkgQ0xJIC0gUHJvZHVjdGlvbiBtb2RlIFx1MDAxYlszMm3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIBcdTAwMWJbMG1cdTAwMWJbMzJt4pSA4pWuXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pSCXHUwMDFiWzBtXHUwMDFiWzMybSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHUwMDFiWzBtXHUwMDFiWzMybeKUglx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKUglx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlsyOzMybVNlcnZpbmcgYXQ6XHUwMDFiWzBtXHUwMDFiWzMybSBcdTAwMWJbMG1cdTAwMWJbMzJtaHR0cDovLzAuMC4wLjA6ODAwMFx1MDAxYlswbVx1MDAxYlszMm0gICAgICAgICAgICAgICAgICBcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJt4pSCXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pSCXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJt4pSCXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pSCXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzI7MzJtQVBJIGRvY3M6XHUwMDFiWzBtXHUwMDFiWzMybSBcdTAwMWJbMG1cdTAwMWJbMzJtaHR0cDovLzAuMC4wLjA6ODAwMC9kb2NzXHUwMDFiWzBtXHUwMDFiWzMybSAgICAgICAgICAgICAgIFx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm3ilIJcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilIJcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm3ilIJcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilIJcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMjszMm1SdW5uaW5nIGluIHByb2R1Y3Rpb24gbW9kZSwgZm9yIGRldmVsb3BtZW50IHVzZTpcdTAwMWJbMG1cdTAwMWJbMzJtIFx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm3ilIJcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilIJcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm3ilIJcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilIJcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMTszMm1mYXN0YXBpIGRldlx1MDAxYlswbVx1MDAxYlszMm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm3ilIJcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilIJcdTAwMWJbMG1cdTAwMWJbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdTAwMWJbMG1cdTAwMWJbMzJt4pSCXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pWw4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pWvXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcblx1MDAxYlszMm1JTkZPXHUwMDFiWzBtOiAgICAgV2lsbCB3YXRjaCBmb3IgY2hhbmdlcyBpbiB0aGVzZSBkaXJlY3RvcmllczogWycvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kJ11cclxuXHUwMDFiWzMybUlORk9cdTAwMWJbMG06ICAgICBVdmljb3JuIHJ1bm5pbmcgb24gXHUwMDFiWzFtaHR0cDovLzAuMC4wLjA6ODAwMFx1MDAxYlswbSAoUHJlc3MgQ1RSTCtDIHRvIHF1aXQpXHJcblx1MDAxYlszMm1JTkZPXHUwMDFiWzBtOiAgICAgU3RhcnRlZCByZWxvYWRlciBwcm9jZXNzIFtcdTAwMWJbMzZtXHUwMDFiWzFtNjg5MjJcdTAwMWJbMG1dIHVzaW5nIFx1MDAxYlszNm1cdTAwMWJbMW1XYXRjaEZpbGVzXHUwMDFiWzBtXHJcbklORk86Y2hyb21hZGIudGVsZW1ldHJ5LnByb2R1Y3QucG9zdGhvZzpBbm9ueW1pemVkIHRlbGVtZXRyeSBlbmFibGVkLiBTZWUgICAgICAgICAgICAgICAgICAgICBodHRwczovL2RvY3MudHJ5Y2hyb21hLmNvbS90ZWxlbWV0cnkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXHJcblx1MDAxYlszMm1JTkZPXHUwMDFiWzBtOiAgICAgU3RhcnRlZCBzZXJ2ZXIgcHJvY2VzcyBbXHUwMDFiWzM2bTY4OTM1XHUwMDFiWzBtXVxyXG5cdTAwMWJbMzJtSU5GT1x1MDAxYlswbTogICAgIFdhaXRpbmcgZm9yIGFwcGxpY2F0aW9uIHN0YXJ0dXAuXHJcblx1MDAxYlszMm1JTkZPXHUwMDFiWzBtOiAgICAgQXBwbGljYXRpb24gc3RhcnR1cCBjb21wbGV0ZS5cclxuPC9vdXRwdXQ+XG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFDUVNScE5Xa0dBNnpiSEN3aGp0bkNIIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MTAsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifX19XSwicmVzcG9uc2VfdGV4dCI6IueOsOWcqOiuqeaIkeS7rOajgOafpeS4gOS4i+aVsOaNruW6k+i/nuaOpeaYr+WQpuato+W4uOOAguaIkeS7rOWPr+S7peWwneivleiuv+mXruWQjuerr+eahOWBpeW6t+ajgOafpeerr+eCue+8mlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjA2MTI3NDExLWJmNWEtNGU2NC04ODdlLWFiYmIwMjU0YTgwNSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUVuSlhSdVozZ0pCU0VBRmN5SkxBdDUiLCJ0b29sX25hbWUiOiJyZWFkLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1widGVybWluYWxfaWRcIjogMTF9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJDb21tYW5kIGlzIHN0aWxsIHJ1bm5pbmcgYWZ0ZXIgMCBzZWNvbmRzLiBZb3UgY2FuIHVzZSByZWFkLXByb2Nlc3MgdG8gZ2V0IG1vcmUgb3V0cHV0XG5hbmQga2lsbC1wcm9jZXNzIHRvIHRlcm1pbmF0ZSBpdCBpZiBuZWVkZWQuXG5QSUQgMTFcbk91dHB1dCBzbyBmYXI6XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTFtOUtaa0tZdmk4VENMdlFzQlcyNVQifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoxMCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJmYWlsZWQiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W10sInNlZW5fc3RhdGUiOiJ1bnNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGlzIHRoZSBvdXRwdXQgZnJvbSB0ZXJtaW5hbCAxMSAoc3RhdHVzOiBjb21wbGV0ZWQpOlxuPG91dHB1dD50cnVlPC9vdXRwdXQ+XG48cmV0dXJuLWNvZGU+XG4wXG48L3JldHVybi1jb2RlPlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxRW5KWFJ1WjNnSkJTRUFGY3lKTEF0NSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjEwLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiIyYmQxY2JiMC1lNmY5LTQyNzktYWE5NC0zODQyYWIxNDA4YzEiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJyZXF1ZXN0X2lkIjoiOWZmNWVlNTAtOGNiNS00NmY1LWJhODctOGFkMDdjN2QzZjZjIiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIwMTVkYzdkMC02NmY0LTQ4NDEtYmNiNi03NDgzNDgwM2M4MTgiLCJyZXF1ZXN0X21lc3NhZ2UiOiLov5nph4znmoQgb3BlbmFwaV91cmwg6YWN572u5piv5LuA5LmI5L2c55SoIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Iui/memHjOeahCBvcGVuYXBpX3VybCDphY3nva7mmK/ku4DkuYjkvZznlKgifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6ImBvcGVuYXBpX3VybGAg6YWN572u5ZyoIEZhc3RBUEkg5Lit55qE5L2c55So5piv5oyH5a6aIE9wZW5BUEkg5paH5qGj77yI5Lmf56ew5Li6IFN3YWdnZXIg5paH5qGj77yJ55qEIEpTT04g5paH5Lu255qE6K6/6Zeu6Lev5b6E44CC6K6p5oiR6K+m57uG6Kej6YeK5LiA5LiL77yaXG5cbiMjIG9wZW5hcGlfdXJsIOmFjee9rueahOS9nOeUqFxuXG4xLiAqKuWumuS5iSBPcGVuQVBJIOinhOiMg+aWh+aho+eahOiuv+mXrui3r+W+hCoq77yaXG4gICAtIOWcqOaCqOeahOS7o+eggeS4re+8jGBvcGVuYXBpX3VybD1mXCJ7c2V0dGluZ3MuQVBJX1YxX1NUUn0vb3BlbmFwaS5qc29uXCJgIOiuvue9ruS6hiBPcGVuQVBJIOinhOiMg+aWh+aho+eahOiuv+mXrui3r+W+hFxuICAgLSDlpoLmnpwgYHNldHRpbmdzLkFQSV9WMV9TVFJgIOeahOWAvOaYryBgL2FwaS92MWDvvIzpgqPkuYggT3BlbkFQSSDmlofmoaPlsIblj6/ku6XpgJrov4cgYC9hcGkvdjEvb3BlbmFwaS5qc29uYCDorr/pl65cblxuMi4gKirmj5DkvpsgQVBJIOiHquWKqOaWh+aho+eahOWfuuehgCoq77yaXG4gICAtIE9wZW5BUEkgSlNPTiDmlofku7bljIXlkKvkuoYgQVBJIOeahOWujOaVtOinhOiMg++8jOWMheaLrOaJgOacieerr+eCueOAgeWPguaVsOOAgeWTjeW6lOexu+Wei+etiVxuICAgLSBGYXN0QVBJIOeahOS6pOS6kuW8j+aWh+aho++8iFN3YWdnZXIgVUkg5ZKMIFJlRG9j77yJ6YO95piv5Z+65LqO6L+Z5LiqIEpTT04g5paH5Lu255Sf5oiQ55qEXG5cbjMuICoq5pSv5oyB5a6i5oi356uv5Luj56CB55Sf5oiQKirvvJpcbiAgIC0g5YmN56uv5oiW5YW25LuW5pyN5Yqh5Y+v5Lul5L2/55So6L+Z5LiqIE9wZW5BUEkgSlNPTiDmlofku7boh6rliqjnlJ/miJAgQVBJIOWuouaIt+err+S7o+eggVxuICAgLSDlnKjmgqjnmoTpobnnm67kuK3vvIzliY3nq6/lj6/og73kvb/nlKjkuobov5nkuKrmlofku7bmnaXnlJ/miJAgVHlwZVNjcmlwdCDlrqLmiLfnq6/vvIjpgJrov4cgYG5wbSBydW4gZ2VuZXJhdGUtY2xpZW50YCDlkb3ku6TvvIlcblxuNC4gKipBUEkg54mI5pys5o6n5Yi2KirvvJpcbiAgIC0g6YCa6L+H5Zyo6Lev5b6E5Lit5YyF5ZCr54mI5pys5L+h5oGv77yI5aaCIGAvYXBpL3YxL2DvvInvvIzlj6/ku6Xmlrnkvr/lnLDnrqHnkIYgQVBJIOeahOS4jeWQjOeJiOacrFxuXG4jIyDlrp7pmYXlupTnlKhcblxu5Zyo5oKo55qE6aG555uu5Lit77yaXG5cbjEuIOW9k+aCqOiuv+mXriBgaHR0cDovL2xvY2FsaG9zdDo4MDAwL2FwaS92MS9vcGVuYXBpLmpzb25gIOaXtu+8jOS8muW+l+WIsOS4gOS4qiBKU09OIOaWh+S7tu+8jOWFtuS4reWMheWQq+S6hiBBUEkg55qE5a6M5pW06KeE6IyDXG5cbjIuIOW9k+aCqOiuv+mXriBgaHR0cDovL2xvY2FsaG9zdDo4MDAwL2RvY3NgIOaXtu+8jOS8mueci+WIsCBTd2FnZ2VyIFVJIOeVjOmdou+8jOWug+aYr+WfuuS6jui/meS4qiBPcGVuQVBJIEpTT04g5paH5Lu255Sf5oiQ55qE5Lqk5LqS5byP5paH5qGjXG5cbjMuIOWJjeerr+mhueebruS4reeahCBgZ2VuZXJhdGUtY2xpZW50YCDohJrmnKzlj6/og73kvJrkuIvovb3ov5nkuKogSlNPTiDmlofku7bvvIznhLblkI7kvb/nlKjlroPnlJ/miJAgVHlwZVNjcmlwdCDlrqLmiLfnq6/ku6PnoIHvvIzkvb/liY3nq6/og73lpJ/mm7TlrrnmmJPlnLDkuI7lkI7nq68gQVBJIOS6pOS6klxuXG4jIyDoh6rlrprkuYnmiJbnpoHnlKhcblxuLSDlpoLmnpzmgqjkuI3mg7PlhazlvIAgT3BlbkFQSSDmlofmoaPvvIzlj6/ku6XlsIYgYG9wZW5hcGlfdXJsYCDorr7nva7kuLogYE5vbmVgXG4tIOWmguaenOaCqOaDs+abtOaUueaWh+aho+eahOi3r+W+hO+8jOWPr+S7peS/ruaUuSBgb3BlbmFwaV91cmxgIOeahOWAvFxuXG7ov5nkuKrphY3nva7mmK8gRmFzdEFQSSDoh6rliqjmlofmoaPlip/og73nmoTmoLjlv4Ppg6jliIbvvIzlroPkvb/lvpcgQVBJIOeahOaWh+aho+WMluWSjOWuouaIt+err+S7o+eggeeUn+aIkOWPmOW+l+mdnuW4uOeugOWNleWSjOiHquWKqOWMluOAglxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiLov5nph4znmoQgb3BlbmFwaV91cmwg6YWN572u5piv5LuA5LmI5L2c55SoIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJyZXNwb25zZV90ZXh0IjoiYG9wZW5hcGlfdXJsYCDphY3nva7lnKggRmFzdEFQSSDkuK3nmoTkvZznlKjmmK/mjIflrpogT3BlbkFQSSDmlofmoaPvvIjkuZ/np7DkuLogU3dhZ2dlciDmlofmoaPvvInnmoQgSlNPTiDmlofku7bnmoTorr/pl67ot6/lvoTjgILorqnmiJHor6bnu4bop6Pph4rkuIDkuIvvvJpcblxuIyMgb3BlbmFwaV91cmwg6YWN572u55qE5L2c55SoXG5cbjEuICoq5a6a5LmJIE9wZW5BUEkg6KeE6IyD5paH5qGj55qE6K6/6Zeu6Lev5b6EKirvvJpcbiAgIC0g5Zyo5oKo55qE5Luj56CB5Lit77yMYG9wZW5hcGlfdXJsPWZcIntzZXR0aW5ncy5BUElfVjFfU1RSfS9vcGVuYXBpLmpzb25cImAg6K6+572u5LqGIE9wZW5BUEkg6KeE6IyD5paH5qGj55qE6K6/6Zeu6Lev5b6EXG4gICAtIOWmguaenCBgc2V0dGluZ3MuQVBJX1YxX1NUUmAg55qE5YC85pivIGAvYXBpL3YxYO+8jOmCo+S5iCBPcGVuQVBJIOaWh+aho+WwhuWPr+S7pemAmui/hyBgL2FwaS92MS9vcGVuYXBpLmpzb25gIOiuv+mXrlxuXG4yLiAqKuaPkOS+myBBUEkg6Ieq5Yqo5paH5qGj55qE5Z+656GAKirvvJpcbiAgIC0gT3BlbkFQSSBKU09OIOaWh+S7tuWMheWQq+S6hiBBUEkg55qE5a6M5pW06KeE6IyD77yM5YyF5ous5omA5pyJ56uv54K544CB5Y+C5pWw44CB5ZON5bqU57G75Z6L562JXG4gICAtIEZhc3RBUEkg55qE5Lqk5LqS5byP5paH5qGj77yIU3dhZ2dlciBVSSDlkowgUmVEb2PvvInpg73mmK/ln7rkuo7ov5nkuKogSlNPTiDmlofku7bnlJ/miJDnmoRcblxuMy4gKirmlK/mjIHlrqLmiLfnq6/ku6PnoIHnlJ/miJAqKu+8mlxuICAgLSDliY3nq6/miJblhbbku5bmnI3liqHlj6/ku6Xkvb/nlKjov5nkuKogT3BlbkFQSSBKU09OIOaWh+S7tuiHquWKqOeUn+aIkCBBUEkg5a6i5oi356uv5Luj56CBXG4gICAtIOWcqOaCqOeahOmhueebruS4re+8jOWJjeerr+WPr+iDveS9v+eUqOS6hui/meS4quaWh+S7tuadpeeUn+aIkCBUeXBlU2NyaXB0IOWuouaIt+err++8iOmAmui/hyBgbnBtIHJ1biBnZW5lcmF0ZS1jbGllbnRgIOWRveS7pO+8iVxuXG40LiAqKkFQSSDniYjmnKzmjqfliLYqKu+8mlxuICAgLSDpgJrov4flnKjot6/lvoTkuK3ljIXlkKvniYjmnKzkv6Hmga/vvIjlpoIgYC9hcGkvdjEvYO+8ie+8jOWPr+S7peaWueS+v+WcsOeuoeeQhiBBUEkg55qE5LiN5ZCM54mI5pysXG5cbiMjIOWunumZheW6lOeUqFxuXG7lnKjmgqjnmoTpobnnm67kuK3vvJpcblxuMS4g5b2T5oKo6K6/6ZeuIGBodHRwOi8vbG9jYWxob3N0OjgwMDAvYXBpL3YxL29wZW5hcGkuanNvbmAg5pe277yM5Lya5b6X5Yiw5LiA5LiqIEpTT04g5paH5Lu277yM5YW25Lit5YyF5ZCr5LqGIEFQSSDnmoTlrozmlbTop4TojINcblxuMi4g5b2T5oKo6K6/6ZeuIGBodHRwOi8vbG9jYWxob3N0OjgwMDAvZG9jc2Ag5pe277yM5Lya55yL5YiwIFN3YWdnZXIgVUkg55WM6Z2i77yM5a6D5piv5Z+65LqO6L+Z5LiqIE9wZW5BUEkgSlNPTiDmlofku7bnlJ/miJDnmoTkuqTkupLlvI/mlofmoaNcblxuMy4g5YmN56uv6aG555uu5Lit55qEIGBnZW5lcmF0ZS1jbGllbnRgIOiEmuacrOWPr+iDveS8muS4i+i9vei/meS4qiBKU09OIOaWh+S7tu+8jOeEtuWQjuS9v+eUqOWug+eUn+aIkCBUeXBlU2NyaXB0IOWuouaIt+err+S7o+egge+8jOS9v+WJjeerr+iDveWkn+abtOWuueaYk+WcsOS4juWQjuerryBBUEkg5Lqk5LqSXG5cbiMjIOiHquWumuS5ieaIluemgeeUqFxuXG4tIOWmguaenOaCqOS4jeaDs+WFrOW8gCBPcGVuQVBJIOaWh+aho++8jOWPr+S7peWwhiBgb3BlbmFwaV91cmxgIOiuvue9ruS4uiBgTm9uZWBcbi0g5aaC5p6c5oKo5oOz5pu05pS55paH5qGj55qE6Lev5b6E77yM5Y+v5Lul5L+u5pS5IGBvcGVuYXBpX3VybGAg55qE5YC8XG5cbui/meS4qumFjee9ruaYryBGYXN0QVBJIOiHquWKqOaWh+aho+WKn+iDveeahOaguOW/g+mDqOWIhu+8jOWug+S9v+W+lyBBUEkg55qE5paH5qGj5YyW5ZKM5a6i5oi356uv5Luj56CB55Sf5oiQ5Y+Y5b6X6Z2e5bi4566A5Y2V5ZKM6Ieq5Yqo5YyW44CCXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiI4YTFlMTgzNi03ZjIzLTQwMjctYTI4ZC1lZjVlYzA3NzhlNmQiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjZlYTdlOWNkLTYyZTktNGIyZS1iY2Q2LTY0YmE4ZjZjOWY5ZCIsInJlcXVlc3RfbWVzc2FnZSI6IumSiOWvueacrOmhueebru+8jOaIkeimgeWmguS9lemFjee9riBvcGVuUm91dGVyIOeahGFwae+8jOW5tui/m+ihjOiBiuWkqeaOpeWPo+eahOa1i+ivlSIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiLpkojlr7nmnKzpobnnm67vvIzmiJHopoHlpoLkvZXphY3nva4gb3BlblJvdXRlciDnmoRhcGnvvIzlubbov5vooYzogYrlpKnmjqXlj6PnmoTmtYvor5UifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVZaNGF3RW1NQVI3TjNlRmpuNDdyUHMiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwiLmVudlwiLCBcInZpZXdfcmFuZ2VcIjogWzQzLCA0Nl19In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLopoHphY3nva4gT3BlblJvdXRlciBBUEkg5bm25rWL6K+V6IGK5aSp5o6l5Y+j77yM5oiR5Lus6ZyA6KaB5a6M5oiQ5Yeg5Liq5q2l6aqk44CC5oiR5Lya6K+m57uG5oyH5a+85oKo5aaC5L2V6YWN572u5ZKM5rWL6K+V77yaXG5cbiMjIOmFjee9riBPcGVuUm91dGVyIEFQSSDlubbmtYvor5XogYrlpKnmjqXlj6NcblxuIyMjIDEuIOehruiupCBPcGVuUm91dGVyIEFQSSDphY3nva5cblxu6aaW5YWI77yM6K6p5oiR5Lus5qOA5p+l6aG555uu5Lit55qEIE9wZW5Sb3V0ZXIgQVBJIOmFjee9ruaYr+WQpuW3sue7j+iuvue9ruWlve+8mlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiLpkojlr7nmnKzpobnnm67vvIzmiJHopoHlpoLkvZXphY3nva4gb3BlblJvdXRlciDnmoRhcGnvvIzlubbov5vooYzogYrlpKnmjqXlj6PnmoTmtYvor5UifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInJlc3BvbnNlX3RleHQiOiLopoHphY3nva4gT3BlblJvdXRlciBBUEkg5bm25rWL6K+V6IGK5aSp5o6l5Y+j77yM5oiR5Lus6ZyA6KaB5a6M5oiQ5Yeg5Liq5q2l6aqk44CC5oiR5Lya6K+m57uG5oyH5a+85oKo5aaC5L2V6YWN572u5ZKM5rWL6K+V77yaXG5cbiMjIOmFjee9riBPcGVuUm91dGVyIEFQSSDlubbmtYvor5XogYrlpKnmjqXlj6NcblxuIyMjIDEuIOehruiupCBPcGVuUm91dGVyIEFQSSDphY3nva5cblxu6aaW5YWI77yM6K6p5oiR5Lus5qOA5p+l6aG555uu5Lit55qEIE9wZW5Sb3V0ZXIgQVBJIOmFjee9ruaYr+WQpuW3sue7j+iuvue9ruWlve+8mlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6Ijg2MjFiN2MxLTBkMmItNDE4Mi1hMmI0LTU5MThkOTVhZTRlZSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTF6VFcxUG1MQk1tY3dQbWFzTWFlZlUiLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIlxcdTY3ZTVcXHU2MjdlXFx1OTg3OVxcdTc2ZWVcXHU0ZTJkXFx1NGUwZVxcdTgwNGFcXHU1OTI5XFx1NzZmOFxcdTUxNzNcXHU3Njg0QVBJXFx1OGRlZlxcdTc1MzFcXHU1NDhjXFx1NTkwNFxcdTc0MDZcXHU1MWZkXFx1NjU3MFxcdWZmMGNcXHU3Mjc5XFx1NTIyYlxcdTY2MmZcXHU0ZTBlT3BlblJvdXRlclxcdTk2YzZcXHU2MjEwXFx1NzY4NFxcdTkwZThcXHU1MjA2XCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLlvojlpb3vvIzmiJHnnIvliLDmgqjnmoQgYC5lbnZgIOaWh+S7tuS4reW3sue7j+mFjee9ruS6hiBPcGVuUm91dGVyIEFQSSDnmoTnm7jlhbPorr7nva7vvJpcbi0gYE9QRU5ST1VURVJfQVBJX0tFWWAgLSBBUEkg5a+G6ZKlXG4tIGBERUZBVUxUX0xMTV9NT0RFTGAgLSDpu5jorqTkvb/nlKjnmoTmqKHlnovvvIhkZWVwc2Vlay9kZWVwc2Vlay1jaGF0LXYzLTAzMjQ6ZnJlZe+8iVxuLSBgT1BFTlJPVVRFUl9CQVNFX1VSTGAgLSBPcGVuUm91dGVyIEFQSSDnmoTln7rnoYAgVVJMXG5cbiMjIyAyLiDmo4Dmn6XogYrlpKnmjqXlj6Plrp7njrBcblxu6K6p5oiR5Lus5p+l55yL6aG555uu5Lit55qE6IGK5aSp5o6l5Y+j5a6e546w77yaXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIC5lbnY6XG4gICAgNDNcdCMgTExNIFNldHRpbmdzXG4gICAgNDRcdE9QRU5ST1VURVJfQVBJX0tFWT1zay1vci12MS05ODE4NDRkODFjYjEwMDRlMDFjZWU3MmY2M2I3YmJiZTRjOTBhZWVkMGY0YTg3NGYzMGQ4NTAxYjVkMDBiNmE1XG4gICAgNDVcdERFRkFVTFRfTExNX01PREVMPWRlZXBzZWVrL2RlZXBzZWVrLWNoYXQtdjMtMDMyNDpmcmVlXG4gICAgNDZcdE9QRU5ST1VURVJfQkFTRV9VUkw9aHR0cHM6Ly9vcGVucm91dGVyLmFpL2FwaS92MVxuVG90YWwgbGluZXMgaW4gZmlsZTogNTFcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVZaNGF3RW1NQVI3TjNlRmpuNDdyUHMifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInJlc3BvbnNlX3RleHQiOiLlvojlpb3vvIzmiJHnnIvliLDmgqjnmoQgYC5lbnZgIOaWh+S7tuS4reW3sue7j+mFjee9ruS6hiBPcGVuUm91dGVyIEFQSSDnmoTnm7jlhbPorr7nva7vvJpcbi0gYE9QRU5ST1VURVJfQVBJX0tFWWAgLSBBUEkg5a+G6ZKlXG4tIGBERUZBVUxUX0xMTV9NT0RFTGAgLSDpu5jorqTkvb/nlKjnmoTmqKHlnovvvIhkZWVwc2Vlay9kZWVwc2Vlay1jaGF0LXYzLTAzMjQ6ZnJlZe+8iVxuLSBgT1BFTlJPVVRFUl9CQVNFX1VSTGAgLSBPcGVuUm91dGVyIEFQSSDnmoTln7rnoYAgVVJMXG5cbiMjIyAyLiDmo4Dmn6XogYrlpKnmjqXlj6Plrp7njrBcblxu6K6p5oiR5Lus5p+l55yL6aG555uu5Lit55qE6IGK5aSp5o6l5Y+j5a6e546w77yaXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMDdkNmMyYjItYzljMy00YjZjLWJhZTEtNWE0ZDMwN2Q4ZTE0IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxUXl4a0oyNENURFpLeEtOUHo4amlRSCIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiXFx1NjdlNVxcdTYyN2VcXHU5ODc5XFx1NzZlZVxcdTRlMmRcXHU3Njg0Q2hhdFJlcXVlc3RcXHU1NDhjQ2hhdFJlc3BvbnNlXFx1NmEyMVxcdTU3OGJcXHU1YjlhXFx1NGU0OVwifSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogYmFja2VuZC9hcHAvYXBpL3JvdXRlcy9jaGF0LnB5XG5cIlwiXCJcbkFQSSByb3V0ZXMgZm9yIGNoYXQgZnVuY3Rpb25hbGl0eS5cblwiXCJcIlxuZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgTGlzdCwgRGljdFxuaW1wb3J0IHV1aWRcbmltcG9ydCBodHRweFxuXG5mcm9tIGZhc3RhcGkgaW1wb3J0IEFQSVJvdXRlciwgRGVwZW5kcywgSFRUUEV4Y2VwdGlvbiwgUXVlcnlcbmZyb20gc3FsbW9kZWwgaW1wb3J0IFNlc3Npb24sIHNlbGVjdFxuZnJvbSBweWRhbnRpYyBpbXBvcnQgQmFzZU1vZGVsXG5cbmZyb20gYXBwLmFwaS5kZXBzIGltcG9ydCBnZXRfY3VycmVudF9hY3RpdmVfdXNlciwgZ2V0X2RiXG5mcm9tIGFwcC5tb2RlbHMgaW1wb3J0IChcbiAgICBVc2VyLCBDaGlsZCwgQ2hhdFJlcXVlc3QsIENoYXRSZXNwb25zZSwgQ2hhdEhpc3RvcnksIENoYXRIaXN0b3JpZXNQdWJsaWNcbilcbmZyb20gYXBwLnJhZy5yYWdfY2hhaW4gaW1wb3J0IGdlbmVyYXRlX3Jlc3BvbnNlXG5mcm9tIGFwcC5yYWcuY2hhdF9oaXN0b3J5IGltcG9ydCBzYXZlX2NoYXRfaW50ZXJhY3Rpb24sIGdldF9jaGF0X2hpc3RvcnksIGdldF9jaGlsZF9pbmZvXG5mcm9tIGFwcC5jb3JlLmNvbmZpZyBpbXBvcnQgc2V0dGluZ3NcblxuXG5jbGFzcyBNb2RlbEluZm8oQmFzZU1vZGVsKTpcbiAgICBpZDogc3RyXG4gICAgbmFtZTogc3RyXG4gICAgcHJvdmlkZXI6IHN0clxuICAgIGRlc2NyaXB0aW9uOiBzdHIgPSBcIlwiXG5cblxuY2xhc3MgTW9kZWxzUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBtb2RlbHM6IExpc3RbTW9kZWxJbmZvXVxuXG5yb3V0ZXIgPSBBUElSb3V0ZXIoKVxuXG5cbkByb3V0ZXIucG9zdChcIi9cIiwgcmVzcG9uc2VfbW9kZWw9Q2hhdFJlc3BvbnNlKVxuYXN5bmMgZGVmIGNoYXQoXG4gICAgKixcbiAgICBkYjogU2Vzc2lvbiA9IERlcGVuZHMoZ2V0X2RiKSxcbiAgICBjaGF0X3JlcXVlc3Q6IENoYXRSZXF1ZXN0LFxuICAgIGN1cnJlbnRfdXNlcjogVXNlciA9IERlcGVuZHMoZ2V0X2N1cnJlbnRfYWN0aXZlX3VzZXIpLFxuKSAtPiBBbnk6XG4gICAgXCJcIlwiXG4gICAgQ2hhdCB3aXRoIHRoZSBBSSBhc3Npc3RhbnQuXG4gICAgXCJcIlwiXG4gICAgIyBHZW5lcmF0ZSBzZXNzaW9uIElEIGlmIG5vdCBwcm92aWRlZFxuICAgIHNlc3Npb25faWQgPSBjaGF0X3JlcXVlc3Quc2Vzc2lvbl9pZCBvciBzdHIodXVpZC51dWlkNCgpKVxuXG4gICAgIyBHZXQgY2hpbGQgaW5mbyBpZiBjaGlsZF9pZCBpcyBwcm92aWRlZFxuICAgIGNoaWxkX2luZm8gPSBOb25lXG4gICAgaWYgY2hhdF9yZXF1ZXN0LmNoaWxkX2lkOlxuICAgICAgICAjIENoZWNrIGlmIGNoaWxkIGV4aXN0cyBhbmQgYmVsb25ncyB0byBjdXJyZW50IHVzZXJcbiAgICAgICAgY2hpbGQgPSBkYi5nZXQoQ2hpbGQsIGNoYXRfcmVxdWVzdC5jaGlsZF9pZClcbiAgICAgICAgaWYgbm90IGNoaWxkOlxuICAgICAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDQsIGRldGFpbD1cIkNoaWxkIG5vdCBmb3VuZFwiKVxuICAgICAgICBpZiBjaGlsZC5wYXJlbnRfaWQgIT0gY3VycmVudF91c2VyLmlkOlxuICAgICAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDMsIGRldGFpbD1cIk5vdCBlbm91Z2ggcGVybWlzc2lvbnNcIilcblxuICAgICAgICAjIEdldCBjaGlsZCBpbmZvXG4gICAgICAgIGNoaWxkX2luZm8gPSBnZXRfY2hpbGRfaW5mbyhkYiwgY2hhdF9yZXF1ZXN0LmNoaWxkX2lkKVxuXG4gICAgIyBHZXQgY2hhdCBoaXN0b3J5XG4gICAgY2hhdF9oaXN0b3J5ID0gZ2V0X2NoYXRfaGlzdG9yeShkYiwgc2Vzc2lvbl9pZClcblxuICAgICMgR2VuZXJhdGUgcmVzcG9uc2VcbiAgICB0cnk6XG4gICAgICAgIHJlc3VsdCA9IGF3YWl0IGdlbmVyYXRlX3Jlc3BvbnNlKFxuICAgICAgICAgICAgcXVlc3Rpb249Y2hhdF9yZXF1ZXN0LnF1ZXN0aW9uLFxuICAgICAgICAgICAgY2hhdF9oaXN0b3J5PWNoYXRfaGlzdG9yeSxcbiAgICAgICAgICAgIHNlc3Npb25faWQ9c2Vzc2lvbl9pZCxcbiAgICAgICAgICAgIGNoaWxkX2luZm89Y2hpbGRfaW5mbyxcbiAgICAgICAgICAgIG1vZGVsX25hbWU9Y2hhdF9yZXF1ZXN0Lm1vZGVsXG4gICAgICAgIClcblxuICAgICAgICAjIFNhdmUgY2hhdCBpbnRlcmFjdGlvblxuICAgICAgICBzYXZlX2NoYXRfaW50ZXJhY3Rpb24oXG4gICAgICAgICAgICBkYj1kYixcbiAgICAgICAgICAgIHVzZXJfaWQ9Y3VycmVudF91c2VyLmlkLFxuICAgICAgICAgICAgc2Vzc2lvbl9pZD1zZXNzaW9uX2lkLFxuICAgICAgICAgICAgdXNlcl9xdWVyeT1jaGF0X3JlcXVlc3QucXVlc3Rpb24sXG4gICAgICAgICAgICBhaV9yZXNwb25zZT1yZXN1bHRbXCJhbnN3ZXJcIl0sXG4gICAgICAgICAgICBtb2RlbD1jaGF0X3JlcXVlc3QubW9kZWwsXG4gICAgICAgICAgICBjaGlsZF9pZD1jaGF0X3JlcXVlc3QuY2hpbGRfaWQsXG4gICAgICAgICAgICBzb3VyY2VzPXJlc3VsdC5nZXQoXCJzb3VyY2VzXCIpXG4gICAgICAgIClcblxuICAgICAgICByZXR1cm4gQ2hhdFJlc3BvbnNlKFxuICAgICAgICAgICAgYW5zd2VyPXJlc3VsdFtcImFuc3dlclwiXSxcbiAgICAgICAgICAgIHNlc3Npb25faWQ9c2Vzc2lvbl9pZCxcbiAgICAgICAgICAgIHNvdXJjZXM9cmVzdWx0LmdldChcInNvdXJjZXNcIilcbiAgICAgICAgKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1zdHIoZSkpXG5cblxuQHJvdXRlci5nZXQoXCIvaGlzdG9yeVwiLCByZXNwb25zZV9tb2RlbD1DaGF0SGlzdG9yaWVzUHVibGljKVxuZGVmIGdldF9jaGF0X2hpc3RvcmllcyhcbiAgICAqLFxuICAgIGRiOiBTZXNzaW9uID0gRGVwZW5kcyhnZXRfZGIpLFxuICAgIHNlc3Npb25faWQ6IHN0ciA9IE5vbmUsXG4gICAgY2hpbGRfaWQ6IHV1aWQuVVVJRCA9IE5vbmUsXG4gICAgc2tpcDogaW50ID0gMCxcbiAgICBsaW1pdDogaW50ID0gMTAwLFxuICAgIGN1cnJlbnRfdXNlcjogVXNlciA9IERlcGVuZHMoZ2V0X2N1cnJlbnRfYWN0aXZlX3VzZXIpLFxuKSAtPiBBbnk6XG4gICAgXCJcIlwiXG4gICAgR2V0IGNoYXQgaGlzdG9yeS5cbiAgICBcIlwiXCJcbiAgICAjIEJ1aWxkIHF1ZXJ5XG4gICAgcXVlcnkgPSBzZWxlY3QoQ2hhdEhpc3RvcnkpLndoZXJlKENoYXRIaXN0b3J5LnVzZXJfaWQgPT0gY3VycmVudF91c2VyLmlkKVxuXG4gICAgIyBGaWx0ZXIgYnkgc2Vzc2lvbl9pZCBpZiBwcm92aWRlZFxuICAgIGlmIHNlc3Npb25faWQ6XG4gICAgICAgIHF1ZXJ5ID0gcXVlcnkud2hlcmUoQ2hhdEhpc3Rvcnkuc2Vzc2lvbl9pZCA9PSBzZXNzaW9uX2lkKVxuXG4gICAgIyBGaWx0ZXIgYnkgY2hpbGRfaWQgaWYgcHJvdmlkZWRcbiAgICBpZiBjaGlsZF9pZDpcbiAgICAgICAgIyBDaGVjayBpZiBjaGlsZCBleGlzdHMgYW5kIGJlbG9uZ3MgdG8gY3VycmVudCB1c2VyXG4gICAgICAgIGNoaWxkID0gZGIuZ2V0KENoaWxkLCBjaGlsZF9pZClcbiAgICAgICAgaWYgbm90IGNoaWxkOlxuICAgICAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDQsIGRldGFpbD1cIkNoaWxkIG5vdCBmb3VuZFwiKVxuICAgICAgICBpZiBjaGlsZC5wYXJlbnRfaWQgIT0gY3VycmVudF91c2VyLmlkOlxuICAgICAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDMsIGRldGFpbD1cIk5vdCBlbm91Z2ggcGVybWlzc2lvbnNcIilcblxuICAgICAgICBxdWVyeSA9IHF1ZXJ5LndoZXJlKENoYXRIaXN0b3J5LmNoaWxkX2lkID09IGNoaWxkX2lkKVxuXG4gICAgIyBBZGQgcGFnaW5hdGlvblxuICAgIHF1ZXJ5ID0gcXVlcnkub3JkZXJfYnkoQ2hhdEhpc3RvcnkuY3JlYXRlZF9hdC5kZXNjKCkpLm9mZnNldChza2lwKS5saW1pdChsaW1pdClcblxuICAgICMgRXhlY3V0ZSBxdWVyeVxuICAgIGNoYXRfaGlzdG9yaWVzID0gZGIuZXhlYyhxdWVyeSkuYWxsKClcblxuICAgICMgQ291bnQgdG90YWxcbiAgICBjb3VudF9xdWVyeSA9IHNlbGVjdChDaGF0SGlzdG9yeSkud2hlcmUoQ2hhdEhpc3RvcnkudXNlcl9pZCA9PSBjdXJyZW50X3VzZXIuaWQpXG4gICAgaWYgc2Vzc2lvbl9pZDpcbiAgICAgICAgY291bnRfcXVlcnkgPSBjb3VudF9xdWVyeS53aGVyZShDaGF0SGlzdG9yeS5zZXNzaW9uX2lkID09IHNlc3Npb25faWQpXG4gICAgaWYgY2hpbGRfaWQ6XG4gICAgICAgIGNvdW50X3F1ZXJ5ID0gY291bnRfcXVlcnkud2hlcmUoQ2hhdEhpc3RvcnkuY2hpbGRfaWQgPT0gY2hpbGRfaWQpXG4gICAgdG90YWxfY291bnQgPSBsZW4oZGIuZXhlYyhjb3VudF9xdWVyeSkuYWxsKCkpXG5cbiAgICByZXR1cm4gQ2hhdEhpc3Rvcmllc1B1YmxpYyhkYXRhPWNoYXRfaGlzdG9yaWVzLCBjb3VudD10b3RhbF9jb3VudClcblxuXG5Acm91dGVyLmdldChcIi9zZXNzaW9uc1wiLCByZXNwb25zZV9tb2RlbD1MaXN0W3N0cl0pXG5kZWYgZ2V0X2NoYXRfc2Vzc2lvbnMoXG4gICAgKixcbiAgICBkYjogU2Vzc2lvbiA9IERlcGVuZHMoZ2V0X2RiKSxcbiAgICBjdXJyZW50X3VzZXI6IFVzZXIgPSBEZXBlbmRzKGdldF9jdXJyZW50X2FjdGl2ZV91c2VyKSxcbikgLT4gQW55OlxuICAgIFwiXCJcIlxuICAgIEdldCB1bmlxdWUgY2hhdCBzZXNzaW9ucyBmb3IgdGhlIGN1cnJlbnQgdXNlci5cbiAgICBcIlwiXCJcbiAgICBxdWVyeSA9IChcbiAgICAgICAgc2VsZWN0KENoYXRIaXN0b3J5LnNlc3Npb25faWQpXG4gICAgICAgIC53aGVyZShDaGF0SGlzdG9yeS51c2VyX2lkID09IGN1cnJlbnRfdXNlci5pZClcbiAgICAgICAgLmRpc3RpbmN0KClcbiAgICApXG5cbiAgICBzZXNzaW9ucyA9IGRiLmV4ZWMocXVlcnkpLmFsbCgpXG4gICAgcmV0dXJuIHNlc3Npb25zXG5cblxuQHJvdXRlci5nZXQoXCIvbW9kZWxzXCIsIHJlc3BvbnNlX21vZGVsPU1vZGVsc1Jlc3BvbnNlKVxuYXN5bmMgZGVmIGdldF9hdmFpbGFibGVfbW9kZWxzKFxuICAgICosXG4gICAgY3VycmVudF91c2VyOiBVc2VyID0gRGVwZW5kcyhnZXRfY3VycmVudF9hY3RpdmVfdXNlciksXG4pIC0+IEFueTpcbiAgICBcIlwiXCJcbiAgICBHZXQgYXZhaWxhYmxlIG1vZGVscyBmcm9tIE9wZW5Sb3V0ZXIuXG4gICAgXCJcIlwiXG4gICAgdHJ5OlxuICAgICAgICAjIERlZmluZSBhIGxpc3Qgb2YgcmVjb21tZW5kZWQgbW9kZWxzIGZvciBwYXJlbnRpbmcgYXNzaXN0YW50XG4gICAgICAgIHJlY29tbWVuZGVkX21vZGVscyA9IFtcbiAgICAgICAgICAgIE1vZGVsSW5mbyhcbiAgICAgICAgICAgICAgICBpZD1cIm9wZW5haS9ncHQtNG8tbWluaVwiLFxuICAgICAgICAgICAgICAgIG5hbWU9XCJHUFQtNG8gTWluaVwiLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyPVwiT3BlbkFJXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb249XCJTbWFsbGVyLCBmYXN0ZXIsIGFuZCBtb3JlIGFmZm9yZGFibGUgdmVyc2lvbiBvZiBHUFQtNG9cIlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIE1vZGVsSW5mbyhcbiAgICAgICAgICAgICAgICBpZD1cImFudGhyb3BpYy9jbGF1ZGUtMy1vcHVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZT1cIkNsYXVkZSAzIE9wdXNcIixcbiAgICAgICAgICAgICAgICBwcm92aWRlcj1cIkFudGhyb3BpY1wiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwiQW50aHJvcGljJ3MgbW9zdCBwb3dlcmZ1bCBtb2RlbCBmb3IgY29tcGxleCB0YXNrc1wiXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgTW9kZWxJbmZvKFxuICAgICAgICAgICAgICAgIGlkPVwiYW50aHJvcGljL2NsYXVkZS0zLXNvbm5ldFwiLFxuICAgICAgICAgICAgICAgIG5hbWU9XCJDbGF1ZGUgMyBTb25uZXRcIixcbiAgICAgICAgICAgICAgICBwcm92aWRlcj1cIkFudGhyb3BpY1wiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwiQmFsYW5jZWQgbW9kZWwgZm9yIG1vc3QgdGFza3NcIlxuICAgICAgICAgICAgKSxcbi4uLlxuXG4gICAgICAgICMgWW91IGNvdWxkIGFsc28gZmV0Y2ggbW9kZWxzIGR5bmFtaWNhbGx5IGZyb20gT3BlblJvdXRlciBBUElcbiAgICAgICAgIyBoZWFkZXJzID0ge1xuICAgICAgICAjICAgICBcIkF1dGhvcml6YXRpb25cIjogZlwiQmVhcmVyIHtzZXR0aW5ncy5PUEVOUk9VVEVSX0FQSV9LRVl9XCIsXG4gICAgICAgICMgICAgIFwiSFRUUC1SZWZlcmVyXCI6IHNldHRpbmdzLkZST05URU5EX0hPU1QsXG4gICAgICAgICMgfVxuICAgICAgICAjIGFzeW5jIHdpdGggaHR0cHguQXN5bmNDbGllbnQoKSBhcyBjbGllbnQ6XG4gICAgICAgICMgICAgIHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LmdldChcbiAgICAgICAgIyAgICAgICAgIGZcIntzZXR0aW5ncy5PUEVOUk9VVEVSX0JBU0VfVVJMfS9tb2RlbHNcIixcbiAgICAgICAgIyAgICAgICAgIGhlYWRlcnM9aGVhZGVycyxcbiAgICAgICAgIyAgICAgKVxuICAgICAgICAjICAgICByZXNwb25zZS5yYWlzZV9mb3Jfc3RhdHVzKClcbiAgICAgICAgIyAgICAgbW9kZWxzX2RhdGEgPSByZXNwb25zZS5qc29uKClcbiAgICAgICAgIyAgICAgIyBQcm9jZXNzIG1vZGVscyBkYXRhLi4uXG5cbiAgICAgICAgcmV0dXJuIE1vZGVsc1Jlc3BvbnNlKG1vZGVscz1yZWNvbW1lbmRlZF9tb2RlbHMpXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWZcIkVycm9yIGZldGNoaW5nIG1vZGVsczoge3N0cihlKX1cIilcbi4uLlxuUGF0aDogYmFja2VuZC9hcHAvcmFnL29wZW5yb3V0ZXJfY2xpZW50LnB5XG5cIlwiXCJcbk9wZW5Sb3V0ZXIgY2xpZW50IGZvciBMTE0gaW50ZWdyYXRpb24uXG5cIlwiXCJcbmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBMaXN0LCBBbnksIE9wdGlvbmFsXG5pbXBvcnQganNvblxuaW1wb3J0IGh0dHB4XG5mcm9tIGxhbmdjaGFpbl9jb3JlLmxhbmd1YWdlX21vZGVscy5jaGF0X21vZGVscyBpbXBvcnQgQmFzZUNoYXRNb2RlbFxuZnJvbSBsYW5nY2hhaW5fY29yZS5tZXNzYWdlcyBpbXBvcnQgKFxuICAgIEFJTWVzc2FnZSxcbiAgICBCYXNlTWVzc2FnZSxcbiAgICBDaGF0TWVzc2FnZSxcbiAgICBIdW1hbk1lc3NhZ2UsXG4gICAgU3lzdGVtTWVzc2FnZSxcbilcbmZyb20gbGFuZ2NoYWluX2NvcmUub3V0cHV0cyBpbXBvcnQgQ2hhdEdlbmVyYXRpb24sIENoYXRSZXN1bHRcbmZyb20gbGFuZ2NoYWluX2NvcmUuY2FsbGJhY2tzLm1hbmFnZXIgaW1wb3J0IENhbGxiYWNrTWFuYWdlckZvckxMTVJ1blxuXG5mcm9tIGFwcC5jb3JlLmNvbmZpZyBpbXBvcnQgc2V0dGluZ3NcblxuXG5jbGFzcyBPcGVuUm91dGVyQ2hhdE1vZGVsKEJhc2VDaGF0TW9kZWwpOlxuICAgIFwiXCJcIkNoYXQgbW9kZWwgdGhhdCB1c2VzIE9wZW5Sb3V0ZXIgQVBJLlwiXCJcIlxuICAgIFxuICAgIGFwaV9rZXk6IHN0clxuICAgIGJhc2VfdXJsOiBzdHIgPSBcImh0dHBzOi8vb3BlbnJvdXRlci5haS9hcGkvdjFcIlxuICAgIG1vZGVsOiBzdHIgPSBcIm9wZW5haS9ncHQtNG8tbWluaVwiXG4gICAgdGVtcGVyYXR1cmU6IGZsb2F0ID0gMC43XG4gICAgbWF4X3Rva2VuczogT3B0aW9uYWxbaW50XSA9IE5vbmVcbiAgICB0b3BfcDogT3B0aW9uYWxbZmxvYXRdID0gTm9uZVxuICAgIFxuICAgIGRlZiBfZ2VuZXJhdGUoXG4gICAgICAgIHNlbGYsIG1lc3NhZ2VzOiBMaXN0W0Jhc2VNZXNzYWdlXSwgc3RvcDogT3B0aW9uYWxbTGlzdFtzdHJdXSA9IE5vbmUsIFxuICAgICAgICBydW5fbWFuYWdlcjogT3B0aW9uYWxbQ2FsbGJhY2tNYW5hZ2VyRm9yTExNUnVuXSA9IE5vbmUsICoqa3dhcmdzOiBBbnlcbiAgICApIC0+IENoYXRSZXN1bHQ6XG4gICAgICAgIFwiXCJcIkdlbmVyYXRlIGEgY2hhdCByZXNwb25zZS5cIlwiXCJcbiAgICAgICAgbWVzc2FnZV9kaWN0cyA9IFtdXG4uLi5cbiAgICAgICAgXG4gICAgICAgICMgQWRkIG9wdGlvbmFsIHBhcmFtZXRlcnMgaWYgcHJvdmlkZWRcbiAgICAgICAgaWYgc3RvcDpcbiAgICAgICAgICAgIHBheWxvYWRbXCJzdG9wXCJdID0gc3RvcFxuICAgICAgICBpZiBzZWxmLm1heF90b2tlbnM6XG4gICAgICAgICAgICBwYXlsb2FkW1wibWF4X3Rva2Vuc1wiXSA9IHNlbGYubWF4X3Rva2Vuc1xuICAgICAgICBpZiBzZWxmLnRvcF9wOlxuICAgICAgICAgICAgcGF5bG9hZFtcInRvcF9wXCJdID0gc2VsZi50b3BfcFxuICAgICAgICBcbiAgICAgICAgIyBBZGQgYWRkaXRpb25hbCBrd2FyZ3NcbiAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4ga3dhcmdzLml0ZW1zKCk6XG4gICAgICAgICAgICBwYXlsb2FkW2tleV0gPSB2YWx1ZVxuICAgICAgICBcbiAgICAgICAgIyBNYWtlIHRoZSBBUEkgcmVxdWVzdFxuICAgICAgICBoZWFkZXJzID0ge1xuICAgICAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IGZcIkJlYXJlciB7c2VsZi5hcGlfa2V5fVwiLFxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICBcIkhUVFAtUmVmZXJlclwiOiBzZXR0aW5ncy5GUk9OVEVORF9IT1NULCAgIyBSZXF1aXJlZCBieSBPcGVuUm91dGVyXG4gICAgICAgICAgICBcIlgtVGl0bGVcIjogc2V0dGluZ3MuUFJPSkVDVF9OQU1FLCAgIyBPcHRpb25hbCBidXQgcmVjb21tZW5kZWRcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdHJ5OlxuICAgICAgICAgICAgd2l0aCBodHRweC5DbGllbnQodGltZW91dD02MC4wKSBhcyBjbGllbnQ6XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBjbGllbnQucG9zdChcbiAgICAgICAgICAgICAgICAgICAgZlwie3NlbGYuYmFzZV91cmx9L2NoYXQvY29tcGxldGlvbnNcIixcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycz1oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBqc29uPXBheWxvYWQsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKVxuICAgICAgICAgICAgICAgIHJlc3BvbnNlX2RhdGEgPSByZXNwb25zZS5qc29uKClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAjIEV4dHJhY3QgdGhlIHJlc3BvbnNlIGNvbnRlbnRcbiAgICAgICAgICAgICAgICBtZXNzYWdlX2NvbnRlbnQgPSByZXNwb25zZV9kYXRhW1wiY2hvaWNlc1wiXVswXVtcIm1lc3NhZ2VcIl1bXCJjb250ZW50XCJdXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgIyBDcmVhdGUgYSBDaGF0R2VuZXJhdGlvbiBvYmplY3RcbiAgICAgICAgICAgICAgICBnZW5lcmF0aW9uID0gQ2hhdEdlbmVyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U9QUlNZXNzYWdlKGNvbnRlbnQ9bWVzc2FnZV9jb250ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGlvbl9pbmZvPXtcImZpbmlzaF9yZWFzb25cIjogcmVzcG9uc2VfZGF0YVtcImNob2ljZXNcIl1bMF0uZ2V0KFwiZmluaXNoX3JlYXNvblwiKX1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgIyBSZXR1cm4gdGhlIENoYXRSZXN1bHRcbiAgICAgICAgICAgICAgICByZXR1cm4gQ2hhdFJlc3VsdChnZW5lcmF0aW9ucz1bZ2VuZXJhdGlvbl0pXG4gICAgICAgIFxuICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKGZcIkVycm9yIGNhbGxpbmcgT3BlblJvdXRlciBBUEk6IHtzdHIoZSl9XCIpXG4gICAgXG4gICAgQHByb3BlcnR5XG4gICAgZGVmIF9sbG1fdHlwZShzZWxmKSAtPiBzdHI6XG4gICAgICAgIFwiXCJcIlJldHVybiB0aGUgdHlwZSBvZiBMTE0uXCJcIlwiXG4gICAgICAgIHJldHVybiBcIm9wZW5yb3V0ZXJcIlxuXG5cbmRlZiBnZXRfb3BlbnJvdXRlcl9jaGF0X21vZGVsKFxuICAgIG1vZGVsOiBzdHIgPSBOb25lLFxuICAgIHRlbXBlcmF0dXJlOiBmbG9hdCA9IDAuNyxcbiAgICBtYXhfdG9rZW5zOiBPcHRpb25hbFtpbnRdID0gTm9uZSxcbiAgICB0b3BfcDogT3B0aW9uYWxbZmxvYXRdID0gTm9uZSxcbikgLT4gT3BlblJvdXRlckNoYXRNb2RlbDpcbiAgICBcIlwiXCJcbiAgICBHZXQgYW4gT3BlblJvdXRlckNoYXRNb2RlbCBpbnN0YW5jZS5cbiAgICBcbiAgICBBcmdzOlxuICAgICAgICBtb2RlbDogTW9kZWwgbmFtZSAoZS5nLiwgXCJvcGVuYWkvZ3B0LTRvLW1pbmlcIiwgXCJhbnRocm9waWMvY2xhdWRlLTMtb3B1c1wiKVxuICAgICAgICB0ZW1wZXJhdHVyZTogVGVtcGVyYXR1cmUgZm9yIGdlbmVyYXRpb25cbiAgICAgICAgbWF4X3Rva2VuczogTWF4aW11bSB0b2tlbnMgdG8gZ2VuZXJhdGVcbiAgICAgICAgdG9wX3A6IFRvcC1wIHNhbXBsaW5nIHBhcmFtZXRlclxuICAgICAgICBcbiAgICBSZXR1cm5zOlxuICAgICAgICBPcGVuUm91dGVyQ2hhdE1vZGVsIGluc3RhbmNlXG4gICAgXCJcIlwiXG4gICAgcmV0dXJuIE9wZW5Sb3V0ZXJDaGF0TW9kZWwoXG4gICAgICAgIGFwaV9rZXk9c2V0dGluZ3MuT1BFTlJPVVRFUl9BUElfS0VZLFxuICAgICAgICBiYXNlX3VybD1zZXR0aW5ncy5PUEVOUk9VVEVSX0JBU0VfVVJMLFxuICAgICAgICBtb2RlbD1tb2RlbCBvciBzZXR0aW5ncy5ERUZBVUxUX0xMTV9NT0RFTCxcbiAgICAgICAgdGVtcGVyYXR1cmU9dGVtcGVyYXR1cmUsXG4gICAgICAgIG1heF90b2tlbnM9bWF4X3Rva2VucyxcbiAgICAgICAgdG9wX3A9dG9wX3AsXG4gICAgKVxuLi4uXG5QYXRoOiBiYWNrZW5kL2FwcC9hcGkvbWFpbi5weVxuZnJvbSBmYXN0YXBpIGltcG9ydCBBUElSb3V0ZXJcblxuZnJvbSBhcHAuYXBpLnJvdXRlcyBpbXBvcnQgaXRlbXMsIGxvZ2luLCBwcml2YXRlLCB1c2VycywgdXRpbHMsIGNoaWxkcmVuLCBncm93dGhfcmVjb3JkcywgZG9jdW1lbnRzLCBjaGF0XG5mcm9tIGFwcC5jb3JlLmNvbmZpZyBpbXBvcnQgc2V0dGluZ3NcblxuYXBpX3JvdXRlciA9IEFQSVJvdXRlcigpXG5hcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKGxvZ2luLnJvdXRlcilcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIodXNlcnMucm91dGVyKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcih1dGlscy5yb3V0ZXIpXG5hcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKGl0ZW1zLnJvdXRlcilcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIoY2hpbGRyZW4ucm91dGVyLCBwcmVmaXg9XCIvY2hpbGRyZW5cIiwgdGFncz1bXCJjaGlsZHJlblwiXSlcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIoZ3Jvd3RoX3JlY29yZHMucm91dGVyLCBwcmVmaXg9XCIvZ3Jvd3RoLXJlY29yZHNcIiwgdGFncz1bXCJncm93dGgtcmVjb3Jkc1wiXSlcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIoZG9jdW1lbnRzLnJvdXRlciwgcHJlZml4PVwiL2RvY3VtZW50c1wiLCB0YWdzPVtcImRvY3VtZW50c1wiXSlcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIoY2hhdC5yb3V0ZXIsIHByZWZpeD1cIi9jaGF0XCIsIHRhZ3M9W1wiY2hhdFwiXSlcbi4uLlxuUGF0aDogZG9jL3VwZGF0ZWQtYXJjaGl0ZWN0dXJlLWRvY3VtZW50Lm1kXG4uLi5cblxuIyDogYrlpKnnq6/ngrlcbkBhcHAucG9zdChcIi9hcGkvdjEvYWkvY2hhdFwiLCByZXNwb25zZV9tb2RlbD1DaGF0UmVzcG9uc2UpXG5hc3luYyBkZWYgY2hhdChyZXF1ZXN0OiBDaGF0UmVxdWVzdCk6XG4gICAgIyDnlJ/miJDkvJror51JRO+8iOWmguaenOacquaPkOS+m++8iVxuICAgIHNlc3Npb25faWQgPSByZXF1ZXN0LnNlc3Npb25faWQgb3Igc3RyKHV1aWQ0KCkpXG4gICAgXG4gICAgIyDojrflj5bogYrlpKnljoblj7JcbiAgICBjaGF0X2hpc3RvcnkgPSBnZXRfY2hhdF9oaXN0b3J5KHNlc3Npb25faWQpXG4gICAgXG4gICAgIyDojrflj5blhL/nq6Xkv6Hmga/vvIjlpoLmnpzmj5DkvpvkuoZjaGlsZF9pZO+8iVxuICAgIGNoaWxkX2luZm8gPSBOb25lXG4gICAgaWYgcmVxdWVzdC5jaGlsZF9pZDpcbiAgICAgICAgY2hpbGRfaW5mbyA9IGdldF9jaGlsZF9pbmZvKHJlcXVlc3QuY2hpbGRfaWQpXG4gICAgXG4gICAgIyDosIPnlKhSQUfns7vnu59cbiAgICByYWdfc3lzdGVtID0gZ2V0X3JhZ19zeXN0ZW0oKVxuICAgIHJlc3VsdCA9IHJhZ19zeXN0ZW0uYW5zd2VyX3F1ZXN0aW9uKFxuICAgICAgICBxdWVzdGlvbj1yZXF1ZXN0LnF1ZXN0aW9uLFxuICAgICAgICBjaGF0X2hpc3Rvcnk9Y2hhdF9oaXN0b3J5LFxuICAgICAgICBjaGlsZF9pbmZvPWNoaWxkX2luZm9cbiAgICApXG4gICAgXG4gICAgIyDorrDlvZXkuqTkupJcbiAgICBzYXZlX2NoYXRfaW50ZXJhY3Rpb24oXG4gICAgICAgIHNlc3Npb25faWQ9c2Vzc2lvbl9pZCxcbiAgICAgICAgdXNlcl9xdWVyeT1yZXF1ZXN0LnF1ZXN0aW9uLFxuICAgICAgICBhaV9yZXNwb25zZT1yZXN1bHRbXCJhbnN3ZXJcIl0sXG4gICAgICAgIGNoaWxkX2lkPXJlcXVlc3QuY2hpbGRfaWRcbiAgICApXG4uLi5cblBhdGg6IGJhY2tlbmQvYXBwL3JhZy9yYWdfY2hhaW4ucHlcblwiXCJcIlxuUkFHIGNoYWluIGltcGxlbWVudGF0aW9uIGZvciB0aGUgcGFyZW50aW5nIGFzc2lzdGFudC5cblwiXCJcIlxuZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QsIERpY3QsIEFueSwgT3B0aW9uYWxcbmltcG9ydCB1dWlkXG5cbmZyb20gbGFuZ2NoYWluX2NvcmUub3V0cHV0X3BhcnNlcnMgaW1wb3J0IFN0ck91dHB1dFBhcnNlclxuZnJvbSBsYW5nY2hhaW5fY29yZS5wcm9tcHRzIGltcG9ydCBDaGF0UHJvbXB0VGVtcGxhdGUsIE1lc3NhZ2VzUGxhY2Vob2xkZXJcbmZyb20gbGFuZ2NoYWluLmNoYWlucyBpbXBvcnQgY3JlYXRlX2hpc3RvcnlfYXdhcmVfcmV0cmlldmVyLCBjcmVhdGVfcmV0cmlldmFsX2NoYWluXG5mcm9tIGxhbmdjaGFpbi5jaGFpbnMuY29tYmluZV9kb2N1bWVudHMgaW1wb3J0IGNyZWF0ZV9zdHVmZl9kb2N1bWVudHNfY2hhaW5cblxuZnJvbSBhcHAucmFnLnZlY3RvcnN0b3JlIGltcG9ydCBnZXRfcmV0cmlldmVyXG5mcm9tIGFwcC5yYWcub3BlbnJvdXRlcl9jbGllbnQgaW1wb3J0IGdldF9vcGVucm91dGVyX2NoYXRfbW9kZWxcbmZyb20gYXBwLmNvcmUuY29uZmlnIGltcG9ydCBzZXR0aW5nc1xuXG5cbiMgSW5pdGlhbGl6ZSBvdXRwdXQgcGFyc2VyXG5vdXRwdXRfcGFyc2VyID0gU3RyT3V0cHV0UGFyc2VyKClcbi4uLlxuXG5cbiMgUUEgcHJvbXB0XG5xYV9zeXN0ZW1fcHJvbXB0ID0gXCJcIlwiXG5Zb3UgYXJlIGFuIEFJIHBhcmVudGluZyBhc3Npc3RhbnQgZGVzaWduZWQgdG8gcHJvdmlkZSBoZWxwZnVsLCBhY2N1cmF0ZSwgYW5kIHN1cHBvcnRpdmUgYWR2aWNlIHRvIHBhcmVudHMuXG5Vc2UgdGhlIGZvbGxvd2luZyBjb250ZXh0IHRvIGFuc3dlciB0aGUgdXNlcidzIHF1ZXN0aW9uLlxuXG5Db250ZXh0OiB7Y29udGV4dH1cblxuR3VpZGVsaW5lczpcbjEuIEJhc2UgeW91ciBhbnN3ZXJzIG9uIHRoZSBwcm92aWRlZCBjb250ZXh0IGFuZCBzY2llbnRpZmljIHBhcmVudGluZyBrbm93bGVkZ2UuXG4yLiBJZiB0aGUgY29udGV4dCBkb2Vzbid0IGNvbnRhaW4gcmVsZXZhbnQgaW5mb3JtYXRpb24sIHNheSBzbyBhbmQgcHJvdmlkZSBnZW5lcmFsIGFkdmljZSBiYXNlZCBvbiBjaGlsZCBkZXZlbG9wbWVudCBwcmluY2lwbGVzLlxuMy4gQWx3YXlzIGJlIHN1cHBvcnRpdmUgYW5kIG5vbi1qdWRnbWVudGFsLlxuNC4gRm9yIG1lZGljYWwgcXVlc3Rpb25zLCByZW1pbmQgdGhlIHVzZXIgdG8gY29uc3VsdCBoZWFsdGhjYXJlIHByb2Zlc3Npb25hbHMuXG41LiBQcm92aWRlIGFnZS1hcHByb3ByaWF0ZSBhZHZpY2Ugd2hlbiBjaGlsZCBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUuXG42LiBLZWVwIGFuc3dlcnMgY29uY2lzZSBidXQgaW5mb3JtYXRpdmUuXG4uLi5cblxuXG5kZWYgZ2V0X3JhZ19jaGFpbihtb2RlbF9uYW1lOiBzdHIgPSBOb25lLCBjaGlsZF9pbmZvOiBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV0gPSBOb25lKTpcbiAgICBcIlwiXCJcbiAgICBDcmVhdGUgYSBSQUcgY2hhaW4gZm9yIHRoZSBwYXJlbnRpbmcgYXNzaXN0YW50LlxuXG4gICAgQXJnczpcbiAgICAgICAgbW9kZWxfbmFtZTogTmFtZSBvZiB0aGUgbW9kZWwgdG8gdXNlIChlLmcuLCBcIm9wZW5haS9ncHQtNG8tbWluaVwiLCBcImFudGhyb3BpYy9jbGF1ZGUtMy1vcHVzXCIpXG4gICAgICAgIGNoaWxkX2luZm86IE9wdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjaGlsZFxuXG4gICAgUmV0dXJuczpcbiAgICAgICAgQSBSQUcgY2hhaW5cbiAgICBcIlwiXCJcbiAgICAjIEluaXRpYWxpemUgbGFuZ3VhZ2UgbW9kZWxcbiAgICBsbG0gPSBnZXRfb3BlbnJvdXRlcl9jaGF0X21vZGVsKFxuICAgICAgICBtb2RlbD1tb2RlbF9uYW1lIG9yIHNldHRpbmdzLkRFRkFVTFRfTExNX01PREVMLFxuICAgICAgICB0ZW1wZXJhdHVyZT0wLjdcbiAgICApXG5cbiAgICAjIEdldCByZXRyaWV2ZXJcbiAgICByZXRyaWV2ZXIgPSBnZXRfcmV0cmlldmVyKHNlYXJjaF9rd2FyZ3M9e1wia1wiOiAzfSlcblxuICAgICMgQ3JlYXRlIGhpc3RvcnktYXdhcmUgcmV0cmlldmVyXG4gICAgaGlzdG9yeV9hd2FyZV9yZXRyaWV2ZXIgPSBjcmVhdGVfaGlzdG9yeV9hd2FyZV9yZXRyaWV2ZXIoXG4gICAgICAgIGxsbSxcbiAgICAgICAgcmV0cmlldmVyLFxuICAgICAgICBjb250ZXh0dWFsaXplX3FfcHJvbXB0XG4gICAgKVxuXG4gICAgIyBDcmVhdGUgcXVlc3Rpb24tYW5zd2VyaW5nIGNoYWluXG4gICAgcXVlc3Rpb25fYW5zd2VyX2NoYWluID0gY3JlYXRlX3N0dWZmX2RvY3VtZW50c19jaGFpbihcbiAgICAgICAgbGxtLFxuICAgICAgICBxYV9wcm9tcHRcbiAgICApXG5cbiAgICAjIENyZWF0ZSByZXRyaWV2YWwgY2hhaW5cbiAgICByYWdfY2hhaW4gPSBjcmVhdGVfcmV0cmlldmFsX2NoYWluKFxuICAgICAgICBoaXN0b3J5X2F3YXJlX3JldHJpZXZlcixcbiAgICAgICAgcXVlc3Rpb25fYW5zd2VyX2NoYWluXG4gICAgKVxuXG4gICAgcmV0dXJuIHJhZ19jaGFpblxuXG5cbmFzeW5jIGRlZiBnZW5lcmF0ZV9yZXNwb25zZShcbiAgICBxdWVzdGlvbjogc3RyLFxuICAgIGNoYXRfaGlzdG9yeTogTGlzdFtEaWN0W3N0ciwgc3RyXV0sXG4gICAgc2Vzc2lvbl9pZDogc3RyLFxuICAgIGNoaWxkX2luZm86IE9wdGlvbmFsW0RpY3Rbc3RyLCBBbnldXSA9IE5vbmUsXG4gICAgbW9kZWxfbmFtZTogc3RyID0gXCJncHQtNG8tbWluaVwiXG4pIC0+IERpY3Rbc3RyLCBBbnldOlxuICAgIFwiXCJcIlxuICAgIEdlbmVyYXRlIGEgcmVzcG9uc2UgdXNpbmcgdGhlIFJBRyBjaGFpbi5cblxuICAgIEFyZ3M6XG4gICAgICAgIHF1ZXN0aW9uOiBVc2VyJ3MgcXVlc3Rpb25cbiAgICAgICAgY2hhdF9oaXN0b3J5OiBMaXN0IG9mIHByZXZpb3VzIG1lc3NhZ2VzXG4gICAgICAgIHNlc3Npb25faWQ6IFNlc3Npb24gSURcbiAgICAgICAgY2hpbGRfaW5mbzogT3B0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNoaWxkXG4gICAgICAgIG1vZGVsX25hbWU6IE5hbWUgb2YgdGhlIE9wZW5BSSBtb2RlbCB0byB1c2VcblxuICAgIFJldHVybnM6XG4gICAgICAgIERpY3Rpb25hcnkgY29udGFpbmluZyB0aGUgYW5zd2VyIGFuZCBzb3VyY2UgZG9jdW1lbnRzXG4gICAgXCJcIlwiXG4gICAgIyBHZXQgUkFHIGNoYWluXG4gICAgcmFnX2NoYWluID0gZ2V0X3JhZ19jaGFpbihtb2RlbF9uYW1lLCBjaGlsZF9pbmZvKVxuXG4gICAgIyBQcmVwYXJlIGlucHV0XG4gICAgY2hhaW5faW5wdXQgPSB7XG4gICAgICAgIFwiaW5wdXRcIjogcXVlc3Rpb24sXG4gICAgICAgIFwiY2hhdF9oaXN0b3J5XCI6IGNoYXRfaGlzdG9yeVxuICAgIH1cblxuICAgICMgQWRkIGNoaWxkIGluZm8gaWYgYXZhaWxhYmxlXG4gICAgaWYgY2hpbGRfaW5mbzpcbiAgICAgICAgY2hhaW5faW5wdXRbXCJjaGlsZF9pbmZvXCJdID0gc3RyKGNoaWxkX2luZm8pXG4gICAgZWxzZTpcbiAgICAgICAgY2hhaW5faW5wdXRbXCJjaGlsZF9pbmZvXCJdID0gXCJObyBzcGVjaWZpYyBjaGlsZCBpbmZvcm1hdGlvbiBwcm92aWRlZC5cIlxuXG4gICAgIyBJbnZva2UgY2hhaW5cbiAgICByZXN1bHQgPSByYWdfY2hhaW4uaW52b2tlKGNoYWluX2lucHV0KVxuXG4gICAgIyBFeHRyYWN0IGFuc3dlciBhbmQgc291cmNlIGRvY3VtZW50c1xuICAgIGFuc3dlciA9IHJlc3VsdC5nZXQoXCJhbnN3ZXJcIiwgXCJJIGNvdWxkbid0IGdlbmVyYXRlIGFuIGFuc3dlci5cIilcbiAgICBzb3VyY2VfZG9jdW1lbnRzID0gcmVzdWx0LmdldChcInNvdXJjZV9kb2N1bWVudHNcIiwgW10pXG5cbiAgICAjIEZvcm1hdCBzb3VyY2UgZG9jdW1lbnRzXG4gICAgc291cmNlcyA9IFtdXG4gICAgZm9yIGRvYyBpbiBzb3VyY2VfZG9jdW1lbnRzOlxuICAgICAgICBpZiBoYXNhdHRyKGRvYywgJ21ldGFkYXRhJyk6XG4gICAgICAgICAgICBzb3VyY2VzLmFwcGVuZChkb2MubWV0YWRhdGEpXG5cbiAgICByZXR1cm4ge1xuICAgICAgICBcImFuc3dlclwiOiBhbnN3ZXIsXG4gICAgICAgIFwic2Vzc2lvbl9pZFwiOiBzZXNzaW9uX2lkLFxuICAgICAgICBcInNvdXJjZXNcIjogc291cmNlc1xuICAgIH1cbi4uLlxuUGF0aDogYmFja2VuZC9hcHAvcmFnL2NoYXRfaGlzdG9yeS5weVxuXCJcIlwiXG5DaGF0IGhpc3RvcnkgbWFuYWdlbWVudCB1dGlsaXRpZXMuXG5cIlwiXCJcbmZyb20gdHlwaW5nIGltcG9ydCBMaXN0LCBEaWN0LCBBbnksIE9wdGlvbmFsXG5pbXBvcnQgdXVpZFxuXG5mcm9tIHNxbG1vZGVsIGltcG9ydCBTZXNzaW9uLCBzZWxlY3RcblxuZnJvbSBhcHAubW9kZWxzIGltcG9ydCBDaGF0SGlzdG9yeSwgQ2hhdEhpc3RvcnlDcmVhdGUsIFVzZXIsIENoaWxkXG5cblxuZGVmIHNhdmVfY2hhdF9pbnRlcmFjdGlvbihcbiAgICBkYjogU2Vzc2lvbixcbiAgICB1c2VyX2lkOiB1dWlkLlVVSUQsXG4gICAgc2Vzc2lvbl9pZDogc3RyLFxuICAgIHVzZXJfcXVlcnk6IHN0cixcbiAgICBhaV9yZXNwb25zZTogc3RyLFxuICAgIG1vZGVsOiBzdHIsXG4gICAgY2hpbGRfaWQ6IE9wdGlvbmFsW3V1aWQuVVVJRF0gPSBOb25lLFxuICAgIHNvdXJjZXM6IE9wdGlvbmFsW0xpc3RbRGljdFtzdHIsIEFueV1dXSA9IE5vbmVcbikgLT4gQ2hhdEhpc3Rvcnk6XG4gICAgXCJcIlwiXG4gICAgU2F2ZSBhIGNoYXQgaW50ZXJhY3Rpb24gdG8gdGhlIGRhdGFiYXNlLlxuICAgIFxuICAgIEFyZ3M6XG4gICAgICAgIGRiOiBEYXRhYmFzZSBzZXNzaW9uXG4gICAgICAgIHVzZXJfaWQ6IFVzZXIgSURcbiAgICAgICAgc2Vzc2lvbl9pZDogU2Vzc2lvbiBJRFxuICAgICAgICB1c2VyX3F1ZXJ5OiBVc2VyJ3MgcXVlc3Rpb25cbiAgICAgICAgYWlfcmVzcG9uc2U6IEFJJ3MgcmVzcG9uc2VcbiAgICAgICAgbW9kZWw6IE1vZGVsIG5hbWVcbiAgICAgICAgY2hpbGRfaWQ6IE9wdGlvbmFsIGNoaWxkIElEXG4gICAgICAgIHNvdXJjZXM6IE9wdGlvbmFsIGxpc3Qgb2Ygc291cmNlIGRvY3VtZW50c1xuICAgICAgICBcbiAgICBSZXR1cm5zOlxuICAgICAgICBDaGF0SGlzdG9yeSBpbnN0YW5jZVxuICAgIFwiXCJcIlxuICAgICMgQ3JlYXRlIGNoYXQgaGlzdG9yeSByZWNvcmRcbiAgICBjaGF0X2hpc3RvcnlfZGF0YSA9IENoYXRIaXN0b3J5Q3JlYXRlKFxuICAgICAgICB1c2VyX2lkPXVzZXJfaWQsXG4gICAgICAgIGNoaWxkX2lkPWNoaWxkX2lkLFxuICAgICAgICBzZXNzaW9uX2lkPXNlc3Npb25faWQsXG4gICAgICAgIHVzZXJfcXVlcnk9dXNlcl9xdWVyeSxcbiAgICAgICAgYWlfcmVzcG9uc2U9YWlfcmVzcG9uc2UsXG4gICAgICAgIG1vZGVsPW1vZGVsXG4gICAgKVxuICAgIFxuICAgICMgQ29udmVydCBzb3VyY2VzIHRvIGxpc3Qgb2Ygc3RyaW5ncyAoZG9jdW1lbnQgSURzKVxuICAgIHNvdXJjZV9pZHMgPSBbXVxuICAgIGlmIHNvdXJjZXM6XG4gICAgICAgIGZvciBzb3VyY2UgaW4gc291cmNlczpcbiAgICAgICAgICAgIGlmICdkb2N1bWVudF9pZCcgaW4gc291cmNlOlxuICAgICAgICAgICAgICAgIHNvdXJjZV9pZHMuYXBwZW5kKHNvdXJjZVsnZG9jdW1lbnRfaWQnXSlcbiAgICBcbiAgICAjIENyZWF0ZSBjaGF0IGhpc3RvcnkgaW5zdGFuY2VcbiAgICBjaGF0X2hpc3RvcnkgPSBDaGF0SGlzdG9yeShcbiAgICAgICAgKipjaGF0X2hpc3RvcnlfZGF0YS5tb2RlbF9kdW1wKCksXG4gICAgICAgIHNvdXJjZXM9c291cmNlX2lkcyBpZiBzb3VyY2VfaWRzIGVsc2UgTm9uZVxuICAgIClcbiAgICBcbiAgICAjIEFkZCB0byBkYXRhYmFzZVxuICAgIGRiLmFkZChjaGF0X2hpc3RvcnkpXG4gICAgZGIuY29tbWl0KClcbiAgICBkYi5yZWZyZXNoKGNoYXRfaGlzdG9yeSlcbiAgICBcbiAgICByZXR1cm4gY2hhdF9oaXN0b3J5XG5cblxuZGVmIGdldF9jaGF0X2hpc3RvcnkoXG4gICAgZGI6IFNlc3Npb24sXG4gICAgc2Vzc2lvbl9pZDogc3RyLFxuICAgIGxpbWl0OiBpbnQgPSAxMFxuKSAtPiBMaXN0W0RpY3Rbc3RyLCBzdHJdXTpcbiAgICBcIlwiXCJcbiAgICBHZXQgY2hhdCBoaXN0b3J5IGZvciBhIHNlc3Npb24uXG4gICAgXG4gICAgQXJnczpcbiAgICAgICAgZGI6IERhdGFiYXNlIHNlc3Npb25cbiAgICAgICAgc2Vzc2lvbl9pZDogU2Vzc2lvbiBJRFxuICAgICAgICBsaW1pdDogTWF4aW11bSBudW1iZXIgb2YgbWVzc2FnZXMgdG8gcmV0dXJuXG4gICAgICAgIFxuICAgIFJldHVybnM6XG4gICAgICAgIExpc3Qgb2YgbWVzc2FnZXMgaW4gdGhlIGZvcm1hdCBleHBlY3RlZCBieSBMYW5nQ2hhaW5cbiAgICBcIlwiXCJcbiAgICAjIFF1ZXJ5IGNoYXQgaGlzdG9yeVxuICAgIHN0YXRlbWVudCA9IChcbiAgICAgICAgc2VsZWN0KENoYXRIaXN0b3J5KVxuICAgICAgICAud2hlcmUoQ2hhdEhpc3Rvcnkuc2Vzc2lvbl9pZCA9PSBzZXNzaW9uX2lkKVxuICAgICAgICAub3JkZXJfYnkoQ2hhdEhpc3RvcnkuY3JlYXRlZF9hdC5kZXNjKCkpXG4gICAgICAgIC5saW1pdChsaW1pdClcbiAgICApXG4gICAgXG4gICAgY2hhdF9oaXN0b3JpZXMgPSBkYi5leGVjKHN0YXRlbWVudCkuYWxsKClcbiAgICBcbiAgICAjIEZvcm1hdCBmb3IgTGFuZ0NoYWluXG4gICAgbWVzc2FnZXMgPSBbXVxuICAgIGZvciBjaGF0IGluIHJldmVyc2VkKGNoYXRfaGlzdG9yaWVzKTogICMgUmV2ZXJzZSB0byBnZXQgY2hyb25vbG9naWNhbCBvcmRlclxuICAgICAgICBtZXNzYWdlcy5leHRlbmQoW1xuICAgICAgICAgICAge1wicm9sZVwiOiBcImh1bWFuXCIsIFwiY29udGVudFwiOiBjaGF0LnVzZXJfcXVlcnl9LFxuICAgICAgICAgICAge1wicm9sZVwiOiBcImFpXCIsIFwiY29udGVudFwiOiBjaGF0LmFpX3Jlc3BvbnNlfVxuICAgICAgICBdKVxuICAgIFxuICAgIHJldHVybiBtZXNzYWdlc1xuXG5cbmRlZiBnZXRfY2hpbGRfaW5mbyhkYjogU2Vzc2lvbiwgY2hpbGRfaWQ6IHV1aWQuVVVJRCkgLT4gT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dOlxuICAgIFwiXCJcIlxuICAgIEdldCBjaGlsZCBpbmZvcm1hdGlvbi5cbiAgICBcbiAgICBBcmdzOlxuICAgICAgICBkYjogRGF0YWJhc2Ugc2Vzc2lvblxuICAgICAgICBjaGlsZF9pZDogQ2hpbGQgSURcbiAgICAgICAgXG4gICAgUmV0dXJuczpcbiAgICAgICAgRGljdGlvbmFyeSB3aXRoIGNoaWxkIGluZm9ybWF0aW9uIG9yIE5vbmUgaWYgbm90IGZvdW5kXG4gICAgXCJcIlwiXG4gICAgIyBRdWVyeSBjaGlsZFxuICAgIGNoaWxkID0gZGIuZ2V0KENoaWxkLCBjaGlsZF9pZClcbiAgICBpZiBub3QgY2hpbGQ6XG4gICAgICAgIHJldHVybiBOb25lXG4gICAgXG4gICAgIyBDYWxjdWxhdGUgYWdlXG4gICAgZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWVcbiAgICB0b2RheSA9IGRhdGV0aW1lLm5vdygpLmRhdGUoKVxuICAgIGFnZV9kYXlzID0gKHRvZGF5IC0gY2hpbGQuYmlydGhkYXkpLmRheXNcbiAgICBhZ2VfbW9udGhzID0gYWdlX2RheXMgLy8gMzBcbiAgICBhZ2VfeWVhcnMgPSBhZ2VfZGF5cyAvLyAzNjVcbiAgICBcbiAgICAjIEZvcm1hdCBjaGlsZCBpbmZvXG4gICAgY2hpbGRfaW5mbyA9IHtcbiAgICAgICAgXCJuYW1lXCI6IGNoaWxkLm5hbWUsXG4gICAgICAgIFwiZ2VuZGVyXCI6IGNoaWxkLmdlbmRlcixcbiAgICAgICAgXCJiaXJ0aGRheVwiOiBjaGlsZC5iaXJ0aGRheS5pc29mb3JtYXQoKSxcbiAgICAgICAgXCJhZ2VfZGF5c1wiOiBhZ2VfZGF5cyxcbiAgICAgICAgXCJhZ2VfbW9udGhzXCI6IGFnZV9tb250aHMsXG4gICAgICAgIFwiYWdlX3llYXJzXCI6IGFnZV95ZWFyc1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gY2hpbGRfaW5mb1xuLi4uXG5QYXRoOiBiYWNrZW5kL2FwcC9tb2RlbHMucHlcbi4uLlxuXG5cbmNsYXNzIENoYXRIaXN0b3J5KENoYXRIaXN0b3J5QmFzZSwgdGFibGU9VHJ1ZSk6XG4gICAgaWQ6IHV1aWQuVVVJRCA9IEZpZWxkKGRlZmF1bHRfZmFjdG9yeT11dWlkLnV1aWQ0LCBwcmltYXJ5X2tleT1UcnVlKVxuICAgIHVzZXJfaWQ6IHV1aWQuVVVJRCA9IEZpZWxkKGZvcmVpZ25fa2V5PVwidXNlci5pZFwiKVxuICAgIHVzZXI6IFVzZXIgPSBSZWxhdGlvbnNoaXAoYmFja19wb3B1bGF0ZXM9XCJjaGF0X2hpc3Rvcmllc1wiKVxuICAgIGNoaWxkX2lkOiB1dWlkLlVVSUQgfCBOb25lID0gRmllbGQoZGVmYXVsdD1Ob25lLCBmb3JlaWduX2tleT1cImNoaWxkLmlkXCIpXG4gICAgY2hpbGQ6IENoaWxkIHwgTm9uZSA9IFJlbGF0aW9uc2hpcChiYWNrX3BvcHVsYXRlcz1cImNoYXRfaGlzdG9yaWVzXCIpXG4gICAgY3JlYXRlZF9hdDogZGF0ZXRpbWUgPSBGaWVsZChkZWZhdWx0X2ZhY3Rvcnk9ZGF0ZXRpbWUudXRjbm93KVxuICAgIHNvdXJjZXM6IExpc3Rbc3RyXSB8IE5vbmUgPSBGaWVsZChkZWZhdWx0PU5vbmUsIHNhX3R5cGU9SlNPTikgICMgUmVmZXJlbmNlcyB0byBzb3VyY2UgZG9jdW1lbnRzXG5cblxuY2xhc3MgQ2hhdEhpc3RvcnlQdWJsaWMoQ2hhdEhpc3RvcnlCYXNlKTpcbiAgICBpZDogdXVpZC5VVUlEXG4gICAgdXNlcl9pZDogdXVpZC5VVUlEXG4gICAgY2hpbGRfaWQ6IHV1aWQuVVVJRCB8IE5vbmUgPSBOb25lXG4gICAgY3JlYXRlZF9hdDogZGF0ZXRpbWVcbiAgICBzb3VyY2VzOiBMaXN0W3N0cl0gfCBOb25lID0gTm9uZVxuLi4uXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDExelRXMVBtTEJNbWN3UG1hc01hZWZVIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjYyNmY0Y2QyLTM5YTgtNDZkOS04YzQzLWJjNmNkNzQ0MDliZiIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVV1Yk53RjlzN1dIVEV4dXJIalJKV3QiLCJ0b29sX25hbWUiOiJsYXVuY2gtcHJvY2VzcyIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwiY3VybCAtWCBQT1NUIFxcXCJodHRwOi8vbG9jYWxob3N0OjgwMDAvYXBpL3YxL2xvZ2luL3JlZ2lzdGVyXFxcIiAtSCBcXFwiQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXFxcIiAtZCAne1xcXCJlbWFpbFxcXCI6XFxcInRlc3RAZXhhbXBsZS5jb21cXFwiLCBcXFwicGFzc3dvcmRcXFwiOlxcXCJ0ZXN0cGFzc3dvcmQxMjNcXFwiLCBcXFwiZnVsbF9uYW1lXFxcIjpcXFwiVGVzdCBVc2VyXFxcIn0nXCIsIFwid2FpdFwiOiB0cnVlfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIyMjIDMuIOa1i+ivleiBiuWkqeaOpeWPo1xuXG7njrDlnKjmiJHku6zlt7Lnu4/kuobop6Pkuobpobnnm67nmoTogYrlpKnmjqXlj6Plrp7njrDvvIzorqnmiJHku6zmtYvor5XkuIDkuIvogYrlpKnlip/og73jgILpppblhYjvvIzmiJHku6zpnIDopoHms6jlhozkuIDkuKrnlKjmiLflubbojrflj5borr/pl67ku6TniYzjgIJcblxuIyMjIyAzLjEg5rOo5YaM55So5oi35bm26I635Y+W6K6/6Zeu5Luk54mMXG5cbuiuqeaIkeS7rOS9v+eUqCBjdXJsIOWRveS7pOadpeazqOWGjOS4gOS4queUqOaIt+W5tuiOt+WPluiuv+mXruS7pOeJjO+8mlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogYmFja2VuZC9hcHAvbW9kZWxzLnB5XG5pbXBvcnQgdXVpZFxuZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUsIGRhdGVcbmZyb20gdHlwaW5nIGltcG9ydCBMaXN0LCBEaWN0LCBBbnlcblxuZnJvbSBweWRhbnRpYyBpbXBvcnQgRW1haWxTdHJcbmZyb20gc3FsbW9kZWwgaW1wb3J0IEZpZWxkLCBSZWxhdGlvbnNoaXAsIFNRTE1vZGVsLCBKU09OXG5cblxuIyBTaGFyZWQgcHJvcGVydGllc1xuY2xhc3MgVXNlckJhc2UoU1FMTW9kZWwpOlxuICAgIGVtYWlsOiBFbWFpbFN0ciA9IEZpZWxkKHVuaXF1ZT1UcnVlLCBpbmRleD1UcnVlLCBtYXhfbGVuZ3RoPTI1NSlcbiAgICBpc19hY3RpdmU6IGJvb2wgPSBUcnVlXG4gICAgaXNfc3VwZXJ1c2VyOiBib29sID0gRmFsc2VcbiAgICBmdWxsX25hbWU6IHN0ciB8IE5vbmUgPSBGaWVsZChkZWZhdWx0PU5vbmUsIG1heF9sZW5ndGg9MjU1KVxuXG5cbiMgUHJvcGVydGllcyB0byByZWNlaXZlIHZpYSBBUEkgb24gY3JlYXRpb25cbmNsYXNzIFVzZXJDcmVhdGUoVXNlckJhc2UpOlxuICAgIHBhc3N3b3JkOiBzdHIgPSBGaWVsZChtaW5fbGVuZ3RoPTgsIG1heF9sZW5ndGg9NDApXG5cblxuY2xhc3MgVXNlclJlZ2lzdGVyKFNRTE1vZGVsKTpcbiAgICBlbWFpbDogRW1haWxTdHIgPSBGaWVsZChtYXhfbGVuZ3RoPTI1NSlcbiAgICBwYXNzd29yZDogc3RyID0gRmllbGQobWluX2xlbmd0aD04LCBtYXhfbGVuZ3RoPTQwKVxuICAgIGZ1bGxfbmFtZTogc3RyIHwgTm9uZSA9IEZpZWxkKGRlZmF1bHQ9Tm9uZSwgbWF4X2xlbmd0aD0yNTUpXG4uLi5cblxuXG4jIERhdGFiYXNlIG1vZGVsLCBkYXRhYmFzZSB0YWJsZSBpbmZlcnJlZCBmcm9tIGNsYXNzIG5hbWVcbmNsYXNzIFVzZXIoVXNlckJhc2UsIHRhYmxlPVRydWUpOlxuICAgIGlkOiB1dWlkLlVVSUQgPSBGaWVsZChkZWZhdWx0X2ZhY3Rvcnk9dXVpZC51dWlkNCwgcHJpbWFyeV9rZXk9VHJ1ZSlcbiAgICBoYXNoZWRfcGFzc3dvcmQ6IHN0clxuICAgIGl0ZW1zOiBsaXN0W1wiSXRlbVwiXSA9IFJlbGF0aW9uc2hpcChiYWNrX3BvcHVsYXRlcz1cIm93bmVyXCIsIGNhc2NhZGVfZGVsZXRlPVRydWUpXG4gICAgY2hpbGRyZW46IGxpc3RbXCJDaGlsZFwiXSA9IFJlbGF0aW9uc2hpcChiYWNrX3BvcHVsYXRlcz1cInBhcmVudFwiLCBjYXNjYWRlX2RlbGV0ZT1UcnVlKVxuICAgIGNoYXRfaGlzdG9yaWVzOiBsaXN0W1wiQ2hhdEhpc3RvcnlcIl0gPSBSZWxhdGlvbnNoaXAoYmFja19wb3B1bGF0ZXM9XCJ1c2VyXCIsIGNhc2NhZGVfZGVsZXRlPVRydWUpXG5cblxuIyBQcm9wZXJ0aWVzIHRvIHJldHVybiB2aWEgQVBJLCBpZCBpcyBhbHdheXMgcmVxdWlyZWRcbmNsYXNzIFVzZXJQdWJsaWMoVXNlckJhc2UpOlxuICAgIGlkOiB1dWlkLlVVSURcblxuXG5jbGFzcyBVc2Vyc1B1YmxpYyhTUUxNb2RlbCk6XG4gICAgZGF0YTogbGlzdFtVc2VyUHVibGljXVxuICAgIGNvdW50OiBpbnRcblxuXG4jIFNoYXJlZCBwcm9wZXJ0aWVzXG5jbGFzcyBJdGVtQmFzZShTUUxNb2RlbCk6XG4gICAgdGl0bGU6IHN0ciA9IEZpZWxkKG1pbl9sZW5ndGg9MSwgbWF4X2xlbmd0aD0yNTUpXG4gICAgZGVzY3JpcHRpb246IHN0ciB8IE5vbmUgPSBGaWVsZChkZWZhdWx0PU5vbmUsIG1heF9sZW5ndGg9MjU1KVxuLi4uXG5cblxuY2xhc3MgQ2hpbGQoQ2hpbGRCYXNlLCB0YWJsZT1UcnVlKTpcbiAgICBpZDogdXVpZC5VVUlEID0gRmllbGQoZGVmYXVsdF9mYWN0b3J5PXV1aWQudXVpZDQsIHByaW1hcnlfa2V5PVRydWUpXG4gICAgcGFyZW50X2lkOiB1dWlkLlVVSUQgPSBGaWVsZChmb3JlaWduX2tleT1cInVzZXIuaWRcIilcbiAgICBwYXJlbnQ6IFVzZXIgPSBSZWxhdGlvbnNoaXAoYmFja19wb3B1bGF0ZXM9XCJjaGlsZHJlblwiKVxuICAgIGNyZWF0ZWRfYXQ6IGRhdGV0aW1lID0gRmllbGQoZGVmYXVsdF9mYWN0b3J5PWRhdGV0aW1lLnV0Y25vdylcbiAgICB1cGRhdGVkX2F0OiBkYXRldGltZSA9IEZpZWxkKGRlZmF1bHRfZmFjdG9yeT1kYXRldGltZS51dGNub3cpXG4gICAgZ3Jvd3RoX3JlY29yZHM6IGxpc3RbXCJHcm93dGhSZWNvcmRcIl0gPSBSZWxhdGlvbnNoaXAoYmFja19wb3B1bGF0ZXM9XCJjaGlsZFwiLCBjYXNjYWRlX2RlbGV0ZT1UcnVlKVxuICAgIGNoYXRfaGlzdG9yaWVzOiBsaXN0W1wiQ2hhdEhpc3RvcnlcIl0gPSBSZWxhdGlvbnNoaXAoYmFja19wb3B1bGF0ZXM9XCJjaGlsZFwiLCBjYXNjYWRlX2RlbGV0ZT1UcnVlKVxuXG5cbmNsYXNzIENoaWxkUHVibGljKENoaWxkQmFzZSk6XG4gICAgaWQ6IHV1aWQuVVVJRFxuICAgIHBhcmVudF9pZDogdXVpZC5VVUlEXG4gICAgY3JlYXRlZF9hdDogZGF0ZXRpbWVcbiAgICB1cGRhdGVkX2F0OiBkYXRldGltZVxuXG5cbmNsYXNzIENoaWxkcmVuUHVibGljKFNRTE1vZGVsKTpcbiAgICBkYXRhOiBsaXN0W0NoaWxkUHVibGljXVxuICAgIGNvdW50OiBpbnRcbi4uLlxuXG5cbmNsYXNzIERvY3VtZW50KERvY3VtZW50QmFzZSwgdGFibGU9VHJ1ZSk6XG4gICAgaWQ6IHV1aWQuVVVJRCA9IEZpZWxkKGRlZmF1bHRfZmFjdG9yeT11dWlkLnV1aWQ0LCBwcmltYXJ5X2tleT1UcnVlKVxuICAgIGZpbGVuYW1lOiBzdHIgPSBGaWVsZChtYXhfbGVuZ3RoPTI1NSlcbiAgICB1cGxvYWRfdGltZXN0YW1wOiBkYXRldGltZSA9IEZpZWxkKGRlZmF1bHRfZmFjdG9yeT1kYXRldGltZS51dGNub3cpXG4gICAgZG9jX21ldGFkYXRhOiBEaWN0W3N0ciwgQW55XSB8IE5vbmUgPSBGaWVsZChkZWZhdWx0PU5vbmUsIHNhX3R5cGU9SlNPTilcblxuXG5jbGFzcyBEb2N1bWVudFB1YmxpYyhEb2N1bWVudEJhc2UpOlxuICAgIGlkOiB1dWlkLlVVSURcbiAgICBmaWxlbmFtZTogc3RyXG4gICAgdXBsb2FkX3RpbWVzdGFtcDogZGF0ZXRpbWVcbiAgICBkb2NfbWV0YWRhdGE6IERpY3Rbc3RyLCBBbnldIHwgTm9uZSA9IE5vbmVcblxuXG5jbGFzcyBEb2N1bWVudHNQdWJsaWMoU1FMTW9kZWwpOlxuICAgIGRhdGE6IGxpc3RbRG9jdW1lbnRQdWJsaWNdXG4gICAgY291bnQ6IGludFxuXG5cbiMgQ2hhdCBoaXN0b3J5IG1vZGVsc1xuY2xhc3MgQ2hhdEhpc3RvcnlCYXNlKFNRTE1vZGVsKTpcbiAgICBzZXNzaW9uX2lkOiBzdHIgPSBGaWVsZChtYXhfbGVuZ3RoPTUwKVxuICAgIHVzZXJfcXVlcnk6IHN0clxuICAgIGFpX3Jlc3BvbnNlOiBzdHJcbiAgICBtb2RlbDogc3RyID0gRmllbGQobWF4X2xlbmd0aD01MClcblxuXG5jbGFzcyBDaGF0SGlzdG9yeUNyZWF0ZShDaGF0SGlzdG9yeUJhc2UpOlxuICAgIHVzZXJfaWQ6IHV1aWQuVVVJRFxuICAgIGNoaWxkX2lkOiB1dWlkLlVVSUQgfCBOb25lID0gTm9uZVxuXG5cbmNsYXNzIENoYXRIaXN0b3J5KENoYXRIaXN0b3J5QmFzZSwgdGFibGU9VHJ1ZSk6XG4gICAgaWQ6IHV1aWQuVVVJRCA9IEZpZWxkKGRlZmF1bHRfZmFjdG9yeT11dWlkLnV1aWQ0LCBwcmltYXJ5X2tleT1UcnVlKVxuICAgIHVzZXJfaWQ6IHV1aWQuVVVJRCA9IEZpZWxkKGZvcmVpZ25fa2V5PVwidXNlci5pZFwiKVxuICAgIHVzZXI6IFVzZXIgPSBSZWxhdGlvbnNoaXAoYmFja19wb3B1bGF0ZXM9XCJjaGF0X2hpc3Rvcmllc1wiKVxuICAgIGNoaWxkX2lkOiB1dWlkLlVVSUQgfCBOb25lID0gRmllbGQoZGVmYXVsdD1Ob25lLCBmb3JlaWduX2tleT1cImNoaWxkLmlkXCIpXG4gICAgY2hpbGQ6IENoaWxkIHwgTm9uZSA9IFJlbGF0aW9uc2hpcChiYWNrX3BvcHVsYXRlcz1cImNoYXRfaGlzdG9yaWVzXCIpXG4gICAgY3JlYXRlZF9hdDogZGF0ZXRpbWUgPSBGaWVsZChkZWZhdWx0X2ZhY3Rvcnk9ZGF0ZXRpbWUudXRjbm93KVxuICAgIHNvdXJjZXM6IExpc3Rbc3RyXSB8IE5vbmUgPSBGaWVsZChkZWZhdWx0PU5vbmUsIHNhX3R5cGU9SlNPTikgICMgUmVmZXJlbmNlcyB0byBzb3VyY2UgZG9jdW1lbnRzXG5cblxuY2xhc3MgQ2hhdEhpc3RvcnlQdWJsaWMoQ2hhdEhpc3RvcnlCYXNlKTpcbiAgICBpZDogdXVpZC5VVUlEXG4gICAgdXNlcl9pZDogdXVpZC5VVUlEXG4gICAgY2hpbGRfaWQ6IHV1aWQuVVVJRCB8IE5vbmUgPSBOb25lXG4gICAgY3JlYXRlZF9hdDogZGF0ZXRpbWVcbiAgICBzb3VyY2VzOiBMaXN0W3N0cl0gfCBOb25lID0gTm9uZVxuXG5cbmNsYXNzIENoYXRIaXN0b3JpZXNQdWJsaWMoU1FMTW9kZWwpOlxuICAgIGRhdGE6IGxpc3RbQ2hhdEhpc3RvcnlQdWJsaWNdXG4gICAgY291bnQ6IGludFxuXG5cbiMgQ2hhdCByZXF1ZXN0L3Jlc3BvbnNlIG1vZGVsc1xuY2xhc3MgQ2hhdFJlcXVlc3QoU1FMTW9kZWwpOlxuICAgIHF1ZXN0aW9uOiBzdHJcbiAgICBzZXNzaW9uX2lkOiBzdHIgfCBOb25lID0gTm9uZVxuICAgIGNoaWxkX2lkOiB1dWlkLlVVSUQgfCBOb25lID0gTm9uZVxuICAgIG1vZGVsOiBzdHIgPSBGaWVsZChkZWZhdWx0PVwib3BlbmFpL2dwdC00by1taW5pXCIsIG1heF9sZW5ndGg9MTAwKVxuXG5cbmNsYXNzIENoYXRSZXNwb25zZShTUUxNb2RlbCk6XG4gICAgYW5zd2VyOiBzdHJcbiAgICBzZXNzaW9uX2lkOiBzdHJcbiAgICBzb3VyY2VzOiBMaXN0W0RpY3Rbc3RyLCBBbnldXSB8IE5vbmUgPSBOb25lXG5cblxuIyBHZW5lcmljIG1lc3NhZ2VcbmNsYXNzIE1lc3NhZ2UoU1FMTW9kZWwpOlxuICAgIG1lc3NhZ2U6IHN0clxuXG5cbiMgSlNPTiBwYXlsb2FkIGNvbnRhaW5pbmcgYWNjZXNzIHRva2VuXG5jbGFzcyBUb2tlbihTUUxNb2RlbCk6XG4gICAgYWNjZXNzX3Rva2VuOiBzdHJcbiAgICB0b2tlbl90eXBlOiBzdHIgPSBcImJlYXJlclwiXG5cblxuIyBDb250ZW50cyBvZiBKV1QgdG9rZW5cbmNsYXNzIFRva2VuUGF5bG9hZChTUUxNb2RlbCk6XG4gICAgc3ViOiBzdHIgfCBOb25lID0gTm9uZVxuXG5cbmNsYXNzIE5ld1Bhc3N3b3JkKFNRTE1vZGVsKTpcbiAgICB0b2tlbjogc3RyXG4gICAgbmV3X3Bhc3N3b3JkOiBzdHIgPSBGaWVsZChtaW5fbGVuZ3RoPTgsIG1heF9sZW5ndGg9NDApXG4uLi5cblBhdGg6IGJhY2tlbmQvYXBwL2FwaS9yb3V0ZXMvY2hhdC5weVxuXCJcIlwiXG5BUEkgcm91dGVzIGZvciBjaGF0IGZ1bmN0aW9uYWxpdHkuXG5cIlwiXCJcbmZyb20gdHlwaW5nIGltcG9ydCBBbnksIExpc3QsIERpY3RcbmltcG9ydCB1dWlkXG5pbXBvcnQgaHR0cHhcblxuZnJvbSBmYXN0YXBpIGltcG9ydCBBUElSb3V0ZXIsIERlcGVuZHMsIEhUVFBFeGNlcHRpb24sIFF1ZXJ5XG5mcm9tIHNxbG1vZGVsIGltcG9ydCBTZXNzaW9uLCBzZWxlY3RcbmZyb20gcHlkYW50aWMgaW1wb3J0IEJhc2VNb2RlbFxuXG5mcm9tIGFwcC5hcGkuZGVwcyBpbXBvcnQgZ2V0X2N1cnJlbnRfYWN0aXZlX3VzZXIsIGdldF9kYlxuZnJvbSBhcHAubW9kZWxzIGltcG9ydCAoXG4gICAgVXNlciwgQ2hpbGQsIENoYXRSZXF1ZXN0LCBDaGF0UmVzcG9uc2UsIENoYXRIaXN0b3J5LCBDaGF0SGlzdG9yaWVzUHVibGljXG4pXG5mcm9tIGFwcC5yYWcucmFnX2NoYWluIGltcG9ydCBnZW5lcmF0ZV9yZXNwb25zZVxuZnJvbSBhcHAucmFnLmNoYXRfaGlzdG9yeSBpbXBvcnQgc2F2ZV9jaGF0X2ludGVyYWN0aW9uLCBnZXRfY2hhdF9oaXN0b3J5LCBnZXRfY2hpbGRfaW5mb1xuZnJvbSBhcHAuY29yZS5jb25maWcgaW1wb3J0IHNldHRpbmdzXG5cblxuY2xhc3MgTW9kZWxJbmZvKEJhc2VNb2RlbCk6XG4gICAgaWQ6IHN0clxuICAgIG5hbWU6IHN0clxuICAgIHByb3ZpZGVyOiBzdHJcbiAgICBkZXNjcmlwdGlvbjogc3RyID0gXCJcIlxuXG5cbmNsYXNzIE1vZGVsc1Jlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgbW9kZWxzOiBMaXN0W01vZGVsSW5mb11cblxucm91dGVyID0gQVBJUm91dGVyKClcblxuXG5Acm91dGVyLnBvc3QoXCIvXCIsIHJlc3BvbnNlX21vZGVsPUNoYXRSZXNwb25zZSlcbmFzeW5jIGRlZiBjaGF0KFxuICAgICosXG4gICAgZGI6IFNlc3Npb24gPSBEZXBlbmRzKGdldF9kYiksXG4gICAgY2hhdF9yZXF1ZXN0OiBDaGF0UmVxdWVzdCxcbiAgICBjdXJyZW50X3VzZXI6IFVzZXIgPSBEZXBlbmRzKGdldF9jdXJyZW50X2FjdGl2ZV91c2VyKSxcbikgLT4gQW55OlxuICAgIFwiXCJcIlxuICAgIENoYXQgd2l0aCB0aGUgQUkgYXNzaXN0YW50LlxuICAgIFwiXCJcIlxuICAgICMgR2VuZXJhdGUgc2Vzc2lvbiBJRCBpZiBub3QgcHJvdmlkZWRcbiAgICBzZXNzaW9uX2lkID0gY2hhdF9yZXF1ZXN0LnNlc3Npb25faWQgb3Igc3RyKHV1aWQudXVpZDQoKSlcblxuICAgICMgR2V0IGNoaWxkIGluZm8gaWYgY2hpbGRfaWQgaXMgcHJvdmlkZWRcbiAgICBjaGlsZF9pbmZvID0gTm9uZVxuICAgIGlmIGNoYXRfcmVxdWVzdC5jaGlsZF9pZDpcbiAgICAgICAgIyBDaGVjayBpZiBjaGlsZCBleGlzdHMgYW5kIGJlbG9uZ3MgdG8gY3VycmVudCB1c2VyXG4gICAgICAgIGNoaWxkID0gZGIuZ2V0KENoaWxkLCBjaGF0X3JlcXVlc3QuY2hpbGRfaWQpXG4gICAgICAgIGlmIG5vdCBjaGlsZDpcbiAgICAgICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDA0LCBkZXRhaWw9XCJDaGlsZCBub3QgZm91bmRcIilcbiAgICAgICAgaWYgY2hpbGQucGFyZW50X2lkICE9IGN1cnJlbnRfdXNlci5pZDpcbiAgICAgICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDAzLCBkZXRhaWw9XCJOb3QgZW5vdWdoIHBlcm1pc3Npb25zXCIpXG5cbiAgICAgICAgIyBHZXQgY2hpbGQgaW5mb1xuICAgICAgICBjaGlsZF9pbmZvID0gZ2V0X2NoaWxkX2luZm8oZGIsIGNoYXRfcmVxdWVzdC5jaGlsZF9pZClcblxuICAgICMgR2V0IGNoYXQgaGlzdG9yeVxuICAgIGNoYXRfaGlzdG9yeSA9IGdldF9jaGF0X2hpc3RvcnkoZGIsIHNlc3Npb25faWQpXG5cbiAgICAjIEdlbmVyYXRlIHJlc3BvbnNlXG4gICAgdHJ5OlxuICAgICAgICByZXN1bHQgPSBhd2FpdCBnZW5lcmF0ZV9yZXNwb25zZShcbiAgICAgICAgICAgIHF1ZXN0aW9uPWNoYXRfcmVxdWVzdC5xdWVzdGlvbixcbiAgICAgICAgICAgIGNoYXRfaGlzdG9yeT1jaGF0X2hpc3RvcnksXG4gICAgICAgICAgICBzZXNzaW9uX2lkPXNlc3Npb25faWQsXG4gICAgICAgICAgICBjaGlsZF9pbmZvPWNoaWxkX2luZm8sXG4gICAgICAgICAgICBtb2RlbF9uYW1lPWNoYXRfcmVxdWVzdC5tb2RlbFxuICAgICAgICApXG5cbiAgICAgICAgIyBTYXZlIGNoYXQgaW50ZXJhY3Rpb25cbiAgICAgICAgc2F2ZV9jaGF0X2ludGVyYWN0aW9uKFxuICAgICAgICAgICAgZGI9ZGIsXG4gICAgICAgICAgICB1c2VyX2lkPWN1cnJlbnRfdXNlci5pZCxcbiAgICAgICAgICAgIHNlc3Npb25faWQ9c2Vzc2lvbl9pZCxcbiAgICAgICAgICAgIHVzZXJfcXVlcnk9Y2hhdF9yZXF1ZXN0LnF1ZXN0aW9uLFxuICAgICAgICAgICAgYWlfcmVzcG9uc2U9cmVzdWx0W1wiYW5zd2VyXCJdLFxuICAgICAgICAgICAgbW9kZWw9Y2hhdF9yZXF1ZXN0Lm1vZGVsLFxuICAgICAgICAgICAgY2hpbGRfaWQ9Y2hhdF9yZXF1ZXN0LmNoaWxkX2lkLFxuICAgICAgICAgICAgc291cmNlcz1yZXN1bHQuZ2V0KFwic291cmNlc1wiKVxuICAgICAgICApXG5cbiAgICAgICAgcmV0dXJuIENoYXRSZXNwb25zZShcbiAgICAgICAgICAgIGFuc3dlcj1yZXN1bHRbXCJhbnN3ZXJcIl0sXG4gICAgICAgICAgICBzZXNzaW9uX2lkPXNlc3Npb25faWQsXG4gICAgICAgICAgICBzb3VyY2VzPXJlc3VsdC5nZXQoXCJzb3VyY2VzXCIpXG4gICAgICAgIClcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9c3RyKGUpKVxuLi4uXG5cblxuQHJvdXRlci5nZXQoXCIvbW9kZWxzXCIsIHJlc3BvbnNlX21vZGVsPU1vZGVsc1Jlc3BvbnNlKVxuYXN5bmMgZGVmIGdldF9hdmFpbGFibGVfbW9kZWxzKFxuICAgICosXG4gICAgY3VycmVudF91c2VyOiBVc2VyID0gRGVwZW5kcyhnZXRfY3VycmVudF9hY3RpdmVfdXNlciksXG4pIC0+IEFueTpcbiAgICBcIlwiXCJcbiAgICBHZXQgYXZhaWxhYmxlIG1vZGVscyBmcm9tIE9wZW5Sb3V0ZXIuXG4gICAgXCJcIlwiXG4gICAgdHJ5OlxuICAgICAgICAjIERlZmluZSBhIGxpc3Qgb2YgcmVjb21tZW5kZWQgbW9kZWxzIGZvciBwYXJlbnRpbmcgYXNzaXN0YW50XG4gICAgICAgIHJlY29tbWVuZGVkX21vZGVscyA9IFtcbiAgICAgICAgICAgIE1vZGVsSW5mbyhcbiAgICAgICAgICAgICAgICBpZD1cIm9wZW5haS9ncHQtNG8tbWluaVwiLFxuICAgICAgICAgICAgICAgIG5hbWU9XCJHUFQtNG8gTWluaVwiLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyPVwiT3BlbkFJXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb249XCJTbWFsbGVyLCBmYXN0ZXIsIGFuZCBtb3JlIGFmZm9yZGFibGUgdmVyc2lvbiBvZiBHUFQtNG9cIlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIE1vZGVsSW5mbyhcbiAgICAgICAgICAgICAgICBpZD1cImFudGhyb3BpYy9jbGF1ZGUtMy1vcHVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZT1cIkNsYXVkZSAzIE9wdXNcIixcbiAgICAgICAgICAgICAgICBwcm92aWRlcj1cIkFudGhyb3BpY1wiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwiQW50aHJvcGljJ3MgbW9zdCBwb3dlcmZ1bCBtb2RlbCBmb3IgY29tcGxleCB0YXNrc1wiXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgTW9kZWxJbmZvKFxuICAgICAgICAgICAgICAgIGlkPVwiYW50aHJvcGljL2NsYXVkZS0zLXNvbm5ldFwiLFxuICAgICAgICAgICAgICAgIG5hbWU9XCJDbGF1ZGUgMyBTb25uZXRcIixcbiAgICAgICAgICAgICAgICBwcm92aWRlcj1cIkFudGhyb3BpY1wiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwiQmFsYW5jZWQgbW9kZWwgZm9yIG1vc3QgdGFza3NcIlxuICAgICAgICAgICAgKSxcbi4uLlxuUGF0aDogZG9jL3VwZGF0ZWQtYXJjaGl0ZWN0dXJlLWRvY3VtZW50Lm1kXG4uLi5cblxuLS0g5YS/56ul5L+h5oGv6KGoXG5DUkVBVEUgVEFCTEUgY2hpbGRyZW4gKFxuICAgIGlkIFVVSUQgUFJJTUFSWSBLRVksXG4gICAgcGFyZW50X2lkIFVVSUQgUkVGRVJFTkNFUyB1c2VycyhpZCksXG4gICAgbmFtZSBWQVJDSEFSKDUwKSxcbiAgICBiaXJ0aGRheSBEQVRFLFxuICAgIGdlbmRlciBWQVJDSEFSKDEwKSxcbiAgICBjcmVhdGVkX2F0IFRJTUVTVEFNUCxcbiAgICB1cGRhdGVkX2F0IFRJTUVTVEFNUFxuKTtcblxuLS0g5oiQ6ZW/6K6w5b2V6KGoXG5DUkVBVEUgVEFCTEUgZ3Jvd3RoX3JlY29yZHMgKFxuICAgIGlkIFVVSUQgUFJJTUFSWSBLRVksXG4gICAgY2hpbGRfaWQgVVVJRCBSRUZFUkVOQ0VTIGNoaWxkcmVuKGlkKSxcbiAgICByZWNvcmRfdHlwZSBWQVJDSEFSKDIwKSxcbiAgICByZWNvcmRfZGF0YSBKU09OQixcbiAgICByZWNvcmRlZF9hdCBUSU1FU1RBTVAsXG4gICAgbm90ZXMgVEVYVCxcbiAgICBhdHRhY2htZW50cyBKU09OQixcbiAgICBjcmVhdGVkX2F0IFRJTUVTVEFNUFxuKTtcblxuLS0g6IGK5aSp5Y6G5Y+y6KGoXG5DUkVBVEUgVEFCTEUgY2hhdF9oaXN0b3J5IChcbiAgICBpZCBVVUlEIFBSSU1BUlkgS0VZLFxuICAgIHVzZXJfaWQgVVVJRCBSRUZFUkVOQ0VTIHVzZXJzKGlkKSxcbiAgICBjaGlsZF9pZCBVVUlEIFJFRkVSRU5DRVMgY2hpbGRyZW4oaWQpLFxuICAgIHNlc3Npb25faWQgVkFSQ0hBUig1MCksXG4gICAgdXNlcl9xdWVyeSBURVhULFxuICAgIGFpX3Jlc3BvbnNlIFRFWFQsXG4gICAgbW9kZWwgVkFSQ0hBUig1MCksXG4gICAgY3JlYXRlZF9hdCBUSU1FU1RBTVBcbik7XG4uLi5cblxuIyMjIDUuMiBGYXN0QVBJIOWunueOsFxuXG5gYGBweXRob25cbiMgbWFpbi5weVxuZnJvbSBmYXN0YXBpIGltcG9ydCBGYXN0QVBJLCBGaWxlLCBVcGxvYWRGaWxlLCBIVFRQRXhjZXB0aW9uLCBEZXBlbmRzXG5mcm9tIHB5ZGFudGljIGltcG9ydCBCYXNlTW9kZWwsIEZpZWxkXG5mcm9tIHR5cGluZyBpbXBvcnQgTGlzdCwgT3B0aW9uYWxcbmZyb20gdXVpZCBpbXBvcnQgVVVJRCwgdXVpZDRcbmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lXG5pbXBvcnQgb3NcbmltcG9ydCBzaHV0aWxcblxuYXBwID0gRmFzdEFQSSh0aXRsZT1cIkFJIOiCsuWEv+WKqeaJiyBBUElcIilcblxuIyDogYrlpKnor7fmsYLmqKHlnotcbmNsYXNzIENoYXRSZXF1ZXN0KEJhc2VNb2RlbCk6XG4gICAgcXVlc3Rpb246IHN0clxuICAgIHNlc3Npb25faWQ6IE9wdGlvbmFsW3N0cl0gPSBOb25lXG4gICAgY2hpbGRfaWQ6IE9wdGlvbmFsW1VVSURdID0gTm9uZVxuXG4jIOiBiuWkqeWTjeW6lOaooeWei1xuY2xhc3MgQ2hhdFJlc3BvbnNlKEJhc2VNb2RlbCk6XG4gICAgYW5zd2VyOiBzdHJcbiAgICBzZXNzaW9uX2lkOiBzdHJcbiAgICBzb3VyY2VzOiBMaXN0W2RpY3RdID0gW11cblxuIyDogYrlpKnnq6/ngrlcbkBhcHAucG9zdChcIi9hcGkvdjEvYWkvY2hhdFwiLCByZXNwb25zZV9tb2RlbD1DaGF0UmVzcG9uc2UpXG5hc3luYyBkZWYgY2hhdChyZXF1ZXN0OiBDaGF0UmVxdWVzdCk6XG4gICAgIyDnlJ/miJDkvJror51JRO+8iOWmguaenOacquaPkOS+m++8iVxuICAgIHNlc3Npb25faWQgPSByZXF1ZXN0LnNlc3Npb25faWQgb3Igc3RyKHV1aWQ0KCkpXG4gICAgXG4gICAgIyDojrflj5bogYrlpKnljoblj7JcbiAgICBjaGF0X2hpc3RvcnkgPSBnZXRfY2hhdF9oaXN0b3J5KHNlc3Npb25faWQpXG4gICAgXG4gICAgIyDojrflj5blhL/nq6Xkv6Hmga/vvIjlpoLmnpzmj5DkvpvkuoZjaGlsZF9pZO+8iVxuICAgIGNoaWxkX2luZm8gPSBOb25lXG4gICAgaWYgcmVxdWVzdC5jaGlsZF9pZDpcbiAgICAgICAgY2hpbGRfaW5mbyA9IGdldF9jaGlsZF9pbmZvKHJlcXVlc3QuY2hpbGRfaWQpXG4gICAgXG4gICAgIyDosIPnlKhSQUfns7vnu59cbiAgICByYWdfc3lzdGVtID0gZ2V0X3JhZ19zeXN0ZW0oKVxuICAgIHJlc3VsdCA9IHJhZ19zeXN0ZW0uYW5zd2VyX3F1ZXN0aW9uKFxuICAgICAgICBxdWVzdGlvbj1yZXF1ZXN0LnF1ZXN0aW9uLFxuICAgICAgICBjaGF0X2hpc3Rvcnk9Y2hhdF9oaXN0b3J5LFxuICAgICAgICBjaGlsZF9pbmZvPWNoaWxkX2luZm9cbiAgICApXG4gICAgXG4gICAgIyDorrDlvZXkuqTkupJcbiAgICBzYXZlX2NoYXRfaW50ZXJhY3Rpb24oXG4gICAgICAgIHNlc3Npb25faWQ9c2Vzc2lvbl9pZCxcbiAgICAgICAgdXNlcl9xdWVyeT1yZXF1ZXN0LnF1ZXN0aW9uLFxuICAgICAgICBhaV9yZXNwb25zZT1yZXN1bHRbXCJhbnN3ZXJcIl0sXG4gICAgICAgIGNoaWxkX2lkPXJlcXVlc3QuY2hpbGRfaWRcbiAgICApXG4uLi5cblBhdGg6IGJhY2tlbmQvYXBwL3JhZy9vcGVucm91dGVyX2NsaWVudC5weVxuXCJcIlwiXG5PcGVuUm91dGVyIGNsaWVudCBmb3IgTExNIGludGVncmF0aW9uLlxuXCJcIlwiXG5mcm9tIHR5cGluZyBpbXBvcnQgRGljdCwgTGlzdCwgQW55LCBPcHRpb25hbFxuaW1wb3J0IGpzb25cbmltcG9ydCBodHRweFxuZnJvbSBsYW5nY2hhaW5fY29yZS5sYW5ndWFnZV9tb2RlbHMuY2hhdF9tb2RlbHMgaW1wb3J0IEJhc2VDaGF0TW9kZWxcbmZyb20gbGFuZ2NoYWluX2NvcmUubWVzc2FnZXMgaW1wb3J0IChcbiAgICBBSU1lc3NhZ2UsXG4gICAgQmFzZU1lc3NhZ2UsXG4gICAgQ2hhdE1lc3NhZ2UsXG4gICAgSHVtYW5NZXNzYWdlLFxuICAgIFN5c3RlbU1lc3NhZ2UsXG4pXG5mcm9tIGxhbmdjaGFpbl9jb3JlLm91dHB1dHMgaW1wb3J0IENoYXRHZW5lcmF0aW9uLCBDaGF0UmVzdWx0XG5mcm9tIGxhbmdjaGFpbl9jb3JlLmNhbGxiYWNrcy5tYW5hZ2VyIGltcG9ydCBDYWxsYmFja01hbmFnZXJGb3JMTE1SdW5cblxuZnJvbSBhcHAuY29yZS5jb25maWcgaW1wb3J0IHNldHRpbmdzXG5cblxuY2xhc3MgT3BlblJvdXRlckNoYXRNb2RlbChCYXNlQ2hhdE1vZGVsKTpcbiAgICBcIlwiXCJDaGF0IG1vZGVsIHRoYXQgdXNlcyBPcGVuUm91dGVyIEFQSS5cIlwiXCJcbiAgICBcbiAgICBhcGlfa2V5OiBzdHJcbiAgICBiYXNlX3VybDogc3RyID0gXCJodHRwczovL29wZW5yb3V0ZXIuYWkvYXBpL3YxXCJcbiAgICBtb2RlbDogc3RyID0gXCJvcGVuYWkvZ3B0LTRvLW1pbmlcIlxuICAgIHRlbXBlcmF0dXJlOiBmbG9hdCA9IDAuN1xuICAgIG1heF90b2tlbnM6IE9wdGlvbmFsW2ludF0gPSBOb25lXG4gICAgdG9wX3A6IE9wdGlvbmFsW2Zsb2F0XSA9IE5vbmVcbi4uLlxuICAgICAgICBcbiAgICAgICAgdHJ5OlxuICAgICAgICAgICAgd2l0aCBodHRweC5DbGllbnQodGltZW91dD02MC4wKSBhcyBjbGllbnQ6XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBjbGllbnQucG9zdChcbiAgICAgICAgICAgICAgICAgICAgZlwie3NlbGYuYmFzZV91cmx9L2NoYXQvY29tcGxldGlvbnNcIixcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycz1oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBqc29uPXBheWxvYWQsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKVxuICAgICAgICAgICAgICAgIHJlc3BvbnNlX2RhdGEgPSByZXNwb25zZS5qc29uKClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAjIEV4dHJhY3QgdGhlIHJlc3BvbnNlIGNvbnRlbnRcbiAgICAgICAgICAgICAgICBtZXNzYWdlX2NvbnRlbnQgPSByZXNwb25zZV9kYXRhW1wiY2hvaWNlc1wiXVswXVtcIm1lc3NhZ2VcIl1bXCJjb250ZW50XCJdXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgIyBDcmVhdGUgYSBDaGF0R2VuZXJhdGlvbiBvYmplY3RcbiAgICAgICAgICAgICAgICBnZW5lcmF0aW9uID0gQ2hhdEdlbmVyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U9QUlNZXNzYWdlKGNvbnRlbnQ9bWVzc2FnZV9jb250ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGlvbl9pbmZvPXtcImZpbmlzaF9yZWFzb25cIjogcmVzcG9uc2VfZGF0YVtcImNob2ljZXNcIl1bMF0uZ2V0KFwiZmluaXNoX3JlYXNvblwiKX1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgIyBSZXR1cm4gdGhlIENoYXRSZXN1bHRcbiAgICAgICAgICAgICAgICByZXR1cm4gQ2hhdFJlc3VsdChnZW5lcmF0aW9ucz1bZ2VuZXJhdGlvbl0pXG4gICAgICAgIFxuICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKGZcIkVycm9yIGNhbGxpbmcgT3BlblJvdXRlciBBUEk6IHtzdHIoZSl9XCIpXG4gICAgXG4gICAgQHByb3BlcnR5XG4gICAgZGVmIF9sbG1fdHlwZShzZWxmKSAtPiBzdHI6XG4gICAgICAgIFwiXCJcIlJldHVybiB0aGUgdHlwZSBvZiBMTE0uXCJcIlwiXG4gICAgICAgIHJldHVybiBcIm9wZW5yb3V0ZXJcIlxuXG5cbmRlZiBnZXRfb3BlbnJvdXRlcl9jaGF0X21vZGVsKFxuICAgIG1vZGVsOiBzdHIgPSBOb25lLFxuICAgIHRlbXBlcmF0dXJlOiBmbG9hdCA9IDAuNyxcbiAgICBtYXhfdG9rZW5zOiBPcHRpb25hbFtpbnRdID0gTm9uZSxcbiAgICB0b3BfcDogT3B0aW9uYWxbZmxvYXRdID0gTm9uZSxcbikgLT4gT3BlblJvdXRlckNoYXRNb2RlbDpcbiAgICBcIlwiXCJcbiAgICBHZXQgYW4gT3BlblJvdXRlckNoYXRNb2RlbCBpbnN0YW5jZS5cbiAgICBcbiAgICBBcmdzOlxuICAgICAgICBtb2RlbDogTW9kZWwgbmFtZSAoZS5nLiwgXCJvcGVuYWkvZ3B0LTRvLW1pbmlcIiwgXCJhbnRocm9waWMvY2xhdWRlLTMtb3B1c1wiKVxuICAgICAgICB0ZW1wZXJhdHVyZTogVGVtcGVyYXR1cmUgZm9yIGdlbmVyYXRpb25cbiAgICAgICAgbWF4X3Rva2VuczogTWF4aW11bSB0b2tlbnMgdG8gZ2VuZXJhdGVcbiAgICAgICAgdG9wX3A6IFRvcC1wIHNhbXBsaW5nIHBhcmFtZXRlclxuICAgICAgICBcbiAgICBSZXR1cm5zOlxuICAgICAgICBPcGVuUm91dGVyQ2hhdE1vZGVsIGluc3RhbmNlXG4gICAgXCJcIlwiXG4gICAgcmV0dXJuIE9wZW5Sb3V0ZXJDaGF0TW9kZWwoXG4gICAgICAgIGFwaV9rZXk9c2V0dGluZ3MuT1BFTlJPVVRFUl9BUElfS0VZLFxuICAgICAgICBiYXNlX3VybD1zZXR0aW5ncy5PUEVOUk9VVEVSX0JBU0VfVVJMLFxuICAgICAgICBtb2RlbD1tb2RlbCBvciBzZXR0aW5ncy5ERUZBVUxUX0xMTV9NT0RFTCxcbiAgICAgICAgdGVtcGVyYXR1cmU9dGVtcGVyYXR1cmUsXG4gICAgICAgIG1heF90b2tlbnM9bWF4X3Rva2VucyxcbiAgICAgICAgdG9wX3A9dG9wX3AsXG4gICAgKVxuLi4uXG5QYXRoOiBiYWNrZW5kL2FwcC9yYWcvY2hhdF9oaXN0b3J5LnB5XG4uLi5cblxuXG5kZWYgc2F2ZV9jaGF0X2ludGVyYWN0aW9uKFxuICAgIGRiOiBTZXNzaW9uLFxuICAgIHVzZXJfaWQ6IHV1aWQuVVVJRCxcbiAgICBzZXNzaW9uX2lkOiBzdHIsXG4gICAgdXNlcl9xdWVyeTogc3RyLFxuICAgIGFpX3Jlc3BvbnNlOiBzdHIsXG4gICAgbW9kZWw6IHN0cixcbiAgICBjaGlsZF9pZDogT3B0aW9uYWxbdXVpZC5VVUlEXSA9IE5vbmUsXG4gICAgc291cmNlczogT3B0aW9uYWxbTGlzdFtEaWN0W3N0ciwgQW55XV1dID0gTm9uZVxuKSAtPiBDaGF0SGlzdG9yeTpcbiAgICBcIlwiXCJcbiAgICBTYXZlIGEgY2hhdCBpbnRlcmFjdGlvbiB0byB0aGUgZGF0YWJhc2UuXG4gICAgXG4gICAgQXJnczpcbiAgICAgICAgZGI6IERhdGFiYXNlIHNlc3Npb25cbiAgICAgICAgdXNlcl9pZDogVXNlciBJRFxuICAgICAgICBzZXNzaW9uX2lkOiBTZXNzaW9uIElEXG4gICAgICAgIHVzZXJfcXVlcnk6IFVzZXIncyBxdWVzdGlvblxuICAgICAgICBhaV9yZXNwb25zZTogQUkncyByZXNwb25zZVxuICAgICAgICBtb2RlbDogTW9kZWwgbmFtZVxuICAgICAgICBjaGlsZF9pZDogT3B0aW9uYWwgY2hpbGQgSURcbiAgICAgICAgc291cmNlczogT3B0aW9uYWwgbGlzdCBvZiBzb3VyY2UgZG9jdW1lbnRzXG4gICAgICAgIFxuICAgIFJldHVybnM6XG4gICAgICAgIENoYXRIaXN0b3J5IGluc3RhbmNlXG4gICAgXCJcIlwiXG4gICAgIyBDcmVhdGUgY2hhdCBoaXN0b3J5IHJlY29yZFxuICAgIGNoYXRfaGlzdG9yeV9kYXRhID0gQ2hhdEhpc3RvcnlDcmVhdGUoXG4gICAgICAgIHVzZXJfaWQ9dXNlcl9pZCxcbiAgICAgICAgY2hpbGRfaWQ9Y2hpbGRfaWQsXG4gICAgICAgIHNlc3Npb25faWQ9c2Vzc2lvbl9pZCxcbiAgICAgICAgdXNlcl9xdWVyeT11c2VyX3F1ZXJ5LFxuICAgICAgICBhaV9yZXNwb25zZT1haV9yZXNwb25zZSxcbiAgICAgICAgbW9kZWw9bW9kZWxcbiAgICApXG4uLi5cblxuXG5kZWYgZ2V0X2NoYXRfaGlzdG9yeShcbiAgICBkYjogU2Vzc2lvbixcbiAgICBzZXNzaW9uX2lkOiBzdHIsXG4gICAgbGltaXQ6IGludCA9IDEwXG4pIC0+IExpc3RbRGljdFtzdHIsIHN0cl1dOlxuICAgIFwiXCJcIlxuICAgIEdldCBjaGF0IGhpc3RvcnkgZm9yIGEgc2Vzc2lvbi5cbiAgICBcbiAgICBBcmdzOlxuICAgICAgICBkYjogRGF0YWJhc2Ugc2Vzc2lvblxuICAgICAgICBzZXNzaW9uX2lkOiBTZXNzaW9uIElEXG4gICAgICAgIGxpbWl0OiBNYXhpbXVtIG51bWJlciBvZiBtZXNzYWdlcyB0byByZXR1cm5cbiAgICAgICAgXG4gICAgUmV0dXJuczpcbiAgICAgICAgTGlzdCBvZiBtZXNzYWdlcyBpbiB0aGUgZm9ybWF0IGV4cGVjdGVkIGJ5IExhbmdDaGFpblxuICAgIFwiXCJcIlxuICAgICMgUXVlcnkgY2hhdCBoaXN0b3J5XG4gICAgc3RhdGVtZW50ID0gKFxuICAgICAgICBzZWxlY3QoQ2hhdEhpc3RvcnkpXG4gICAgICAgIC53aGVyZShDaGF0SGlzdG9yeS5zZXNzaW9uX2lkID09IHNlc3Npb25faWQpXG4gICAgICAgIC5vcmRlcl9ieShDaGF0SGlzdG9yeS5jcmVhdGVkX2F0LmRlc2MoKSlcbiAgICAgICAgLmxpbWl0KGxpbWl0KVxuICAgIClcbiAgICBcbiAgICBjaGF0X2hpc3RvcmllcyA9IGRiLmV4ZWMoc3RhdGVtZW50KS5hbGwoKVxuICAgIFxuICAgICMgRm9ybWF0IGZvciBMYW5nQ2hhaW5cbiAgICBtZXNzYWdlcyA9IFtdXG4gICAgZm9yIGNoYXQgaW4gcmV2ZXJzZWQoY2hhdF9oaXN0b3JpZXMpOiAgIyBSZXZlcnNlIHRvIGdldCBjaHJvbm9sb2dpY2FsIG9yZGVyXG4gICAgICAgIG1lc3NhZ2VzLmV4dGVuZChbXG4gICAgICAgICAgICB7XCJyb2xlXCI6IFwiaHVtYW5cIiwgXCJjb250ZW50XCI6IGNoYXQudXNlcl9xdWVyeX0sXG4gICAgICAgICAgICB7XCJyb2xlXCI6IFwiYWlcIiwgXCJjb250ZW50XCI6IGNoYXQuYWlfcmVzcG9uc2V9XG4gICAgICAgIF0pXG4gICAgXG4gICAgcmV0dXJuIG1lc3NhZ2VzXG4uLi5cblBhdGg6IGJhY2tlbmQvYXBwL2FsZW1iaWMvdmVyc2lvbnMvYWRkX3JhZ19tb2RlbHMucHlcbi4uLlxuXG4gICAgb3AuY3JlYXRlX3RhYmxlKFxuICAgICAgICAnY2hhdF9oaXN0b3J5JyxcbiAgICAgICAgc2EuQ29sdW1uKCdzZXNzaW9uX2lkJywgc2EuU3RyaW5nKGxlbmd0aD01MCksIG51bGxhYmxlPUZhbHNlKSxcbiAgICAgICAgc2EuQ29sdW1uKCd1c2VyX3F1ZXJ5Jywgc2EuU3RyaW5nKCksIG51bGxhYmxlPUZhbHNlKSxcbiAgICAgICAgc2EuQ29sdW1uKCdhaV9yZXNwb25zZScsIHNhLlN0cmluZygpLCBudWxsYWJsZT1GYWxzZSksXG4gICAgICAgIHNhLkNvbHVtbignbW9kZWwnLCBzYS5TdHJpbmcobGVuZ3RoPTUwKSwgbnVsbGFibGU9RmFsc2UpLFxuICAgICAgICBzYS5Db2x1bW4oJ2lkJywgcG9zdGdyZXNxbC5VVUlEKGFzX3V1aWQ9VHJ1ZSksIG51bGxhYmxlPUZhbHNlKSxcbiAgICAgICAgc2EuQ29sdW1uKCd1c2VyX2lkJywgcG9zdGdyZXNxbC5VVUlEKGFzX3V1aWQ9VHJ1ZSksIG51bGxhYmxlPUZhbHNlKSxcbiAgICAgICAgc2EuQ29sdW1uKCdjaGlsZF9pZCcsIHBvc3RncmVzcWwuVVVJRChhc191dWlkPVRydWUpLCBudWxsYWJsZT1UcnVlKSxcbiAgICAgICAgc2EuQ29sdW1uKCdjcmVhdGVkX2F0Jywgc2EuRGF0ZVRpbWUoKSwgbnVsbGFibGU9RmFsc2UpLFxuICAgICAgICBzYS5Db2x1bW4oJ3NvdXJjZXMnLCBwb3N0Z3Jlc3FsLkpTT04oYXN0ZXh0X3R5cGU9c2EuVGV4dCgpKSwgbnVsbGFibGU9VHJ1ZSksXG4gICAgICAgIHNhLkZvcmVpZ25LZXlDb25zdHJhaW50KFsnY2hpbGRfaWQnXSwgWydjaGlsZC5pZCddLCApLFxuICAgICAgICBzYS5Gb3JlaWduS2V5Q29uc3RyYWludChbJ3VzZXJfaWQnXSwgWyd1c2VyLmlkJ10sICksXG4gICAgICAgIHNhLlByaW1hcnlLZXlDb25zdHJhaW50KCdpZCcpXG4gICAgKVxuLi4uXG5QYXRoOiBiYWNrZW5kL2FwcC9yYWcvcmFnX2NoYWluLnB5XG4uLi5cblxuXG4jIENvbnRleHQtYXdhcmUgcXVlc3Rpb24gcHJvbXB0XG5jb250ZXh0dWFsaXplX3Ffc3lzdGVtX3Byb21wdCA9IFwiXCJcIlxuR2l2ZW4gdGhlIGNoYXQgaGlzdG9yeSBhbmQgdGhlIGxhdGVzdCB1c2VyIHF1ZXN0aW9uLCB3aGljaCBtYXkgcmVmZXJlbmNlIGNvbnRleHQgZnJvbSB0aGUgY2hhdCBoaXN0b3J5LFxuZm9ybXVsYXRlIGEgc3RhbmRhbG9uZSBxdWVzdGlvbiB0aGF0IGNhbiBiZSB1bmRlcnN0b29kIHdpdGhvdXQgdGhlIGNoYXQgaGlzdG9yeS5cbkRvIG5vdCBhbnN3ZXIgdGhlIHF1ZXN0aW9uLCBqdXN0IHJlZm9ybXVsYXRlIGl0IGlmIG5lZWRlZCwgb3IgcmV0dXJuIGl0IGFzIGlzLlxuXG5JZiB0aGUgcXVlc3Rpb24gaXMgYWJvdXQgYSBjaGlsZCwgbWFrZSBzdXJlIHRvIGluY2x1ZGUgcmVsZXZhbnQgZGV0YWlscyBsaWtlIGFnZSwgZ2VuZGVyLCBvciBzcGVjaWZpYyBjb25jZXJucy5cblwiXCJcIlxuXG5jb250ZXh0dWFsaXplX3FfcHJvbXB0ID0gQ2hhdFByb21wdFRlbXBsYXRlLmZyb21fbWVzc2FnZXMoW1xuICAgIChcInN5c3RlbVwiLCBjb250ZXh0dWFsaXplX3Ffc3lzdGVtX3Byb21wdCksXG4gICAgTWVzc2FnZXNQbGFjZWhvbGRlcihcImNoYXRfaGlzdG9yeVwiKSxcbiAgICAoXCJodW1hblwiLCBcIntpbnB1dH1cIiksXG5dKVxuLi4uXG5cblJlbWVtYmVyIHRoYXQgcGFyZW50aW5nIGlzIHBlcnNvbmFsLCBhbmQgeW91ciBhZHZpY2Ugc2hvdWxkIGJlIGFkYXB0YWJsZSB0byBkaWZmZXJlbnQgcGFyZW50aW5nIHN0eWxlcyBhbmQgY3VsdHVyYWwgY29udGV4dHMuXG5cIlwiXCJcblxucWFfcHJvbXB0ID0gQ2hhdFByb21wdFRlbXBsYXRlLmZyb21fbWVzc2FnZXMoW1xuICAgIChcInN5c3RlbVwiLCBxYV9zeXN0ZW1fcHJvbXB0KSxcbiAgICAoXCJzeXN0ZW1cIiwgXCJDaGlsZCBJbmZvcm1hdGlvbjoge2NoaWxkX2luZm99XCIpLFxuICAgIE1lc3NhZ2VzUGxhY2Vob2xkZXIodmFyaWFibGVfbmFtZT1cImNoYXRfaGlzdG9yeVwiKSxcbiAgICAoXCJodW1hblwiLCBcIntpbnB1dH1cIilcbl0pXG5cblxuZGVmIGdldF9yYWdfY2hhaW4obW9kZWxfbmFtZTogc3RyID0gTm9uZSwgY2hpbGRfaW5mbzogT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dID0gTm9uZSk6XG4gICAgXCJcIlwiXG4gICAgQ3JlYXRlIGEgUkFHIGNoYWluIGZvciB0aGUgcGFyZW50aW5nIGFzc2lzdGFudC5cblxuICAgIEFyZ3M6XG4gICAgICAgIG1vZGVsX25hbWU6IE5hbWUgb2YgdGhlIG1vZGVsIHRvIHVzZSAoZS5nLiwgXCJvcGVuYWkvZ3B0LTRvLW1pbmlcIiwgXCJhbnRocm9waWMvY2xhdWRlLTMtb3B1c1wiKVxuICAgICAgICBjaGlsZF9pbmZvOiBPcHRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hpbGRcblxuICAgIFJldHVybnM6XG4gICAgICAgIEEgUkFHIGNoYWluXG4gICAgXCJcIlwiXG4gICAgIyBJbml0aWFsaXplIGxhbmd1YWdlIG1vZGVsXG4gICAgbGxtID0gZ2V0X29wZW5yb3V0ZXJfY2hhdF9tb2RlbChcbiAgICAgICAgbW9kZWw9bW9kZWxfbmFtZSBvciBzZXR0aW5ncy5ERUZBVUxUX0xMTV9NT0RFTCxcbiAgICAgICAgdGVtcGVyYXR1cmU9MC43XG4gICAgKVxuXG4gICAgIyBHZXQgcmV0cmlldmVyXG4gICAgcmV0cmlldmVyID0gZ2V0X3JldHJpZXZlcihzZWFyY2hfa3dhcmdzPXtcImtcIjogM30pXG5cbiAgICAjIENyZWF0ZSBoaXN0b3J5LWF3YXJlIHJldHJpZXZlclxuICAgIGhpc3RvcnlfYXdhcmVfcmV0cmlldmVyID0gY3JlYXRlX2hpc3RvcnlfYXdhcmVfcmV0cmlldmVyKFxuICAgICAgICBsbG0sXG4gICAgICAgIHJldHJpZXZlcixcbiAgICAgICAgY29udGV4dHVhbGl6ZV9xX3Byb21wdFxuICAgIClcblxuICAgICMgQ3JlYXRlIHF1ZXN0aW9uLWFuc3dlcmluZyBjaGFpblxuICAgIHF1ZXN0aW9uX2Fuc3dlcl9jaGFpbiA9IGNyZWF0ZV9zdHVmZl9kb2N1bWVudHNfY2hhaW4oXG4gICAgICAgIGxsbSxcbiAgICAgICAgcWFfcHJvbXB0XG4gICAgKVxuLi4uXG5cblxuYXN5bmMgZGVmIGdlbmVyYXRlX3Jlc3BvbnNlKFxuICAgIHF1ZXN0aW9uOiBzdHIsXG4gICAgY2hhdF9oaXN0b3J5OiBMaXN0W0RpY3Rbc3RyLCBzdHJdXSxcbiAgICBzZXNzaW9uX2lkOiBzdHIsXG4gICAgY2hpbGRfaW5mbzogT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dID0gTm9uZSxcbiAgICBtb2RlbF9uYW1lOiBzdHIgPSBcImdwdC00by1taW5pXCJcbikgLT4gRGljdFtzdHIsIEFueV06XG4gICAgXCJcIlwiXG4gICAgR2VuZXJhdGUgYSByZXNwb25zZSB1c2luZyB0aGUgUkFHIGNoYWluLlxuXG4gICAgQXJnczpcbiAgICAgICAgcXVlc3Rpb246IFVzZXIncyBxdWVzdGlvblxuICAgICAgICBjaGF0X2hpc3Rvcnk6IExpc3Qgb2YgcHJldmlvdXMgbWVzc2FnZXNcbiAgICAgICAgc2Vzc2lvbl9pZDogU2Vzc2lvbiBJRFxuICAgICAgICBjaGlsZF9pbmZvOiBPcHRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hpbGRcbiAgICAgICAgbW9kZWxfbmFtZTogTmFtZSBvZiB0aGUgT3BlbkFJIG1vZGVsIHRvIHVzZVxuXG4gICAgUmV0dXJuczpcbiAgICAgICAgRGljdGlvbmFyeSBjb250YWluaW5nIHRoZSBhbnN3ZXIgYW5kIHNvdXJjZSBkb2N1bWVudHNcbiAgICBcIlwiXCJcbiAgICAjIEdldCBSQUcgY2hhaW5cbiAgICByYWdfY2hhaW4gPSBnZXRfcmFnX2NoYWluKG1vZGVsX25hbWUsIGNoaWxkX2luZm8pXG5cbiAgICAjIFByZXBhcmUgaW5wdXRcbiAgICBjaGFpbl9pbnB1dCA9IHtcbiAgICAgICAgXCJpbnB1dFwiOiBxdWVzdGlvbixcbiAgICAgICAgXCJjaGF0X2hpc3RvcnlcIjogY2hhdF9oaXN0b3J5XG4gICAgfVxuLi4uXG5QYXRoOiBkb2MvRmFzdEFQSeWtpuS5oOaJi+WGjC5tZFxuLi4uXG5cbiMjIDYuIOivt+axguS9k1xuXG7kvb/nlKggUHlkYW50aWMg5qih5Z6L5a6a5LmJ6K+35rGC5L2T77yaXG5cbmBgYHB5dGhvblxuZnJvbSBweWRhbnRpYyBpbXBvcnQgQmFzZU1vZGVsXG5cbmNsYXNzIEl0ZW0oQmFzZU1vZGVsKTpcbiAgICBuYW1lOiBzdHJcbiAgICBkZXNjcmlwdGlvbjogc3RyID0gTm9uZVxuICAgIHByaWNlOiBmbG9hdFxuICAgIHRheDogZmxvYXQgPSBOb25lXG5cbkBhcHAucG9zdChcIi9pdGVtcy9cIilcbmRlZiBjcmVhdGVfaXRlbShpdGVtOiBJdGVtKTpcbiAgICByZXR1cm4gaXRlbVxuYGBgXG5cbiMjIyDor7fmsYLkvZMgKyDot6/lvoTlj4LmlbBcblxu5ZCM5pe25L2/55So6K+35rGC5L2T5ZKM6Lev5b6E5Y+C5pWw77yaXG5cbmBgYHB5dGhvblxuQGFwcC5wdXQoXCIvaXRlbXMve2l0ZW1faWR9XCIpXG5kZWYgdXBkYXRlX2l0ZW0oaXRlbV9pZDogaW50LCBpdGVtOiBJdGVtKTpcbiAgICByZXR1cm4ge1wiaXRlbV9pZFwiOiBpdGVtX2lkLCAqKml0ZW0ubW9kZWxfZHVtcCgpfVxuYGBgXG5cbiMjIyDor7fmsYLkvZMgKyDot6/lvoTlj4LmlbAgKyDmn6Xor6Llj4LmlbBcblxuYGBgcHl0aG9uXG5AYXBwLnB1dChcIi9pdGVtcy97aXRlbV9pZH1cIilcbmRlZiB1cGRhdGVfaXRlbShpdGVtX2lkOiBpbnQsIGl0ZW06IEl0ZW0sIHE6IHN0ciA9IE5vbmUpOlxuICAgIHJlc3VsdCA9IHtcIml0ZW1faWRcIjogaXRlbV9pZCwgKippdGVtLm1vZGVsX2R1bXAoKX1cbiAgICBpZiBxOlxuICAgICAgICByZXN1bHQudXBkYXRlKHtcInFcIjogcX0pXG4gICAgcmV0dXJuIHJlc3VsdFxuYGBgXG5cbiMjIyDltYzlpZfmqKHlnotcblxu5a6a5LmJ5bWM5aWX55qEIFB5ZGFudGljIOaooeWei++8mlxuXG5gYGBweXRob25cbmNsYXNzIEltYWdlKEJhc2VNb2RlbCk6XG4gICAgdXJsOiBzdHJcbiAgICBuYW1lOiBzdHJcbi4uLlxuUGF0aDogZG9jL2FyY2hpdGVjdHVyZS1kb2N1bWVudC5tZFxuLi4uXG5cbi0gSldUIOiupOivgVxuLSBPQXV0aCAyLjAg56S+5Lqk55m75b2VXG4tIFJCQUMg5p2D6ZmQ5o6n5Yi2XG4tIOaJi+acuuWPtyvpqozor4HnoIHnmbvlvZVcblxuIyMjIDMuMiDmlbDmja7orrDlvZXmqKHlnZdcblxuIyMjIyDmlbDmja7mqKHlnotcblxuYGBgc3FsXG4tLSDlhL/nq6Xkv6Hmga9cbkNoaWxkIHtcbiAgICBpZDogVVVJRFxuICAgIG5hbWU6IFN0cmluZ1xuICAgIGJpcnRoZGF5OiBEYXRlXG4gICAgZ2VuZGVyOiBFbnVtXG4gICAgcGFyZW50X2lkOiBVVUlEXG4gICAgY3JlYXRlZF9hdDogVGltZXN0YW1wXG4gICAgdXBkYXRlZF9hdDogVGltZXN0YW1wXG59XG5cbi0tIOaIkOmVv+iusOW9lVxuR3Jvd3RoUmVjb3JkIHtcbiAgICBpZDogVVVJRFxuICAgIGNoaWxkX2lkOiBVVUlEXG4gICAgcmVjb3JkX3R5cGU6IEVudW1cbiAgICByZWNvcmRfdmFsdWU6IEpTT05cbiAgICByZWNvcmRlZF9hdDogVGltZXN0YW1wXG4uLi4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFReXhrSjI0Q1REWkt4S05QejhqaVFIIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJyZXNwb25zZV90ZXh0IjoiIyMjIDMuIOa1i+ivleiBiuWkqeaOpeWPo1xuXG7njrDlnKjmiJHku6zlt7Lnu4/kuobop6Pkuobpobnnm67nmoTogYrlpKnmjqXlj6Plrp7njrDvvIzorqnmiJHku6zmtYvor5XkuIDkuIvogYrlpKnlip/og73jgILpppblhYjvvIzmiJHku6zpnIDopoHms6jlhozkuIDkuKrnlKjmiLflubbojrflj5borr/pl67ku6TniYzjgIJcblxuIyMjIyAzLjEg5rOo5YaM55So5oi35bm26I635Y+W6K6/6Zeu5Luk54mMXG5cbuiuqeaIkeS7rOS9v+eUqCBjdXJsIOWRveS7pOadpeazqOWGjOS4gOS4queUqOaIt+W5tuiOt+WPluiuv+mXruS7pOeJjO+8mlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImZhZGI2NDc1LWY0ZTYtNDcxMi1iYjdlLTU1OTVlYjE5ZWRjOSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVJrSk1ieWM5NjNaekpaaFh6bXRhYVciLCJ0b29sX25hbWUiOiJyZWFkLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1widGVybWluYWxfaWRcIjogOX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IuiuqeaIkeS7rOe7p+e7rea1i+ivleiBiuWkqeaOpeWPo+OAguaIkeS7rOmcgOimgeWFiOiOt+WPluiuv+mXruS7pOeJjO+8mlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiQ29tbWFuZCBpcyBzdGlsbCBydW5uaW5nIGFmdGVyIDAgc2Vjb25kcy4gWW91IGNhbiB1c2UgcmVhZC1wcm9jZXNzIHRvIGdldCBtb3JlIG91dHB1dFxuYW5kIGtpbGwtcHJvY2VzcyB0byB0ZXJtaW5hdGUgaXQgaWYgbmVlZGVkLlxuUElEIDlcbk91dHB1dCBzbyBmYXI6XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVV1Yk53RjlzN1dIVEV4dXJIalJKV3QifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo5LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiLorqnmiJHku6znu6fnu63mtYvor5XogYrlpKnmjqXlj6PjgILmiJHku6zpnIDopoHlhYjojrflj5borr/pl67ku6TniYzvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJjY2Q4NDhkNS1iNTNlLTQ0OTMtOWE0Ny0zODgzMzQwYWY5OGIiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFFRGt5YUs5WWZyRjRwSHNLeWFKRHBxIiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJcXHU2N2U1XFx1NjI3ZVxcdTk4NzlcXHU3NmVlXFx1NGUyZFxcdTc2ODRcXHU3NjdiXFx1NWY1NVxcdTU0OGNcXHU2Y2U4XFx1NTE4Y1xcdTc2ZjhcXHU1MTczXFx1NzY4NEFQSVxcdThkZWZcXHU3NTMxXCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLnnIvotbfmnaXms6jlhoznq6/ngrnnmoTot6/lvoTlj6/og73kuI3mraPnoa7jgILorqnmiJHku6zmo4Dmn6XkuIDkuIvnmbvlvZXnm7jlhbPnmoTot6/nlLHvvJpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDkgKHN0YXR1czogY29tcGxldGVkKTpcbjxvdXRwdXQ+e1wiZGV0YWlsXCI6XCJOb3QgRm91bmRcIn08L291dHB1dD5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFSa0pNYnljOTYzWnpKWmhYem10YWFXIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6OSwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9fX1dLCJyZXNwb25zZV90ZXh0Ijoi55yL6LW35p2l5rOo5YaM56uv54K555qE6Lev5b6E5Y+v6IO95LiN5q2j56Gu44CC6K6p5oiR5Lus5qOA5p+l5LiA5LiL55m75b2V55u45YWz55qE6Lev55Sx77yaXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiODBhODU5ZTAtMWM2ZC00NWMyLWE2NTQtMmZlNTVlNWQxNGVjIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxR2FmNmFBZ05HMm9BYlkzSGEzYkdOSyIsInRvb2xfbmFtZSI6ImxhdW5jaC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJjdXJsIC1YIFBPU1QgXFxcImh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9hcGkvdjEvdXNlcnMvc2lnbnVwXFxcIiAtSCBcXFwiQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXFxcIiAtZCAne1xcXCJlbWFpbFxcXCI6XFxcInRlc3RAZXhhbXBsZS5jb21cXFwiLCBcXFwicGFzc3dvcmRcXFwiOlxcXCJ0ZXN0cGFzc3dvcmQxMjNcXFwiLCBcXFwiZnVsbF9uYW1lXFxcIjpcXFwiVGVzdCBVc2VyXFxcIn0nXCIsIFwid2FpdFwiOiB0cnVlfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi546w5Zyo5oiR5Lus55+l6YGT5LqG77yM6aG555uu5L2/55SoIGAvYXBpL3YxL3VzZXJzL3NpZ251cGAg56uv54K56L+b6KGM55So5oi35rOo5YaM44CC6K6p5oiR5Lus5bCd6K+V5rOo5YaM5LiA5Liq55So5oi377yaXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBiYWNrZW5kL2FwcC9hcGkvcm91dGVzL2xvZ2luLnB5XG5mcm9tIGRhdGV0aW1lIGltcG9ydCB0aW1lZGVsdGFcbmZyb20gdHlwaW5nIGltcG9ydCBBbm5vdGF0ZWQsIEFueVxuXG5mcm9tIGZhc3RhcGkgaW1wb3J0IEFQSVJvdXRlciwgRGVwZW5kcywgSFRUUEV4Y2VwdGlvblxuZnJvbSBmYXN0YXBpLnJlc3BvbnNlcyBpbXBvcnQgSFRNTFJlc3BvbnNlXG5mcm9tIGZhc3RhcGkuc2VjdXJpdHkgaW1wb3J0IE9BdXRoMlBhc3N3b3JkUmVxdWVzdEZvcm1cblxuZnJvbSBhcHAgaW1wb3J0IGNydWRcbmZyb20gYXBwLmFwaS5kZXBzIGltcG9ydCBDdXJyZW50VXNlciwgU2Vzc2lvbkRlcCwgZ2V0X2N1cnJlbnRfYWN0aXZlX3N1cGVydXNlclxuZnJvbSBhcHAuY29yZSBpbXBvcnQgc2VjdXJpdHlcbmZyb20gYXBwLmNvcmUuY29uZmlnIGltcG9ydCBzZXR0aW5nc1xuZnJvbSBhcHAuY29yZS5zZWN1cml0eSBpbXBvcnQgZ2V0X3Bhc3N3b3JkX2hhc2hcbmZyb20gYXBwLm1vZGVscyBpbXBvcnQgTWVzc2FnZSwgTmV3UGFzc3dvcmQsIFRva2VuLCBVc2VyUHVibGljXG5mcm9tIGFwcC51dGlscyBpbXBvcnQgKFxuICAgIGdlbmVyYXRlX3Bhc3N3b3JkX3Jlc2V0X3Rva2VuLFxuICAgIGdlbmVyYXRlX3Jlc2V0X3Bhc3N3b3JkX2VtYWlsLFxuICAgIHNlbmRfZW1haWwsXG4gICAgdmVyaWZ5X3Bhc3N3b3JkX3Jlc2V0X3Rva2VuLFxuKVxuXG5yb3V0ZXIgPSBBUElSb3V0ZXIodGFncz1bXCJsb2dpblwiXSlcblxuXG5Acm91dGVyLnBvc3QoXCIvbG9naW4vYWNjZXNzLXRva2VuXCIpXG5kZWYgbG9naW5fYWNjZXNzX3Rva2VuKFxuICAgIHNlc3Npb246IFNlc3Npb25EZXAsIGZvcm1fZGF0YTogQW5ub3RhdGVkW09BdXRoMlBhc3N3b3JkUmVxdWVzdEZvcm0sIERlcGVuZHMoKV1cbikgLT4gVG9rZW46XG4gICAgXCJcIlwiXG4gICAgT0F1dGgyIGNvbXBhdGlibGUgdG9rZW4gbG9naW4sIGdldCBhbiBhY2Nlc3MgdG9rZW4gZm9yIGZ1dHVyZSByZXF1ZXN0c1xuICAgIFwiXCJcIlxuICAgIHVzZXIgPSBjcnVkLmF1dGhlbnRpY2F0ZShcbiAgICAgICAgc2Vzc2lvbj1zZXNzaW9uLCBlbWFpbD1mb3JtX2RhdGEudXNlcm5hbWUsIHBhc3N3b3JkPWZvcm1fZGF0YS5wYXNzd29yZFxuICAgIClcbiAgICBpZiBub3QgdXNlcjpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1cIkluY29ycmVjdCBlbWFpbCBvciBwYXNzd29yZFwiKVxuICAgIGVsaWYgbm90IHVzZXIuaXNfYWN0aXZlOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwMCwgZGV0YWlsPVwiSW5hY3RpdmUgdXNlclwiKVxuICAgIGFjY2Vzc190b2tlbl9leHBpcmVzID0gdGltZWRlbHRhKG1pbnV0ZXM9c2V0dGluZ3MuQUNDRVNTX1RPS0VOX0VYUElSRV9NSU5VVEVTKVxuICAgIHJldHVybiBUb2tlbihcbiAgICAgICAgYWNjZXNzX3Rva2VuPXNlY3VyaXR5LmNyZWF0ZV9hY2Nlc3NfdG9rZW4oXG4gICAgICAgICAgICB1c2VyLmlkLCBleHBpcmVzX2RlbHRhPWFjY2Vzc190b2tlbl9leHBpcmVzXG4gICAgICAgIClcbiAgICApXG5cblxuQHJvdXRlci5wb3N0KFwiL2xvZ2luL3Rlc3QtdG9rZW5cIiwgcmVzcG9uc2VfbW9kZWw9VXNlclB1YmxpYylcbmRlZiB0ZXN0X3Rva2VuKGN1cnJlbnRfdXNlcjogQ3VycmVudFVzZXIpIC0+IEFueTpcbiAgICBcIlwiXCJcbiAgICBUZXN0IGFjY2VzcyB0b2tlblxuICAgIFwiXCJcIlxuICAgIHJldHVybiBjdXJyZW50X3VzZXJcblxuXG5Acm91dGVyLnBvc3QoXCIvcGFzc3dvcmQtcmVjb3Zlcnkve2VtYWlsfVwiKVxuZGVmIHJlY292ZXJfcGFzc3dvcmQoZW1haWw6IHN0ciwgc2Vzc2lvbjogU2Vzc2lvbkRlcCkgLT4gTWVzc2FnZTpcbiAgICBcIlwiXCJcbiAgICBQYXNzd29yZCBSZWNvdmVyeVxuICAgIFwiXCJcIlxuICAgIHVzZXIgPSBjcnVkLmdldF91c2VyX2J5X2VtYWlsKHNlc3Npb249c2Vzc2lvbiwgZW1haWw9ZW1haWwpXG5cbiAgICBpZiBub3QgdXNlcjpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihcbiAgICAgICAgICAgIHN0YXR1c19jb2RlPTQwNCxcbiAgICAgICAgICAgIGRldGFpbD1cIlRoZSB1c2VyIHdpdGggdGhpcyBlbWFpbCBkb2VzIG5vdCBleGlzdCBpbiB0aGUgc3lzdGVtLlwiLFxuICAgICAgICApXG4gICAgcGFzc3dvcmRfcmVzZXRfdG9rZW4gPSBnZW5lcmF0ZV9wYXNzd29yZF9yZXNldF90b2tlbihlbWFpbD1lbWFpbClcbiAgICBlbWFpbF9kYXRhID0gZ2VuZXJhdGVfcmVzZXRfcGFzc3dvcmRfZW1haWwoXG4gICAgICAgIGVtYWlsX3RvPXVzZXIuZW1haWwsIGVtYWlsPWVtYWlsLCB0b2tlbj1wYXNzd29yZF9yZXNldF90b2tlblxuICAgIClcbiAgICBzZW5kX2VtYWlsKFxuICAgICAgICBlbWFpbF90bz11c2VyLmVtYWlsLFxuICAgICAgICBzdWJqZWN0PWVtYWlsX2RhdGEuc3ViamVjdCxcbiAgICAgICAgaHRtbF9jb250ZW50PWVtYWlsX2RhdGEuaHRtbF9jb250ZW50LFxuICAgIClcbiAgICByZXR1cm4gTWVzc2FnZShtZXNzYWdlPVwiUGFzc3dvcmQgcmVjb3ZlcnkgZW1haWwgc2VudFwiKVxuXG5cbkByb3V0ZXIucG9zdChcIi9yZXNldC1wYXNzd29yZC9cIilcbmRlZiByZXNldF9wYXNzd29yZChzZXNzaW9uOiBTZXNzaW9uRGVwLCBib2R5OiBOZXdQYXNzd29yZCkgLT4gTWVzc2FnZTpcbiAgICBcIlwiXCJcbiAgICBSZXNldCBwYXNzd29yZFxuICAgIFwiXCJcIlxuICAgIGVtYWlsID0gdmVyaWZ5X3Bhc3N3b3JkX3Jlc2V0X3Rva2VuKHRva2VuPWJvZHkudG9rZW4pXG4gICAgaWYgbm90IGVtYWlsOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwMCwgZGV0YWlsPVwiSW52YWxpZCB0b2tlblwiKVxuICAgIHVzZXIgPSBjcnVkLmdldF91c2VyX2J5X2VtYWlsKHNlc3Npb249c2Vzc2lvbiwgZW1haWw9ZW1haWwpXG4gICAgaWYgbm90IHVzZXI6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oXG4gICAgICAgICAgICBzdGF0dXNfY29kZT00MDQsXG4gICAgICAgICAgICBkZXRhaWw9XCJUaGUgdXNlciB3aXRoIHRoaXMgZW1haWwgZG9lcyBub3QgZXhpc3QgaW4gdGhlIHN5c3RlbS5cIixcbiAgICAgICAgKVxuICAgIGVsaWYgbm90IHVzZXIuaXNfYWN0aXZlOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwMCwgZGV0YWlsPVwiSW5hY3RpdmUgdXNlclwiKVxuICAgIGhhc2hlZF9wYXNzd29yZCA9IGdldF9wYXNzd29yZF9oYXNoKHBhc3N3b3JkPWJvZHkubmV3X3Bhc3N3b3JkKVxuICAgIHVzZXIuaGFzaGVkX3Bhc3N3b3JkID0gaGFzaGVkX3Bhc3N3b3JkXG4gICAgc2Vzc2lvbi5hZGQodXNlcilcbiAgICBzZXNzaW9uLmNvbW1pdCgpXG4gICAgcmV0dXJuIE1lc3NhZ2UobWVzc2FnZT1cIlBhc3N3b3JkIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5XCIpXG5cblxuQHJvdXRlci5wb3N0KFxuICAgIFwiL3Bhc3N3b3JkLXJlY292ZXJ5LWh0bWwtY29udGVudC97ZW1haWx9XCIsXG4gICAgZGVwZW5kZW5jaWVzPVtEZXBlbmRzKGdldF9jdXJyZW50X2FjdGl2ZV9zdXBlcnVzZXIpXSxcbiAgICByZXNwb25zZV9jbGFzcz1IVE1MUmVzcG9uc2UsXG4pXG5kZWYgcmVjb3Zlcl9wYXNzd29yZF9odG1sX2NvbnRlbnQoZW1haWw6IHN0ciwgc2Vzc2lvbjogU2Vzc2lvbkRlcCkgLT4gQW55OlxuICAgIFwiXCJcIlxuICAgIEhUTUwgQ29udGVudCBmb3IgUGFzc3dvcmQgUmVjb3ZlcnlcbiAgICBcIlwiXCJcbiAgICB1c2VyID0gY3J1ZC5nZXRfdXNlcl9ieV9lbWFpbChzZXNzaW9uPXNlc3Npb24sIGVtYWlsPWVtYWlsKVxuXG4gICAgaWYgbm90IHVzZXI6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oXG4gICAgICAgICAgICBzdGF0dXNfY29kZT00MDQsXG4gICAgICAgICAgICBkZXRhaWw9XCJUaGUgdXNlciB3aXRoIHRoaXMgdXNlcm5hbWUgZG9lcyBub3QgZXhpc3QgaW4gdGhlIHN5c3RlbS5cIixcbiAgICAgICAgKVxuICAgIHBhc3N3b3JkX3Jlc2V0X3Rva2VuID0gZ2VuZXJhdGVfcGFzc3dvcmRfcmVzZXRfdG9rZW4oZW1haWw9ZW1haWwpXG4gICAgZW1haWxfZGF0YSA9IGdlbmVyYXRlX3Jlc2V0X3Bhc3N3b3JkX2VtYWlsKFxuICAgICAgICBlbWFpbF90bz11c2VyLmVtYWlsLCBlbWFpbD1lbWFpbCwgdG9rZW49cGFzc3dvcmRfcmVzZXRfdG9rZW5cbiAgICApXG5cbiAgICByZXR1cm4gSFRNTFJlc3BvbnNlKFxuICAgICAgICBjb250ZW50PWVtYWlsX2RhdGEuaHRtbF9jb250ZW50LCBoZWFkZXJzPXtcInN1YmplY3Q6XCI6IGVtYWlsX2RhdGEuc3ViamVjdH1cbiAgICApXG4uLi5cblBhdGg6IGJhY2tlbmQvYXBwL2FwaS9tYWluLnB5XG5mcm9tIGZhc3RhcGkgaW1wb3J0IEFQSVJvdXRlclxuXG5mcm9tIGFwcC5hcGkucm91dGVzIGltcG9ydCBpdGVtcywgbG9naW4sIHByaXZhdGUsIHVzZXJzLCB1dGlscywgY2hpbGRyZW4sIGdyb3d0aF9yZWNvcmRzLCBkb2N1bWVudHMsIGNoYXRcbmZyb20gYXBwLmNvcmUuY29uZmlnIGltcG9ydCBzZXR0aW5nc1xuXG5hcGlfcm91dGVyID0gQVBJUm91dGVyKClcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIobG9naW4ucm91dGVyKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcih1c2Vycy5yb3V0ZXIpXG5hcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKHV0aWxzLnJvdXRlcilcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIoaXRlbXMucm91dGVyKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihjaGlsZHJlbi5yb3V0ZXIsIHByZWZpeD1cIi9jaGlsZHJlblwiLCB0YWdzPVtcImNoaWxkcmVuXCJdKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihncm93dGhfcmVjb3Jkcy5yb3V0ZXIsIHByZWZpeD1cIi9ncm93dGgtcmVjb3Jkc1wiLCB0YWdzPVtcImdyb3d0aC1yZWNvcmRzXCJdKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihkb2N1bWVudHMucm91dGVyLCBwcmVmaXg9XCIvZG9jdW1lbnRzXCIsIHRhZ3M9W1wiZG9jdW1lbnRzXCJdKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihjaGF0LnJvdXRlciwgcHJlZml4PVwiL2NoYXRcIiwgdGFncz1bXCJjaGF0XCJdKVxuLi4uXG5QYXRoOiBiYWNrZW5kL2FwcC9hcGkvcm91dGVzL3VzZXJzLnB5XG5pbXBvcnQgdXVpZFxuZnJvbSB0eXBpbmcgaW1wb3J0IEFueVxuXG5mcm9tIGZhc3RhcGkgaW1wb3J0IEFQSVJvdXRlciwgRGVwZW5kcywgSFRUUEV4Y2VwdGlvblxuZnJvbSBzcWxtb2RlbCBpbXBvcnQgY29sLCBkZWxldGUsIGZ1bmMsIHNlbGVjdFxuXG5mcm9tIGFwcCBpbXBvcnQgY3J1ZFxuZnJvbSBhcHAuYXBpLmRlcHMgaW1wb3J0IChcbiAgICBDdXJyZW50VXNlcixcbiAgICBTZXNzaW9uRGVwLFxuICAgIGdldF9jdXJyZW50X2FjdGl2ZV9zdXBlcnVzZXIsXG4pXG5mcm9tIGFwcC5jb3JlLmNvbmZpZyBpbXBvcnQgc2V0dGluZ3NcbmZyb20gYXBwLmNvcmUuc2VjdXJpdHkgaW1wb3J0IGdldF9wYXNzd29yZF9oYXNoLCB2ZXJpZnlfcGFzc3dvcmRcbmZyb20gYXBwLm1vZGVscyBpbXBvcnQgKFxuICAgIEl0ZW0sXG4gICAgTWVzc2FnZSxcbiAgICBVcGRhdGVQYXNzd29yZCxcbiAgICBVc2VyLFxuICAgIFVzZXJDcmVhdGUsXG4gICAgVXNlclB1YmxpYyxcbiAgICBVc2VyUmVnaXN0ZXIsXG4gICAgVXNlcnNQdWJsaWMsXG4gICAgVXNlclVwZGF0ZSxcbiAgICBVc2VyVXBkYXRlTWUsXG4pXG5mcm9tIGFwcC51dGlscyBpbXBvcnQgZ2VuZXJhdGVfbmV3X2FjY291bnRfZW1haWwsIHNlbmRfZW1haWxcblxucm91dGVyID0gQVBJUm91dGVyKHByZWZpeD1cIi91c2Vyc1wiLCB0YWdzPVtcInVzZXJzXCJdKVxuXG5cbkByb3V0ZXIuZ2V0KFxuICAgIFwiL1wiLFxuICAgIGRlcGVuZGVuY2llcz1bRGVwZW5kcyhnZXRfY3VycmVudF9hY3RpdmVfc3VwZXJ1c2VyKV0sXG4gICAgcmVzcG9uc2VfbW9kZWw9VXNlcnNQdWJsaWMsXG4pXG4uLi5cbmRlZiBjcmVhdGVfdXNlcigqLCBzZXNzaW9uOiBTZXNzaW9uRGVwLCB1c2VyX2luOiBVc2VyQ3JlYXRlKSAtPiBBbnk6XG4gICAgXCJcIlwiXG4gICAgQ3JlYXRlIG5ldyB1c2VyLlxuICAgIFwiXCJcIlxuICAgIHVzZXIgPSBjcnVkLmdldF91c2VyX2J5X2VtYWlsKHNlc3Npb249c2Vzc2lvbiwgZW1haWw9dXNlcl9pbi5lbWFpbClcbiAgICBpZiB1c2VyOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKFxuICAgICAgICAgICAgc3RhdHVzX2NvZGU9NDAwLFxuICAgICAgICAgICAgZGV0YWlsPVwiVGhlIHVzZXIgd2l0aCB0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3RzIGluIHRoZSBzeXN0ZW0uXCIsXG4gICAgICAgIClcblxuICAgIHVzZXIgPSBjcnVkLmNyZWF0ZV91c2VyKHNlc3Npb249c2Vzc2lvbiwgdXNlcl9jcmVhdGU9dXNlcl9pbilcbiAgICBpZiBzZXR0aW5ncy5lbWFpbHNfZW5hYmxlZCBhbmQgdXNlcl9pbi5lbWFpbDpcbiAgICAgICAgZW1haWxfZGF0YSA9IGdlbmVyYXRlX25ld19hY2NvdW50X2VtYWlsKFxuICAgICAgICAgICAgZW1haWxfdG89dXNlcl9pbi5lbWFpbCwgdXNlcm5hbWU9dXNlcl9pbi5lbWFpbCwgcGFzc3dvcmQ9dXNlcl9pbi5wYXNzd29yZFxuICAgICAgICApXG4gICAgICAgIHNlbmRfZW1haWwoXG4gICAgICAgICAgICBlbWFpbF90bz11c2VyX2luLmVtYWlsLFxuICAgICAgICAgICAgc3ViamVjdD1lbWFpbF9kYXRhLnN1YmplY3QsXG4gICAgICAgICAgICBodG1sX2NvbnRlbnQ9ZW1haWxfZGF0YS5odG1sX2NvbnRlbnQsXG4gICAgICAgIClcbiAgICByZXR1cm4gdXNlclxuXG5cbkByb3V0ZXIucGF0Y2goXCIvbWVcIiwgcmVzcG9uc2VfbW9kZWw9VXNlclB1YmxpYylcbmRlZiB1cGRhdGVfdXNlcl9tZShcbiAgICAqLCBzZXNzaW9uOiBTZXNzaW9uRGVwLCB1c2VyX2luOiBVc2VyVXBkYXRlTWUsIGN1cnJlbnRfdXNlcjogQ3VycmVudFVzZXJcbikgLT4gQW55OlxuICAgIFwiXCJcIlxuICAgIFVwZGF0ZSBvd24gdXNlci5cbiAgICBcIlwiXCJcblxuICAgIGlmIHVzZXJfaW4uZW1haWw6XG4gICAgICAgIGV4aXN0aW5nX3VzZXIgPSBjcnVkLmdldF91c2VyX2J5X2VtYWlsKHNlc3Npb249c2Vzc2lvbiwgZW1haWw9dXNlcl9pbi5lbWFpbClcbiAgICAgICAgaWYgZXhpc3RpbmdfdXNlciBhbmQgZXhpc3RpbmdfdXNlci5pZCAhPSBjdXJyZW50X3VzZXIuaWQ6XG4gICAgICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgIHN0YXR1c19jb2RlPTQwOSwgZGV0YWlsPVwiVXNlciB3aXRoIHRoaXMgZW1haWwgYWxyZWFkeSBleGlzdHNcIlxuICAgICAgICAgICAgKVxuICAgIHVzZXJfZGF0YSA9IHVzZXJfaW4ubW9kZWxfZHVtcChleGNsdWRlX3Vuc2V0PVRydWUpXG4gICAgY3VycmVudF91c2VyLnNxbG1vZGVsX3VwZGF0ZSh1c2VyX2RhdGEpXG4gICAgc2Vzc2lvbi5hZGQoY3VycmVudF91c2VyKVxuICAgIHNlc3Npb24uY29tbWl0KClcbiAgICBzZXNzaW9uLnJlZnJlc2goY3VycmVudF91c2VyKVxuICAgIHJldHVybiBjdXJyZW50X3VzZXJcbi4uLlxuXG5cbkByb3V0ZXIucG9zdChcIi9zaWdudXBcIiwgcmVzcG9uc2VfbW9kZWw9VXNlclB1YmxpYylcbmRlZiByZWdpc3Rlcl91c2VyKHNlc3Npb246IFNlc3Npb25EZXAsIHVzZXJfaW46IFVzZXJSZWdpc3RlcikgLT4gQW55OlxuICAgIFwiXCJcIlxuICAgIENyZWF0ZSBuZXcgdXNlciB3aXRob3V0IHRoZSBuZWVkIHRvIGJlIGxvZ2dlZCBpbi5cbiAgICBcIlwiXCJcbiAgICB1c2VyID0gY3J1ZC5nZXRfdXNlcl9ieV9lbWFpbChzZXNzaW9uPXNlc3Npb24sIGVtYWlsPXVzZXJfaW4uZW1haWwpXG4gICAgaWYgdXNlcjpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihcbiAgICAgICAgICAgIHN0YXR1c19jb2RlPTQwMCxcbiAgICAgICAgICAgIGRldGFpbD1cIlRoZSB1c2VyIHdpdGggdGhpcyBlbWFpbCBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgc3lzdGVtXCIsXG4gICAgICAgIClcbiAgICB1c2VyX2NyZWF0ZSA9IFVzZXJDcmVhdGUubW9kZWxfdmFsaWRhdGUodXNlcl9pbilcbiAgICB1c2VyID0gY3J1ZC5jcmVhdGVfdXNlcihzZXNzaW9uPXNlc3Npb24sIHVzZXJfY3JlYXRlPXVzZXJfY3JlYXRlKVxuICAgIHJldHVybiB1c2VyXG5cblxuQHJvdXRlci5nZXQoXCIve3VzZXJfaWR9XCIsIHJlc3BvbnNlX21vZGVsPVVzZXJQdWJsaWMpXG5kZWYgcmVhZF91c2VyX2J5X2lkKFxuICAgIHVzZXJfaWQ6IHV1aWQuVVVJRCwgc2Vzc2lvbjogU2Vzc2lvbkRlcCwgY3VycmVudF91c2VyOiBDdXJyZW50VXNlclxuKSAtPiBBbnk6XG4gICAgXCJcIlwiXG4gICAgR2V0IGEgc3BlY2lmaWMgdXNlciBieSBpZC5cbiAgICBcIlwiXCJcbiAgICB1c2VyID0gc2Vzc2lvbi5nZXQoVXNlciwgdXNlcl9pZClcbiAgICBpZiB1c2VyID09IGN1cnJlbnRfdXNlcjpcbiAgICAgICAgcmV0dXJuIHVzZXJcbiAgICBpZiBub3QgY3VycmVudF91c2VyLmlzX3N1cGVydXNlcjpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihcbiAgICAgICAgICAgIHN0YXR1c19jb2RlPTQwMyxcbiAgICAgICAgICAgIGRldGFpbD1cIlRoZSB1c2VyIGRvZXNuJ3QgaGF2ZSBlbm91Z2ggcHJpdmlsZWdlc1wiLFxuICAgICAgICApXG4gICAgcmV0dXJuIHVzZXJcblxuXG5Acm91dGVyLnBhdGNoKFxuICAgIFwiL3t1c2VyX2lkfVwiLFxuICAgIGRlcGVuZGVuY2llcz1bRGVwZW5kcyhnZXRfY3VycmVudF9hY3RpdmVfc3VwZXJ1c2VyKV0sXG4gICAgcmVzcG9uc2VfbW9kZWw9VXNlclB1YmxpYyxcbilcbmRlZiB1cGRhdGVfdXNlcihcbiAgICAqLFxuICAgIHNlc3Npb246IFNlc3Npb25EZXAsXG4gICAgdXNlcl9pZDogdXVpZC5VVUlELFxuICAgIHVzZXJfaW46IFVzZXJVcGRhdGUsXG4pIC0+IEFueTpcbiAgICBcIlwiXCJcbiAgICBVcGRhdGUgYSB1c2VyLlxuICAgIFwiXCJcIlxuXG4gICAgZGJfdXNlciA9IHNlc3Npb24uZ2V0KFVzZXIsIHVzZXJfaWQpXG4gICAgaWYgbm90IGRiX3VzZXI6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oXG4gICAgICAgICAgICBzdGF0dXNfY29kZT00MDQsXG4gICAgICAgICAgICBkZXRhaWw9XCJUaGUgdXNlciB3aXRoIHRoaXMgaWQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIHN5c3RlbVwiLFxuICAgICAgICApXG4gICAgaWYgdXNlcl9pbi5lbWFpbDpcbiAgICAgICAgZXhpc3RpbmdfdXNlciA9IGNydWQuZ2V0X3VzZXJfYnlfZW1haWwoc2Vzc2lvbj1zZXNzaW9uLCBlbWFpbD11c2VyX2luLmVtYWlsKVxuICAgICAgICBpZiBleGlzdGluZ191c2VyIGFuZCBleGlzdGluZ191c2VyLmlkICE9IHVzZXJfaWQ6XG4gICAgICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgIHN0YXR1c19jb2RlPTQwOSwgZGV0YWlsPVwiVXNlciB3aXRoIHRoaXMgZW1haWwgYWxyZWFkeSBleGlzdHNcIlxuICAgICAgICAgICAgKVxuXG4gICAgZGJfdXNlciA9IGNydWQudXBkYXRlX3VzZXIoc2Vzc2lvbj1zZXNzaW9uLCBkYl91c2VyPWRiX3VzZXIsIHVzZXJfaW49dXNlcl9pbilcbiAgICByZXR1cm4gZGJfdXNlclxuXG5cbkByb3V0ZXIuZGVsZXRlKFwiL3t1c2VyX2lkfVwiLCBkZXBlbmRlbmNpZXM9W0RlcGVuZHMoZ2V0X2N1cnJlbnRfYWN0aXZlX3N1cGVydXNlcildKVxuZGVmIGRlbGV0ZV91c2VyKFxuICAgIHNlc3Npb246IFNlc3Npb25EZXAsIGN1cnJlbnRfdXNlcjogQ3VycmVudFVzZXIsIHVzZXJfaWQ6IHV1aWQuVVVJRFxuKSAtPiBNZXNzYWdlOlxuICAgIFwiXCJcIlxuICAgIERlbGV0ZSBhIHVzZXIuXG4gICAgXCJcIlwiXG4gICAgdXNlciA9IHNlc3Npb24uZ2V0KFVzZXIsIHVzZXJfaWQpXG4gICAgaWYgbm90IHVzZXI6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDA0LCBkZXRhaWw9XCJVc2VyIG5vdCBmb3VuZFwiKVxuICAgIGlmIHVzZXIgPT0gY3VycmVudF91c2VyOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKFxuICAgICAgICAgICAgc3RhdHVzX2NvZGU9NDAzLCBkZXRhaWw9XCJTdXBlciB1c2VycyBhcmUgbm90IGFsbG93ZWQgdG8gZGVsZXRlIHRoZW1zZWx2ZXNcIlxuICAgICAgICApXG4gICAgc3RhdGVtZW50ID0gZGVsZXRlKEl0ZW0pLndoZXJlKGNvbChJdGVtLm93bmVyX2lkKSA9PSB1c2VyX2lkKVxuICAgIHNlc3Npb24uZXhlYyhzdGF0ZW1lbnQpICAjIHR5cGU6IGlnbm9yZVxuICAgIHNlc3Npb24uZGVsZXRlKHVzZXIpXG4gICAgc2Vzc2lvbi5jb21taXQoKVxuICAgIHJldHVybiBNZXNzYWdlKG1lc3NhZ2U9XCJVc2VyIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5XCIpXG4uLi5cblBhdGg6IGZyb250ZW5kL3NyYy9yb3V0ZXMvbG9naW4udHN4XG5pbXBvcnQgeyBDb250YWluZXIsIEltYWdlLCBJbnB1dCwgVGV4dCB9IGZyb20gXCJAY2hha3JhLXVpL3JlYWN0XCJcbmltcG9ydCB7XG4gIExpbmsgYXMgUm91dGVyTGluayxcbiAgY3JlYXRlRmlsZVJvdXRlLFxuICByZWRpcmVjdCxcbn0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1yb3V0ZXJcIlxuaW1wb3J0IHsgdHlwZSBTdWJtaXRIYW5kbGVyLCB1c2VGb3JtIH0gZnJvbSBcInJlYWN0LWhvb2stZm9ybVwiXG5pbXBvcnQgeyBGaUxvY2ssIEZpTWFpbCB9IGZyb20gXCJyZWFjdC1pY29ucy9maVwiXG5cbmltcG9ydCB0eXBlIHsgQm9keV9sb2dpbl9sb2dpbl9hY2Nlc3NfdG9rZW4gYXMgQWNjZXNzVG9rZW4gfSBmcm9tIFwiQC9jbGllbnRcIlxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9idXR0b25cIlxuaW1wb3J0IHsgRmllbGQgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2ZpZWxkXCJcbmltcG9ydCB7IElucHV0R3JvdXAgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2lucHV0LWdyb3VwXCJcbmltcG9ydCB7IFBhc3N3b3JkSW5wdXQgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL3Bhc3N3b3JkLWlucHV0XCJcbmltcG9ydCB1c2VBdXRoLCB7IGlzTG9nZ2VkSW4gfSBmcm9tIFwiQC9ob29rcy91c2VBdXRoXCJcbmltcG9ydCBMb2dvIGZyb20gXCIvYXNzZXRzL2ltYWdlcy9mYXN0YXBpLWxvZ28uc3ZnXCJcbmltcG9ydCB7IGVtYWlsUGF0dGVybiwgcGFzc3dvcmRSdWxlcyB9IGZyb20gXCIuLi91dGlsc1wiXG5cbmV4cG9ydCBjb25zdCBSb3V0ZSA9IGNyZWF0ZUZpbGVSb3V0ZShcIi9sb2dpblwiKSh7XG4gIGNvbXBvbmVudDogTG9naW4sXG4gIGJlZm9yZUxvYWQ6IGFzeW5jICgpID0+IHtcbiAgICBpZiAoaXNMb2dnZWRJbigpKSB7XG4gICAgICB0aHJvdyByZWRpcmVjdCh7XG4gICAgICAgIHRvOiBcIi9cIixcbiAgICAgIH0pXG4gICAgfVxuICB9LFxufSlcblxuZnVuY3Rpb24gTG9naW4oKSB7XG4gIGNvbnN0IHsgbG9naW5NdXRhdGlvbiwgZXJyb3IsIHJlc2V0RXJyb3IgfSA9IHVzZUF1dGgoKVxuICBjb25zdCB7XG4gICAgcmVnaXN0ZXIsXG4gICAgaGFuZGxlU3VibWl0LFxuICAgIGZvcm1TdGF0ZTogeyBlcnJvcnMsIGlzU3VibWl0dGluZyB9LFxuICB9ID0gdXNlRm9ybTxBY2Nlc3NUb2tlbj4oe1xuICAgIG1vZGU6IFwib25CbHVyXCIsXG4gICAgY3JpdGVyaWFNb2RlOiBcImFsbFwiLFxuICAgIGRlZmF1bHRWYWx1ZXM6IHtcbiAgICAgIHVzZXJuYW1lOiBcIlwiLFxuICAgICAgcGFzc3dvcmQ6IFwiXCIsXG4gICAgfSxcbiAgfSlcblxuICBjb25zdCBvblN1Ym1pdDogU3VibWl0SGFuZGxlcjxBY2Nlc3NUb2tlbj4gPSBhc3luYyAoZGF0YSkgPT4ge1xuICAgIGlmIChpc1N1Ym1pdHRpbmcpIHJldHVyblxuXG4gICAgcmVzZXRFcnJvcigpXG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgbG9naW5NdXRhdGlvbi5tdXRhdGVBc3luYyhkYXRhKVxuICAgIH0gY2F0Y2gge1xuICAgICAgLy8gZXJyb3IgaXMgaGFuZGxlZCBieSB1c2VBdXRoIGhvb2tcbiAgICB9XG4gIH1cbi4uLlxuUGF0aDogZG9jL0Z1bGwtU3RhY2stRmFzdEFQSS1UZW1wbGF0ZeWtpuS5oOaJi+WGjC5tZFxuLi4uXG5cbiMjIDEwLiBBUEkg5byA5Y+RXG5cbiMjIyDot6/nlLHnu4Tnu4dcblxuQVBJIOi3r+eUsee7hOe7h+WcqCBgYmFja2VuZC9hcHAvYXBpL3JvdXRlcy9gIOebruW9leS4i++8mlxuXG5gYGBweXRob25cbiMgYmFja2VuZC9hcHAvYXBpL21haW4ucHlcbmZyb20gZmFzdGFwaSBpbXBvcnQgQVBJUm91dGVyXG5mcm9tIGFwcC5hcGkucm91dGVzIGltcG9ydCBpdGVtcywgbG9naW4sIHVzZXJzLCB1dGlsc1xuXG5hcGlfcm91dGVyID0gQVBJUm91dGVyKClcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIobG9naW4ucm91dGVyKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcih1c2Vycy5yb3V0ZXIpXG5hcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKHV0aWxzLnJvdXRlcilcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIoaXRlbXMucm91dGVyKVxuYGBgXG5cbiMjIyBDUlVEIOaTjeS9nFxuXG5DUlVEIOaTjeS9nOWwgeijheWcqCBgYmFja2VuZC9hcHAvY3J1ZC5weWAg5Lit77yaXG5cbmBgYHB5dGhvblxuIyBiYWNrZW5kL2FwcC9jcnVkLnB5XG5mcm9tIHNxbG1vZGVsIGltcG9ydCBTZXNzaW9uLCBzZWxlY3RcbmZyb20gYXBwLm1vZGVscyBpbXBvcnQgVXNlciwgVXNlckNyZWF0ZVxuXG5kZWYgZ2V0X3VzZXIoc2Vzc2lvbjogU2Vzc2lvbiwgdXNlcl9pZDogc3RyKSAtPiBVc2VyIHwgTm9uZTpcbiAgICByZXR1cm4gc2Vzc2lvbi5leGVjKHNlbGVjdChVc2VyKS53aGVyZShVc2VyLmlkID09IHVzZXJfaWQpKS5maXJzdCgpXG4uLi5cblBhdGg6IGJhY2tlbmQvYXBwL2FwaS9yb3V0ZXMvcHJpdmF0ZS5weVxuZnJvbSB0eXBpbmcgaW1wb3J0IEFueVxuXG5mcm9tIGZhc3RhcGkgaW1wb3J0IEFQSVJvdXRlclxuZnJvbSBweWRhbnRpYyBpbXBvcnQgQmFzZU1vZGVsXG5cbmZyb20gYXBwLmFwaS5kZXBzIGltcG9ydCBTZXNzaW9uRGVwXG5mcm9tIGFwcC5jb3JlLnNlY3VyaXR5IGltcG9ydCBnZXRfcGFzc3dvcmRfaGFzaFxuZnJvbSBhcHAubW9kZWxzIGltcG9ydCAoXG4gICAgVXNlcixcbiAgICBVc2VyUHVibGljLFxuKVxuXG5yb3V0ZXIgPSBBUElSb3V0ZXIodGFncz1bXCJwcml2YXRlXCJdLCBwcmVmaXg9XCIvcHJpdmF0ZVwiKVxuXG5cbmNsYXNzIFByaXZhdGVVc2VyQ3JlYXRlKEJhc2VNb2RlbCk6XG4gICAgZW1haWw6IHN0clxuICAgIHBhc3N3b3JkOiBzdHJcbiAgICBmdWxsX25hbWU6IHN0clxuICAgIGlzX3ZlcmlmaWVkOiBib29sID0gRmFsc2VcblxuXG5Acm91dGVyLnBvc3QoXCIvdXNlcnMvXCIsIHJlc3BvbnNlX21vZGVsPVVzZXJQdWJsaWMpXG5kZWYgY3JlYXRlX3VzZXIodXNlcl9pbjogUHJpdmF0ZVVzZXJDcmVhdGUsIHNlc3Npb246IFNlc3Npb25EZXApIC0+IEFueTpcbiAgICBcIlwiXCJcbiAgICBDcmVhdGUgYSBuZXcgdXNlci5cbiAgICBcIlwiXCJcblxuICAgIHVzZXIgPSBVc2VyKFxuICAgICAgICBlbWFpbD11c2VyX2luLmVtYWlsLFxuICAgICAgICBmdWxsX25hbWU9dXNlcl9pbi5mdWxsX25hbWUsXG4gICAgICAgIGhhc2hlZF9wYXNzd29yZD1nZXRfcGFzc3dvcmRfaGFzaCh1c2VyX2luLnBhc3N3b3JkKSxcbiAgICApXG5cbiAgICBzZXNzaW9uLmFkZCh1c2VyKVxuICAgIHNlc3Npb24uY29tbWl0KClcblxuICAgIHJldHVybiB1c2VyXG4uLi5cblBhdGg6IGZyb250ZW5kL3NyYy9yb3V0ZXMvc2lnbnVwLnRzeFxuaW1wb3J0IHsgQ29udGFpbmVyLCBGbGV4LCBJbWFnZSwgSW5wdXQsIFRleHQgfSBmcm9tIFwiQGNoYWtyYS11aS9yZWFjdFwiXG5pbXBvcnQge1xuICBMaW5rIGFzIFJvdXRlckxpbmssXG4gIGNyZWF0ZUZpbGVSb3V0ZSxcbiAgcmVkaXJlY3QsXG59IGZyb20gXCJAdGFuc3RhY2svcmVhY3Qtcm91dGVyXCJcbmltcG9ydCB7IHR5cGUgU3VibWl0SGFuZGxlciwgdXNlRm9ybSB9IGZyb20gXCJyZWFjdC1ob29rLWZvcm1cIlxuaW1wb3J0IHsgRmlMb2NrLCBGaVVzZXIgfSBmcm9tIFwicmVhY3QtaWNvbnMvZmlcIlxuXG5pbXBvcnQgdHlwZSB7IFVzZXJSZWdpc3RlciB9IGZyb20gXCJAL2NsaWVudFwiXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2J1dHRvblwiXG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvZmllbGRcIlxuaW1wb3J0IHsgSW5wdXRHcm91cCB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvaW5wdXQtZ3JvdXBcIlxuaW1wb3J0IHsgUGFzc3dvcmRJbnB1dCB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvcGFzc3dvcmQtaW5wdXRcIlxuaW1wb3J0IHVzZUF1dGgsIHsgaXNMb2dnZWRJbiB9IGZyb20gXCJAL2hvb2tzL3VzZUF1dGhcIlxuaW1wb3J0IHsgY29uZmlybVBhc3N3b3JkUnVsZXMsIGVtYWlsUGF0dGVybiwgcGFzc3dvcmRSdWxlcyB9IGZyb20gXCJAL3V0aWxzXCJcbmltcG9ydCBMb2dvIGZyb20gXCIvYXNzZXRzL2ltYWdlcy9mYXN0YXBpLWxvZ28uc3ZnXCJcblxuZXhwb3J0IGNvbnN0IFJvdXRlID0gY3JlYXRlRmlsZVJvdXRlKFwiL3NpZ251cFwiKSh7XG4gIGNvbXBvbmVudDogU2lnblVwLFxuICBiZWZvcmVMb2FkOiBhc3luYyAoKSA9PiB7XG4gICAgaWYgKGlzTG9nZ2VkSW4oKSkge1xuICAgICAgdGhyb3cgcmVkaXJlY3Qoe1xuICAgICAgICB0bzogXCIvXCIsXG4gICAgICB9KVxuICAgIH1cbiAgfSxcbn0pXG5cbmludGVyZmFjZSBVc2VyUmVnaXN0ZXJGb3JtIGV4dGVuZHMgVXNlclJlZ2lzdGVyIHtcbiAgY29uZmlybV9wYXNzd29yZDogc3RyaW5nXG59XG5cbmZ1bmN0aW9uIFNpZ25VcCgpIHtcbiAgY29uc3QgeyBzaWduVXBNdXRhdGlvbiB9ID0gdXNlQXV0aCgpXG4gIGNvbnN0IHtcbiAgICByZWdpc3RlcixcbiAgICBoYW5kbGVTdWJtaXQsXG4gICAgZ2V0VmFsdWVzLFxuICAgIGZvcm1TdGF0ZTogeyBlcnJvcnMsIGlzU3VibWl0dGluZyB9LFxuICB9ID0gdXNlRm9ybTxVc2VyUmVnaXN0ZXJGb3JtPih7XG4gICAgbW9kZTogXCJvbkJsdXJcIixcbiAgICBjcml0ZXJpYU1vZGU6IFwiYWxsXCIsXG4gICAgZGVmYXVsdFZhbHVlczoge1xuICAgICAgZW1haWw6IFwiXCIsXG4gICAgICBmdWxsX25hbWU6IFwiXCIsXG4gICAgICBwYXNzd29yZDogXCJcIixcbiAgICAgIGNvbmZpcm1fcGFzc3dvcmQ6IFwiXCIsXG4gICAgfSxcbiAgfSlcblxuICBjb25zdCBvblN1Ym1pdDogU3VibWl0SGFuZGxlcjxVc2VyUmVnaXN0ZXJGb3JtPiA9IChkYXRhKSA9PiB7XG4gICAgc2lnblVwTXV0YXRpb24ubXV0YXRlKGRhdGEpXG4gIH1cbi4uLlxuUGF0aDogYmFja2VuZC9hcHAvdGVzdHMvYXBpL3JvdXRlcy90ZXN0X2xvZ2luLnB5XG4uLi5cblxuXG5kZWYgdGVzdF91c2VfYWNjZXNzX3Rva2VuKFxuICAgIGNsaWVudDogVGVzdENsaWVudCwgc3VwZXJ1c2VyX3Rva2VuX2hlYWRlcnM6IGRpY3Rbc3RyLCBzdHJdXG4pIC0+IE5vbmU6XG4gICAgciA9IGNsaWVudC5wb3N0KFxuICAgICAgICBmXCJ7c2V0dGluZ3MuQVBJX1YxX1NUUn0vbG9naW4vdGVzdC10b2tlblwiLFxuICAgICAgICBoZWFkZXJzPXN1cGVydXNlcl90b2tlbl9oZWFkZXJzLFxuICAgIClcbiAgICByZXN1bHQgPSByLmpzb24oKVxuICAgIGFzc2VydCByLnN0YXR1c19jb2RlID09IDIwMFxuICAgIGFzc2VydCBcImVtYWlsXCIgaW4gcmVzdWx0XG5cblxuZGVmIHRlc3RfcmVjb3ZlcnlfcGFzc3dvcmQoXG4gICAgY2xpZW50OiBUZXN0Q2xpZW50LCBub3JtYWxfdXNlcl90b2tlbl9oZWFkZXJzOiBkaWN0W3N0ciwgc3RyXVxuKSAtPiBOb25lOlxuICAgIHdpdGggKFxuICAgICAgICBwYXRjaChcImFwcC5jb3JlLmNvbmZpZy5zZXR0aW5ncy5TTVRQX0hPU1RcIiwgXCJzbXRwLmV4YW1wbGUuY29tXCIpLFxuICAgICAgICBwYXRjaChcImFwcC5jb3JlLmNvbmZpZy5zZXR0aW5ncy5TTVRQX1VTRVJcIiwgXCJhZG1pbkBleGFtcGxlLmNvbVwiKSxcbiAgICApOlxuICAgICAgICBlbWFpbCA9IFwidGVzdEBleGFtcGxlLmNvbVwiXG4gICAgICAgIHIgPSBjbGllbnQucG9zdChcbiAgICAgICAgICAgIGZcIntzZXR0aW5ncy5BUElfVjFfU1RSfS9wYXNzd29yZC1yZWNvdmVyeS97ZW1haWx9XCIsXG4gICAgICAgICAgICBoZWFkZXJzPW5vcm1hbF91c2VyX3Rva2VuX2hlYWRlcnMsXG4gICAgICAgIClcbiAgICAgICAgYXNzZXJ0IHIuc3RhdHVzX2NvZGUgPT0gMjAwXG4gICAgICAgIGFzc2VydCByLmpzb24oKSA9PSB7XCJtZXNzYWdlXCI6IFwiUGFzc3dvcmQgcmVjb3ZlcnkgZW1haWwgc2VudFwifVxuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvcm91dGVUcmVlLmdlbi50c1xuLi4uXG4gICAgJy9fbGF5b3V0L3NldHRpbmdzJzoge1xuICAgICAgcHJlTG9hZGVyUm91dGU6IHR5cGVvZiBMYXlvdXRTZXR0aW5nc0ltcG9ydFxuICAgICAgcGFyZW50Um91dGU6IHR5cGVvZiBMYXlvdXRJbXBvcnRcbiAgICB9XG4gICAgJy9fbGF5b3V0Lyc6IHtcbiAgICAgIHByZUxvYWRlclJvdXRlOiB0eXBlb2YgTGF5b3V0SW5kZXhJbXBvcnRcbiAgICAgIHBhcmVudFJvdXRlOiB0eXBlb2YgTGF5b3V0SW1wb3J0XG4gICAgfVxuICB9XG59XG5cbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSB0cmVlXG5cbmV4cG9ydCBjb25zdCByb3V0ZVRyZWUgPSByb290Um91dGUuYWRkQ2hpbGRyZW4oW1xuICBMYXlvdXRSb3V0ZS5hZGRDaGlsZHJlbihbXG4gICAgTGF5b3V0QWRtaW5Sb3V0ZSxcbiAgICBMYXlvdXRJdGVtc1JvdXRlLFxuICAgIExheW91dFNldHRpbmdzUm91dGUsXG4gICAgTGF5b3V0SW5kZXhSb3V0ZSxcbiAgXSksXG4gIExvZ2luUm91dGUsXG4gIFJlY292ZXJQYXNzd29yZFJvdXRlLFxuICBSZXNldFBhc3N3b3JkUm91dGUsXG4gIFNpZ251cFJvdXRlLFxuXSlcblxuLyogcHJldHRpZXItaWdub3JlLWVuZCAqL1xuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvaG9va3MvdXNlQXV0aC50c1xuaW1wb3J0IHsgdXNlTXV0YXRpb24sIHVzZVF1ZXJ5LCB1c2VRdWVyeUNsaWVudCB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIlxuaW1wb3J0IHsgdXNlTmF2aWdhdGUgfSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXJvdXRlclwiXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5cbmltcG9ydCB7XG4gIHR5cGUgQm9keV9sb2dpbl9sb2dpbl9hY2Nlc3NfdG9rZW4gYXMgQWNjZXNzVG9rZW4sXG4gIHR5cGUgQXBpRXJyb3IsXG4gIExvZ2luU2VydmljZSxcbiAgdHlwZSBVc2VyUHVibGljLFxuICB0eXBlIFVzZXJSZWdpc3RlcixcbiAgVXNlcnNTZXJ2aWNlLFxufSBmcm9tIFwiQC9jbGllbnRcIlxuaW1wb3J0IHsgaGFuZGxlRXJyb3IgfSBmcm9tIFwiQC91dGlsc1wiXG5cbmNvbnN0IGlzTG9nZ2VkSW4gPSAoKSA9PiB7XG4gIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImFjY2Vzc190b2tlblwiKSAhPT0gbnVsbFxufVxuXG5jb25zdCB1c2VBdXRoID0gKCkgPT4ge1xuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpXG4gIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKVxuICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KClcbiAgY29uc3QgeyBkYXRhOiB1c2VyIH0gPSB1c2VRdWVyeTxVc2VyUHVibGljIHwgbnVsbCwgRXJyb3I+KHtcbiAgICBxdWVyeUtleTogW1wiY3VycmVudFVzZXJcIl0sXG4gICAgcXVlcnlGbjogVXNlcnNTZXJ2aWNlLnJlYWRVc2VyTWUsXG4gICAgZW5hYmxlZDogaXNMb2dnZWRJbigpLFxuICB9KVxuXG4gIGNvbnN0IHNpZ25VcE11dGF0aW9uID0gdXNlTXV0YXRpb24oe1xuICAgIG11dGF0aW9uRm46IChkYXRhOiBVc2VyUmVnaXN0ZXIpID0+XG4gICAgICBVc2Vyc1NlcnZpY2UucmVnaXN0ZXJVc2VyKHsgcmVxdWVzdEJvZHk6IGRhdGEgfSksXG5cbiAgICBvblN1Y2Nlc3M6ICgpID0+IHtcbiAgICAgIG5hdmlnYXRlKHsgdG86IFwiL2xvZ2luXCIgfSlcbiAgICB9LFxuICAgIG9uRXJyb3I6IChlcnI6IEFwaUVycm9yKSA9PiB7XG4gICAgICBoYW5kbGVFcnJvcihlcnIpXG4gICAgfSxcbiAgICBvblNldHRsZWQ6ICgpID0+IHtcbiAgICAgIHF1ZXJ5Q2xpZW50LmludmFsaWRhdGVRdWVyaWVzKHsgcXVlcnlLZXk6IFtcInVzZXJzXCJdIH0pXG4gICAgfSxcbiAgfSlcblxuICBjb25zdCBsb2dpbiA9IGFzeW5jIChkYXRhOiBBY2Nlc3NUb2tlbikgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgTG9naW5TZXJ2aWNlLmxvZ2luQWNjZXNzVG9rZW4oe1xuICAgICAgZm9ybURhdGE6IGRhdGEsXG4gICAgfSlcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImFjY2Vzc190b2tlblwiLCByZXNwb25zZS5hY2Nlc3NfdG9rZW4pXG4gIH1cblxuICBjb25zdCBsb2dpbk11dGF0aW9uID0gdXNlTXV0YXRpb24oe1xuICAgIG11dGF0aW9uRm46IGxvZ2luLFxuICAgIG9uU3VjY2VzczogKCkgPT4ge1xuICAgICAgbmF2aWdhdGUoeyB0bzogXCIvXCIgfSlcbiAgICB9LFxuICAgIG9uRXJyb3I6IChlcnI6IEFwaUVycm9yKSA9PiB7XG4gICAgICBoYW5kbGVFcnJvcihlcnIpXG4gICAgfSxcbiAgfSlcblxuICBjb25zdCBsb2dvdXQgPSAoKSA9PiB7XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJhY2Nlc3NfdG9rZW5cIilcbiAgICBuYXZpZ2F0ZSh7IHRvOiBcIi9sb2dpblwiIH0pXG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNpZ25VcE11dGF0aW9uLFxuICAgIGxvZ2luTXV0YXRpb24sXG4gICAgbG9nb3V0LFxuICAgIHVzZXIsXG4gICAgZXJyb3IsXG4gICAgcmVzZXRFcnJvcjogKCkgPT4gc2V0RXJyb3IobnVsbCksXG4gIH1cbn1cblxuZXhwb3J0IHsgaXNMb2dnZWRJbiB9XG5leHBvcnQgZGVmYXVsdCB1c2VBdXRoXG4uLi5cblBhdGg6IGZyb250ZW5kL3NyYy9tYWluLnRzeFxuaW1wb3J0IHtcbiAgTXV0YXRpb25DYWNoZSxcbiAgUXVlcnlDYWNoZSxcbiAgUXVlcnlDbGllbnQsXG4gIFF1ZXJ5Q2xpZW50UHJvdmlkZXIsXG59IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIlxuaW1wb3J0IHsgUm91dGVyUHJvdmlkZXIsIGNyZWF0ZVJvdXRlciB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3Qtcm91dGVyXCJcbmltcG9ydCBSZWFjdCwgeyBTdHJpY3RNb2RlIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tL2NsaWVudFwiXG5pbXBvcnQgeyByb3V0ZVRyZWUgfSBmcm9tIFwiLi9yb3V0ZVRyZWUuZ2VuXCJcblxuaW1wb3J0IHsgQXBpRXJyb3IsIE9wZW5BUEkgfSBmcm9tIFwiLi9jbGllbnRcIlxuaW1wb3J0IHsgQ3VzdG9tUHJvdmlkZXIgfSBmcm9tIFwiLi9jb21wb25lbnRzL3VpL3Byb3ZpZGVyXCJcblxuT3BlbkFQSS5CQVNFID0gaW1wb3J0Lm1ldGEuZW52LlZJVEVfQVBJX1VSTFxuT3BlbkFQSS5UT0tFTiA9IGFzeW5jICgpID0+IHtcbiAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiYWNjZXNzX3Rva2VuXCIpIHx8IFwiXCJcbn1cblxuY29uc3QgaGFuZGxlQXBpRXJyb3IgPSAoZXJyb3I6IEVycm9yKSA9PiB7XG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIEFwaUVycm9yICYmIFs0MDEsIDQwM10uaW5jbHVkZXMoZXJyb3Iuc3RhdHVzKSkge1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiYWNjZXNzX3Rva2VuXCIpXG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBcIi9sb2dpblwiXG4gIH1cbn1cbi4uLlxuUGF0aDogZnJvbnRlbmQvc3JjL3JvdXRlcy9yZWNvdmVyLXBhc3N3b3JkLnRzeFxuLi4uXG5cbmV4cG9ydCBjb25zdCBSb3V0ZSA9IGNyZWF0ZUZpbGVSb3V0ZShcIi9yZWNvdmVyLXBhc3N3b3JkXCIpKHtcbiAgY29tcG9uZW50OiBSZWNvdmVyUGFzc3dvcmQsXG4gIGJlZm9yZUxvYWQ6IGFzeW5jICgpID0+IHtcbiAgICBpZiAoaXNMb2dnZWRJbigpKSB7XG4gICAgICB0aHJvdyByZWRpcmVjdCh7XG4gICAgICAgIHRvOiBcIi9cIixcbiAgICAgIH0pXG4gICAgfVxuICB9LFxufSlcblxuZnVuY3Rpb24gUmVjb3ZlclBhc3N3b3JkKCkge1xuICBjb25zdCB7XG4gICAgcmVnaXN0ZXIsXG4gICAgaGFuZGxlU3VibWl0LFxuICAgIHJlc2V0LFxuICAgIGZvcm1TdGF0ZTogeyBlcnJvcnMsIGlzU3VibWl0dGluZyB9LFxuICB9ID0gdXNlRm9ybTxGb3JtRGF0YT4oKVxuICBjb25zdCB7IHNob3dTdWNjZXNzVG9hc3QgfSA9IHVzZUN1c3RvbVRvYXN0KClcblxuICBjb25zdCByZWNvdmVyUGFzc3dvcmQgPSBhc3luYyAoZGF0YTogRm9ybURhdGEpID0+IHtcbiAgICBhd2FpdCBMb2dpblNlcnZpY2UucmVjb3ZlclBhc3N3b3JkKHtcbiAgICAgIGVtYWlsOiBkYXRhLmVtYWlsLFxuICAgIH0pXG4gIH1cblxuICBjb25zdCBtdXRhdGlvbiA9IHVzZU11dGF0aW9uKHtcbiAgICBtdXRhdGlvbkZuOiByZWNvdmVyUGFzc3dvcmQsXG4gICAgb25TdWNjZXNzOiAoKSA9PiB7XG4gICAgICBzaG93U3VjY2Vzc1RvYXN0KFwiUGFzc3dvcmQgcmVjb3ZlcnkgZW1haWwgc2VudCBzdWNjZXNzZnVsbHkuXCIpXG4gICAgICByZXNldCgpXG4gICAgfSxcbiAgICBvbkVycm9yOiAoZXJyOiBBcGlFcnJvcikgPT4ge1xuICAgICAgaGFuZGxlRXJyb3IoZXJyKVxuICAgIH0sXG4gIH0pXG5cbiAgY29uc3Qgb25TdWJtaXQ6IFN1Ym1pdEhhbmRsZXI8Rm9ybURhdGE+ID0gYXN5bmMgKGRhdGEpID0+IHtcbiAgICBtdXRhdGlvbi5tdXRhdGUoZGF0YSlcbiAgfVxuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvcm91dGVzL3Jlc2V0LXBhc3N3b3JkLnRzeFxuLi4uXG5cbmZ1bmN0aW9uIFJlc2V0UGFzc3dvcmQoKSB7XG4gIGNvbnN0IHtcbiAgICByZWdpc3RlcixcbiAgICBoYW5kbGVTdWJtaXQsXG4gICAgZ2V0VmFsdWVzLFxuICAgIHJlc2V0LFxuICAgIGZvcm1TdGF0ZTogeyBlcnJvcnMgfSxcbiAgfSA9IHVzZUZvcm08TmV3UGFzc3dvcmRGb3JtPih7XG4gICAgbW9kZTogXCJvbkJsdXJcIixcbiAgICBjcml0ZXJpYU1vZGU6IFwiYWxsXCIsXG4gICAgZGVmYXVsdFZhbHVlczoge1xuICAgICAgbmV3X3Bhc3N3b3JkOiBcIlwiLFxuICAgIH0sXG4gIH0pXG4gIGNvbnN0IHsgc2hvd1N1Y2Nlc3NUb2FzdCB9ID0gdXNlQ3VzdG9tVG9hc3QoKVxuICBjb25zdCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKClcblxuICBjb25zdCByZXNldFBhc3N3b3JkID0gYXN5bmMgKGRhdGE6IE5ld1Bhc3N3b3JkKSA9PiB7XG4gICAgY29uc3QgdG9rZW4gPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpLmdldChcInRva2VuXCIpXG4gICAgaWYgKCF0b2tlbikgcmV0dXJuXG4gICAgYXdhaXQgTG9naW5TZXJ2aWNlLnJlc2V0UGFzc3dvcmQoe1xuICAgICAgcmVxdWVzdEJvZHk6IHsgbmV3X3Bhc3N3b3JkOiBkYXRhLm5ld19wYXNzd29yZCwgdG9rZW46Li4uIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxRURreWFLOVlmckY0cEhzS3lhSkRwcSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjksImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifX19XSwicmVzcG9uc2VfdGV4dCI6IueOsOWcqOaIkeS7rOefpemBk+S6hu+8jOmhueebruS9v+eUqCBgL2FwaS92MS91c2Vycy9zaWdudXBgIOerr+eCuei/m+ihjOeUqOaIt+azqOWGjOOAguiuqeaIkeS7rOWwneivleazqOWGjOS4gOS4queUqOaIt++8mlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjdkMTA1MDY2LTE1ODktNDE3MC1hNGNkLTUwNTBmNDcwMTE0MyIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTdqOFk0WlZQZVRpYlkzRVVIQ2pZNjQiLCJ0b29sX25hbWUiOiJyZWFkLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1widGVybWluYWxfaWRcIjogMTB9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLorqnmiJHku6zmn6XnnIvms6jlhoznu5PmnpzvvJpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkNvbW1hbmQgaXMgc3RpbGwgcnVubmluZyBhZnRlciAwIHNlY29uZHMuIFlvdSBjYW4gdXNlIHJlYWQtcHJvY2VzcyB0byBnZXQgbW9yZSBvdXRwdXRcbmFuZCBraWxsLXByb2Nlc3MgdG8gdGVybWluYXRlIGl0IGlmIG5lZWRlZC5cblBJRCAxMFxuT3V0cHV0IHNvIGZhcjpcbjxzdGRvdXQ+XG5cbjwvc3Rkb3V0PlxuPHN0ZGVycj5cblxuPC9zdGRlcnI+IiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxR2FmNmFBZ05HMm9BYlkzSGEzYkdOSyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjEwLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiLorqnmiJHku6zmn6XnnIvms6jlhoznu5PmnpzvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJlOWZlNjQ0NS0zNzA1LTQ4N2EtYWFmYi01OTE5YzBlZDQyZmYiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFTYTJrVGp1eUIzN2R4eHF2U1FVcDJ1IiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImN1cmwgLVggUE9TVCBcXFwiaHR0cDovL2xvY2FsaG9zdDo4MDAwL2FwaS92MS9sb2dpbi9hY2Nlc3MtdG9rZW5cXFwiIC1IIFxcXCJDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFxcXCIgLWQgXFxcInVzZXJuYW1lPXRlc3RAZXhhbXBsZS5jb20mcGFzc3dvcmQ9dGVzdHBhc3N3b3JkMTIzXFxcIlwiLCBcIndhaXRcIjogdHJ1ZX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IuWkquWlveS6hu+8geaIkeS7rOaIkOWKn+azqOWGjOS6huS4gOS4queUqOaIt+OAgueOsOWcqOiuqeaIkeS7rOiOt+WPluiuv+mXruS7pOeJjO+8mlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSBpcyB0aGUgb3V0cHV0IGZyb20gdGVybWluYWwgMTAgKHN0YXR1czogY29tcGxldGVkKTpcbjxvdXRwdXQ+e1wiZW1haWxcIjpcInRlc3RAZXhhbXBsZS5jb21cIixcImlzX2FjdGl2ZVwiOnRydWUsXCJpc19zdXBlcnVzZXJcIjpmYWxzZSxcImZ1bGxfbmFtZVwiOlwiVGVzdCBVc2VyXCIsXCJpZFwiOlwiZmZmMGE5MWUtMWU2Ni00NzQzLWI0MGQtOWZhZTM5YmIzY2Y4XCJ9PC9vdXRwdXQ+XG48cmV0dXJuLWNvZGU+XG4wXG48L3JldHVybi1jb2RlPlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxN2o4WTRaVlBlVGliWTNFVUhDalk2NCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjEwLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiLlpKrlpb3kuobvvIHmiJHku6zmiJDlip/ms6jlhozkuobkuIDkuKrnlKjmiLfjgILnjrDlnKjorqnmiJHku6zojrflj5borr/pl67ku6TniYzvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIzMmNiZjk0Ni1lNWY4LTQzZTMtOGU4OS1lMTMzOGExZTUxM2QiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFWZ3V4YWFMY1dEcllmNkhlM3JrZE56IiwidG9vbF9uYW1lIjoicmVhZC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcInRlcm1pbmFsX2lkXCI6IDExfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi6K6p5oiR5Lus5p+l55yL6I635Y+W6K6/6Zeu5Luk54mM55qE57uT5p6c77yaXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJDb21tYW5kIGlzIHN0aWxsIHJ1bm5pbmcgYWZ0ZXIgMCBzZWNvbmRzLiBZb3UgY2FuIHVzZSByZWFkLXByb2Nlc3MgdG8gZ2V0IG1vcmUgb3V0cHV0XG5hbmQga2lsbC1wcm9jZXNzIHRvIHRlcm1pbmF0ZSBpdCBpZiBuZWVkZWQuXG5QSUQgMTFcbk91dHB1dCBzbyBmYXI6XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVNhMmtUanV5QjM3ZHh4cXZTUVVwMnUifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoxMSwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9fX1dLCJyZXNwb25zZV90ZXh0Ijoi6K6p5oiR5Lus5p+l55yL6I635Y+W6K6/6Zeu5Luk54mM55qE57uT5p6c77yaXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMTliMjUzNzItZmU4Zi00YTlhLWI0ZTktODViNTY2YWJkN2ExIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxU3JKeFpwZDZzQ2UyMU44YUxERHJ4ayIsInRvb2xfbmFtZSI6ImxhdW5jaC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJleHBvcnQgVE9LRU49XFxcImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpsZUhBaU9qRTNORFE1TmpJeU9UVXNJbk4xWWlJNkltWm1aakJoT1RGbExURmxOall0TkRjME15MWlOREJrTFRsbVlXVXpPV0ppTTJObU9DSjkuVkJtM0t3ZV8tVUNXRDg4Tm1vdzZBQ3RaUG5ZUmRXVXJxZm5wYlplZEoxQVxcXCIgJiYgY3VybCAtWCBQT1NUIFxcXCJodHRwOi8vbG9jYWxob3N0OjgwMDAvYXBpL3YxL2NoYXQvXFxcIiAtSCBcXFwiQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXFxcIiAtSCBcXFwiQXV0aG9yaXphdGlvbjogQmVhcmVyICRUT0tFTlxcXCIgLWQgJ3tcXFwicXVlc3Rpb25cXFwiOlxcXCJcXHU0ZjYwXFx1NTk3ZFxcdWZmMGNcXHU2MjExXFx1NjBmM1xcdTRlODZcXHU4OWUzXFx1NGUwMFxcdTRlMGJcXHU1OTgyXFx1NGY1NVxcdTcxNjdcXHU5ODdlM1xcdTVjODFcXHU3Njg0XFx1NWI2OVxcdTViNTBcXHVmZjFmXFxcIiwgXFxcIm1vZGVsXFxcIjpcXFwiZGVlcHNlZWsvZGVlcHNlZWstY2hhdC12My0wMzI0OmZyZWVcXFwifSdcIiwgXCJ3YWl0XCI6IGZhbHNlfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi5b6I5aW977yB5oiR5Lus5oiQ5Yqf6I635Y+W5LqG6K6/6Zeu5Luk54mM44CC546w5Zyo6K6p5oiR5Lus5L2/55So6L+Z5Liq5Luk54mM5p2l5rWL6K+V6IGK5aSp5o6l5Y+j77yaXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGlzIHRoZSBvdXRwdXQgZnJvbSB0ZXJtaW5hbCAxMSAoc3RhdHVzOiBjb21wbGV0ZWQpOlxuPG91dHB1dD57XCJhY2Nlc3NfdG9rZW5cIjpcImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpsZUhBaU9qRTNORFE1TmpJeU9UVXNJbk4xWWlJNkltWm1aakJoT1RGbExURmxOall0TkRjME15MWlOREJrTFRsbVlXVXpPV0ppTTJObU9DSjkuVkJtM0t3ZV8tVUNXRDg4Tm1vdzZBQ3RaUG5ZUmRXVXJxZm5wYlplZEoxQVwiLFwidG9rZW5fdHlwZVwiOlwiYmVhcmVyXCJ9PC9vdXRwdXQ+XG48cmV0dXJuLWNvZGU+XG4wXG48L3JldHVybi1jb2RlPlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxVmd1eGFhTGNXRHJZZjZIZTNya2ROeiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjExLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiLlvojlpb3vvIHmiJHku6zmiJDlip/ojrflj5bkuoborr/pl67ku6TniYzjgILnjrDlnKjorqnmiJHku6zkvb/nlKjov5nkuKrku6TniYzmnaXmtYvor5XogYrlpKnmjqXlj6PvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIxMzUzZjgwMS1kZDZiLTQ2YTctOGExYS03MzhkZWJhMDNhOGUiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFXTVdVR0xqbjUxaXhMbTZ1Tnk1TVplIiwidG9vbF9uYW1lIjoicmVhZC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcInRlcm1pbmFsX2lkXCI6IDEyfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi6K6p5oiR5Lus5p+l55yL6IGK5aSp5o6l5Y+j55qE5ZON5bqU77yaXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJQcm9jZXNzIGxhdW5jaGVkIHdpdGggUElEIDEyIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxU3JKeFpwZDZzQ2UyMU44YUxERHJ4ayJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjEyLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiLorqnmiJHku6zmn6XnnIvogYrlpKnmjqXlj6PnmoTlk43lupTvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIyZWI4MzNjOS0xYjljLTRlMjctOGM3Mi1hNmU0ZjYwNWE1OGIiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFRTGdyaEFRNEdnd1g0S0FmRzNxU1FpIiwidG9vbF9uYW1lIjoicmVhZC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcInRlcm1pbmFsX2lkXCI6IDh9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLnnIvotbfmnaXmiJHku6zpgYfliLDkuobkuIDkuKrlhoXpg6jmnI3liqHlmajplJnor6/jgILorqnmiJHku6zmo4Dmn6XkuIDkuIvlkI7nq6/mnI3liqHnmoTml6Xlv5fvvIznnIvnnIvlj5HnlJ/kuobku4DkuYjplJnor6/vvJpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDEyIChzdGF0dXM6IGNvbXBsZXRlZCk6XG48b3V0cHV0PkludGVybmFsIFNlcnZlciBFcnJvcjwvb3V0cHV0PlxuPHJldHVybi1jb2RlPlxuMFxuPC9yZXR1cm4tY29kZT5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVdNV1VHTGpuNTFpeExtNnVOeTVNWmUifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoxMiwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9fX1dLCJyZXNwb25zZV90ZXh0Ijoi55yL6LW35p2l5oiR5Lus6YGH5Yiw5LqG5LiA5Liq5YaF6YOo5pyN5Yqh5Zmo6ZSZ6K+v44CC6K6p5oiR5Lus5qOA5p+l5LiA5LiL5ZCO56uv5pyN5Yqh55qE5pel5b+X77yM55yL55yL5Y+R55Sf5LqG5LuA5LmI6ZSZ6K+v77yaXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiJhM2I3Y2ZiMS0xNmUzLTRkMDYtYWVhNC1iZWQ5Njk2YWY5ZTciLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJyZXF1ZXN0X2lkIjoiZTViZDc5NmEtMWMyMC00NTcyLWI0YWItMDQ3NGM4ZmRhNTU0Iiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIwOTcyZjFiZS00OWEwLTRiMTktOGI0Zi1hOWZiODU0MjI2MDYiLCJyZXF1ZXN0X21lc3NhZ2UiOiLor7fmsYIgY2hhdCDlkI7vvIzmiqXplJnlpoLkuIvvvJpcblRyYWNlYmFjayAobW9zdCByZWNlbnQgY2FsbCBsYXN0KTpcbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9iYXNlLnB5XCIsIGxpbmUgMTk2NywgaW4gX2V4ZWNfc2luZ2xlX2NvbnRleHRcbiAgICBzZWxmLmRpYWxlY3QuZG9fZXhlY3V0ZShcbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9kZWZhdWx0LnB5XCIsIGxpbmUgOTQxLCBpbiBkb19leGVjdXRlXG4gICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50LCBwYXJhbWV0ZXJzKVxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3BzeWNvcGcvY3Vyc29yLnB5XCIsIGxpbmUgOTcsIGluIGV4ZWN1dGVcbiAgICByYWlzZSBleC53aXRoX3RyYWNlYmFjayhOb25lKVxucHN5Y29wZy5lcnJvcnMuVW5kZWZpbmVkVGFibGU6IHJlbGF0aW9uIFwiY2hhdGhpc3RvcnlcIiBkb2VzIG5vdCBleGlzdFxuTElORSAyOiBGUk9NIGNoYXRoaXN0b3J5ICIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiLor7fmsYIgY2hhdCDlkI7vvIzmiqXplJnlpoLkuIvvvJoifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlRyYWNlYmFjayAobW9zdCByZWNlbnQgY2FsbCBsYXN0KToifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9iYXNlLnB5XCIsIGxpbmUgMTk2NywgaW4gX2V4ZWNfc2luZ2xlX2NvbnRleHQifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICBzZWxmLmRpYWxlY3QuZG9fZXhlY3V0ZSgifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9kZWZhdWx0LnB5XCIsIGxpbmUgOTQxLCBpbiBkb19leGVjdXRlIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50LCBwYXJhbWV0ZXJzKSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3BzeWNvcGcvY3Vyc29yLnB5XCIsIGxpbmUgOTcsIGluIGV4ZWN1dGUifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICByYWlzZSBleC53aXRoX3RyYWNlYmFjayhOb25lKSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoicHN5Y29wZy5lcnJvcnMuVW5kZWZpbmVkVGFibGU6IHJlbGF0aW9uIFwiY2hhdGhpc3RvcnlcIiBkb2VzIG5vdCBleGlzdCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiTElORSAyOiBGUk9NIGNoYXRoaXN0b3J5ICJ9XX1dfSwibWVudGlvbmVkX2l0ZW1zIjpbXSwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxOFh3cFBodzI4dVI0aVBWeTIyYVZiMiIsInRvb2xfbmFtZSI6ImxhdW5jaC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJjZCBiYWNrZW5kICYmIHNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGUgJiYgYmFzaCBzY3JpcHRzL3ByZXN0YXJ0LnNoXCIsIFwid2FpdFwiOiB0cnVlfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi5oiR55yL5Yiw6Zeu6aKY5LqG44CC6ZSZ6K+v5pi+56S6IGByZWxhdGlvbiBcImNoYXRoaXN0b3J5XCIgZG9lcyBub3QgZXhpc3Rg77yM6L+Z5oSP5ZGz552A5pWw5o2u5bqT5Lit57y65bCRIGBjaGF0aGlzdG9yeWAg6KGo44CC6L+Z5piv5Zug5Li65pWw5o2u5bqT6L+B56e75bCa5pyq6L+Q6KGM77yM6ZyA6KaB5Yib5bu65pWw5o2u5bqT6KGo44CCXG5cbiMjIOino+WGs+aVsOaNruW6k+ihqOS4jeWtmOWcqOeahOmXrumimFxuXG7ov5nkuKrplJnor6/mmK/lm6DkuLrpobnnm67kvb/nlKjkuoYgU1FMQWxjaGVteSDlkowgQWxlbWJpYyDov5vooYzmlbDmja7lupPov4Hnp7vvvIzkvYbmmK/ov4Hnp7vlsJrmnKrlupTnlKjliLDmlbDmja7lupPjgILmiJHku6zpnIDopoHov5DooYzmlbDmja7lupPov4Hnp7vmnaXliJvlu7rmiYDpnIDnmoTooajjgIJcblxuIyMjIOatpemqpCAxOiDov5DooYzmlbDmja7lupPov4Hnp7tcblxu6K6p5oiR5Lus6L+Q6KGM6aG555uu5Lit55qEIGBwcmVzdGFydC5zaGAg6ISa5pys77yM5a6D5Lya5omn6KGM5pWw5o2u5bqT6L+B56e777yaXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9LHsiaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFLdXhVS201VUVwcXJYSHpQZTVWZUMyIiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImNkIGJhY2tlbmQgJiYgc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZSAmJiBhbGVtYmljIHVwZ3JhZGUgaGVhZFwiLCBcIndhaXRcIjogdHJ1ZX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6Iui/meS4qumUmeivr+ihqOaYjuaVsOaNruW6k+S4ree8uuWwkSBgY2hhdGhpc3RvcnlgIOihqOOAgui/meaYr+WboOS4uuaVsOaNruW6k+i/geenu+ayoeacieiiq+ato+ehruW6lOeUqO+8jOWvvOiHtOiBiuWkqeWOhuWPsuihqOS4jeWtmOWcqOOAguiuqeaIkeS7rOino+WGs+i/meS4qumXrumimO+8mlxuXG4jIyDop6PlhrMgXCJyZWxhdGlvbiAnY2hhdGhpc3RvcnknIGRvZXMgbm90IGV4aXN0XCIg6ZSZ6K+vXG5cbui/meS4qumUmeivr+ihqOaYjuaVsOaNruW6k+e7k+aehOS4juW6lOeUqOeoi+W6j+acn+acm+eahOS4jeS4gOiHtOOAguaIkeS7rOmcgOimgei/kOihjOaVsOaNruW6k+i/geenu+adpeWIm+W7uuW/heimgeeahOihqOOAglxuXG4jIyMgMS4g6L+Q6KGM5pWw5o2u5bqT6L+B56e7XG5cbuWcqCBGYXN0QVBJIOmhueebruS4re+8jOmAmuW4uOS9v+eUqCBBbGVtYmljIOadpeeuoeeQhuaVsOaNruW6k+i/geenu+OAguiuqeaIkeS7rOi/kOihjOi/geenu+WRveS7pO+8mlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiLor7fmsYIgY2hhdCDlkI7vvIzmiqXplJnlpoLkuIvvvJpcblRyYWNlYmFjayAobW9zdCByZWNlbnQgY2FsbCBsYXN0KTpcbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9iYXNlLnB5XCIsIGxpbmUgMTk2NywgaW4gX2V4ZWNfc2luZ2xlX2NvbnRleHRcbiAgICBzZWxmLmRpYWxlY3QuZG9fZXhlY3V0ZShcbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9kZWZhdWx0LnB5XCIsIGxpbmUgOTQxLCBpbiBkb19leGVjdXRlXG4gICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50LCBwYXJhbWV0ZXJzKVxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3BzeWNvcGcvY3Vyc29yLnB5XCIsIGxpbmUgOTcsIGluIGV4ZWN1dGVcbiAgICByYWlzZSBleC53aXRoX3RyYWNlYmFjayhOb25lKVxucHN5Y29wZy5lcnJvcnMuVW5kZWZpbmVkVGFibGU6IHJlbGF0aW9uIFwiY2hhdGhpc3RvcnlcIiBkb2VzIG5vdCBleGlzdFxuTElORSAyOiBGUk9NIGNoYXRoaXN0b3J5ICJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjEzLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiLov5nkuKrplJnor6/ooajmmI7mlbDmja7lupPkuK3nvLrlsJEgYGNoYXRoaXN0b3J5YCDooajjgILov5nmmK/lm6DkuLrmlbDmja7lupPov4Hnp7vmsqHmnInooqvmraPnoa7lupTnlKjvvIzlr7zoh7TogYrlpKnljoblj7LooajkuI3lrZjlnKjjgILorqnmiJHku6zop6PlhrPov5nkuKrpl67popjvvJpcblxuIyMg6Kej5YazIFwicmVsYXRpb24gJ2NoYXRoaXN0b3J5JyBkb2VzIG5vdCBleGlzdFwiIOmUmeivr1xuXG7ov5nkuKrplJnor6/ooajmmI7mlbDmja7lupPnu5PmnoTkuI7lupTnlKjnqIvluo/mnJ/mnJvnmoTkuI3kuIDoh7TjgILmiJHku6zpnIDopoHov5DooYzmlbDmja7lupPov4Hnp7vmnaXliJvlu7rlv4XopoHnmoTooajjgIJcblxuIyMjIDEuIOi/kOihjOaVsOaNruW6k+i/geenu1xuXG7lnKggRmFzdEFQSSDpobnnm67kuK3vvIzpgJrluLjkvb/nlKggQWxlbWJpYyDmnaXnrqHnkIbmlbDmja7lupPov4Hnp7vjgILorqnmiJHku6zov5DooYzov4Hnp7vlkb3ku6TvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoiZmFpbGVkIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOltdLCJzZWVuX3N0YXRlIjoidW5zZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiQ29tbWFuZCBpcyBzdGlsbCBydW5uaW5nIGFmdGVyIDAgc2Vjb25kcy4gWW91IGNhbiB1c2UgcmVhZC1wcm9jZXNzIHRvIGdldCBtb3JlIG91dHB1dFxuYW5kIGtpbGwtcHJvY2VzcyB0byB0ZXJtaW5hdGUgaXQgaWYgbmVlZGVkLlxuUElEIDE0XG5PdXRwdXQgc28gZmFyOlxuPHN0ZG91dD5cblxuPC9zdGRvdXQ+XG48c3RkZXJyPlxuXG48L3N0ZGVycj4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE4WHdwUGh3Mjh1UjRpUFZ5MjJhVmIyIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MTQsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifX19XX0seyJyZXF1ZXN0X2lkIjoiNDdkZGY1ODktMTdiNy00NWM3LWE4NTktNzMwMDRjOTUyNzg1Iiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI3MDIxMmY1Ni1lOTY5LTQ4YmItOTZmNC01NmVhOTY2ZjRmZmIiLCJyZXF1ZXN0X21lc3NhZ2UiOiLlvZPmiJHorr/pl64gY2hhdCDmjqXlj6PmiqXplJnlpoLkuIvvvJpcbkVSUk9SOiAgICBFeGNlcHRpb24gaW4gQVNHSSBhcHBsaWNhdGlvblxuVHJhY2ViYWNrIChtb3N0IHJlY2VudCBjYWxsIGxhc3QpOlxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3NxbGFsY2hlbXkvZW5naW5lL2Jhc2UucHlcIiwgbGluZSAxOTY3LCBpbiBfZXhlY19zaW5nbGVfY29udGV4dFxuICAgIHNlbGYuZGlhbGVjdC5kb19leGVjdXRlKFxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3NxbGFsY2hlbXkvZW5naW5lL2RlZmF1bHQucHlcIiwgbGluZSA5NDEsIGluIGRvX2V4ZWN1dGVcbiAgICBjdXJzb3IuZXhlY3V0ZShzdGF0ZW1lbnQsIHBhcmFtZXRlcnMpXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvcHN5Y29wZy9jdXJzb3IucHlcIiwgbGluZSA5NywgaW4gZXhlY3V0ZVxuICAgIHJhaXNlIGV4LndpdGhfdHJhY2ViYWNrKE5vbmUpXG5wc3ljb3BnLmVycm9ycy5VbmRlZmluZWRUYWJsZTogcmVsYXRpb24gXCJjaGF0aGlzdG9yeVwiIGRvZXMgbm90IGV4aXN0XG5MSU5FIDI6IEZST00gY2hhdGhpc3RvcnkgXG4gICAgICAgICAgICAgXlxuXG5UaGUgYWJvdmUgZXhjZXB0aW9uIHdhcyB0aGUgZGlyZWN0IGNhdXNlIG9mIHRoZSBmb2xsb3dpbmcgZXhjZXB0aW9uOlxuXG5UcmFjZWJhY2sgKG1vc3QgcmVjZW50IGNhbGwgbGFzdCk6XG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvdXZpY29ybi9wcm90b2NvbHMvaHR0cC9odHRwdG9vbHNfaW1wbC5weVwiLCBsaW5lIDQwMSwgaW4gcnVuX2FzZ2lcbiAgICByZXN1bHQgPSBhd2FpdCBhcHAoICAjIHR5cGU6IGlnbm9yZVtmdW5jLXJldHVybnMtdmFsdWVdXG4gICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3V2aWNvcm4vbWlkZGxld2FyZS9wcm94eV9oZWFkZXJzLnB5XCIsIGxpbmUgNzAsIGluIF9fY2FsbF9fXG4gICAgcmV0dXJuIGF3YWl0IHNlbGYuYXBwKHNjb3BlLCByZWNlaXZlLCBzZW5kKVxuICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9mYXN0YXBpL2FwcGxpY2F0aW9ucy5weVwiLCBsaW5lIDEwNTQsIGluIF9fY2FsbF9fXG4gICAgYXdhaXQgc3VwZXIoKS5fX2NhbGxfXyhzY29wZSwgcmVjZWl2ZSwgc2VuZClcbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zdGFybGV0dGUvYXBwbGljYXRpb25zLnB5XCIsIGxpbmUgMTEzLCBpbiBfX2NhbGxfX1xuICAgIGF3YWl0IHNlbGYubWlkZGxld2FyZV9zdGFjayhzY29wZSwgcmVjZWl2ZSwgc2VuZClcbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zdGFybGV0dGUvbWlkZGxld2FyZS9lcnJvcnMucHlcIiwgbGluZSAxODcsIGluIF9fY2FsbF9fXG4gICAgcmFpc2UgZXhjXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3RhcmxldHRlL21pZGRsZXdhcmUvZXJyb3JzLnB5XCIsIGxpbmUgMTY1LCBpbiBfX2NhbGxfX1xuICAgIGF3YWl0IHNlbGYuYXBwKHNjb3BlLCByZWNlaXZlLCBfc2VuZClcbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zdGFybGV0dGUvbWlkZGxld2FyZS9jb3JzLnB5XCIsIGxpbmUgODUsIGluIF9fY2FsbF9fXG4gICAgYXdhaXQgc2VsZi5hcHAoc2NvcGUsIHJlY2VpdmUsIHNlbmQpXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3RhcmxldHRlL21pZGRsZXdhcmUvZXhjZXB0aW9ucy5weVwiLCBsaW5lIDYyLCBpbiBfX2NhbGxfX1xuICAgIGF3YWl0IHdyYXBfYXBwX2hhbmRsaW5nX2V4Y2VwdGlvbnMoc2VsZi5hcHAsIGNvbm4pKHNjb3BlLCByZWNlaXZlLCBzZW5kKVxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3N0YXJsZXR0ZS9fZXhjZXB0aW9uX2hhbmRsZXIucHlcIiwgbGluZSA2MiwgaW4gd3JhcHBlZF9hcHBcbiAgICByYWlzZSBleGNcbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zdGFybGV0dGUvX2V4Y2VwdGlvbl9oYW5kbGVyLnB5XCIsIGxpbmUgNTEsIGluIHdyYXBwZWRfYXBwXG4gICAgYXdhaXQgYXBwKHNjb3BlLCByZWNlaXZlLCBzZW5kZXIpXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3RhcmxldHRlL3JvdXRpbmcucHlcIiwgbGluZSA3MTUsIGluIF9fY2FsbF9fXG4gICAgYXdhaXQgc2VsZi5taWRkbGV3YXJlX3N0YWNrKHNjb3BlLCByZWNlaXZlLCBzZW5kKVxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3N0YXJsZXR0ZS9yb3V0aW5nLnB5XCIsIGxpbmUgNzM1LCBpbiBhcHBcbiAgICBhd2FpdCByb3V0ZS5oYW5kbGUoc2NvcGUsIHJlY2VpdmUsIHNlbmQpXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3RhcmxldHRlL3JvdXRpbmcucHlcIiwgbGluZSAyODgsIGluIGhhbmRsZVxuICAgIGF3YWl0IHNlbGYuYXBwKHNjb3BlLCByZWNlaXZlLCBzZW5kKVxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3N0YXJsZXR0ZS9yb3V0aW5nLnB5XCIsIGxpbmUgNzYsIGluIGFwcFxuICAgIGF3YWl0IHdyYXBfYXBwX2hhbmRsaW5nX2V4Y2VwdGlvbnMoYXBwLCByZXF1ZXN0KShzY29wZSwgcmVjZWl2ZSwgc2VuZClcbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zdGFybGV0dGUvX2V4Y2VwdGlvbl9oYW5kbGVyLnB5XCIsIGxpbmUgNjIsIGluIHdyYXBwZWRfYXBwXG4gICAgcmFpc2UgZXhjXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3RhcmxldHRlL19leGNlcHRpb25faGFuZGxlci5weVwiLCBsaW5lIDUxLCBpbiB3cmFwcGVkX2FwcFxuICAgIGF3YWl0IGFwcChzY29wZSwgcmVjZWl2ZSwgc2VuZGVyKVxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3N0YXJsZXR0ZS9yb3V0aW5nLnB5XCIsIGxpbmUgNzMsIGluIGFwcFxuICAgIHJlc3BvbnNlID0gYXdhaXQgZihyZXF1ZXN0KVxuICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXlxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL2Zhc3RhcGkvcm91dGluZy5weVwiLCBsaW5lIDMwMSwgaW4gYXBwXG4gICAgcmF3X3Jlc3BvbnNlID0gYXdhaXQgcnVuX2VuZHBvaW50X2Z1bmN0aW9uKFxuICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9mYXN0YXBpL3JvdXRpbmcucHlcIiwgbGluZSAyMTIsIGluIHJ1bl9lbmRwb2ludF9mdW5jdGlvblxuICAgIHJldHVybiBhd2FpdCBkZXBlbmRhbnQuY2FsbCgqKnZhbHVlcylcbiAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kL2FwcC9hcGkvcm91dGVzL2NoYXQucHlcIiwgbGluZSA2MSwgaW4gY2hhdFxuICAgIGNoYXRfaGlzdG9yeSA9IGdldF9jaGF0X2hpc3RvcnkoZGIsIHNlc3Npb25faWQpXG4gICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvYXBwL3JhZy9jaGF0X2hpc3RvcnkucHlcIiwgbGluZSA5MywgaW4gZ2V0X2NoYXRfaGlzdG9yeVxuICAgIGNoYXRfaGlzdG9yaWVzID0gZGIuZXhlYyhzdGF0ZW1lbnQpLmFsbCgpXG4gICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5cbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxtb2RlbC9vcm0vc2Vzc2lvbi5weVwiLCBsaW5lIDY2LCBpbiBleGVjXG4gICAgcmVzdWx0cyA9IHN1cGVyKCkuZXhlY3V0ZShcbiAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXlxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3NxbGFsY2hlbXkvb3JtL3Nlc3Npb24ucHlcIiwgbGluZSAyMzYyLCBpbiBleGVjdXRlXG4gICAgcmV0dXJuIHNlbGYuX2V4ZWN1dGVfaW50ZXJuYWwoXG4gICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3FsYWxjaGVteS9vcm0vc2Vzc2lvbi5weVwiLCBsaW5lIDIyNDcsIGluIF9leGVjdXRlX2ludGVybmFsXG4gICAgcmVzdWx0OiBSZXN1bHRbQW55XSA9IGNvbXBpbGVfc3RhdGVfY2xzLm9ybV9leGVjdXRlX3N0YXRlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3NxbGFsY2hlbXkvb3JtL2NvbnRleHQucHlcIiwgbGluZSAzMDUsIGluIG9ybV9leGVjdXRlX3N0YXRlbWVudFxuICAgIHJlc3VsdCA9IGNvbm4uZXhlY3V0ZShcbiAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3FsYWxjaGVteS9lbmdpbmUvYmFzZS5weVwiLCBsaW5lIDE0MTgsIGluIGV4ZWN1dGVcbiAgICByZXR1cm4gbWV0aChcbiAgICAgICAgICAgXl5eXl5cbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L3NxbC9lbGVtZW50cy5weVwiLCBsaW5lIDUxNSwgaW4gX2V4ZWN1dGVfb25fY29ubmVjdGlvblxuICAgIHJldHVybiBjb25uZWN0aW9uLl9leGVjdXRlX2NsYXVzZWVsZW1lbnQoXG4gICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9iYXNlLnB5XCIsIGxpbmUgMTY0MCwgaW4gX2V4ZWN1dGVfY2xhdXNlZWxlbWVudFxuICAgIHJldCA9IHNlbGYuX2V4ZWN1dGVfY29udGV4dChcbiAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3FsYWxjaGVteS9lbmdpbmUvYmFzZS5weVwiLCBsaW5lIDE4NDYsIGluIF9leGVjdXRlX2NvbnRleHRcbiAgICByZXR1cm4gc2VsZi5fZXhlY19zaW5nbGVfY29udGV4dChcbiAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9iYXNlLnB5XCIsIGxpbmUgMTk4NiwgaW4gX2V4ZWNfc2luZ2xlX2NvbnRleHRcbiAgICBzZWxmLl9oYW5kbGVfZGJhcGlfZXhjZXB0aW9uKFxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3NxbGFsY2hlbXkvZW5naW5lL2Jhc2UucHlcIiwgbGluZSAyMzU1LCBpbiBfaGFuZGxlX2RiYXBpX2V4Y2VwdGlvblxuICAgIHJhaXNlIHNxbGFsY2hlbXlfZXhjZXB0aW9uLndpdGhfdHJhY2ViYWNrKGV4Y19pbmZvWzJdKSBmcm9tIGVcbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9iYXNlLnB5XCIsIGxpbmUgMTk2NywgaW4gX2V4ZWNfc2luZ2xlX2NvbnRleHRcbiAgICBzZWxmLmRpYWxlY3QuZG9fZXhlY3V0ZShcbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9kZWZhdWx0LnB5XCIsIGxpbmUgOTQxLCBpbiBkb19leGVjdXRlXG4gICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50LCBwYXJhbWV0ZXJzKVxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3BzeWNvcGcvY3Vyc29yLnB5XCIsIGxpbmUgOTcsIGluIGV4ZWN1dGVcbiAgICByYWlzZSBleC53aXRoX3RyYWNlYmFjayhOb25lKVxuc3FsYWxjaGVteS5leGMuUHJvZ3JhbW1pbmdFcnJvcjogKHBzeWNvcGcuZXJyb3JzLlVuZGVmaW5lZFRhYmxlKSByZWxhdGlvbiBcImNoYXRoaXN0b3J5XCIgZG9lcyBub3QgZXhpc3RcbkxJTkUgMjogRlJPTSBjaGF0aGlzdG9yeSBcbiAgICAgICAgICAgICBeXG5bU1FMOiBTRUxFQ1QgY2hhdGhpc3Rvcnkuc2Vzc2lvbl9pZCwgY2hhdGhpc3RvcnkudXNlcl9xdWVyeSwgY2hhdGhpc3RvcnkuYWlfcmVzcG9uc2UsIGNoYXRoaXN0b3J5Lm1vZGVsLCBjaGF0aGlzdG9yeS5pZCwgY2hhdGhpc3RvcnkudXNlcl9pZCwgY2hhdGhpc3RvcnkuY2hpbGRfaWQsIGNoYXRoaXN0b3J5LmNyZWF0ZWRfYXQsIGNoYXRoaXN0b3J5LnNvdXJjZXMgXG5GUk9NIGNoYXRoaXN0b3J5IFxuV0hFUkUgY2hhdGhpc3Rvcnkuc2Vzc2lvbl9pZCA9ICUoc2Vzc2lvbl9pZF8xKXM6OlZBUkNIQVIgT1JERVIgQlkgY2hhdGhpc3RvcnkuY3JlYXRlZF9hdCBERVNDIFxuIExJTUlUICUocGFyYW1fMSlzOjpJTlRFR0VSXVxuW3BhcmFtZXRlcnM6IHsnc2Vzc2lvbl9pZF8xJzogJzc2N2YwZTc2LWIxZGMtNDg4Mi05ZTFmLWJmNzcxMjI4ZWMzNycsICdwYXJhbV8xJzogMTB9XVxuKEJhY2tncm91bmQgb24gdGhpcyBlcnJvciBhdDogaHR0cHM6Ly9zcWxhbGNoZS5tZS9lLzIwL2Y0MDUpXG5JTkZPOiAgICAgMTI3LjAuMC4xOjUzNTI1IC0gXCJQT1NUIC9hcGkvdjEvY2hhdC8gSFRUUC8xLjFcIiA1MDAgSW50ZXJuYWwgU2VydmVyIEVycm9yXG7lpoLkvZXop6PlhrMiLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0Ijoi5b2T5oiR6K6/6ZeuIGNoYXQg5o6l5Y+j5oql6ZSZ5aaC5LiL77yaIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJFUlJPUjogICAgRXhjZXB0aW9uIGluIEFTR0kgYXBwbGljYXRpb24ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlRyYWNlYmFjayAobW9zdCByZWNlbnQgY2FsbCBsYXN0KToifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9iYXNlLnB5XCIsIGxpbmUgMTk2NywgaW4gX2V4ZWNfc2luZ2xlX2NvbnRleHQifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICBzZWxmLmRpYWxlY3QuZG9fZXhlY3V0ZSgifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9kZWZhdWx0LnB5XCIsIGxpbmUgOTQxLCBpbiBkb19leGVjdXRlIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50LCBwYXJhbWV0ZXJzKSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3BzeWNvcGcvY3Vyc29yLnB5XCIsIGxpbmUgOTcsIGluIGV4ZWN1dGUifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICByYWlzZSBleC53aXRoX3RyYWNlYmFjayhOb25lKSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoicHN5Y29wZy5lcnJvcnMuVW5kZWZpbmVkVGFibGU6IHJlbGF0aW9uIFwiY2hhdGhpc3RvcnlcIiBkb2VzIG5vdCBleGlzdCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiTElORSAyOiBGUk9NIGNoYXRoaXN0b3J5ICJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgIF4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlRoZSBhYm92ZSBleGNlcHRpb24gd2FzIHRoZSBkaXJlY3QgY2F1c2Ugb2YgdGhlIGZvbGxvd2luZyBleGNlcHRpb246In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJUcmFjZWJhY2sgKG1vc3QgcmVjZW50IGNhbGwgbGFzdCk6In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvdXZpY29ybi9wcm90b2NvbHMvaHR0cC9odHRwdG9vbHNfaW1wbC5weVwiLCBsaW5lIDQwMSwgaW4gcnVuX2FzZ2kifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICByZXN1bHQgPSBhd2FpdCBhcHAoICAjIHR5cGU6IGlnbm9yZVtmdW5jLXJldHVybnMtdmFsdWVdIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3V2aWNvcm4vbWlkZGxld2FyZS9wcm94eV9oZWFkZXJzLnB5XCIsIGxpbmUgNzAsIGluIF9fY2FsbF9fIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgcmV0dXJuIGF3YWl0IHNlbGYuYXBwKHNjb3BlLCByZWNlaXZlLCBzZW5kKSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9mYXN0YXBpL2FwcGxpY2F0aW9ucy5weVwiLCBsaW5lIDEwNTQsIGluIF9fY2FsbF9fIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgYXdhaXQgc3VwZXIoKS5fX2NhbGxfXyhzY29wZSwgcmVjZWl2ZSwgc2VuZCkifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zdGFybGV0dGUvYXBwbGljYXRpb25zLnB5XCIsIGxpbmUgMTEzLCBpbiBfX2NhbGxfXyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIGF3YWl0IHNlbGYubWlkZGxld2FyZV9zdGFjayhzY29wZSwgcmVjZWl2ZSwgc2VuZCkifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zdGFybGV0dGUvbWlkZGxld2FyZS9lcnJvcnMucHlcIiwgbGluZSAxODcsIGluIF9fY2FsbF9fIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgcmFpc2UgZXhjIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3RhcmxldHRlL21pZGRsZXdhcmUvZXJyb3JzLnB5XCIsIGxpbmUgMTY1LCBpbiBfX2NhbGxfXyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIGF3YWl0IHNlbGYuYXBwKHNjb3BlLCByZWNlaXZlLCBfc2VuZCkifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zdGFybGV0dGUvbWlkZGxld2FyZS9jb3JzLnB5XCIsIGxpbmUgODUsIGluIF9fY2FsbF9fIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgYXdhaXQgc2VsZi5hcHAoc2NvcGUsIHJlY2VpdmUsIHNlbmQpIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3RhcmxldHRlL21pZGRsZXdhcmUvZXhjZXB0aW9ucy5weVwiLCBsaW5lIDYyLCBpbiBfX2NhbGxfXyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIGF3YWl0IHdyYXBfYXBwX2hhbmRsaW5nX2V4Y2VwdGlvbnMoc2VsZi5hcHAsIGNvbm4pKHNjb3BlLCByZWNlaXZlLCBzZW5kKSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3N0YXJsZXR0ZS9fZXhjZXB0aW9uX2hhbmRsZXIucHlcIiwgbGluZSA2MiwgaW4gd3JhcHBlZF9hcHAifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICByYWlzZSBleGMifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zdGFybGV0dGUvX2V4Y2VwdGlvbl9oYW5kbGVyLnB5XCIsIGxpbmUgNTEsIGluIHdyYXBwZWRfYXBwIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgYXdhaXQgYXBwKHNjb3BlLCByZWNlaXZlLCBzZW5kZXIpIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3RhcmxldHRlL3JvdXRpbmcucHlcIiwgbGluZSA3MTUsIGluIF9fY2FsbF9fIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgYXdhaXQgc2VsZi5taWRkbGV3YXJlX3N0YWNrKHNjb3BlLCByZWNlaXZlLCBzZW5kKSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3N0YXJsZXR0ZS9yb3V0aW5nLnB5XCIsIGxpbmUgNzM1LCBpbiBhcHAifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICBhd2FpdCByb3V0ZS5oYW5kbGUoc2NvcGUsIHJlY2VpdmUsIHNlbmQpIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3RhcmxldHRlL3JvdXRpbmcucHlcIiwgbGluZSAyODgsIGluIGhhbmRsZSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIGF3YWl0IHNlbGYuYXBwKHNjb3BlLCByZWNlaXZlLCBzZW5kKSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3N0YXJsZXR0ZS9yb3V0aW5nLnB5XCIsIGxpbmUgNzYsIGluIGFwcCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIGF3YWl0IHdyYXBfYXBwX2hhbmRsaW5nX2V4Y2VwdGlvbnMoYXBwLCByZXF1ZXN0KShzY29wZSwgcmVjZWl2ZSwgc2VuZCkifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zdGFybGV0dGUvX2V4Y2VwdGlvbl9oYW5kbGVyLnB5XCIsIGxpbmUgNjIsIGluIHdyYXBwZWRfYXBwIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgcmFpc2UgZXhjIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3RhcmxldHRlL19leGNlcHRpb25faGFuZGxlci5weVwiLCBsaW5lIDUxLCBpbiB3cmFwcGVkX2FwcCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIGF3YWl0IGFwcChzY29wZSwgcmVjZWl2ZSwgc2VuZGVyKSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3N0YXJsZXR0ZS9yb3V0aW5nLnB5XCIsIGxpbmUgNzMsIGluIGFwcCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIHJlc3BvbnNlID0gYXdhaXQgZihyZXF1ZXN0KSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL2Zhc3RhcGkvcm91dGluZy5weVwiLCBsaW5lIDMwMSwgaW4gYXBwIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgcmF3X3Jlc3BvbnNlID0gYXdhaXQgcnVuX2VuZHBvaW50X2Z1bmN0aW9uKCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9mYXN0YXBpL3JvdXRpbmcucHlcIiwgbGluZSAyMTIsIGluIHJ1bl9lbmRwb2ludF9mdW5jdGlvbiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIHJldHVybiBhd2FpdCBkZXBlbmRhbnQuY2FsbCgqKnZhbHVlcykifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kL2FwcC9hcGkvcm91dGVzL2NoYXQucHlcIiwgbGluZSA2MSwgaW4gY2hhdCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIGNoYXRfaGlzdG9yeSA9IGdldF9jaGF0X2hpc3RvcnkoZGIsIHNlc3Npb25faWQpIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvYXBwL3JhZy9jaGF0X2hpc3RvcnkucHlcIiwgbGluZSA5MywgaW4gZ2V0X2NoYXRfaGlzdG9yeSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIGNoYXRfaGlzdG9yaWVzID0gZGIuZXhlYyhzdGF0ZW1lbnQpLmFsbCgpIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxtb2RlbC9vcm0vc2Vzc2lvbi5weVwiLCBsaW5lIDY2LCBpbiBleGVjIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgcmVzdWx0cyA9IHN1cGVyKCkuZXhlY3V0ZSgifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3NxbGFsY2hlbXkvb3JtL3Nlc3Npb24ucHlcIiwgbGluZSAyMzYyLCBpbiBleGVjdXRlIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgcmV0dXJuIHNlbGYuX2V4ZWN1dGVfaW50ZXJuYWwoIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3FsYWxjaGVteS9vcm0vc2Vzc2lvbi5weVwiLCBsaW5lIDIyNDcsIGluIF9leGVjdXRlX2ludGVybmFsIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgcmVzdWx0OiBSZXN1bHRbQW55XSA9IGNvbXBpbGVfc3RhdGVfY2xzLm9ybV9leGVjdXRlX3N0YXRlbWVudCgifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3NxbGFsY2hlbXkvb3JtL2NvbnRleHQucHlcIiwgbGluZSAzMDUsIGluIG9ybV9leGVjdXRlX3N0YXRlbWVudCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIHJlc3VsdCA9IGNvbm4uZXhlY3V0ZSgifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3FsYWxjaGVteS9lbmdpbmUvYmFzZS5weVwiLCBsaW5lIDE0MTgsIGluIGV4ZWN1dGUifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICByZXR1cm4gbWV0aCgifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgXl5eXl4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L3NxbC9lbGVtZW50cy5weVwiLCBsaW5lIDUxNSwgaW4gX2V4ZWN1dGVfb25fY29ubmVjdGlvbiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIHJldHVybiBjb25uZWN0aW9uLl9leGVjdXRlX2NsYXVzZWVsZW1lbnQoIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9iYXNlLnB5XCIsIGxpbmUgMTY0MCwgaW4gX2V4ZWN1dGVfY2xhdXNlZWxlbWVudCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIHJldCA9IHNlbGYuX2V4ZWN1dGVfY29udGV4dCgifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3FsYWxjaGVteS9lbmdpbmUvYmFzZS5weVwiLCBsaW5lIDE4NDYsIGluIF9leGVjdXRlX2NvbnRleHQifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICByZXR1cm4gc2VsZi5fZXhlY19zaW5nbGVfY29udGV4dCgifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9iYXNlLnB5XCIsIGxpbmUgMTk4NiwgaW4gX2V4ZWNfc2luZ2xlX2NvbnRleHQifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICBzZWxmLl9oYW5kbGVfZGJhcGlfZXhjZXB0aW9uKCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3NxbGFsY2hlbXkvZW5naW5lL2Jhc2UucHlcIiwgbGluZSAyMzU1LCBpbiBfaGFuZGxlX2RiYXBpX2V4Y2VwdGlvbiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIHJhaXNlIHNxbGFsY2hlbXlfZXhjZXB0aW9uLndpdGhfdHJhY2ViYWNrKGV4Y19pbmZvWzJdKSBmcm9tIGUifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9iYXNlLnB5XCIsIGxpbmUgMTk2NywgaW4gX2V4ZWNfc2luZ2xlX2NvbnRleHQifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICBzZWxmLmRpYWxlY3QuZG9fZXhlY3V0ZSgifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9kZWZhdWx0LnB5XCIsIGxpbmUgOTQxLCBpbiBkb19leGVjdXRlIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50LCBwYXJhbWV0ZXJzKSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3BzeWNvcGcvY3Vyc29yLnB5XCIsIGxpbmUgOTcsIGluIGV4ZWN1dGUifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICByYWlzZSBleC53aXRoX3RyYWNlYmFjayhOb25lKSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0Ijoic3FsYWxjaGVteS5leGMuUHJvZ3JhbW1pbmdFcnJvcjogKHBzeWNvcGcuZXJyb3JzLlVuZGVmaW5lZFRhYmxlKSByZWxhdGlvbiBcImNoYXRoaXN0b3J5XCIgZG9lcyBub3QgZXhpc3QifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkxJTkUgMjogRlJPTSBjaGF0aGlzdG9yeSAifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICBeIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJbU1FMOiBTRUxFQ1QgY2hhdGhpc3Rvcnkuc2Vzc2lvbl9pZCwgY2hhdGhpc3RvcnkudXNlcl9xdWVyeSwgY2hhdGhpc3RvcnkuYWlfcmVzcG9uc2UsIGNoYXRoaXN0b3J5Lm1vZGVsLCBjaGF0aGlzdG9yeS5pZCwgY2hhdGhpc3RvcnkudXNlcl9pZCwgY2hhdGhpc3RvcnkuY2hpbGRfaWQsIGNoYXRoaXN0b3J5LmNyZWF0ZWRfYXQsIGNoYXRoaXN0b3J5LnNvdXJjZXMgIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJGUk9NIGNoYXRoaXN0b3J5ICJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiV0hFUkUgY2hhdGhpc3Rvcnkuc2Vzc2lvbl9pZCA9ICUoc2Vzc2lvbl9pZF8xKXM6OlZBUkNIQVIgT1JERVIgQlkgY2hhdGhpc3RvcnkuY3JlYXRlZF9hdCBERVNDICJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiIExJTUlUICUocGFyYW1fMSlzOjpJTlRFR0VSXSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiW3BhcmFtZXRlcnM6IHsnc2Vzc2lvbl9pZF8xJzogJzc2N2YwZTc2LWIxZGMtNDg4Mi05ZTFmLWJmNzcxMjI4ZWMzNycsICdwYXJhbV8xJzogMTB9XSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiKEJhY2tncm91bmQgb24gdGhpcyBlcnJvciBhdDogaHR0cHM6Ly9zcWxhbGNoZS5tZS9lLzIwL2Y0MDUpIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJJTkZPOiAgICAgMTI3LjAuMC4xOjUzNTI1IC0gXCJQT1NUIC9hcGkvdjEvY2hhdC8gSFRUUC8xLjFcIiA1MDAgSW50ZXJuYWwgU2VydmVyIEVycm9yIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiLlpoLkvZXop6PlhrMifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUtvQ1A0cG9kenFtd3ZRRk15clFndEIiLCJ0b29sX25hbWUiOiJsYXVuY2gtcHJvY2VzcyIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwiY2QgYmFja2VuZCAmJiBzb3VyY2UgLnZlbnYvYmluL2FjdGl2YXRlICYmIHB5dGhvbiBhcHAvYmFja2VuZF9wcmVfc3RhcnQucHlcIiwgXCJ3YWl0XCI6IHRydWV9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLov5nkuKrplJnor6/ooajmmI7mlbDmja7lupPkuK3nvLrlsJEgYGNoYXRoaXN0b3J5YCDooajjgILov5nmmK/lm6DkuLrmlbDmja7lupPov4Hnp7vlsJrmnKrov5DooYzvvIzpnIDopoHliJvlu7rmlbDmja7lupPooajjgILorqnmiJHku6zop6PlhrPov5nkuKrpl67popjvvJpcblxuIyMg6Kej5YazIFwicmVsYXRpb24gJ2NoYXRoaXN0b3J5JyBkb2VzIG5vdCBleGlzdFwiIOmUmeivr1xuXG4jIyMgMS4g6L+Q6KGM5pWw5o2u5bqT6L+B56e7XG5cbuaIkeS7rOmcgOimgei/kOihjCBBbGVtYmljIOi/geenu+adpeWIm+W7uuaJgOmcgOeahOaVsOaNruW6k+ihqO+8mlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiLlvZPmiJHorr/pl64gY2hhdCDmjqXlj6PmiqXplJnlpoLkuIvvvJpcbkVSUk9SOiAgICBFeGNlcHRpb24gaW4gQVNHSSBhcHBsaWNhdGlvblxuVHJhY2ViYWNrIChtb3N0IHJlY2VudCBjYWxsIGxhc3QpOlxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3NxbGFsY2hlbXkvZW5naW5lL2Jhc2UucHlcIiwgbGluZSAxOTY3LCBpbiBfZXhlY19zaW5nbGVfY29udGV4dFxuICAgIHNlbGYuZGlhbGVjdC5kb19leGVjdXRlKFxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3NxbGFsY2hlbXkvZW5naW5lL2RlZmF1bHQucHlcIiwgbGluZSA5NDEsIGluIGRvX2V4ZWN1dGVcbiAgICBjdXJzb3IuZXhlY3V0ZShzdGF0ZW1lbnQsIHBhcmFtZXRlcnMpXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvcHN5Y29wZy9jdXJzb3IucHlcIiwgbGluZSA5NywgaW4gZXhlY3V0ZVxuICAgIHJhaXNlIGV4LndpdGhfdHJhY2ViYWNrKE5vbmUpXG5wc3ljb3BnLmVycm9ycy5VbmRlZmluZWRUYWJsZTogcmVsYXRpb24gXCJjaGF0aGlzdG9yeVwiIGRvZXMgbm90IGV4aXN0XG5MSU5FIDI6IEZST00gY2hhdGhpc3RvcnkgXG4gICAgICAgICAgICAgXlxuXG5UaGUgYWJvdmUgZXhjZXB0aW9uIHdhcyB0aGUgZGlyZWN0IGNhdXNlIG9mIHRoZSBmb2xsb3dpbmcgZXhjZXB0aW9uOlxuXG5UcmFjZWJhY2sgKG1vc3QgcmVjZW50IGNhbGwgbGFzdCk6XG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvdXZpY29ybi9wcm90b2NvbHMvaHR0cC9odHRwdG9vbHNfaW1wbC5weVwiLCBsaW5lIDQwMSwgaW4gcnVuX2FzZ2lcbiAgICByZXN1bHQgPSBhd2FpdCBhcHAoICAjIHR5cGU6IGlnbm9yZVtmdW5jLXJldHVybnMtdmFsdWVdXG4gICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3V2aWNvcm4vbWlkZGxld2FyZS9wcm94eV9oZWFkZXJzLnB5XCIsIGxpbmUgNzAsIGluIF9fY2FsbF9fXG4gICAgcmV0dXJuIGF3YWl0IHNlbGYuYXBwKHNjb3BlLCByZWNlaXZlLCBzZW5kKVxuICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9mYXN0YXBpL2FwcGxpY2F0aW9ucy5weVwiLCBsaW5lIDEwNTQsIGluIF9fY2FsbF9fXG4gICAgYXdhaXQgc3VwZXIoKS5fX2NhbGxfXyhzY29wZSwgcmVjZWl2ZSwgc2VuZClcbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zdGFybGV0dGUvYXBwbGljYXRpb25zLnB5XCIsIGxpbmUgMTEzLCBpbiBfX2NhbGxfX1xuICAgIGF3YWl0IHNlbGYubWlkZGxld2FyZV9zdGFjayhzY29wZSwgcmVjZWl2ZSwgc2VuZClcbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zdGFybGV0dGUvbWlkZGxld2FyZS9lcnJvcnMucHlcIiwgbGluZSAxODcsIGluIF9fY2FsbF9fXG4gICAgcmFpc2UgZXhjXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3RhcmxldHRlL21pZGRsZXdhcmUvZXJyb3JzLnB5XCIsIGxpbmUgMTY1LCBpbiBfX2NhbGxfX1xuICAgIGF3YWl0IHNlbGYuYXBwKHNjb3BlLCByZWNlaXZlLCBfc2VuZClcbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zdGFybGV0dGUvbWlkZGxld2FyZS9jb3JzLnB5XCIsIGxpbmUgODUsIGluIF9fY2FsbF9fXG4gICAgYXdhaXQgc2VsZi5hcHAoc2NvcGUsIHJlY2VpdmUsIHNlbmQpXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3RhcmxldHRlL21pZGRsZXdhcmUvZXhjZXB0aW9ucy5weVwiLCBsaW5lIDYyLCBpbiBfX2NhbGxfX1xuICAgIGF3YWl0IHdyYXBfYXBwX2hhbmRsaW5nX2V4Y2VwdGlvbnMoc2VsZi5hcHAsIGNvbm4pKHNjb3BlLCByZWNlaXZlLCBzZW5kKVxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3N0YXJsZXR0ZS9fZXhjZXB0aW9uX2hhbmRsZXIucHlcIiwgbGluZSA2MiwgaW4gd3JhcHBlZF9hcHBcbiAgICByYWlzZSBleGNcbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zdGFybGV0dGUvX2V4Y2VwdGlvbl9oYW5kbGVyLnB5XCIsIGxpbmUgNTEsIGluIHdyYXBwZWRfYXBwXG4gICAgYXdhaXQgYXBwKHNjb3BlLCByZWNlaXZlLCBzZW5kZXIpXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3RhcmxldHRlL3JvdXRpbmcucHlcIiwgbGluZSA3MTUsIGluIF9fY2FsbF9fXG4gICAgYXdhaXQgc2VsZi5taWRkbGV3YXJlX3N0YWNrKHNjb3BlLCByZWNlaXZlLCBzZW5kKVxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3N0YXJsZXR0ZS9yb3V0aW5nLnB5XCIsIGxpbmUgNzM1LCBpbiBhcHBcbiAgICBhd2FpdCByb3V0ZS5oYW5kbGUoc2NvcGUsIHJlY2VpdmUsIHNlbmQpXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3RhcmxldHRlL3JvdXRpbmcucHlcIiwgbGluZSAyODgsIGluIGhhbmRsZVxuICAgIGF3YWl0IHNlbGYuYXBwKHNjb3BlLCByZWNlaXZlLCBzZW5kKVxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3N0YXJsZXR0ZS9yb3V0aW5nLnB5XCIsIGxpbmUgNzYsIGluIGFwcFxuICAgIGF3YWl0IHdyYXBfYXBwX2hhbmRsaW5nX2V4Y2VwdGlvbnMoYXBwLCByZXF1ZXN0KShzY29wZSwgcmVjZWl2ZSwgc2VuZClcbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zdGFybGV0dGUvX2V4Y2VwdGlvbl9oYW5kbGVyLnB5XCIsIGxpbmUgNjIsIGluIHdyYXBwZWRfYXBwXG4gICAgcmFpc2UgZXhjXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3RhcmxldHRlL19leGNlcHRpb25faGFuZGxlci5weVwiLCBsaW5lIDUxLCBpbiB3cmFwcGVkX2FwcFxuICAgIGF3YWl0IGFwcChzY29wZSwgcmVjZWl2ZSwgc2VuZGVyKVxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3N0YXJsZXR0ZS9yb3V0aW5nLnB5XCIsIGxpbmUgNzMsIGluIGFwcFxuICAgIHJlc3BvbnNlID0gYXdhaXQgZihyZXF1ZXN0KVxuICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXlxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL2Zhc3RhcGkvcm91dGluZy5weVwiLCBsaW5lIDMwMSwgaW4gYXBwXG4gICAgcmF3X3Jlc3BvbnNlID0gYXdhaXQgcnVuX2VuZHBvaW50X2Z1bmN0aW9uKFxuICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9mYXN0YXBpL3JvdXRpbmcucHlcIiwgbGluZSAyMTIsIGluIHJ1bl9lbmRwb2ludF9mdW5jdGlvblxuICAgIHJldHVybiBhd2FpdCBkZXBlbmRhbnQuY2FsbCgqKnZhbHVlcylcbiAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kL2FwcC9hcGkvcm91dGVzL2NoYXQucHlcIiwgbGluZSA2MSwgaW4gY2hhdFxuICAgIGNoYXRfaGlzdG9yeSA9IGdldF9jaGF0X2hpc3RvcnkoZGIsIHNlc3Npb25faWQpXG4gICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvYXBwL3JhZy9jaGF0X2hpc3RvcnkucHlcIiwgbGluZSA5MywgaW4gZ2V0X2NoYXRfaGlzdG9yeVxuICAgIGNoYXRfaGlzdG9yaWVzID0gZGIuZXhlYyhzdGF0ZW1lbnQpLmFsbCgpXG4gICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5cbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxtb2RlbC9vcm0vc2Vzc2lvbi5weVwiLCBsaW5lIDY2LCBpbiBleGVjXG4gICAgcmVzdWx0cyA9IHN1cGVyKCkuZXhlY3V0ZShcbiAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXlxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3NxbGFsY2hlbXkvb3JtL3Nlc3Npb24ucHlcIiwgbGluZSAyMzYyLCBpbiBleGVjdXRlXG4gICAgcmV0dXJuIHNlbGYuX2V4ZWN1dGVfaW50ZXJuYWwoXG4gICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3FsYWxjaGVteS9vcm0vc2Vzc2lvbi5weVwiLCBsaW5lIDIyNDcsIGluIF9leGVjdXRlX2ludGVybmFsXG4gICAgcmVzdWx0OiBSZXN1bHRbQW55XSA9IGNvbXBpbGVfc3RhdGVfY2xzLm9ybV9leGVjdXRlX3N0YXRlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3NxbGFsY2hlbXkvb3JtL2NvbnRleHQucHlcIiwgbGluZSAzMDUsIGluIG9ybV9leGVjdXRlX3N0YXRlbWVudFxuICAgIHJlc3VsdCA9IGNvbm4uZXhlY3V0ZShcbiAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3FsYWxjaGVteS9lbmdpbmUvYmFzZS5weVwiLCBsaW5lIDE0MTgsIGluIGV4ZWN1dGVcbiAgICByZXR1cm4gbWV0aChcbiAgICAgICAgICAgXl5eXl5cbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L3NxbC9lbGVtZW50cy5weVwiLCBsaW5lIDUxNSwgaW4gX2V4ZWN1dGVfb25fY29ubmVjdGlvblxuICAgIHJldHVybiBjb25uZWN0aW9uLl9leGVjdXRlX2NsYXVzZWVsZW1lbnQoXG4gICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9iYXNlLnB5XCIsIGxpbmUgMTY0MCwgaW4gX2V4ZWN1dGVfY2xhdXNlZWxlbWVudFxuICAgIHJldCA9IHNlbGYuX2V4ZWN1dGVfY29udGV4dChcbiAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4gIEZpbGUgXCIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvc3FsYWxjaGVteS9lbmdpbmUvYmFzZS5weVwiLCBsaW5lIDE4NDYsIGluIF9leGVjdXRlX2NvbnRleHRcbiAgICByZXR1cm4gc2VsZi5fZXhlY19zaW5nbGVfY29udGV4dChcbiAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9iYXNlLnB5XCIsIGxpbmUgMTk4NiwgaW4gX2V4ZWNfc2luZ2xlX2NvbnRleHRcbiAgICBzZWxmLl9oYW5kbGVfZGJhcGlfZXhjZXB0aW9uKFxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3NxbGFsY2hlbXkvZW5naW5lL2Jhc2UucHlcIiwgbGluZSAyMzU1LCBpbiBfaGFuZGxlX2RiYXBpX2V4Y2VwdGlvblxuICAgIHJhaXNlIHNxbGFsY2hlbXlfZXhjZXB0aW9uLndpdGhfdHJhY2ViYWNrKGV4Y19pbmZvWzJdKSBmcm9tIGVcbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9iYXNlLnB5XCIsIGxpbmUgMTk2NywgaW4gX2V4ZWNfc2luZ2xlX2NvbnRleHRcbiAgICBzZWxmLmRpYWxlY3QuZG9fZXhlY3V0ZShcbiAgRmlsZSBcIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9zcWxhbGNoZW15L2VuZ2luZS9kZWZhdWx0LnB5XCIsIGxpbmUgOTQxLCBpbiBkb19leGVjdXRlXG4gICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50LCBwYXJhbWV0ZXJzKVxuICBGaWxlIFwiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL3BzeWNvcGcvY3Vyc29yLnB5XCIsIGxpbmUgOTcsIGluIGV4ZWN1dGVcbiAgICByYWlzZSBleC53aXRoX3RyYWNlYmFjayhOb25lKVxuc3FsYWxjaGVteS5leGMuUHJvZ3JhbW1pbmdFcnJvcjogKHBzeWNvcGcuZXJyb3JzLlVuZGVmaW5lZFRhYmxlKSByZWxhdGlvbiBcImNoYXRoaXN0b3J5XCIgZG9lcyBub3QgZXhpc3RcbkxJTkUgMjogRlJPTSBjaGF0aGlzdG9yeSBcbiAgICAgICAgICAgICBeXG5bU1FMOiBTRUxFQ1QgY2hhdGhpc3Rvcnkuc2Vzc2lvbl9pZCwgY2hhdGhpc3RvcnkudXNlcl9xdWVyeSwgY2hhdGhpc3RvcnkuYWlfcmVzcG9uc2UsIGNoYXRoaXN0b3J5Lm1vZGVsLCBjaGF0aGlzdG9yeS5pZCwgY2hhdGhpc3RvcnkudXNlcl9pZCwgY2hhdGhpc3RvcnkuY2hpbGRfaWQsIGNoYXRoaXN0b3J5LmNyZWF0ZWRfYXQsIGNoYXRoaXN0b3J5LnNvdXJjZXMgXG5GUk9NIGNoYXRoaXN0b3J5IFxuV0hFUkUgY2hhdGhpc3Rvcnkuc2Vzc2lvbl9pZCA9ICUoc2Vzc2lvbl9pZF8xKXM6OlZBUkNIQVIgT1JERVIgQlkgY2hhdGhpc3RvcnkuY3JlYXRlZF9hdCBERVNDIFxuIExJTUlUICUocGFyYW1fMSlzOjpJTlRFR0VSXVxuW3BhcmFtZXRlcnM6IHsnc2Vzc2lvbl9pZF8xJzogJzc2N2YwZTc2LWIxZGMtNDg4Mi05ZTFmLWJmNzcxMjI4ZWMzNycsICdwYXJhbV8xJzogMTB9XVxuKEJhY2tncm91bmQgb24gdGhpcyBlcnJvciBhdDogaHR0cHM6Ly9zcWxhbGNoZS5tZS9lLzIwL2Y0MDUpXG5JTkZPOiAgICAgMTI3LjAuMC4xOjUzNTI1IC0gXCJQT1NUIC9hcGkvdjEvY2hhdC8gSFRUUC8xLjFcIiA1MDAgSW50ZXJuYWwgU2VydmVyIEVycm9yXG7lpoLkvZXop6PlhrMifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoxNCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9fX1dLCJyZXNwb25zZV90ZXh0Ijoi6L+Z5Liq6ZSZ6K+v6KGo5piO5pWw5o2u5bqT5Lit57y65bCRIGBjaGF0aGlzdG9yeWAg6KGo44CC6L+Z5piv5Zug5Li65pWw5o2u5bqT6L+B56e75bCa5pyq6L+Q6KGM77yM6ZyA6KaB5Yib5bu65pWw5o2u5bqT6KGo44CC6K6p5oiR5Lus6Kej5Yaz6L+Z5Liq6Zeu6aKY77yaXG5cbiMjIOino+WGsyBcInJlbGF0aW9uICdjaGF0aGlzdG9yeScgZG9lcyBub3QgZXhpc3RcIiDplJnor69cblxuIyMjIDEuIOi/kOihjOaVsOaNruW6k+i/geenu1xuXG7miJHku6zpnIDopoHov5DooYwgQWxlbWJpYyDov4Hnp7vmnaXliJvlu7rmiYDpnIDnmoTmlbDmja7lupPooajvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJiMmFkNjIxNi00NDExLTRkNTUtOWRhNS1lMTc2MjdkMzFmODgiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE4RWZXSlRUVVN4UWoxNnhtV1VqNnNRIiwidG9vbF9uYW1lIjoicmVhZC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcInRlcm1pbmFsX2lkXCI6IDE1fSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi6K6p5oiR5Lus5p+l55yL5ZCO56uv6aKE5ZCv5Yqo6ISa5pys55qE6L6T5Ye677yaXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJDb21tYW5kIGlzIHN0aWxsIHJ1bm5pbmcgYWZ0ZXIgMCBzZWNvbmRzLiBZb3UgY2FuIHVzZSByZWFkLXByb2Nlc3MgdG8gZ2V0IG1vcmUgb3V0cHV0XG5hbmQga2lsbC1wcm9jZXNzIHRvIHRlcm1pbmF0ZSBpdCBpZiBuZWVkZWQuXG5QSUQgMTVcbk91dHB1dCBzbyBmYXI6XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUtvQ1A0cG9kenFtd3ZRRk15clFndEIifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoxNSwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9fX1dLCJyZXNwb25zZV90ZXh0Ijoi6K6p5oiR5Lus5p+l55yL5ZCO56uv6aKE5ZCv5Yqo6ISa5pys55qE6L6T5Ye677yaXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNGM0YmRiZmItNTNjOS00N2RlLTg1ZTgtYzgzNjdkZDA2MThkIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxSjNENUFtaU1MWUpCWlJudzR4VkJ0NiIsInRvb2xfbmFtZSI6ImxhdW5jaC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJjZCBiYWNrZW5kICYmIHNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGUgJiYgYWxlbWJpYyB1cGdyYWRlIGhlYWRcIiwgXCJ3YWl0XCI6IHRydWV9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLnjrDlnKjorqnmiJHku6zov5DooYwgQWxlbWJpYyDov4Hnp7vmnaXliJvlu7rmlbDmja7lupPooajvvJpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDE1IChzdGF0dXM6IGNvbXBsZXRlZCk6XG48b3V0cHV0PklORk86X19tYWluX186SW5pdGlhbGl6aW5nIHNlcnZpY2VcclxuSU5GTzpfX21haW5fXzpTdGFydGluZyBjYWxsIHRvICdfX21haW5fXy5pbml0JywgdGhpcyBpcyB0aGUgMXN0IHRpbWUgY2FsbGluZyBpdC5cclxuSU5GTzpfX21haW5fXzpTZXJ2aWNlIGZpbmlzaGVkIGluaXRpYWxpemluZ1xyXG48L291dHB1dD5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE4RWZXSlRUVVN4UWoxNnhtV1VqNnNRIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MTUsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifX19XSwicmVzcG9uc2VfdGV4dCI6IueOsOWcqOiuqeaIkeS7rOi/kOihjCBBbGVtYmljIOi/geenu+adpeWIm+W7uuaVsOaNruW6k+ihqO+8mlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjZmNjZlMTYwLTJlMjgtNGE4MS1hZTgwLTA0OWE0MTQ2ZjVmMiIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVhZQkp0a1k1WFVLc3V1WFByOGloWFUiLCJ0b29sX25hbWUiOiJyZWFkLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1widGVybWluYWxfaWRcIjogMTZ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLorqnmiJHku6zmn6XnnIsgQWxlbWJpYyDov4Hnp7vnmoTovpPlh7rvvJpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkNvbW1hbmQgaXMgc3RpbGwgcnVubmluZyBhZnRlciAwIHNlY29uZHMuIFlvdSBjYW4gdXNlIHJlYWQtcHJvY2VzcyB0byBnZXQgbW9yZSBvdXRwdXRcbmFuZCBraWxsLXByb2Nlc3MgdG8gdGVybWluYXRlIGl0IGlmIG5lZWRlZC5cblBJRCAxNlxuT3V0cHV0IHNvIGZhcjpcbjxzdGRvdXQ+XG5cbjwvc3Rkb3V0PlxuPHN0ZGVycj5cblxuPC9zdGRlcnI+IiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxSjNENUFtaU1MWUpCWlJudzR4VkJ0NiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjE2LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiLorqnmiJHku6zmn6XnnIsgQWxlbWJpYyDov4Hnp7vnmoTovpPlh7rvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJmMDlkYjEwZi1lNDNhLTQyNmMtOWFlZS0yODdlOWJiZmQ5OWQiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE3WTY1cUV4YzdNVWo5RExoVFk4VzlIIiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImNkIGJhY2tlbmQgJiYgc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZSAmJiBweXRob24gYXBwL2luaXRpYWxfZGF0YS5weVwiLCBcIndhaXRcIjogdHJ1ZX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IueOsOWcqOiuqeaIkeS7rOi/kOihjOWIneWni+aVsOaNruiEmuacrO+8jOWIm+W7uuWIneWni+eUqOaIt+WSjOWFtuS7luW/heimgeaVsOaNru+8mlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSBpcyB0aGUgb3V0cHV0IGZyb20gdGVybWluYWwgMTYgKHN0YXR1czogY29tcGxldGVkKTpcbjxvdXRwdXQ+SU5GTyAgW2FsZW1iaWMucnVudGltZS5taWdyYXRpb25dIENvbnRleHQgaW1wbCBQb3N0Z3Jlc3FsSW1wbC5cclxuSU5GTyAgW2FsZW1iaWMucnVudGltZS5taWdyYXRpb25dIFdpbGwgYXNzdW1lIHRyYW5zYWN0aW9uYWwgRERMLlxyXG48L291dHB1dD5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFYWUJKdGtZNVhVS3N1dVhQcjhpaFhVIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MTYsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifX19XSwicmVzcG9uc2VfdGV4dCI6IueOsOWcqOiuqeaIkeS7rOi/kOihjOWIneWni+aVsOaNruiEmuacrO+8jOWIm+W7uuWIneWni+eUqOaIt+WSjOWFtuS7luW/heimgeaVsOaNru+8mlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjE0ZDYyZjc0LWJhNzktNDY2Ny1iMGFjLWRmN2Q3YmI4NjMwZSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTJWR1dyS1BwbW1na0dyQjFpWEU5SFAiLCJ0b29sX25hbWUiOiJyZWFkLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1widGVybWluYWxfaWRcIjogMTd9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLorqnmiJHku6zmn6XnnIvliJ3lp4vmlbDmja7ohJrmnKznmoTovpPlh7rvvJpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkNvbW1hbmQgaXMgc3RpbGwgcnVubmluZyBhZnRlciAwIHNlY29uZHMuIFlvdSBjYW4gdXNlIHJlYWQtcHJvY2VzcyB0byBnZXQgbW9yZSBvdXRwdXRcbmFuZCBraWxsLXByb2Nlc3MgdG8gdGVybWluYXRlIGl0IGlmIG5lZWRlZC5cblBJRCAxN1xuT3V0cHV0IHNvIGZhcjpcbjxzdGRvdXQ+XG5cbjwvc3Rkb3V0PlxuPHN0ZGVycj5cblxuPC9zdGRlcnI+IiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxN1k2NXFFeGM3TVVqOURMaFRZOFc5SCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjE3LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiLorqnmiJHku6zmn6XnnIvliJ3lp4vmlbDmja7ohJrmnKznmoTovpPlh7rvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIwNWQ3Y2U5Mi1mNWYwLTQ2OTItOWRmNC0wODhlNGM3MDhjNWYiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFXMjRIZzNyYURQRWRzTHNOWnA4dFJwIiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImNkIGJhY2tlbmQgJiYgc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZSAmJiBweXRob24gLWMgXFxcImZyb20gc3FsbW9kZWwgaW1wb3J0IFNlc3Npb24sIGluc3BlY3Q7IGZyb20gYXBwLmNvcmUuZGIgaW1wb3J0IGVuZ2luZTsgaW5zcGVjdG9yID0gaW5zcGVjdChlbmdpbmUpOyBwcmludCgnVGFibGVzIGluIGRhdGFiYXNlOicsIGluc3BlY3Rvci5nZXRfdGFibGVfbmFtZXMoKSlcXFwiXCIsIFwid2FpdFwiOiB0cnVlfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi546w5Zyo6K6p5oiR5Lus5qOA5p+l5LiA5LiL5pWw5o2u5bqT5Lit55qE6KGo77yM55yL55yL5piv5ZCm5bey57uP5Yib5bu65LqGIGBjaGF0X2hpc3RvcnlgIOihqO+8mlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSBpcyB0aGUgb3V0cHV0IGZyb20gdGVybWluYWwgMTcgKHN0YXR1czogY29tcGxldGVkKTpcbjxvdXRwdXQ+SU5GTzpfX21haW5fXzpDcmVhdGluZyBpbml0aWFsIGRhdGFcclxuSU5GTzpfX21haW5fXzpJbml0aWFsIGRhdGEgY3JlYXRlZFxyXG48L291dHB1dD5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDEyVkdXcktQcG1tZ2tHckIxaVhFOUhQIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MTcsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifX19XSwicmVzcG9uc2VfdGV4dCI6IueOsOWcqOiuqeaIkeS7rOajgOafpeS4gOS4i+aVsOaNruW6k+S4reeahOihqO+8jOeci+eci+aYr+WQpuW3sue7j+WIm+W7uuS6hiBgY2hhdF9oaXN0b3J5YCDooajvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJhNzUwZTMyMy00NjVlLTRiMDEtOTA4NS0zMzIwNWFiNDU1ZTIiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFCQ0pMRGFuZENIY2pwOVFSd3RXdW5UIiwidG9vbF9uYW1lIjoicmVhZC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcInRlcm1pbmFsX2lkXCI6IDE4fSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi6K6p5oiR5Lus5p+l55yL5pWw5o2u5bqT6KGo55qE6L6T5Ye677yaXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJDb21tYW5kIGlzIHN0aWxsIHJ1bm5pbmcgYWZ0ZXIgMCBzZWNvbmRzLiBZb3UgY2FuIHVzZSByZWFkLXByb2Nlc3MgdG8gZ2V0IG1vcmUgb3V0cHV0XG5hbmQga2lsbC1wcm9jZXNzIHRvIHRlcm1pbmF0ZSBpdCBpZiBuZWVkZWQuXG5QSUQgMThcbk91dHB1dCBzbyBmYXI6XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVcyNEhnM3JhRFBFZHNMc05acDh0UnAifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoxOCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9fX1dLCJyZXNwb25zZV90ZXh0Ijoi6K6p5oiR5Lus5p+l55yL5pWw5o2u5bqT6KGo55qE6L6T5Ye677yaXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMTU4MTM1NzQtM2ZmYS00OWVjLTlkOGUtM2NkMmJmNGFiYTlkIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxR2FhaTNLZDc4UXliU0tZMUhUc1VSSiIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJiYWNrZW5kL2FwcC9tb2RlbHMucHlcIiwgXCJ2aWV3X3JhbmdlXCI6IFsyMDAsIDIyMF19In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLlpKrlpb3kuobvvIHmiJHku6zlj6/ku6XnnIvliLDmlbDmja7lupPkuK3lt7Lnu4/liJvlu7rkuoYgYGNoYXRfaGlzdG9yeWAg6KGo44CC5L2G5piv6ZSZ6K+v5L+h5oGv5Lit5pi+56S657O757uf5Zyo5p+l5om+IGBjaGF0aGlzdG9yeWAg6KGo77yI5rKh5pyJ5LiL5YiS57q/77yJ77yM6L+Z5Y+v6IO95pivIFNRTE1vZGVsIOeahOWRveWQjee6puWumuWvvOiHtOeahOmXrumimOOAglxuXG7orqnmiJHku6zmo4Dmn6XkuIDkuIsgYENoYXRIaXN0b3J5YCDmqKHlnovnmoTlrprkuYnvvIznnIvnnIvmmK/lkKbmnInooajlkI3nmoTpl67popjvvJpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDE4IChzdGF0dXM6IGNvbXBsZXRlZCk6XG48b3V0cHV0PlRhYmxlcyBpbiBkYXRhYmFzZTogWydhbGVtYmljX3ZlcnNpb24nLCAndXNlcicsICdpdGVtJywgJ2NoaWxkJywgJ2RvY3VtZW50JywgJ2dyb3d0aF9yZWNvcmQnLCAnY2hhdF9oaXN0b3J5J11cclxuPC9vdXRwdXQ+XG48cmV0dXJuLWNvZGU+XG4wXG48L3JldHVybi1jb2RlPlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxQkNKTERhbmRDSGNqcDlRUnd0V3VuVCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjE4LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiLlpKrlpb3kuobvvIHmiJHku6zlj6/ku6XnnIvliLDmlbDmja7lupPkuK3lt7Lnu4/liJvlu7rkuoYgYGNoYXRfaGlzdG9yeWAg6KGo44CC5L2G5piv6ZSZ6K+v5L+h5oGv5Lit5pi+56S657O757uf5Zyo5p+l5om+IGBjaGF0aGlzdG9yeWAg6KGo77yI5rKh5pyJ5LiL5YiS57q/77yJ77yM6L+Z5Y+v6IO95pivIFNRTE1vZGVsIOeahOWRveWQjee6puWumuWvvOiHtOeahOmXrumimOOAglxuXG7orqnmiJHku6zmo4Dmn6XkuIDkuIsgYENoYXRIaXN0b3J5YCDmqKHlnovnmoTlrprkuYnvvIznnIvnnIvmmK/lkKbmnInooajlkI3nmoTpl67popjvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJkYmZkMzNmYy01YThlLTRhMGMtYTdjOS1kMzI5OWRjNWFkZDgiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFONlVCYzd0eWZob1FCMUVRNm9COHBNIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJ2aWV3XCIsIFwicGF0aFwiOiBcImJhY2tlbmQvYXBwL21vZGVscy5weVwiLCBcInZpZXdfcmFuZ2VcIjogWzIyMCwgMjQwXX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IuiuqeaIkeS7rOe7p+e7reafpeeciyBDaGF0SGlzdG9yeSDmqKHlnovnmoTlrprkuYnvvJpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gYmFja2VuZC9hcHAvbW9kZWxzLnB5OlxuICAgMjAwXHRcbiAgIDIwMVx0XG4gICAyMDJcdGNsYXNzIERvY3VtZW50UHVibGljKERvY3VtZW50QmFzZSk6XG4gICAyMDNcdCAgICBpZDogdXVpZC5VVUlEXG4gICAyMDRcdCAgICBmaWxlbmFtZTogc3RyXG4gICAyMDVcdCAgICB1cGxvYWRfdGltZXN0YW1wOiBkYXRldGltZVxuICAgMjA2XHQgICAgZG9jX21ldGFkYXRhOiBEaWN0W3N0ciwgQW55XSB8IE5vbmUgPSBOb25lXG4gICAyMDdcdFxuICAgMjA4XHRcbiAgIDIwOVx0Y2xhc3MgRG9jdW1lbnRzUHVibGljKFNRTE1vZGVsKTpcbiAgIDIxMFx0ICAgIGRhdGE6IGxpc3RbRG9jdW1lbnRQdWJsaWNdXG4gICAyMTFcdCAgICBjb3VudDogaW50XG4gICAyMTJcdFxuICAgMjEzXHRcbiAgIDIxNFx0IyBDaGF0IGhpc3RvcnkgbW9kZWxzXG4gICAyMTVcdGNsYXNzIENoYXRIaXN0b3J5QmFzZShTUUxNb2RlbCk6XG4gICAyMTZcdCAgICBzZXNzaW9uX2lkOiBzdHIgPSBGaWVsZChtYXhfbGVuZ3RoPTUwKVxuICAgMjE3XHQgICAgdXNlcl9xdWVyeTogc3RyXG4gICAyMThcdCAgICBhaV9yZXNwb25zZTogc3RyXG4gICAyMTlcdCAgICBtb2RlbDogc3RyID0gRmllbGQobWF4X2xlbmd0aD01MClcbiAgIDIyMFx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAyODNcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUdhYWkzS2Q3OFF5YlNLWTFIVHNVUkoifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoxOCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9fX1dLCJyZXNwb25zZV90ZXh0Ijoi6K6p5oiR5Lus57un57ut5p+l55yLIENoYXRIaXN0b3J5IOaooeWei+eahOWumuS5ie+8mlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjQ3ZWVjMThjLTY1MWEtNDYwNS1iNWUyLTQwNzhmNjBhOTY0ZCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTUxZUtoZ1dlWkt3aEVtWUhFNlJpa0wiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwiYmFja2VuZC9hcHAvcmFnL2NoYXRfaGlzdG9yeS5weVwiLCBcInZpZXdfcmFuZ2VcIjogWzcwLCAxMDBdfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi546w5Zyo6K6p5oiR5Lus5qOA5p+l5LiA5LiLIGBnZXRfY2hhdF9oaXN0b3J5YCDlh73mlbDnmoTlrp7njrDvvJpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gYmFja2VuZC9hcHAvbW9kZWxzLnB5OlxuICAgMjIwXHRcbiAgIDIyMVx0XG4gICAyMjJcdGNsYXNzIENoYXRIaXN0b3J5Q3JlYXRlKENoYXRIaXN0b3J5QmFzZSk6XG4gICAyMjNcdCAgICB1c2VyX2lkOiB1dWlkLlVVSURcbiAgIDIyNFx0ICAgIGNoaWxkX2lkOiB1dWlkLlVVSUQgfCBOb25lID0gTm9uZVxuICAgMjI1XHRcbiAgIDIyNlx0XG4gICAyMjdcdGNsYXNzIENoYXRIaXN0b3J5KENoYXRIaXN0b3J5QmFzZSwgdGFibGU9VHJ1ZSk6XG4gICAyMjhcdCAgICBpZDogdXVpZC5VVUlEID0gRmllbGQoZGVmYXVsdF9mYWN0b3J5PXV1aWQudXVpZDQsIHByaW1hcnlfa2V5PVRydWUpXG4gICAyMjlcdCAgICB1c2VyX2lkOiB1dWlkLlVVSUQgPSBGaWVsZChmb3JlaWduX2tleT1cInVzZXIuaWRcIilcbiAgIDIzMFx0ICAgIHVzZXI6IFVzZXIgPSBSZWxhdGlvbnNoaXAoYmFja19wb3B1bGF0ZXM9XCJjaGF0X2hpc3Rvcmllc1wiKVxuICAgMjMxXHQgICAgY2hpbGRfaWQ6IHV1aWQuVVVJRCB8IE5vbmUgPSBGaWVsZChkZWZhdWx0PU5vbmUsIGZvcmVpZ25fa2V5PVwiY2hpbGQuaWRcIilcbiAgIDIzMlx0ICAgIGNoaWxkOiBDaGlsZCB8IE5vbmUgPSBSZWxhdGlvbnNoaXAoYmFja19wb3B1bGF0ZXM9XCJjaGF0X2hpc3Rvcmllc1wiKVxuICAgMjMzXHQgICAgY3JlYXRlZF9hdDogZGF0ZXRpbWUgPSBGaWVsZChkZWZhdWx0X2ZhY3Rvcnk9ZGF0ZXRpbWUudXRjbm93KVxuICAgMjM0XHQgICAgc291cmNlczogTGlzdFtzdHJdIHwgTm9uZSA9IEZpZWxkKGRlZmF1bHQ9Tm9uZSwgc2FfdHlwZT1KU09OKSAgIyBSZWZlcmVuY2VzIHRvIHNvdXJjZSBkb2N1bWVudHNcbiAgIDIzNVx0XG4gICAyMzZcdFxuICAgMjM3XHRjbGFzcyBDaGF0SGlzdG9yeVB1YmxpYyhDaGF0SGlzdG9yeUJhc2UpOlxuICAgMjM4XHQgICAgaWQ6IHV1aWQuVVVJRFxuICAgMjM5XHQgICAgdXNlcl9pZDogdXVpZC5VVUlEXG4gICAyNDBcdCAgICBjaGlsZF9pZDogdXVpZC5VVUlEIHwgTm9uZSA9IE5vbmVcblRvdGFsIGxpbmVzIGluIGZpbGU6IDI4M1xuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxTjZVQmM3dHlmaG9RQjFFUTZvQjhwTSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjE4LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiLnjrDlnKjorqnmiJHku6zmo4Dmn6XkuIDkuIsgYGdldF9jaGF0X2hpc3RvcnlgIOWHveaVsOeahOWunueOsO+8mlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6Ijc2MmRkNmE4LThkY2EtNGJjNi1hZThmLTlhZDU2ODc0YmQ5MiIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUR0c3lkcGl5VUtnUjdZZmV3NVk0dGMiLCJ0b29sX25hbWUiOiJsYXVuY2gtcHJvY2VzcyIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwiY2QgYmFja2VuZCAmJiBzb3VyY2UgLnZlbnYvYmluL2FjdGl2YXRlICYmIGJhc2ggc2NyaXB0cy9wcmVzdGFydC5zaFwiLCBcIndhaXRcIjogdHJ1ZX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IueOsOWcqOaIkeS7rOW3sue7j+S6huino+S6humXrumimOaJgOWcqOOAguiuqeaIkeS7rOmHjeaWsOWQr+WKqOWQjuerr+acjeWKoe+8jOeci+eci+mXrumimOaYr+WQpuW3sue7j+ino+WGs++8mlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBiYWNrZW5kL2FwcC9yYWcvY2hhdF9oaXN0b3J5LnB5OlxuICAgIDcwXHQgICAgZGI6IFNlc3Npb24sXG4gICAgNzFcdCAgICBzZXNzaW9uX2lkOiBzdHIsXG4gICAgNzJcdCAgICBsaW1pdDogaW50ID0gMTBcbiAgICA3M1x0KSAtPiBMaXN0W0RpY3Rbc3RyLCBzdHJdXTpcbiAgICA3NFx0ICAgIFwiXCJcIlxuICAgIDc1XHQgICAgR2V0IGNoYXQgaGlzdG9yeSBmb3IgYSBzZXNzaW9uLlxuICAgIDc2XHQgICAgXG4gICAgNzdcdCAgICBBcmdzOlxuICAgIDc4XHQgICAgICAgIGRiOiBEYXRhYmFzZSBzZXNzaW9uXG4gICAgNzlcdCAgICAgICAgc2Vzc2lvbl9pZDogU2Vzc2lvbiBJRFxuICAgIDgwXHQgICAgICAgIGxpbWl0OiBNYXhpbXVtIG51bWJlciBvZiBtZXNzYWdlcyB0byByZXR1cm5cbiAgICA4MVx0ICAgICAgICBcbiAgICA4Mlx0ICAgIFJldHVybnM6XG4gICAgODNcdCAgICAgICAgTGlzdCBvZiBtZXNzYWdlcyBpbiB0aGUgZm9ybWF0IGV4cGVjdGVkIGJ5IExhbmdDaGFpblxuICAgIDg0XHQgICAgXCJcIlwiXG4gICAgODVcdCAgICAjIFF1ZXJ5IGNoYXQgaGlzdG9yeVxuICAgIDg2XHQgICAgc3RhdGVtZW50ID0gKFxuICAgIDg3XHQgICAgICAgIHNlbGVjdChDaGF0SGlzdG9yeSlcbiAgICA4OFx0ICAgICAgICAud2hlcmUoQ2hhdEhpc3Rvcnkuc2Vzc2lvbl9pZCA9PSBzZXNzaW9uX2lkKVxuICAgIDg5XHQgICAgICAgIC5vcmRlcl9ieShDaGF0SGlzdG9yeS5jcmVhdGVkX2F0LmRlc2MoKSlcbiAgICA5MFx0ICAgICAgICAubGltaXQobGltaXQpXG4gICAgOTFcdCAgICApXG4gICAgOTJcdCAgICBcbiAgICA5M1x0ICAgIGNoYXRfaGlzdG9yaWVzID0gZGIuZXhlYyhzdGF0ZW1lbnQpLmFsbCgpXG4gICAgOTRcdCAgICBcbiAgICA5NVx0ICAgICMgRm9ybWF0IGZvciBMYW5nQ2hhaW5cbiAgICA5Nlx0ICAgIG1lc3NhZ2VzID0gW11cbiAgICA5N1x0ICAgIGZvciBjaGF0IGluIHJldmVyc2VkKGNoYXRfaGlzdG9yaWVzKTogICMgUmV2ZXJzZSB0byBnZXQgY2hyb25vbG9naWNhbCBvcmRlclxuICAgIDk4XHQgICAgICAgIG1lc3NhZ2VzLmV4dGVuZChbXG4gICAgOTlcdCAgICAgICAgICAgIHtcInJvbGVcIjogXCJodW1hblwiLCBcImNvbnRlbnRcIjogY2hhdC51c2VyX3F1ZXJ5fSxcbiAgIDEwMFx0ICAgICAgICAgICAge1wicm9sZVwiOiBcImFpXCIsIFwiY29udGVudFwiOiBjaGF0LmFpX3Jlc3BvbnNlfVxuVG90YWwgbGluZXMgaW4gZmlsZTogMTQwXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE1MWVLaGdXZVpLd2hFbVlIRTZSaWtMIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MTgsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIifX19XSwicmVzcG9uc2VfdGV4dCI6IueOsOWcqOaIkeS7rOW3sue7j+S6huino+S6humXrumimOaJgOWcqOOAguiuqeaIkeS7rOmHjeaWsOWQr+WKqOWQjuerr+acjeWKoe+8jOeci+eci+mXrumimOaYr+WQpuW3sue7j+ino+WGs++8mlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjFkNmMzOTIxLTViOTktNGViOC1iMmEwLWUxMWNlNjI4NjQ5NSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMU01OXhkWThxWVpncHlaNHlFbWRHUVYiLCJ0b29sX25hbWUiOiJyZWFkLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1widGVybWluYWxfaWRcIjogMTl9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLorqnmiJHku6zmn6XnnIvpooTlkK/liqjohJrmnKznmoTovpPlh7rvvJpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkNvbW1hbmQgaXMgc3RpbGwgcnVubmluZyBhZnRlciAwIHNlY29uZHMuIFlvdSBjYW4gdXNlIHJlYWQtcHJvY2VzcyB0byBnZXQgbW9yZSBvdXRwdXRcbmFuZCBraWxsLXByb2Nlc3MgdG8gdGVybWluYXRlIGl0IGlmIG5lZWRlZC5cblBJRCAxOVxuT3V0cHV0IHNvIGZhcjpcbjxzdGRvdXQ+XG5cbjwvc3Rkb3V0PlxuPHN0ZGVycj5cblxuPC9zdGRlcnI+IiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxRHRzeWRwaXlVS2dSN1lmZXc1WTR0YyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjE5LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiLorqnmiJHku6zmn6XnnIvpooTlkK/liqjohJrmnKznmoTovpPlh7rvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI5OWZkNzRjNS1lMjA2LTQ5NmMtODZmYy0zZTVkZTYxN2Y0ZTMiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFNZHlnQ0Roa3dHdmhwaDdwbUgybldRIiwidG9vbF9uYW1lIjoicmVhZC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcInRlcm1pbmFsX2lkXCI6IDE5fSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi6K6p5oiR5Lus562J5b6F6ISa5pys5a6M5oiQ77yaXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGlzIHRoZSBvdXRwdXQgZnJvbSB0ZXJtaW5hbCAxOSAoc3RhdHVzOiBzdGlsbCBydW5uaW5nKTpcbjxvdXRwdXQ+KyBweXRob24gYXBwL2JhY2tlbmRfcHJlX3N0YXJ0LnB5XHJcbklORk86X19tYWluX186SW5pdGlhbGl6aW5nIHNlcnZpY2VcclxuSU5GTzpfX21haW5fXzpTdGFydGluZyBjYWxsIHRvICdfX21haW5fXy5pbml0JywgdGhpcyBpcyB0aGUgMXN0IHRpbWUgY2FsbGluZyBpdC5cclxuSU5GTzpfX21haW5fXzpTZXJ2aWNlIGZpbmlzaGVkIGluaXRpYWxpemluZ1xyXG4rIGFsZW1iaWMgdXBncmFkZSBoZWFkXHJcbklORk8gIFthbGVtYmljLnJ1bnRpbWUubWlncmF0aW9uXSBDb250ZXh0IGltcGwgUG9zdGdyZXNxbEltcGwuXHJcbklORk8gIFthbGVtYmljLnJ1bnRpbWUubWlncmF0aW9uXSBXaWxsIGFzc3VtZSB0cmFuc2FjdGlvbmFsIERETC5cclxuKyBweXRob24gYXBwL2luaXRpYWxfZGF0YS5weVxyXG5JTkZPOl9fbWFpbl9fOkNyZWF0aW5nIGluaXRpYWwgZGF0YVxyXG48L291dHB1dD5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMU01OXhkWThxWVpncHlaNHlFbWRHUVYifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoxOSwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9fX1dLCJyZXNwb25zZV90ZXh0Ijoi6K6p5oiR5Lus562J5b6F6ISa5pys5a6M5oiQ77yaXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNzFjZTlkMjAtZDk2MC00NDJkLTkxODAtZTY1ZThiMzM3MDdiIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxTUxGdUZiNGNDaHF1Z2R5dzd3WW5QeiIsInRvb2xfbmFtZSI6ImxhdW5jaC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJjZCBiYWNrZW5kICYmIHNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGUgJiYgZmFzdGFwaSBydW4gLS1yZWxvYWQgYXBwL21haW4ucHlcIiwgXCJ3YWl0XCI6IGZhbHNlfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi546w5Zyo6K6p5oiR5Lus6YeN5paw5ZCv5Yqo5ZCO56uv5pyN5Yqh77yaXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGlzIHRoZSBvdXRwdXQgZnJvbSB0ZXJtaW5hbCAxOSAoc3RhdHVzOiBjb21wbGV0ZWQpOlxuPG91dHB1dD4rIHB5dGhvbiBhcHAvYmFja2VuZF9wcmVfc3RhcnQucHlcclxuSU5GTzpfX21haW5fXzpJbml0aWFsaXppbmcgc2VydmljZVxyXG5JTkZPOl9fbWFpbl9fOlN0YXJ0aW5nIGNhbGwgdG8gJ19fbWFpbl9fLmluaXQnLCB0aGlzIGlzIHRoZSAxc3QgdGltZSBjYWxsaW5nIGl0LlxyXG5JTkZPOl9fbWFpbl9fOlNlcnZpY2UgZmluaXNoZWQgaW5pdGlhbGl6aW5nXHJcbisgYWxlbWJpYyB1cGdyYWRlIGhlYWRcclxuSU5GTyAgW2FsZW1iaWMucnVudGltZS5taWdyYXRpb25dIENvbnRleHQgaW1wbCBQb3N0Z3Jlc3FsSW1wbC5cclxuSU5GTyAgW2FsZW1iaWMucnVudGltZS5taWdyYXRpb25dIFdpbGwgYXNzdW1lIHRyYW5zYWN0aW9uYWwgRERMLlxyXG4rIHB5dGhvbiBhcHAvaW5pdGlhbF9kYXRhLnB5XHJcbklORk86X19tYWluX186Q3JlYXRpbmcgaW5pdGlhbCBkYXRhXHJcbklORk86X19tYWluX186SW5pdGlhbCBkYXRhIGNyZWF0ZWRcclxuPC9vdXRwdXQ+XG48cmV0dXJuLWNvZGU+XG4wXG48L3JldHVybi1jb2RlPlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxTWR5Z0NEaGt3R3ZocGg3cG1IMm5XUSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjE5LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiLnjrDlnKjorqnmiJHku6zph43mlrDlkK/liqjlkI7nq6/mnI3liqHvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI2NDA1MjU4NS05NDQ5LTRkMjAtYjkzOS03ZDI2NGE4NTRlYmIiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFSSjZXVTVaeUtSb3RpUVZkeGV5ODJEIiwidG9vbF9uYW1lIjoicmVhZC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcInRlcm1pbmFsX2lkXCI6IDIwfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi6K6p5oiR5Lus562J5b6F5ZCO56uv5pyN5Yqh5ZCv5Yqo77yaXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJQcm9jZXNzIGxhdW5jaGVkIHdpdGggUElEIDIwIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxTUxGdUZiNGNDaHF1Z2R5dzd3WW5QeiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjIwLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyIn19fV0sInJlc3BvbnNlX3RleHQiOiLorqnmiJHku6znrYnlvoXlkI7nq6/mnI3liqHlkK/liqjvvJpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI5NWMwYWE5YS1jNGMzLTRmZjktOGFjNi00NDhmZTA2NWFjNjkiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFTSHd5YmZHdmlzdkFKREw1UmZBRFdkIiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImV4cG9ydCBUT0tFTj1cXFwiZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmxlSEFpT2pFM05EUTVOakl5T1RVc0luTjFZaUk2SW1abVpqQmhPVEZsTFRGbE5qWXRORGMwTXkxaU5EQmtMVGxtWVdVek9XSmlNMk5tT0NKOS5WQm0zS3dlXy1VQ1dEODhObW93NkFDdFpQbllSZFdVcnFmbnBiWmVkSjFBXFxcIiAmJiBjdXJsIC1YIFBPU1QgXFxcImh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9hcGkvdjEvY2hhdC9cXFwiIC1IIFxcXCJDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cXFwiIC1IIFxcXCJBdXRob3JpemF0aW9uOiBCZWFyZXIgJFRPS0VOXFxcIiAtZCAne1xcXCJxdWVzdGlvblxcXCI6XFxcIlxcdTRmNjBcXHU1OTdkXFx1ZmYwY1xcdTYyMTFcXHU2MGYzXFx1NGU4NlxcdTg5ZTNcXHU0ZTAwXFx1NGUwYlxcdTU5ODJcXHU0ZjU1XFx1NzE2N1xcdTk4N2UzXFx1NWM4MVxcdTc2ODRcXHU1YjY5XFx1NWI1MFxcdWZmMWZcXFwiLCBcXFwibW9kZWxcXFwiOlxcXCJkZWVwc2Vlay9kZWVwc2Vlay1jaGF0LXYzLTAzMjQ6ZnJlZVxcXCJ9J1wiLCBcIndhaXRcIjogZmFsc2V9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLnjrDlnKjlkI7nq6/mnI3liqHlt7Lnu4/ph43mlrDlkK/liqjvvIzorqnmiJHku6zlho3mrKHmtYvor5XogYrlpKnmjqXlj6PvvJpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDIwIChzdGF0dXM6IHN0aWxsIHJ1bm5pbmcpOlxuPG91dHB1dD5cdTAwMWJbMzRtSU5GTyAgICBcdTAwMWJbMG0gVXNpbmcgcGF0aCBcdTAwMWJbMzRtYXBwL21haW4ucHlcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cdTAwMWJbMzRtSU5GTyAgICBcdTAwMWJbMG0gUmVzb2x2ZWQgYWJzb2x1dGUgcGF0aCBcdTAwMWJbMzVtL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZC9hcHAvXHUwMDFiWzBtXHUwMDFiWzk1bW1haW4ucHlcdTAwMWJbMG0gICAgICAgICAgICAgICBcclxuXHUwMDFiWzM0bUlORk8gICAgXHUwMDFiWzBtIFNlYXJjaGluZyBmb3IgcGFja2FnZSBmaWxlIHN0cnVjdHVyZSBmcm9tIGRpcmVjdG9yaWVzIHdpdGggXHUwMDFiWzM0bV9faW5pdF9fLnB5XHUwMDFiWzBtIGZpbGVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuXHUwMDFiWzM0bUlORk8gICAgXHUwMDFiWzBtIEltcG9ydGluZyBmcm9tIFx1MDAxYlszNW0vVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9cdTAwMWJbMG1cdTAwMWJbOTVtYmFja2VuZFx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pWt4pSAIFx1MDAxYlsxOzMybVB5dGhvbiBwYWNrYWdlIGZpbGUgc3RydWN0dXJlXHUwMDFiWzBtIOKUgOKVriAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilIIgIPCfk4EgYXBwICAgICAgICAgICAgICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pSCICDilJzilIDilIAgXHUwMDFiWzJt8J+QjSBfX2luaXRfXy5weVx1MDAxYlswbSAgICAgICAgICAgICDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKUgiAg4pSU4pSA4pSAIPCfkI0gbWFpbi5weSAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKVsOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKVryAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuXHUwMDFiWzM0bUlORk8gICAgXHUwMDFiWzBtIEltcG9ydGluZyBtb2R1bGUgXHUwMDFiWzMybWFwcC5tYWluXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuSU5GTzpjaHJvbWFkYi50ZWxlbWV0cnkucHJvZHVjdC5wb3N0aG9nOkFub255bWl6ZWQgdGVsZW1ldHJ5IGVuYWJsZWQuIFNlZSAgICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vZG9jcy50cnljaHJvbWEuY29tL3RlbGVtZXRyeSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cclxuXHUwMDFiWzM0bUlORk8gICAgXHUwMDFiWzBtIEZvdW5kIGltcG9ydGFibGUgRmFzdEFQSSBhcHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDila3ilIDilIAgXHUwMDFiWzE7MzJtSW1wb3J0YWJsZSBGYXN0QVBJIGFwcFx1MDAxYlswbSDilIDilIDila4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pSCICBcdTAwMWJbMzg7NTsyMDQ7NDg7NTsyMzVtZnJvbVx1MDAxYlswbVx1MDAxYlszODs1OzIzMTs0ODs1OzIzNW0gXHUwMDFiWzBtXHUwMDFiWzM4OzU7MjMxOzQ4OzU7MjM1bWFwcFx1MDAxYlswbVx1MDAxYlszODs1OzIzMTs0ODs1OzIzNW0uXHUwMDFiWzBtXHUwMDFiWzM4OzU7MjMxOzQ4OzU7MjM1bW1haW5cdTAwMWJbMG1cdTAwMWJbMzg7NTsyMzE7NDg7NTsyMzVtIFx1MDAxYlswbVx1MDAxYlszODs1OzIwNDs0ODs1OzIzNW1pbXBvcnRcdTAwMWJbMG1cdTAwMWJbMzg7NTsyMzE7NDg7NTsyMzVtIFx1MDAxYlswbVx1MDAxYlszODs1OzIzMTs0ODs1OzIzNW1hcHBcdTAwMWJbMG0gIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilbDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDila8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcblx1MDAxYlszNG1JTkZPICAgIFx1MDAxYlswbSBVc2luZyBpbXBvcnQgc3RyaW5nIFx1MDAxYlsxOzMybWFwcC5tYWluOmFwcFx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKVreKUgFx1MDAxYlswbVx1MDAxYlszMm3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIBcdTAwMWJbMG0gRmFzdEFQSSBDTEkgLSBQcm9kdWN0aW9uIG1vZGUgXHUwMDFiWzMybeKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgFx1MDAxYlswbVx1MDAxYlszMm3ilIDila5cdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilIJcdTAwMWJbMG1cdTAwMWJbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdTAwMWJbMG1cdTAwMWJbMzJt4pSCXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pSCXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzI7MzJtU2VydmluZyBhdDpcdTAwMWJbMG1cdTAwMWJbMzJtIFx1MDAxYlswbVx1MDAxYlszMm1odHRwOi8vMC4wLjAuMDo4MDAwXHUwMDFiWzBtXHUwMDFiWzMybSAgICAgICAgICAgICAgICAgIFx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm3ilIJcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilIJcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm3ilIJcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilIJcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMjszMm1BUEkgZG9jczpcdTAwMWJbMG1cdTAwMWJbMzJtIFx1MDAxYlswbVx1MDAxYlszMm1odHRwOi8vMC4wLjAuMDo4MDAwL2RvY3NcdTAwMWJbMG1cdTAwMWJbMzJtICAgICAgICAgICAgICAgXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybeKUglx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKUglx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybeKUglx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKUglx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlsyOzMybVJ1bm5pbmcgaW4gcHJvZHVjdGlvbiBtb2RlLCBmb3IgZGV2ZWxvcG1lbnQgdXNlOlx1MDAxYlswbVx1MDAxYlszMm0gXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybeKUglx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKUglx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybeKUglx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKUglx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlsxOzMybWZhc3RhcGkgZGV2XHUwMDFiWzBtXHUwMDFiWzMybSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybeKUglx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKUglx1MDAxYlswbVx1MDAxYlszMm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx1MDAxYlswbVx1MDAxYlszMm3ilIJcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilbDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDila9cdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuXHUwMDFiWzMybUlORk9cdTAwMWJbMG06ICAgICBXaWxsIHdhdGNoIGZvciBjaGFuZ2VzIGluIHRoZXNlIGRpcmVjdG9yaWVzOiBbJy9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQnXVxyXG5cdTAwMWJbMzJtSU5GT1x1MDAxYlswbTogICAgIFV2aWNvcm4gcnVubmluZyBvbiBcdTAwMWJbMW1odHRwOi8vMC4wLjAuMDo4MDAwXHUwMDFiWzBtIChQcmVzcyBDVFJMK0MgdG8gcXVpdClcclxuXHUwMDFiWzMybUlORk9cdTAwMWJbMG06ICAgICBTdGFydGVkIHJlbG9hZGVyIHByb2Nlc3MgW1x1MDAxYlszNm1cdTAwMWJbMW03MzE4Mlx1MDAxYlswbV0gdXNpbmcgXHUwMDFiWzM2bVx1MDAxYlsxbVdhdGNoRmlsZXNcdTAwMWJbMG1cclxuSU5GTzpjaHJvbWFkYi50ZWxlbWV0cnkucHJvZHVjdC5wb3N0aG9nOkFub255bWl6ZWQgdGVsZW1ldHJ5IGVuYWJsZWQuIFNlZSAgICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vZG9jcy50cnljaHJvbWEuY29tL3RlbGVtZXRyeSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cclxuXHUwMDFiWzMybUlORk9cdTAwMWJbMG06ICAgICBTdGFydGVkIHNlcnZlciBwcm9jZXNzIFtcdTAwMWJbMzZtNzMxODZcdTAwMWJbMG1dXHJcblx1MDAxYlszMm1JTkZPXHUwMDFiWzBtOiAgICAgV2FpdGluZyBmb3IgYXBwbGljYXRpb24gc3RhcnR1cC5cclxuXHUwMDFiWzMybUlORk9cdTAwMWJbMG06ICAgICBBcHBsaWNhdGlvbiBzdGFydHVwIGNvbXBsZXRlLlxyXG48L291dHB1dD5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVJKNldVNVp5S1JvdGlRVmR4ZXk4MkQifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoyMCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9fX1dLCJyZXNwb25zZV90ZXh0Ijoi546w5Zyo5ZCO56uv5pyN5Yqh5bey57uP6YeN5paw5ZCv5Yqo77yM6K6p5oiR5Lus5YaN5qyh5rWL6K+V6IGK5aSp5o6l5Y+j77yaXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMjc1YzRmMmItZTY0MC00NTRmLTg5MzgtNTllZDcxY2NhM2RmIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiUHJvY2VzcyBsYXVuY2hlZCB3aXRoIFBJRCAyMSIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVNId3liZkd2aXN2QUpETDVSZkFEV2QifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciIsImZvbGRlclJvb3QiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoyMCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlciJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX1dLCJmZWVkYmFja1N0YXRlcyI6eyJ0ZW1wLWZlLTEyNjJmZjllLWQ5OTgtNGFmYS04ZTY4LWU4ZjA1YjBhZGU0YSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNDM1NjEwOWEtOGQ3NS00NzE4LTk2MDEtNTcwZDNlNTFiNWI1Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1iZDEzZTI5NC1jOTE5LTRlMGYtYjk4Yi02MGE4MjZjODA4MTUiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTNlZDMwYTBhLWFhYTMtNGIwOS05NGM4LTI4MWJlZjVkNWQwNSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZGFlZDZlY2MtYzcwMi00YTdlLTgwNmUtMzZhZDM3ZmJkNjgyIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0xYWI1YjMzMS0wMzU2LTRjYzItODY2My05ZDRlNjNjYWM1ZjEiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTgwZGI4M2RjLWM2YmYtNDMwOC1hMTdhLTQwZjY2NjIwN2Y1YyI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtY2FmZDc5MzUtNDFmZS00ZWZiLTgzNWYtNzM2ZDc0MzQ4OWE5Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS05ZWM1MmNhZC1mODJiLTQ0MDQtYmZkMi0xOGE0OGEyNWI1ZmEiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTcyMDZiMThkLTI5YWUtNGIwZi1iMzcyLTZhNWY1ZmRkYmQyYyI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYTg1YjMyOTAtOWU0Ni00YzJmLWJkMTEtZmYwMzU0NjJlNjMyIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS00M2E0NTE0Ni05NjBlLTQ0MTktYTMzOS1mNTNiYWYyYTdjOWYiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTU0M2ZlZTllLTRlNTItNGQxYi1hMWM4LWI4NzY4Mzc5Yzk0YiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNTNjMmQ2MzUtZGEwNy00NzdkLTg5MDItZGExNjkzMzRjMjIyIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS04MzY0ODNiNi1iODgyLTQ0YTUtYWY3Ni1iZGUwYWRkZmQ3MjciOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTBiOTY2NTUwLWY2YWUtNGE1My05NzA3LWFhODBjOGRlNDI4ZiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZDZhODhmYjAtNTdjNy00MGQ3LTlhYTAtMzUwZGVhM2NjOTM5Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0zZmQ4YWI0MS1mMjY4LTRhNWYtYmFmZC0zNWMxNGY0MTAwNDUiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTllNzFhMjczLTdkMTUtNDE3Ni1iMThhLTZmMmQzOWRkNWY0ZCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMGE1NTg3MmEtNmNlZi00NDEzLWIxMzktMGQ2ZWUzYWE4NTM1Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1mNDkyOWM2Ny0zN2E1LTQ4OGItYmIzNS0yMmY0M2JlY2I3ZWMiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTU0ZmU2YTU3LTY2ZTItNGE3Yy04M2MyLTA4OWVhMzJkYTAyNiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZmMwODM0NDYtN2JhNy00MTIyLTk1NDYtMjBkN2Q3ZjdmNmFiIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS01Nzc4Mzk2YS0wZGY1LTRjODItYTMxNS1kYzRlNDJmZGU1MjciOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTM1NWJhYWNhLTMwODYtNDMwNy04MDM4LTRjZGM0YTExMmIwNiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtOGIwYjQ1MTMtMmNiOC00YjhmLTg4OWEtMzU5ZmI3MzdiODRhIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1iODJjODAzNy1mNDIxLTQ3MzgtYjc2YS03NWY0MTI2YTkzZTciOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWE4ZDJjZDBlLTI3ZTUtNDAxNy1hZjU1LWU0NjUyMDE5ODYzMCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYmUxMDUzYjItM2ZkYi00ZmI2LWFiYmItODhkN2I1MmQ1OTlmIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0wZTcyYmNhYy05MmQ5LTRlY2UtYjFhNC00NDMxMzEyZGQ3ZGIiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWRkNmExYzRjLWI4NWEtNGRkYS1hZjRkLWUwNzg3ZGNiZGFjYSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNGVlMjU3ZjktZTA2YS00MTBjLWE3NGYtMTZjNDJhZmZhMTYyIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1kMWY1YTU0MC0yZmFmLTQyMzAtOThkYy0yNzQxZTY3ODcwZDIiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTk5ZWU2Y2I2LTAyOTQtNDlhNi1hNzQ1LTg0MTg1MzMwMGMyMyI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZWQzMzIyM2MtYjc5My00OWEzLTk0YzUtMWM3Y2UxYzcwMTEwIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0zNDVjNzQ2Mi05ZjhmLTQ2NTEtOGY3ZS0xODQwMDE1Y2U1NWEiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTAxOWEzZGNlLTBkN2QtNGJjOC05MDJjLTEwZWY1NzRlNGM2NSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNDY2MWVjNzAtZDlkNS00YjY4LWFhZGMtYTJiYjUxZjE5M2VhIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0xOTM0MGE0Yy0yNDFmLTRmYjQtOWEwOS1iZjc3MDk0NThiMjMiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWY4NGVlMGMwLTRiMzUtNGIzZi04NDk0LWQ5Y2FlZmEwMjJjMCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNWRmNmE1YjAtZWRkYi00NGViLWE5MmMtYjM0NGU3OGM5YWYzIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS01ZjcxODUxMS02ZmRiLTQyZmEtOTA5Ny1hOTRiM2NiZGQ3M2IiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTBjZTdhMmNlLTU5MzUtNDI3Ni1hMDRlLTg4NjU4YjY4NDExZiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtM2YxMjMwZDItZmU4My00OWE5LThiZGItZjFjZjA0YmYyYTc0Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0xMmRiNDMyMy1jMzVjLTRkMTgtODZlYy00ZjZmNGNjNTY0OGIiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTQ1MThjYmMzLWZkZjktNDg1YS1hNTJiLWFiMDAwMjJhYjZhYiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtM2UyY2Q0ZGUtNzliYy00Zjg4LTkwOTktZDY5ZDVkODhmY2Q5Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0yYzE1MWNmZi1kZjNiLTQ5MzUtYjk2Yy03ZWJlOThmYTBiOWIiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTMwOTQ3MWQwLTk3MGItNDk0MC1hYWI4LWNiMjUyMTQyOGY3NiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNDAyZGQ2ODAtNmQ5Yi00MWEwLWFiZTMtZTk3N2E1ZTA0MWJjIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1kZjQ0OWZhZi04ODE3LTRlM2YtOTg5OC0yNTU3ZDY1NTFjNzIiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWVmYzc5MTFhLWU2YmQtNDBjYy1hMmVkLWU5NjFkMjc3YzRiMCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMTE3ZGYyY2ItYjRkYi00ZWFmLWI5ZGYtYjVkNTA0NjkzMjQ4Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0xMWJkNmE2Yy01NzQ3LTQzOWYtYTUzZS1hNjk1ZDc0Mjg0YjciOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTJhNTU1Mzk1LWE4ZTgtNDFlYS04MzlhLTZlMmZjZjdiOTc1OCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZWRkZmVlYjMtODIyMC00OTUwLWI4YjYtMTJjMmY2ZWY3ZWM4Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS05ODljNTEyYS04OWQ3LTRmNjUtOGFmZi0zMGU0MTE3YWQ4ZDIiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTYxMWFmZTgwLTNmODctNGU0YS1iNjNhLTU5MjZlNjFiYmViZCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZmUxYTYxNjktNWRjYy00OTAyLTllMjQtMmJkN2UyZTRkYzIwIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS03N2E5NWY0OS0zNTI5LTRmOTUtYTEyYS0wNzEzNTQxNjcwZTMiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTliN2QxOTZhLWQ4YWMtNDAzZC05ZDM2LWExN2VhNWM4OTdmMyI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZTE0OGIzMDctMzFhZS00MjM4LWEzMTEtZTc5YjRkYTMxNjkxIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1kZWUxOTlmZi0xNzBhLTQxYTItOGJlMC02YTVhZmEwMTk1N2EiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTNkOWU4ZTQzLWQyOTItNGFhMy05MDAzLTY2NDM1MWUyYjJlNCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZWQwNDdjMGEtYWI1Mi00M2U5LTgyZjktZjExNjlmZGNjMWM2Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS02Y2Q2MzZkZC1kODM5LTQ5MDQtYWIwYy02MjFmYTNiYmI1NjciOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9fSwidG9vbFVzZVN0YXRlcyI6eyIxYjE4NmQzMy1jMWNhLTQ4OWEtYmJmYS0zZjEwOTNlYjQ5YjY7dG9vbHVfdnJ0eF8wMThubVhWOXpSY25tSE42c3ZTNTFINHMiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogYmFja2VuZC9hcHAvYXBpL21haW4ucHlcbmZyb20gZmFzdGFwaSBpbXBvcnQgQVBJUm91dGVyXG5cbmZyb20gYXBwLmFwaS5yb3V0ZXMgaW1wb3J0IGl0ZW1zLCBsb2dpbiwgcHJpdmF0ZSwgdXNlcnMsIHV0aWxzLCBjaGlsZHJlbiwgZ3Jvd3RoX3JlY29yZHMsIGRvY3VtZW50cywgY2hhdFxuZnJvbSBhcHAuY29yZS5jb25maWcgaW1wb3J0IHNldHRpbmdzXG5cbmFwaV9yb3V0ZXIgPSBBUElSb3V0ZXIoKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihsb2dpbi5yb3V0ZXIpXG5hcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKHVzZXJzLnJvdXRlcilcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIodXRpbHMucm91dGVyKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihpdGVtcy5yb3V0ZXIpXG5hcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKGNoaWxkcmVuLnJvdXRlciwgcHJlZml4PVwiL2NoaWxkcmVuXCIsIHRhZ3M9W1wiY2hpbGRyZW5cIl0pXG5hcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKGdyb3d0aF9yZWNvcmRzLnJvdXRlciwgcHJlZml4PVwiL2dyb3d0aC1yZWNvcmRzXCIsIHRhZ3M9W1wiZ3Jvd3RoLXJlY29yZHNcIl0pXG5hcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKGRvY3VtZW50cy5yb3V0ZXIsIHByZWZpeD1cIi9kb2N1bWVudHNcIiwgdGFncz1bXCJkb2N1bWVudHNcIl0pXG5hcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKGNoYXQucm91dGVyLCBwcmVmaXg9XCIvY2hhdFwiLCB0YWdzPVtcImNoYXRcIl0pXG5cblxuaWYgc2V0dGluZ3MuRU5WSVJPTk1FTlQgPT0gXCJsb2NhbFwiOlxuICAgIGFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIocHJpdmF0ZS5yb3V0ZXIpXG4uLi5cblBhdGg6IGJhY2tlbmQvRG9ja2VyZmlsZVxuLi4uXG5cbiMgSW5zdGFsbCBkZXBlbmRlbmNpZXNcbiMgUmVmOiBodHRwczovL2RvY3MuYXN0cmFsLnNoL3V2L2d1aWRlcy9pbnRlZ3JhdGlvbi9kb2NrZXIvI2ludGVybWVkaWF0ZS1sYXllcnNcblJVTiAtLW1vdW50PXR5cGU9Y2FjaGUsdGFyZ2V0PS9yb290Ly5jYWNoZS91diBcXFxuICAgIC0tbW91bnQ9dHlwZT1iaW5kLHNvdXJjZT11di5sb2NrLHRhcmdldD11di5sb2NrIFxcXG4gICAgLS1tb3VudD10eXBlPWJpbmQsc291cmNlPXB5cHJvamVjdC50b21sLHRhcmdldD1weXByb2plY3QudG9tbCBcXFxuICAgIHV2IHN5bmMgLS1mcm96ZW4gLS1uby1pbnN0YWxsLXByb2plY3RcblxuRU5WIFBZVEhPTlBBVEg9L2FwcFxuXG5DT1BZIC4vc2NyaXB0cyAvYXBwL3NjcmlwdHNcblxuQ09QWSAuL3B5cHJvamVjdC50b21sIC4vdXYubG9jayAuL2FsZW1iaWMuaW5pIC9hcHAvXG5cbkNPUFkgLi9hcHAgL2FwcC9hcHBcblxuIyBTeW5jIHRoZSBwcm9qZWN0XG4jIFJlZjogaHR0cHM6Ly9kb2NzLmFzdHJhbC5zaC91di9ndWlkZXMvaW50ZWdyYXRpb24vZG9ja2VyLyNpbnRlcm1lZGlhdGUtbGF5ZXJzXG5SVU4gLS1tb3VudD10eXBlPWNhY2hlLHRhcmdldD0vcm9vdC8uY2FjaGUvdXYgXFxcbiAgICB1diBzeW5jXG5cbkNNRCBbXCJmYXN0YXBpXCIsIFwicnVuXCIsIFwiLS13b3JrZXJzXCIsIFwiNFwiLCBcImFwcC9tYWluLnB5XCJdXG4uLi5cblBhdGg6IGJhY2tlbmQvYXBwL21haW4ucHlcbmltcG9ydCBzZW50cnlfc2RrXG5mcm9tIGZhc3RhcGkgaW1wb3J0IEZhc3RBUElcbmZyb20gZmFzdGFwaS5yb3V0aW5nIGltcG9ydCBBUElSb3V0ZVxuZnJvbSBzdGFybGV0dGUubWlkZGxld2FyZS5jb3JzIGltcG9ydCBDT1JTTWlkZGxld2FyZVxuXG5mcm9tIGFwcC5hcGkubWFpbiBpbXBvcnQgYXBpX3JvdXRlclxuZnJvbSBhcHAuY29yZS5jb25maWcgaW1wb3J0IHNldHRpbmdzXG5cblxuZGVmIGN1c3RvbV9nZW5lcmF0ZV91bmlxdWVfaWQocm91dGU6IEFQSVJvdXRlKSAtPiBzdHI6XG4gICAgcmV0dXJuIGZcIntyb3V0ZS50YWdzWzBdfS17cm91dGUubmFtZX1cIlxuXG5cbmlmIHNldHRpbmdzLlNFTlRSWV9EU04gYW5kIHNldHRpbmdzLkVOVklST05NRU5UICE9IFwibG9jYWxcIjpcbiAgICBzZW50cnlfc2RrLmluaXQoZHNuPXN0cihzZXR0aW5ncy5TRU5UUllfRFNOKSwgZW5hYmxlX3RyYWNpbmc9VHJ1ZSlcblxuYXBwID0gRmFzdEFQSShcbiAgICB0aXRsZT1zZXR0aW5ncy5QUk9KRUNUX05BTUUsXG4gICAgb3BlbmFwaV91cmw9Zlwie3NldHRpbmdzLkFQSV9WMV9TVFJ9L29wZW5hcGkuanNvblwiLFxuICAgIGdlbmVyYXRlX3VuaXF1ZV9pZF9mdW5jdGlvbj1jdXN0b21fZ2VuZXJhdGVfdW5pcXVlX2lkLFxuKVxuXG4jIFNldCBhbGwgQ09SUyBlbmFibGVkIG9yaWdpbnNcbmlmIHNldHRpbmdzLmFsbF9jb3JzX29yaWdpbnM6XG4gICAgYXBwLmFkZF9taWRkbGV3YXJlKFxuICAgICAgICBDT1JTTWlkZGxld2FyZSxcbiAgICAgICAgYWxsb3dfb3JpZ2lucz1zZXR0aW5ncy5hbGxfY29yc19vcmlnaW5zLFxuICAgICAgICBhbGxvd19jcmVkZW50aWFscz1UcnVlLFxuICAgICAgICBhbGxvd19tZXRob2RzPVtcIipcIl0sXG4gICAgICAgIGFsbG93X2hlYWRlcnM9W1wiKlwiXSxcbiAgICApXG5cbmFwcC5pbmNsdWRlX3JvdXRlcihhcGlfcm91dGVyLCBwcmVmaXg9c2V0dGluZ3MuQVBJX1YxX1NUUilcbi4uLlxuUGF0aDogYmFja2VuZC9SRUFETUUubWRcbiMgRmFzdEFQSSBQcm9qZWN0IC0gQmFja2VuZFxuXG4jIyBSZXF1aXJlbWVudHNcblxuKiBbRG9ja2VyXShodHRwczovL3d3dy5kb2NrZXIuY29tLykuXG4qIFt1dl0oaHR0cHM6Ly9kb2NzLmFzdHJhbC5zaC91di8pIGZvciBQeXRob24gcGFja2FnZSBhbmQgZW52aXJvbm1lbnQgbWFuYWdlbWVudC5cblxuIyMgRG9ja2VyIENvbXBvc2VcblxuU3RhcnQgdGhlIGxvY2FsIGRldmVsb3BtZW50IGVudmlyb25tZW50IHdpdGggRG9ja2VyIENvbXBvc2UgZm9sbG93aW5nIHRoZSBndWlkZSBpbiBbLi4vZGV2ZWxvcG1lbnQubWRdKC4uL2RldmVsb3BtZW50Lm1kKS5cblxuIyMgR2VuZXJhbCBXb3JrZmxvd1xuXG5CeSBkZWZhdWx0LCB0aGUgZGVwZW5kZW5jaWVzIGFyZSBtYW5hZ2VkIHdpdGggW3V2XShodHRwczovL2RvY3MuYXN0cmFsLnNoL3V2LyksIGdvIHRoZXJlIGFuZCBpbnN0YWxsIGl0LlxuXG5Gcm9tIGAuL2JhY2tlbmQvYCB5b3UgY2FuIGluc3RhbGwgYWxsIHRoZSBkZXBlbmRlbmNpZXMgd2l0aDpcblxuYGBgY29uc29sZVxuJCB1diBzeW5jXG5gYGBcblxuVGhlbiB5b3UgY2FuIGFjdGl2YXRlIHRoZSB2aXJ0dWFsIGVudmlyb25tZW50IHdpdGg6XG5cbmBgYGNvbnNvbGVcbiQgc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZVxuYGBgXG5cbk1ha2Ugc3VyZSB5b3VyIGVkaXRvciBpcyB1c2luZyB0aGUgY29ycmVjdCBQeXRob24gdmlydHVhbCBlbnZpcm9ubWVudCwgd2l0aCB0aGUgaW50ZXJwcmV0ZXIgYXQgYGJhY2tlbmQvLnZlbnYvYmluL3B5dGhvbmAuXG5cbk1vZGlmeSBvciBhZGQgU1FMTW9kZWwgbW9kZWxzIGZvciBkYXRhIGFuZCBTUUwgdGFibGVzIGluIGAuL2JhY2tlbmQvYXBwL21vZGVscy5weWAsIEFQSSBlbmRwb2ludHMgaW4gYC4vYmFja2VuZC9hcHAvYXBpL2AsIENSVUQgKENyZWF0ZSwgUmVhZCwgVXBkYXRlLCBEZWxldGUpIHV0aWxzIGluIGAuL2JhY2tlbmQvYXBwL2NydWQucHlgLlxuXG4jIyBWUyBDb2RlXG5cblRoZXJlIGFyZSBhbHJlYWR5IGNvbmZpZ3VyYXRpb25zIGluIHBsYWNlIHRvIHJ1biB0aGUgYmFja2VuZCB0aHJvdWdoIHRoZSBWUyBDb2RlIGRlYnVnZ2VyLCBzbyB0aGF0IHlvdSBjYW4gdXNlIGJyZWFrcG9pbnRzLCBwYXVzZSBhbmQgZXhwbG9yZSB2YXJpYWJsZXMsIGV0Yy5cblxuVGhlIHNldHVwIGlzIGFsc28gYWxyZWFkeSBjb25maWd1cmVkIHNvIHlvdSBjYW4gcnVuIHRoZSB0ZXN0cyB0aHJvdWdoIHRoZSBWUyBDb2RlIFB5dGhvbiB0ZXN0cyB0YWIuXG5cbiMjIERvY2tlciBDb21wb3NlIE92ZXJyaWRlXG5cbkR1cmluZyBkZXZlbG9wbWVudCwgeW91IGNhbiBjaGFuZ2UgRG9ja2VyIENvbXBvc2Ugc2V0dGluZ3MgdGhhdCB3aWxsIG9ubHkgYWZmZWN0IHRoZSBsb2NhbCBkZXZlbG9wbWVudCBlbnZpcm9ubWVudCBpbiB0aGUgZmlsZSBgZG9ja2VyLWNvbXBvc2Uub3ZlcnJpZGUueW1sYC5cbi4uLlxuXG5UaGVyZSBpcyBhbHNvIGEgY29tbWFuZCBvdmVycmlkZSB0aGF0IHJ1bnMgYGZhc3RhcGkgcnVuIC0tcmVsb2FkYCBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IGBmYXN0YXBpIHJ1bmAuIEl0IHN0YXJ0cyBhIHNpbmdsZSBzZXJ2ZXIgcHJvY2VzcyAoaW5zdGVhZCBvZiBtdWx0aXBsZSwgYXMgd291bGQgYmUgZm9yIHByb2R1Y3Rpb24pIGFuZCByZWxvYWRzIHRoZSBwcm9jZXNzIHdoZW5ldmVyIHRoZSBjb2RlIGNoYW5nZXMuIEhhdmUgaW4gbWluZCB0aGF0IGlmIHlvdSBoYXZlIGEgc3ludGF4IGVycm9yIGFuZCBzYXZlIHRoZSBQeXRob24gZmlsZSwgaXQgd2lsbCBicmVhayBhbmQgZXhpdCwgYW5kIHRoZSBjb250YWluZXIgd2lsbCBzdG9wLiBBZnRlciB0aGF0LCB5b3UgY2FuIHJlc3RhcnQgdGhlIGNvbnRhaW5lciBieSBmaXhpbmcgdGhlIGVycm9yIGFuZCBydW5uaW5nIGFnYWluOlxuXG5gYGBjb25zb2xlXG4kIGRvY2tlciBjb21wb3NlIHdhdGNoXG5gYGBcbi4uLlxuXG50aGF0IG1lYW5zIHRoYXQgeW91IGFyZSBpbiBhIGBiYXNoYCBzZXNzaW9uIGluc2lkZSB5b3VyIGNvbnRhaW5lciwgYXMgYSBgcm9vdGAgdXNlciwgdW5kZXIgdGhlIGAvYXBwYCBkaXJlY3RvcnksIHRoaXMgZGlyZWN0b3J5IGhhcyBhbm90aGVyIGRpcmVjdG9yeSBjYWxsZWQgXCJhcHBcIiBpbnNpZGUsIHRoYXQncyB3aGVyZSB5b3VyIGNvZGUgbGl2ZXMgaW5zaWRlIHRoZSBjb250YWluZXI6IGAvYXBwL2FwcGAuXG5cblRoZXJlIHlvdSBjYW4gdXNlIHRoZSBgZmFzdGFwaSBydW4gLS1yZWxvYWRgIGNvbW1hbmQgdG8gcnVuIHRoZSBkZWJ1ZyBsaXZlIHJlbG9hZGluZyBzZXJ2ZXIuXG5cbmBgYGNvbnNvbGVcbiQgZmFzdGFwaSBydW4gLS1yZWxvYWQgYXBwL21haW4ucHlcbmBgYFxuXG4uLi5pdCB3aWxsIGxvb2sgbGlrZTpcblxuYGBgY29uc29sZVxucm9vdEA3ZjI2MDdhZjMxYzM6L2FwcCMgZmFzdGFwaSBydW4gLS1yZWxvYWQgYXBwL21haW4ucHlcbmBgYFxuXG5hbmQgdGhlbiBoaXQgZW50ZXIuIFRoYXQgcnVucyB0aGUgbGl2ZSByZWxvYWRpbmcgc2VydmVyIHRoYXQgYXV0byByZWxvYWRzIHdoZW4gaXQgZGV0ZWN0cyBjb2RlIGNoYW5nZXMuXG4uLi5cblBhdGg6IGJhY2tlbmQvc2NyaXB0cy9wcmVzdGFydC5zaFxuIyEgL3Vzci9iaW4vZW52IGJhc2hcblxuc2V0IC1lXG5zZXQgLXhcblxuIyBMZXQgdGhlIERCIHN0YXJ0XG5weXRob24gYXBwL2JhY2tlbmRfcHJlX3N0YXJ0LnB5XG5cbiMgUnVuIG1pZ3JhdGlvbnNcbmFsZW1iaWMgdXBncmFkZSBoZWFkXG5cbiMgQ3JlYXRlIGluaXRpYWwgZGF0YSBpbiBEQlxucHl0aG9uIGFwcC9pbml0aWFsX2RhdGEucHlcbi4uLlxuUGF0aDogbWFpbi5weVxuZGVmIG1haW4oKTpcbiAgICBwcmludChcIkhlbGxvIGZyb20gcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIhXCIpXG5cblxuaWYgX19uYW1lX18gPT0gXCJfX21haW5fX1wiOlxuICAgIG1haW4oKVxuLi4uXG5QYXRoOiBiYWNrZW5kL3NjcmlwdHMvdGVzdHMtc3RhcnQuc2hcbiMhIC91c3IvYmluL2VudiBiYXNoXG5zZXQgLWVcbnNldCAteFxuXG5weXRob24gYXBwL3Rlc3RzX3ByZV9zdGFydC5weVxuXG5iYXNoIHNjcmlwdHMvdGVzdC5zaCBcIiRAXCJcbi4uLlxuUGF0aDogYmFja2VuZC9hcHAvYmFja2VuZF9wcmVfc3RhcnQucHlcbmltcG9ydCBsb2dnaW5nXG5cbmZyb20gc3FsYWxjaGVteSBpbXBvcnQgRW5naW5lXG5mcm9tIHNxbG1vZGVsIGltcG9ydCBTZXNzaW9uLCBzZWxlY3RcbmZyb20gdGVuYWNpdHkgaW1wb3J0IGFmdGVyX2xvZywgYmVmb3JlX2xvZywgcmV0cnksIHN0b3BfYWZ0ZXJfYXR0ZW1wdCwgd2FpdF9maXhlZFxuXG5mcm9tIGFwcC5jb3JlLmRiIGltcG9ydCBlbmdpbmVcblxubG9nZ2luZy5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnaW5nLklORk8pXG5sb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXylcblxubWF4X3RyaWVzID0gNjAgKiA1ICAjIDUgbWludXRlc1xud2FpdF9zZWNvbmRzID0gMVxuXG5cbkByZXRyeShcbiAgICBzdG9wPXN0b3BfYWZ0ZXJfYXR0ZW1wdChtYXhfdHJpZXMpLFxuICAgIHdhaXQ9d2FpdF9maXhlZCh3YWl0X3NlY29uZHMpLFxuICAgIGJlZm9yZT1iZWZvcmVfbG9nKGxvZ2dlciwgbG9nZ2luZy5JTkZPKSxcbiAgICBhZnRlcj1hZnRlcl9sb2cobG9nZ2VyLCBsb2dnaW5nLldBUk4pLFxuKVxuZGVmIGluaXQoZGJfZW5naW5lOiBFbmdpbmUpIC0+IE5vbmU6XG4gICAgdHJ5OlxuICAgICAgICB3aXRoIFNlc3Npb24oZGJfZW5naW5lKSBhcyBzZXNzaW9uOlxuICAgICAgICAgICAgIyBUcnkgdG8gY3JlYXRlIHNlc3Npb24gdG8gY2hlY2sgaWYgREIgaXMgYXdha2VcbiAgICAgICAgICAgIHNlc3Npb24uZXhlYyhzZWxlY3QoMSkpXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICBsb2dnZXIuZXJyb3IoZSlcbiAgICAgICAgcmFpc2UgZVxuXG5cbmRlZiBtYWluKCkgLT4gTm9uZTpcbiAgICBsb2dnZXIuaW5mbyhcIkluaXRpYWxpemluZyBzZXJ2aWNlXCIpXG4gICAgaW5pdChlbmdpbmUpXG4gICAgbG9nZ2VyLmluZm8oXCJTZXJ2aWNlIGZpbmlzaGVkIGluaXRpYWxpemluZ1wiKVxuXG5cbmlmIF9fbmFtZV9fID09IFwiX19tYWluX19cIjpcbiAgICBtYWluKClcbi4uLlxuUGF0aDogZG9jL0Z1bGwtU3RhY2stRmFzdEFQSS1UZW1wbGF0ZeWtpuS5oOaJi+WGjC5tZFxuLi4uXG5cbmBgYFxuLlxu4pSc4pSA4pSAIC5naXRodWIvICAgICAgICAgICAgIyBHaXRIdWIgQWN0aW9ucyDphY3nva5cbuKUnOKUgOKUgCBiYWNrZW5kLyAgICAgICAgICAgICMg5ZCO56uv5Luj56CBXG7ilJzilIDilIAgZnJvbnRlbmQvICAgICAgICAgICAjIOWJjeerr+S7o+eggVxu4pSc4pSA4pSAIHNjcmlwdHMvICAgICAgICAgICAgIyDlrp7nlKjohJrmnKxcbuKUnOKUgOKUgCAuZW52ICAgICAgICAgICAgICAgICMg546v5aKD5Y+Y6YePXG7ilJzilIDilIAgZG9ja2VyLWNvbXBvc2UueW1sICAjIERvY2tlciBDb21wb3NlIOmFjee9rlxu4pSU4pSA4pSAIC4uLlxuYGBgXG5cbiMjIyDlkI7nq6/nu5PmnoRcblxuYGBgXG5iYWNrZW5kL1xu4pSc4pSA4pSAIGFwcC9cbuKUgiAgIOKUnOKUgOKUgCBhcGkvICAgICAgICAgICAgIyBBUEkg6Lev55SxXG7ilIIgICDilJzilIDilIAgY29yZS8gICAgICAgICAgICMg5qC45b+D6YWN572uXG7ilIIgICDilJzilIDilIAgY3J1ZC8gICAgICAgICAgICMgQ1JVRCDmk43kvZxcbuKUgiAgIOKUnOKUgOKUgCBkYi8gICAgICAgICAgICAgIyDmlbDmja7lupPorr7nva5cbuKUgiAgIOKUnOKUgOKUgCBtb2RlbHMvICAgICAgICAgIyDmlbDmja7mqKHlnotcbuKUgiAgIOKUnOKUgOKUgCBzY2hlbWFzLyAgICAgICAgIyBQeWRhbnRpYyDmqKHlvI9cbuKUgiAgIOKUnOKUgOKUgCB0ZXN0cy8gICAgICAgICAgIyDmtYvor5VcbuKUgiAgIOKUlOKUgOKUgCBtYWluLnB5ICAgICAgICAgIyDkuLvlupTnlKjlhaXlj6NcbuKUnOKUgOKUgCBhbGVtYmljLyAgICAgICAgICAgICMg5pWw5o2u5bqT6L+B56e7XG7ilJTilIDilIAgLi4uXG5gYGBcblxuIyMjIOWJjeerr+e7k+aehFxuXG5gYGBcbmZyb250ZW5kL1xu4pSc4pSA4pSAIHNyYy9cbuKUgiAgIOKUnOKUgOKUgCBhc3NldHMvICAgICAgICAgIyDpnZnmgIHotYTmupBcbuKUgiAgIOKUnOKUgOKUgCBjbGllbnQvICAgICAgICAgIyDnlJ/miJDnmoQgQVBJIOWuouaIt+err1xu4pSCICAg4pSc4pSA4pSAIGNvbXBvbmVudHMvICAgICAjIFJlYWN0IOe7hOS7tlxu4pSCICAg4pSc4pSA4pSAIGhvb2tzLyAgICAgICAgICAjIOiHquWumuS5iSBob29rc1xu4pSCICAg4pSc4pSA4pSAIHJvdXRlcy8gICAgICAgICAjIOi3r+eUseWSjOmhtemdolxu4pSCICAg4pSU4pSA4pSAIC4uLlxu4pSc4pSA4pSAIHRlc3RzLyAgICAgICAgICAgICAgIyBQbGF5d3JpZ2h0IOa1i+ivlVxu4pSU4pSA4pSAIC4uLlxuYGBgXG5cbiMjIDQuIOWQjuerr+aetuaehFxuXG4jIyMgRmFzdEFQSSDlupTnlKjnu5PmnoRcblxuRmFzdEFQSSDlupTnlKjnmoTlhaXlj6PngrnmmK8gYGJhY2tlbmQvYXBwL21haW4ucHlg77yM5a6D5Yid5aeL5YyWIEZhc3RBUEkg5bqU55So5bm25YyF5ZCr5omA5pyJ6Lev55Sx44CCXG5cbmBgYHB5dGhvblxuIyBiYWNrZW5kL2FwcC9tYWluLnB5XG5mcm9tIGZhc3RhcGkgaW1wb3J0IEZhc3RBUElcbmZyb20gYXBwLmFwaS5tYWluIGltcG9ydCBhcGlfcm91dGVyXG5mcm9tIGFwcC5jb3JlLmNvbmZpZyBpbXBvcnQgc2V0dGluZ3NcblxuYXBwID0gRmFzdEFQSShcbiAgICB0aXRsZT1zZXR0aW5ncy5QUk9KRUNUX05BTUUsXG4gICAgb3BlbmFwaV91cmw9Zlwie3NldHRpbmdzLkFQSV9WMV9TVFJ9L29wZW5hcGkuanNvblwiLFxuKVxuLi4uXG5cbmBgYGJhc2hcbiMg5pys5Zyw5YmN56uv5byA5Y+RXG5jZCBmcm9udGVuZFxubnBtIGluc3RhbGxcbm5wbSBydW4gZGV2XG5gYGBcblxuIyMjIOWQjuerr+W8gOWPkVxuXG7lkI7nq6/lvIDlj5HlkIzmoLflj6/ku6XlnKggRG9ja2VyIOWuueWZqOWGhei/m+ihjO+8jOS5n+WPr+S7peWcqOacrOWcsOi/m+ihjO+8mlxuXG5gYGBiYXNoXG4jIOacrOWcsOWQjuerr+W8gOWPkVxuY2QgYmFja2VuZFxudXYgc3luY1xuc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZVxuZmFzdGFwaSBkZXYgYXBwL21haW4ucHlcbmBgYFxuXG4jIyA3LiBEb2NrZXIg5LiO5a655Zmo5YyWXG5cbiMjIyBEb2NrZXIgQ29tcG9zZSDphY3nva5cblxu6aG555uu5L2/55SoIERvY2tlciBDb21wb3NlIOeuoeeQhuWuueWZqO+8mlxuXG5gYGB5YW1sXG4jIGRvY2tlci1jb21wb3NlLnltbFxudmVyc2lvbjogJzMuOCdcbnNlcnZpY2VzOlxuICBiYWNrZW5kOlxuICAgIGltYWdlOiAnJHtET0NLRVJfSU1BR0VfQkFDS0VORH06JHtUQUctbGF0ZXN0fSdcbiAgICBkZXBlbmRzX29uOlxuICAgICAgLSBkYlxuICAgIGVudl9maWxlOlxuICAgICAgLSAuZW52XG4gICAgZW52aXJvbm1lbnQ6XG4gICAgICAtIERPTUFJTj0ke0RPTUFJTn1cbiAgICAgIC0gRlJPTlRFTkRfSE9TVD0ke0ZST05URU5EX0hPU1R9XG4gICAgICAjIOWFtuS7lueOr+Wig+WPmOmHjy4uLlxuXG4gIGZyb250ZW5kOlxuICAgIGltYWdlOiAnJHtET0NLRVJfSU1BR0VfRlJPTlRFTkR9OiR7VEFHLWxhdGVzdH0nXG4gICAgZW52X2ZpbGU6XG4gICAgICAtIC5lbnZcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgIC0gVklURV9BUElfVVJMPSR7RlJPTlRFTkRfSE9TVH1cblxuICBkYjpcbiAgICBpbWFnZTogcG9zdGdyZXM6MTVcbiAgICB2b2x1bWVzOlxuICAgICAgLSBhcHAtZGItZGF0YTovdmFyL2xpYi9wb3N0Z3Jlc3FsL2RhdGEvcGdkYXRhXG4gICAgZW52X2ZpbGU6XG4gICAgICAtIC5lbnZcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgIC0gUEdEQVRBPS92YXIvbGliL3Bvc3RncmVzcWwvZGF0YS9wZ2RhdGFcbiAgICAgICMg5YW25LuW546v5aKD5Y+Y6YePLi4uXG4uLi5cblBhdGg6IGJhY2tlbmQvcHlwcm9qZWN0LnRvbWxcbltwcm9qZWN0XVxubmFtZSA9IFwiYXBwXCJcbnZlcnNpb24gPSBcIjAuMS4wXCJcbmRlc2NyaXB0aW9uID0gXCJcIlxucmVxdWlyZXMtcHl0aG9uID0gXCI+PTMuMTAsPDQuMFwiXG5kZXBlbmRlbmNpZXMgPSBbXG4gICAgXCJmYXN0YXBpW3N0YW5kYXJkXTwxLjAuMCw+PTAuMTE0LjJcIixcbiAgICBcInB5dGhvbi1tdWx0aXBhcnQ8MS4wLjAsPj0wLjAuN1wiLFxuICAgIFwiZW1haWwtdmFsaWRhdG9yPDMuMC4wLjAsPj0yLjEuMC5wb3N0MVwiLFxuICAgIFwicGFzc2xpYltiY3J5cHRdPDIuMC4wLD49MS43LjRcIixcbiAgICBcInRlbmFjaXR5PDkuMC4wLD49OC4yLjNcIixcbiAgICBcInB5ZGFudGljPjIuMFwiLFxuICAgIFwiZW1haWxzPDEuMCw+PTAuNlwiLFxuICAgIFwiamluamEyPDQuMC4wLD49My4xLjRcIixcbiAgICBcImFsZW1iaWM8Mi4wLjAsPj0xLjEyLjFcIixcbiAgICBcImh0dHB4PDEuMC4wLD49MC4yNS4xXCIsXG4gICAgXCJwc3ljb3BnW2JpbmFyeV08NC4wLjAsPj0zLjEuMTNcIixcbiAgICBcInNxbG1vZGVsPDEuMC4wLD49MC4wLjIxXCIsXG4gICAgIyBQaW4gYmNyeXB0IHVudGlsIHBhc3NsaWIgc3VwcG9ydHMgdGhlIGxhdGVzdFxuICAgIFwiYmNyeXB0PT00LjAuMVwiLFxuICAgIFwicHlkYW50aWMtc2V0dGluZ3M8My4wLjAsPj0yLjIuMVwiLFxuICAgIFwic2VudHJ5LXNka1tmYXN0YXBpXTwyLjAuMCw+PTEuNDAuNlwiLFxuICAgIFwicHlqd3Q8My4wLjAsPj0yLjguMFwiLFxuXVxuLi4uXG5QYXRoOiBkb2NrZXItY29tcG9zZS5vdmVycmlkZS55bWxcbi4uLlxuXG4gIGJhY2tlbmQ6XG4gICAgcmVzdGFydDogXCJub1wiXG4gICAgcG9ydHM6XG4gICAgICAtIFwiODAwMDo4MDAwXCJcbiAgICBidWlsZDpcbiAgICAgIGNvbnRleHQ6IC4vYmFja2VuZFxuICAgICMgY29tbWFuZDogc2xlZXAgaW5maW5pdHkgICMgSW5maW5pdGUgbG9vcCB0byBrZWVwIGNvbnRhaW5lciBhbGl2ZSBkb2luZyBub3RoaW5nXG4gICAgY29tbWFuZDpcbiAgICAgIC0gZmFzdGFwaVxuICAgICAgLSBydW5cbiAgICAgIC0gLS1yZWxvYWRcbiAgICAgIC0gXCJhcHAvbWFpbi5weVwiXG4gICAgZGV2ZWxvcDpcbiAgICAgIHdhdGNoOlxuICAgICAgICAtIHBhdGg6IC4vYmFja2VuZFxuICAgICAgICAgIGFjdGlvbjogc3luY1xuICAgICAgICAgIHRhcmdldDogL2FwcFxuICAgICAgICAgIGlnbm9yZTpcbiAgICAgICAgICAgIC0gLi9iYWNrZW5kLy52ZW52XG4gICAgICAgICAgICAtIC52ZW52XG4gICAgICAgIC0gcGF0aDogLi9iYWNrZW5kL3B5cHJvamVjdC50b21sXG4gICAgICAgICAgYWN0aW9uOiByZWJ1aWxkXG4gICAgIyBUT0RPOiByZW1vdmUgb25jZSBjb3ZlcmFnZSBpcyBkb25lIGxvY2FsbHlcbiAgICB2b2x1bWVzOlxuICAgICAgLSAuL2JhY2tlbmQvaHRtbGNvdjovYXBwL2h0bWxjb3ZcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgIFNNVFBfSE9TVDogXCJtYWlsY2F0Y2hlclwiXG4gICAgICBTTVRQX1BPUlQ6IFwiMTAyNVwiXG4gICAgICBTTVRQX1RMUzogXCJmYWxzZVwiXG4gICAgICBFTUFJTFNfRlJPTV9FTUFJTDogXCJub3JlcGx5QGV4YW1wbGUuY29tXCJcblxuICBtYWlsY2F0Y2hlcjpcbiAgICBpbWFnZTogc2NoaWNrbGluZy9tYWlsY2F0Y2hlclxuICAgIHBvcnRzOlxuICAgICAgLSBcIjEwODA6MTA4MFwiXG4gICAgICAtIFwiMTAyNToxMDI1XCJcblxuICBmcm9udGVuZDpcbiAgICByZXN0YXJ0OiBcIm5vXCJcbiAgICBwb3J0czpcbiAgICAgIC0gXCI1MTczOjgwXCJcbiAgICBidWlsZDpcbiAgICAgIGNvbnRleHQ6IC4vZnJvbnRlbmRcbiAgICAgIGFyZ3M6XG4gICAgICAgIC0gVklURV9BUElfVVJMPWh0dHA6Ly9sb2NhbGhvc3Q6ODAwMFxuICAgICAgICAtIE5PREVfRU5WPWRldmVsb3BtZW50XG4uLi5cblBhdGg6IGRvY2tlci1jb21wb3NlLnltbFxuc2VydmljZXM6XG5cbiAgZGI6XG4gICAgaW1hZ2U6IHBvc3RncmVzOjEyXG4gICAgcmVzdGFydDogYWx3YXlzXG4gICAgaGVhbHRoY2hlY2s6XG4gICAgICB0ZXN0OiBbXCJDTUQtU0hFTExcIiwgXCJwZ19pc3JlYWR5IC1VICR7UE9TVEdSRVNfVVNFUn0gLWQgJHtQT1NUR1JFU19EQn1cIl1cbiAgICAgIGludGVydmFsOiAxMHNcbiAgICAgIHJldHJpZXM6IDVcbiAgICAgIHN0YXJ0X3BlcmlvZDogMzBzXG4gICAgICB0aW1lb3V0OiAxMHNcbiAgICB2b2x1bWVzOlxuICAgICAgLSBhcHAtZGItZGF0YTovdmFyL2xpYi9wb3N0Z3Jlc3FsL2RhdGEvcGdkYXRhXG4gICAgZW52X2ZpbGU6XG4gICAgICAtIC5lbnZcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgIC0gUEdEQVRBPS92YXIvbGliL3Bvc3RncmVzcWwvZGF0YS9wZ2RhdGFcbiAgICAgIC0gUE9TVEdSRVNfUEFTU1dPUkQ9JHtQT1NUR1JFU19QQVNTV09SRD9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBQT1NUR1JFU19VU0VSPSR7UE9TVEdSRVNfVVNFUj9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBQT1NUR1JFU19EQj0ke1BPU1RHUkVTX0RCP1ZhcmlhYmxlIG5vdCBzZXR9XG5cbiAgYWRtaW5lcjpcbiAgICBpbWFnZTogYWRtaW5lclxuICAgIHJlc3RhcnQ6IGFsd2F5c1xuICAgIG5ldHdvcmtzOlxuICAgICAgLSB0cmFlZmlrLXB1YmxpY1xuICAgICAgLSBkZWZhdWx0XG4gICAgZGVwZW5kc19vbjpcbiAgICAgIC0gZGJcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgIC0gQURNSU5FUl9ERVNJR049cGVwYS1saW5oYS1kYXJrXG4gICAgbGFiZWxzOlxuICAgICAgLSB0cmFlZmlrLmVuYWJsZT10cnVlXG4gICAgICAtIHRyYWVmaWsuZG9ja2VyLm5ldHdvcms9dHJhZWZpay1wdWJsaWNcbiAgICAgIC0gdHJhZWZpay5jb25zdHJhaW50LWxhYmVsPXRyYWVmaWstcHVibGljXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1hZG1pbmVyLWh0dHAucnVsZT1Ib3N0KGBhZG1pbmVyLiR7RE9NQUlOP1ZhcmlhYmxlIG5vdCBzZXR9YClcbiAgICAgIC0gdHJhZWZpay5odHRwLnJvdXRlcnMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWFkbWluZXItaHR0cC5lbnRyeXBvaW50cz1odHRwXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1hZG1pbmVyLWh0dHAubWlkZGxld2FyZXM9aHR0cHMtcmVkaXJlY3RcbiAgICAgIC0gdHJhZWZpay5odHRwLnJvdXRlcnMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWFkbWluZXItaHR0cHMucnVsZT1Ib3N0KGBhZG1pbmVyLiR7RE9NQUlOP1ZhcmlhYmxlIG5vdCBzZXR9YClcbiAgICAgIC0gdHJhZWZpay5odHRwLnJvdXRlcnMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWFkbWluZXItaHR0cHMuZW50cnlwb2ludHM9aHR0cHNcbi4uLlxuXG4gIHByZXN0YXJ0OlxuICAgIGltYWdlOiAnJHtET0NLRVJfSU1BR0VfQkFDS0VORD9WYXJpYWJsZSBub3Qgc2V0fToke1RBRy1sYXRlc3R9J1xuICAgIGJ1aWxkOlxuICAgICAgY29udGV4dDogLi9iYWNrZW5kXG4gICAgbmV0d29ya3M6XG4gICAgICAtIHRyYWVmaWstcHVibGljXG4gICAgICAtIGRlZmF1bHRcbiAgICBkZXBlbmRzX29uOlxuICAgICAgZGI6XG4gICAgICAgIGNvbmRpdGlvbjogc2VydmljZV9oZWFsdGh5XG4gICAgICAgIHJlc3RhcnQ6IHRydWVcbiAgICBjb21tYW5kOiBiYXNoIHNjcmlwdHMvcHJlc3RhcnQuc2hcbiAgICBlbnZfZmlsZTpcbiAgICAgIC0gLmVudlxuICAgIGVudmlyb25tZW50OlxuICAgICAgLSBET01BSU49JHtET01BSU59XG4gICAgICAtIEZST05URU5EX0hPU1Q9JHtGUk9OVEVORF9IT1NUP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIEVOVklST05NRU5UPSR7RU5WSVJPTk1FTlR9XG4gICAgICAtIEJBQ0tFTkRfQ09SU19PUklHSU5TPSR7QkFDS0VORF9DT1JTX09SSUdJTlN9XG4gICAgICAtIFNFQ1JFVF9LRVk9JHtTRUNSRVRfS0VZP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIEZJUlNUX1NVUEVSVVNFUj0ke0ZJUlNUX1NVUEVSVVNFUj9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBGSVJTVF9TVVBFUlVTRVJfUEFTU1dPUkQ9JHtGSVJTVF9TVVBFUlVTRVJfUEFTU1dPUkQ/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gU01UUF9IT1NUPSR7U01UUF9IT1NUfVxuICAgICAgLSBTTVRQX1VTRVI9JHtTTVRQX1VTRVJ9XG4gICAgICAtIFNNVFBfUEFTU1dPUkQ9JHtTTVRQX1BBU1NXT1JEfVxuICAgICAgLSBFTUFJTFNfRlJPTV9FTUFJTD0ke0VNQUlMU19GUk9NX0VNQUlMfVxuICAgICAgLSBQT1NUR1JFU19TRVJWRVI9ZGJcbiAgICAgIC0gUE9TVEdSRVNfUE9SVD0ke1BPU1RHUkVTX1BPUlR9XG4gICAgICAtIFBPU1RHUkVTX0RCPSR7UE9TVEdSRVNfREJ9XG4gICAgICAtIFBPU1RHUkVTX1VTRVI9JHtQT1NUR1JFU19VU0VSP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIFBPU1RHUkVTX1BBU1NXT1JEPSR7UE9TVEdSRVNfUEFTU1dPUkQ/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gU0VOVFJZX0RTTj0ke1NFTlRSWV9EU059XG5cbiAgYmFja2VuZDpcbiAgICBpbWFnZTogJyR7RE9DS0VSX0lNQUdFX0JBQ0tFTkQ/VmFyaWFibGUgbm90IHNldH06JHtUQUctbGF0ZXN0fSdcbiAgICByZXN0YXJ0OiBhbHdheXNcbiAgICBuZXR3b3JrczpcbiAgICAgIC0gdHJhZWZpay1wdWJsaWNcbiAgICAgIC0gZGVmYXVsdFxuICAgIGRlcGVuZHNfb246XG4gICAgICBkYjpcbiAgICAgICAgY29uZGl0aW9uOiBzZXJ2aWNlX2hlYWx0aHlcbiAgICAgICAgcmVzdGFydDogdHJ1ZVxuICAgICAgcHJlc3RhcnQ6XG4gICAgICAgIGNvbmRpdGlvbjogc2VydmljZV9jb21wbGV0ZWRfc3VjY2Vzc2Z1bGx5XG4gICAgZW52X2ZpbGU6XG4gICAgICAtIC5lbnZcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgIC0gRE9NQUlOPSR7RE9NQUlOfVxuICAgICAgLSBGUk9OVEVORF9IT1NUPSR7RlJPTlRFTkRfSE9TVD9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBFTlZJUk9OTUVOVD0ke0VOVklST05NRU5UfVxuICAgICAgLSBCQUNLRU5EX0NPUlNfT1JJR0lOUz0ke0JBQ0tFTkRfQ09SU19PUklHSU5TfVxuICAgICAgLSBTRUNSRVRfS0VZPSR7U0VDUkVUX0tFWT9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBGSVJTVF9TVVBFUlVTRVI9JHtGSVJTVF9TVVBFUlVTRVI/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gRklSU1RfU1VQRVJVU0VSX1BBU1NXT1JEPSR7RklSU1RfU1VQRVJVU0VSX1BBU1NXT1JEP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIFNNVFBfSE9TVD0ke1NNVFBfSE9TVH1cbiAgICAgIC0gU01UUF9VU0VSPSR7U01UUF9VU0VSfVxuICAgICAgLSBTTVRQX1BBU1NXT1JEPSR7U01UUF9QQVNTV09SRH1cbiAgICAgIC0gRU1BSUxTX0ZST01fRU1BSUw9JHtFTUFJTFNfRlJPTV9FTUFJTH1cbiAgICAgIC0gUE9TVEdSRVNfU0VSVkVSPWRiXG4gICAgICAtIFBPU1RHUkVTX1BPUlQ9JHtQT1NUR1JFU19QT1JUfVxuICAgICAgLSBQT1NUR1JFU19EQj0ke1BPU1RHUkVTX0RCfVxuICAgICAgLSBQT1NUR1JFU19VU0VSPSR7UE9TVEdSRVNfVVNFUj9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBQT1NUR1JFU19QQVNTV09SRD0ke1BPU1RHUkVTX1BBU1NXT1JEP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIFNFTlRSWV9EU049JHtTRU5UUllfRFNOfVxuXG4gICAgaGVhbHRoY2hlY2s6XG4gICAgICB0ZXN0OiBbXCJDTURcIiwgXCJjdXJsXCIsIFwiLWZcIiwgXCJodHRwOi8vbG9jYWxob3N0OjgwMDAvYXBpL3YxL3V0aWxzL2hlYWx0aC1jaGVjay9cIl1cbiAgICAgIGludGVydmFsOiAxMHNcbiAgICAgIHRpbWVvdXQ6IDVzXG4gICAgICByZXRyaWVzOiA1XG5cbiAgICBidWlsZDpcbiAgICAgIGNvbnRleHQ6IC4vYmFja2VuZFxuICAgIGxhYmVsczpcbiAgICAgIC0gdHJhZWZpay5lbmFibGU9dHJ1ZVxuICAgICAgLSB0cmFlZmlrLmRvY2tlci5uZXR3b3JrPXRyYWVmaWstcHVibGljXG4gICAgICAtIHRyYWVmaWsuY29uc3RyYWludC1sYWJlbD10cmFlZmlrLXB1YmxpY1xuXG4gICAgICAtIHRyYWVmaWsuaHR0cC5zZXJ2aWNlcy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tYmFja2VuZC5sb2FkYmFsYW5jZXIuc2VydmVyLnBvcnQ9ODAwMFxuXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1iYWNrZW5kLWh0dHAucnVsZT1Ib3N0KGBhcGkuJHtET01BSU4/VmFyaWFibGUgbm90IHNldH1gKVxuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tYmFja2VuZC1odHRwLmVudHJ5cG9pbnRzPWh0dHBcbi4uLlxuXG4gIGZyb250ZW5kOlxuICAgIGltYWdlOiAnJHtET0NLRVJfSU1BR0VfRlJPTlRFTkQ/VmFyaWFibGUgbm90IHNldH06JHtUQUctbGF0ZXN0fSdcbiAgICByZXN0YXJ0OiBhbHdheXNcbiAgICBuZXR3b3JrczpcbiAgICAgIC0gdHJhZWZpay1wdWJsaWNcbiAgICAgIC0gZGVmYXVsdFxuICAgIGJ1aWxkOlxuICAgICAgY29udGV4dDogLi9mcm9udGVuZFxuICAgICAgYXJnczpcbiAgICAgICAgLSBWSVRFX0FQSV9VUkw9aHR0cHM6Ly9hcGkuJHtET01BSU4/VmFyaWFibGUgbm90IHNldH1cbiAgICAgICAgLSBOT0RFX0VOVj1wcm9kdWN0aW9uXG4gICAgbGFiZWxzOlxuICAgICAgLSB0cmFlZmlrLmVuYWJsZT10cnVlXG4gICAgICAtIHRyYWVmaWsuZG9ja2VyLm5ldHdvcms9dHJhZWZpay1wdWJsaWNcbiAgICAgIC0gdHJhZWZpay5jb25zdHJhaW50LWxhYmVsPXRyYWVmaWstcHVibGljXG5cbiAgICAgIC0gdHJhZWZpay5odHRwLnNlcnZpY2VzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1mcm9udGVuZC5sb2FkYmFsYW5jZXIuc2VydmVyLnBvcnQ9ODBcblxuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tZnJvbnRlbmQtaHR0cC5ydWxlPUhvc3QoYGRhc2hib2FyZC4ke0RPTUFJTj9WYXJpYWJsZSBub3Qgc2V0fWApXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1mcm9udGVuZC1odHRwLmVudHJ5cG9pbnRzPWh0dHBcblxuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tZnJvbnRlbmQtaHR0cHMucnVsZT1Ib3N0KGBkYXNoYm9hcmQuJHtET01BSU4/VmFyaWFibGUgbm90IHNldH1gKVxuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tZnJvbnRlbmQtaHR0cHMuZW50cnlwb2ludHM9aHR0cHNcbiAgICAgIC0gdHJhZWZpay5odHRwLnJvdXRlcnMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWZyb250ZW5kLWh0dHBzLnRscz10cnVlXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1mcm9udGVuZC1odHRwcy50bHMuY2VydHJlc29sdmVyPWxlXG5cbiAgICAgICMgRW5hYmxlIHJlZGlyZWN0aW9uIGZvciBIVFRQIGFuZCBIVFRQU1xuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tZnJvbnRlbmQtaHR0cC5taWRkbGV3YXJlcz1odHRwcy1yZWRpcmVjdFxudm9sdW1lczpcbiAgYXBwLWRiLWRhdGE6XG5cbm5ldHdvcmtzOlxuICB0cmFlZmlrLXB1YmxpYzpcbiAgICAjIEFsbG93IHNldHRpbmcgaXQgdG8gZmFsc2UgZm9yIHRlc3RpbmdcbiAgICBleHRlcm5hbDogdHJ1ZVxuLi4uXG5QYXRoOiBzY3JpcHRzL3Rlc3QtbG9jYWwuc2hcbiMhIC91c3IvYmluL2VudiBiYXNoXG5cbiMgRXhpdCBpbiBjYXNlIG9mIGVycm9yXG5zZXQgLWVcblxuZG9ja2VyLWNvbXBvc2UgZG93biAtdiAtLXJlbW92ZS1vcnBoYW5zICMgUmVtb3ZlIHBvc3NpYmx5IHByZXZpb3VzIGJyb2tlbiBzdGFja3MgbGVmdCBoYW5naW5nIGFmdGVyIGFuIGVycm9yXG5cbmlmIFsgJCh1bmFtZSAtcykgPSBcIkxpbnV4XCIgXTsgdGhlblxuICAgIGVjaG8gXCJSZW1vdmUgX19weWNhY2hlX18gZmlsZXNcIlxuICAgIHN1ZG8gZmluZCAuIC10eXBlIGQgLW5hbWUgX19weWNhY2hlX18gLWV4ZWMgcm0gLXIge30gXFwrXG5maVxuXG5kb2NrZXItY29tcG9zZSBidWlsZFxuZG9ja2VyLWNvbXBvc2UgdXAgLWRcbmRvY2tlci1jb21wb3NlIGV4ZWMgLVQgYmFja2VuZCBiYXNoIHNjcmlwdHMvdGVzdHMtc3RhcnQuc2ggXCIkQFwiXG4uLi5cblBhdGg6IGJhY2tlbmQvYXBwL2NvcmUvY29uZmlnLnB5XG4uLi5cbiAgICBBUElfVjFfU1RSOiBzdHIgPSBcIi9hcGkvdjFcIlxuICAgIFNFQ1JFVF9LRVk6IHN0ciA9IHNlY3JldHMudG9rZW5fdXJsc2FmZSgzMilcbiAgICAjIDYwIG1pbnV0ZXMgKiAyNCBob3VycyAqIDggZGF5cyA9IDggZGF5c1xuICAgIEFDQ0VTU19UT0tFTl9FWFBJUkVfTUlOVVRFUzogaW50ID0gNjAgKiAyNCAqIDhcbiAgICBGUk9OVEVORF9IT1NUOiBzdHIgPSBcImh0dHA6Ly9sb2NhbGhvc3Q6NTE3M1wiXG4gICAgRU5WSVJPTk1FTlQ6IExpdGVyYWxbXCJsb2NhbFwiLCBcInN0YWdpbmdcIiwgXCJwcm9kdWN0aW9uXCJdID0gXCJsb2NhbFwiXG5cbiAgICAjIExMTSBzZXR0aW5nc1xuICAgIE9QRU5ST1VURVJfQVBJX0tFWTogc3RyID0gXCJcIlxuICAgIERFRkFVTFRfTExNX01PREVMOiBzdHIgPSBcIm9wZW5haS9ncHQtNG8tbWluaVwiXG4gICAgT1BFTlJPVVRFUl9CQVNFX1VSTDogc3RyID0gXCJodHRwczovL29wZW5yb3V0ZXIuYWkvYXBpL3YxXCJcblxuICAgICMgUkFHIHNldHRpbmdzXG4gICAgTUFYX0RPQ1VNRU5UU19QRVJfVVNFUjogaW50ID0gNTBcbiAgICBNQVhfRE9DVU1FTlRfU0laRV9NQjogaW50ID0gMTBcblxuICAgIEJBQ0tFTkRfQ09SU19PUklHSU5TOiBBbm5vdGF0ZWRbXG4gICAgICAgIGxpc3RbQW55VXJsXSB8IHN0ciwgQmVmb3JlVmFsaWRhdG9yKHBhcnNlX2NvcnMpXG4gICAgXSA9IFtdXG5cbiAgICBAY29tcHV0ZWRfZmllbGQgICMgdHlwZTogaWdub3JlW3Byb3AtZGVjb3JhdG9yXVxuICAgIEBwcm9wZXJ0eVxuICAgIGRlZiBhbGxfY29yc19vcmlnaW5zKHNlbGYpIC0+IGxpc3Rbc3RyXTpcbiAgICAgICAgcmV0dXJuIFtzdHIob3JpZ2luKS5yc3RyaXAoXCIvXCIpIGZvciBvcmlnaW4gaW4gc2VsZi5CQUNLRU5EX0NPUlNfT1JJR0lOU10gKyBbXG4gICAgICAgICAgICBzZWxmLkZST05URU5EX0hPU1RcbiAgICAgICAgXVxuXG4gICAgUFJPSkVDVF9OQU1FOiBzdHJcbiAgICBTRU5UUllfRFNOOiBIdHRwVXJsIHwgTm9uZSA9IE5vbmVcbiAgICBQT1NUR1JFU19TRVJWRVI6IHN0clxuICAgIFBPU1RHUkVTX1BPUlQ6IGludCA9IDU0MzJcbiAgICBQT1NUR1JFU19VU0VSOiBzdHJcbiAgICBQT1NUR1JFU19QQVNTV09SRDogc3RyID0gXCJcIlxuICAgIFBPU1RHUkVTX0RCOiBzdHIgPSBcIlwiXG5cbiAgICBAY29tcHV0ZWRfZmllbGQgICMgdHlwZTogaWdub3JlW3Byb3AtZGVjb3JhdG9yXVxuICAgIEBwcm9wZXJ0eVxuICAgIGRlZiBTUUxBTENIRU1ZX0RBVEFCQVNFX1VSSShzZWxmKSAtPiBQb3N0Z3Jlc0RzbjpcbiAgICAgICAgcmV0dXJuIE11bHRpSG9zdFVybC5idWlsZChcbiAgICAgICAgICAgIHNjaGVtZT1cInBvc3RncmVzcWwrcHN5Y29wZ1wiLFxuICAgICAgICAgICAgdXNlcm5hbWU9c2VsZi5QT1NUR1JFU19VU0VSLFxuICAgICAgICAgICAgcGFzc3dvcmQ9c2VsZi5QT1NUR1JFU19QQVNTV09SRCxcbiAgICAgICAgICAgIGhvc3Q9c2VsZi5QT1NUR1JFU19TRVJWRVIsXG4gICAgICAgICAgICBwb3J0PXNlbGYuUE9TVEdSRVNfUE9SVCxcbiAgICAgICAgICAgIHBhdGg9c2VsZi5QT1NUR1JFU19EQixcbiAgICAgICAgKVxuLi4uXG5QYXRoOiBzY3JpcHRzL3Rlc3Quc2hcbiMhIC91c3IvYmluL2VudiBzaFxuXG4jIEV4aXQgaW4gY2FzZSBvZiBlcnJvclxuc2V0IC1lXG5zZXQgLXhcblxuZG9ja2VyIGNvbXBvc2UgYnVpbGRcbmRvY2tlciBjb21wb3NlIGRvd24gLXYgLS1yZW1vdmUtb3JwaGFucyAjIFJlbW92ZSBwb3NzaWJseSBwcmV2aW91cyBicm9rZW4gc3RhY2tzIGxlZnQgaGFuZ2luZyBhZnRlciBhbiBlcnJvclxuZG9ja2VyIGNvbXBvc2UgdXAgLWRcbmRvY2tlciBjb21wb3NlIGV4ZWMgLVQgYmFja2VuZCBiYXNoIHNjcmlwdHMvdGVzdHMtc3RhcnQuc2ggXCIkQFwiXG5kb2NrZXIgY29tcG9zZSBkb3duIC12IC0tcmVtb3ZlLW9ycGhhbnNcbi4uLlxuUGF0aDogc2NyaXB0cy9kZXBsb3kuc2hcbiMhIC91c3IvYmluL2VudiBzaFxuXG4jIEV4aXQgaW4gY2FzZSBvZiBlcnJvclxuc2V0IC1lXG5cbkRPTUFJTj0ke0RPTUFJTj9WYXJpYWJsZSBub3Qgc2V0fSBcXFxuU1RBQ0tfTkFNRT0ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0gXFxcblRBRz0ke1RBRz9WYXJpYWJsZSBub3Qgc2V0fSBcXFxuZG9ja2VyLWNvbXBvc2UgXFxcbi1mIGRvY2tlci1jb21wb3NlLnltbCBcXFxuY29uZmlnID4gZG9ja2VyLXN0YWNrLnltbFxuXG5kb2NrZXItYXV0by1sYWJlbHMgZG9ja2VyLXN0YWNrLnltbFxuXG5kb2NrZXIgc3RhY2sgZGVwbG95IC1jIGRvY2tlci1zdGFjay55bWwgLS13aXRoLXJlZ2lzdHJ5LWF1dGggXCIke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH1cIlxuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvbWFpbi50c3hcbmltcG9ydCB7XG4gIE11dGF0aW9uQ2FjaGUsXG4gIFF1ZXJ5Q2FjaGUsXG4gIFF1ZXJ5Q2xpZW50LFxuICBRdWVyeUNsaWVudFByb3ZpZGVyLFxufSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCJcbmltcG9ydCB7IFJvdXRlclByb3ZpZGVyLCBjcmVhdGVSb3V0ZXIgfSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXJvdXRlclwiXG5pbXBvcnQgUmVhY3QsIHsgU3RyaWN0TW9kZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbS9jbGllbnRcIlxuaW1wb3J0IHsgcm91dGVUcmVlIH0gZnJvbSBcIi4vcm91dGVUcmVlLmdlblwiXG5cbmltcG9ydCB7IEFwaUVycm9yLCBPcGVuQVBJIH0gZnJvbSBcIi4vY2xpZW50XCJcbmltcG9ydCB7IEN1c3RvbVByb3ZpZGVyIH0gZnJvbSBcIi4vY29tcG9uZW50cy91aS9wcm92aWRlclwiXG5cbk9wZW5BUEkuQkFTRSA9IGltcG9ydC5tZXRhLmVudi5WSVRFX0FQSV9VUkxcbk9wZW5BUEkuVE9LRU4gPSBhc3luYyAoKSA9PiB7XG4gIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImFjY2Vzc190b2tlblwiKSB8fCBcIlwiXG59XG5cbmNvbnN0IGhhbmRsZUFwaUVycm9yID0gKGVycm9yOiBFcnJvcikgPT4ge1xuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBBcGlFcnJvciAmJiBbNDAxLCA0MDNdLmluY2x1ZGVzKGVycm9yLnN0YXR1cykpIHtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImFjY2Vzc190b2tlblwiKVxuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gXCIvbG9naW5cIlxuICB9XG59XG5jb25zdCBxdWVyeUNsaWVudCA9IG5ldyBRdWVyeUNsaWVudCh7XG4gIHF1ZXJ5Q2FjaGU6IG5ldyBRdWVyeUNhY2hlKHtcbiAgICBvbkVycm9yOiBoYW5kbGVBcGlFcnJvcixcbiAgfSksXG4gIG11dGF0aW9uQ2FjaGU6IG5ldyBNdXRhdGlvbkNhY2hlKHtcbiAgICBvbkVycm9yOiBoYW5kbGVBcGlFcnJvcixcbiAgfSksXG59KVxuXG5jb25zdCByb3V0ZXIgPSBjcmVhdGVSb3V0ZXIoeyByb3V0ZVRyZWUgfSlcbmRlY2xhcmUgbW9kdWxlIFwiQHRhbnN0YWNrL3JlYWN0LXJvdXRlclwiIHtcbiAgaW50ZXJmYWNlIFJlZ2lzdGVyIHtcbiAgICByb3V0ZXI6IHR5cGVvZiByb3V0ZXJcbiAgfVxufVxuXG5SZWFjdERPTS5jcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSEpLnJlbmRlcihcbiAgPFN0cmljdE1vZGU+XG4gICAgPEN1c3RvbVByb3ZpZGVyPlxuICAgICAgPFF1ZXJ5Q2xpZW50UHJvdmlkZXIgY2xpZW50PXtxdWVyeUNsaWVudH0+XG4gICAgICAgIDxSb3V0ZXJQcm92aWRlciByb3V0ZXI9e3JvdXRlLi4uIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMjVhYjUwNzQtMzYzYy00NGRmLThiY2YtY2RmNWU4OTNkNjA4O3Rvb2x1X3ZydHhfMDFIWE0zeWs0cmV6UERNb0pZZVdRQ0ZhIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IGRldmVsb3BtZW50Lm1kXG4jIEZhc3RBUEkgUHJvamVjdCAtIERldmVsb3BtZW50XG5cbiMjIERvY2tlciBDb21wb3NlXG5cbiogU3RhcnQgdGhlIGxvY2FsIHN0YWNrIHdpdGggRG9ja2VyIENvbXBvc2U6XG5cbmBgYGJhc2hcbmRvY2tlciBjb21wb3NlIHdhdGNoXG5gYGBcblxuKiBOb3cgeW91IGNhbiBvcGVuIHlvdXIgYnJvd3NlciBhbmQgaW50ZXJhY3Qgd2l0aCB0aGVzZSBVUkxzOlxuXG5Gcm9udGVuZCwgYnVpbHQgd2l0aCBEb2NrZXIsIHdpdGggcm91dGVzIGhhbmRsZWQgYmFzZWQgb24gdGhlIHBhdGg6IGh0dHA6Ly9sb2NhbGhvc3Q6NTE3M1xuXG5CYWNrZW5kLCBKU09OIGJhc2VkIHdlYiBBUEkgYmFzZWQgb24gT3BlbkFQSTogaHR0cDovL2xvY2FsaG9zdDo4MDAwXG5cbkF1dG9tYXRpYyBpbnRlcmFjdGl2ZSBkb2N1bWVudGF0aW9uIHdpdGggU3dhZ2dlciBVSSAoZnJvbSB0aGUgT3BlbkFQSSBiYWNrZW5kKTogaHR0cDovL2xvY2FsaG9zdDo4MDAwL2RvY3NcblxuQWRtaW5lciwgZGF0YWJhc2Ugd2ViIGFkbWluaXN0cmF0aW9uOiBodHRwOi8vbG9jYWxob3N0OjgwODBcblxuVHJhZWZpayBVSSwgdG8gc2VlIGhvdyB0aGUgcm91dGVzIGFyZSBiZWluZyBoYW5kbGVkIGJ5IHRoZSBwcm94eTogaHR0cDovL2xvY2FsaG9zdDo4MDkwXG5cbioqTm90ZSoqOiBUaGUgZmlyc3QgdGltZSB5b3Ugc3RhcnQgeW91ciBzdGFjaywgaXQgbWlnaHQgdGFrZSBhIG1pbnV0ZSBmb3IgaXQgdG8gYmUgcmVhZHkuIFdoaWxlIHRoZSBiYWNrZW5kIHdhaXRzIGZvciB0aGUgZGF0YWJhc2UgdG8gYmUgcmVhZHkgYW5kIGNvbmZpZ3VyZXMgZXZlcnl0aGluZy4gWW91IGNhbiBjaGVjayB0aGUgbG9ncyB0byBtb25pdG9yIGl0LlxuXG5UbyBjaGVjayB0aGUgbG9ncywgcnVuIChpbiBhbm90aGVyIHRlcm1pbmFsKTpcblxuYGBgYmFzaFxuZG9ja2VyIGNvbXBvc2UgbG9nc1xuYGBgXG5cblRvIGNoZWNrIHRoZSBsb2dzIG9mIGEgc3BlY2lmaWMgc2VydmljZSwgYWRkIHRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlLCBlLmcuOlxuXG5gYGBiYXNoXG5kb2NrZXIgY29tcG9zZSBsb2dzIGJhY2tlbmRcbmBgYFxuXG4jIyBMb2NhbCBEZXZlbG9wbWVudFxuXG5UaGUgRG9ja2VyIENvbXBvc2UgZmlsZXMgYXJlIGNvbmZpZ3VyZWQgc28gdGhhdCBlYWNoIG9mIHRoZSBzZXJ2aWNlcyBpcyBhdmFpbGFibGUgaW4gYSBkaWZmZXJlbnQgcG9ydCBpbiBgbG9jYWxob3N0YC5cblxuRm9yIHRoZSBiYWNrZW5kIGFuZCBmcm9udGVuZCwgdGhleSB1c2UgdGhlIHNhbWUgcG9ydCB0aGF0IHdvdWxkIGJlIHVzZWQgYnkgdGhlaXIgbG9jYWwgZGV2ZWxvcG1lbnQgc2VydmVyLCBzbywgdGhlIGJhY2tlbmQgaXMgYXQgYGh0dHA6Ly9sb2NhbGhvc3Q6ODAwMGAgYW5kIHRoZSBmcm9udGVuZCBhdCBgaHR0cDovL2xvY2FsaG9zdDo1MTczYC5cblxuVGhpcyB3YXksIHlvdSBjb3VsZCB0dXJuIG9mZiBhIERvY2tlciBDb21wb3NlIHNlcnZpY2UgYW5kIHN0YXJ0IGl0cyBsb2NhbCBkZXZlbG9wbWVudCBzZXJ2aWNlLCBhbmQgZXZlcnl0aGluZyB3b3VsZCBrZWVwIHdvcmtpbmcsIGJlY2F1c2UgaXQgYWxsIHVzZXMgdGhlIHNhbWUgcG9ydHMuXG5cbkZvciBleGFtcGxlLCB5b3UgY2FuIHN0b3AgdGhhdCBgZnJvbnRlbmRgIHNlcnZpY2UgaW4gdGhlIERvY2tlciBDb21wb3NlLCBpbiBhbm90aGVyIHRlcm1pbmFsLCBydW46XG5cbmBgYGJhc2hcbmRvY2tlciBjb21wb3NlIHN0b3AgZnJvbnRlbmRcbmBgYFxuXG5BbmQgdGhlbiBzdGFydCB0aGUgbG9jYWwgZnJvbnRlbmQgZGV2ZWxvcG1lbnQgc2VydmVyOlxuXG5gYGBiYXNoXG5jZCBmcm9udGVuZFxubnBtIHJ1biBkZXZcbmBgYFxuXG5PciB5b3UgY291bGQgc3RvcCB0aGUgYGJhY2tlbmRgIERvY2tlciBDb21wb3NlIHNlcnZpY2U6XG5cbmBgYGJhc2hcbmRvY2tlciBjb21wb3NlIHN0b3AgYmFja2VuZFxuYGBgXG5cbkFuZCB0aGVuIHlvdSBjYW4gcnVuIHRoZSBsb2NhbCBkZXZlbG9wbWVudCBzZXJ2ZXIgZm9yIHRoZSBiYWNrZW5kOlxuXG5gYGBiYXNoXG5jZCBiYWNrZW5kXG5mYXN0YXBpIGRldiBhcHAvbWFpbi5weVxuYGBgXG5cbiMjIERvY2tlciBDb21wb3NlIGluIGBsb2NhbGhvc3QudGlhbmdvbG8uY29tYFxuLi4uXG5QYXRoOiBzY3JpcHRzL3Rlc3QtbG9jYWwuc2hcbiMhIC91c3IvYmluL2VudiBiYXNoXG5cbiMgRXhpdCBpbiBjYXNlIG9mIGVycm9yXG5zZXQgLWVcblxuZG9ja2VyLWNvbXBvc2UgZG93biAtdiAtLXJlbW92ZS1vcnBoYW5zICMgUmVtb3ZlIHBvc3NpYmx5IHByZXZpb3VzIGJyb2tlbiBzdGFja3MgbGVmdCBoYW5naW5nIGFmdGVyIGFuIGVycm9yXG5cbmlmIFsgJCh1bmFtZSAtcykgPSBcIkxpbnV4XCIgXTsgdGhlblxuICAgIGVjaG8gXCJSZW1vdmUgX19weWNhY2hlX18gZmlsZXNcIlxuICAgIHN1ZG8gZmluZCAuIC10eXBlIGQgLW5hbWUgX19weWNhY2hlX18gLWV4ZWMgcm0gLXIge30gXFwrXG5maVxuXG5kb2NrZXItY29tcG9zZSBidWlsZFxuZG9ja2VyLWNvbXBvc2UgdXAgLWRcbmRvY2tlci1jb21wb3NlIGV4ZWMgLVQgYmFja2VuZCBiYXNoIHNjcmlwdHMvdGVzdHMtc3RhcnQuc2ggXCIkQFwiXG4uLi5cblBhdGg6IGJhY2tlbmQvc2NyaXB0cy9wcmVzdGFydC5zaFxuIyEgL3Vzci9iaW4vZW52IGJhc2hcblxuc2V0IC1lXG5zZXQgLXhcblxuIyBMZXQgdGhlIERCIHN0YXJ0XG5weXRob24gYXBwL2JhY2tlbmRfcHJlX3N0YXJ0LnB5XG5cbiMgUnVuIG1pZ3JhdGlvbnNcbmFsZW1iaWMgdXBncmFkZSBoZWFkXG5cbiMgQ3JlYXRlIGluaXRpYWwgZGF0YSBpbiBEQlxucHl0aG9uIGFwcC9pbml0aWFsX2RhdGEucHlcbi4uLlxuUGF0aDogYmFja2VuZC9SRUFETUUubWRcbiMgRmFzdEFQSSBQcm9qZWN0IC0gQmFja2VuZFxuXG4jIyBSZXF1aXJlbWVudHNcblxuKiBbRG9ja2VyXShodHRwczovL3d3dy5kb2NrZXIuY29tLykuXG4qIFt1dl0oaHR0cHM6Ly9kb2NzLmFzdHJhbC5zaC91di8pIGZvciBQeXRob24gcGFja2FnZSBhbmQgZW52aXJvbm1lbnQgbWFuYWdlbWVudC5cblxuIyMgRG9ja2VyIENvbXBvc2VcblxuU3RhcnQgdGhlIGxvY2FsIGRldmVsb3BtZW50IGVudmlyb25tZW50IHdpdGggRG9ja2VyIENvbXBvc2UgZm9sbG93aW5nIHRoZSBndWlkZSBpbiBbLi4vZGV2ZWxvcG1lbnQubWRdKC4uL2RldmVsb3BtZW50Lm1kKS5cblxuIyMgR2VuZXJhbCBXb3JrZmxvd1xuXG5CeSBkZWZhdWx0LCB0aGUgZGVwZW5kZW5jaWVzIGFyZSBtYW5hZ2VkIHdpdGggW3V2XShodHRwczovL2RvY3MuYXN0cmFsLnNoL3V2LyksIGdvIHRoZXJlIGFuZCBpbnN0YWxsIGl0LlxuXG5Gcm9tIGAuL2JhY2tlbmQvYCB5b3UgY2FuIGluc3RhbGwgYWxsIHRoZSBkZXBlbmRlbmNpZXMgd2l0aDpcblxuYGBgY29uc29sZVxuJCB1diBzeW5jXG5gYGBcblxuVGhlbiB5b3UgY2FuIGFjdGl2YXRlIHRoZSB2aXJ0dWFsIGVudmlyb25tZW50IHdpdGg6XG5cbmBgYGNvbnNvbGVcbiQgc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZVxuYGBgXG5cbk1ha2Ugc3VyZSB5b3VyIGVkaXRvciBpcyB1c2luZyB0aGUgY29ycmVjdCBQeXRob24gdmlydHVhbCBlbnZpcm9ubWVudCwgd2l0aCB0aGUgaW50ZXJwcmV0ZXIgYXQgYGJhY2tlbmQvLnZlbnYvYmluL3B5dGhvbmAuXG4uLi5cblxuVGhlcmUgaXMgYWxzbyBhIGNvbW1hbmQgb3ZlcnJpZGUgdGhhdCBydW5zIGBmYXN0YXBpIHJ1biAtLXJlbG9hZGAgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBgZmFzdGFwaSBydW5gLiBJdCBzdGFydHMgYSBzaW5nbGUgc2VydmVyIHByb2Nlc3MgKGluc3RlYWQgb2YgbXVsdGlwbGUsIGFzIHdvdWxkIGJlIGZvciBwcm9kdWN0aW9uKSBhbmQgcmVsb2FkcyB0aGUgcHJvY2VzcyB3aGVuZXZlciB0aGUgY29kZSBjaGFuZ2VzLiBIYXZlIGluIG1pbmQgdGhhdCBpZiB5b3UgaGF2ZSBhIHN5bnRheCBlcnJvciBhbmQgc2F2ZSB0aGUgUHl0aG9uIGZpbGUsIGl0IHdpbGwgYnJlYWsgYW5kIGV4aXQsIGFuZCB0aGUgY29udGFpbmVyIHdpbGwgc3RvcC4gQWZ0ZXIgdGhhdCwgeW91IGNhbiByZXN0YXJ0IHRoZSBjb250YWluZXIgYnkgZml4aW5nIHRoZSBlcnJvciBhbmQgcnVubmluZyBhZ2FpbjpcblxuYGBgY29uc29sZVxuJCBkb2NrZXIgY29tcG9zZSB3YXRjaFxuYGBgXG5cblRoZXJlIGlzIGFsc28gYSBjb21tZW50ZWQgb3V0IGBjb21tYW5kYCBvdmVycmlkZSwgeW91IGNhbiB1bmNvbW1lbnQgaXQgYW5kIGNvbW1lbnQgdGhlIGRlZmF1bHQgb25lLiBJdCBtYWtlcyB0aGUgYmFja2VuZCBjb250YWluZXIgcnVuIGEgcHJvY2VzcyB0aGF0IGRvZXMgXCJub3RoaW5nXCIsIGJ1dCBrZWVwcyB0aGUgY29udGFpbmVyIGFsaXZlLiBUaGF0IGFsbG93cyB5b3UgdG8gZ2V0IGluc2lkZSB5b3VyIHJ1bm5pbmcgY29udGFpbmVyIGFuZCBleGVjdXRlIGNvbW1hbmRzIGluc2lkZSwgZm9yIGV4YW1wbGUgYSBQeXRob24gaW50ZXJwcmV0ZXIgdG8gdGVzdCBpbnN0YWxsZWQgZGVwZW5kZW5jaWVzLCBvciBzdGFydCB0aGUgZGV2ZWxvcG1lbnQgc2VydmVyIHRoYXQgcmVsb2FkcyB3aGVuIGl0IGRldGVjdHMgY2hhbmdlcy5cblxuVG8gZ2V0IGluc2lkZSB0aGUgY29udGFpbmVyIHdpdGggYSBgYmFzaGAgc2Vzc2lvbiB5b3UgY2FuIHN0YXJ0IHRoZSBzdGFjayB3aXRoOlxuXG5gYGBjb25zb2xlXG4kIGRvY2tlciBjb21wb3NlIHdhdGNoXG5gYGBcblxuYW5kIHRoZW4gaW4gYW5vdGhlciB0ZXJtaW5hbCwgYGV4ZWNgIGluc2lkZSB0aGUgcnVubmluZyBjb250YWluZXI6XG5cbmBgYGNvbnNvbGVcbiQgZG9ja2VyIGNvbXBvc2UgZXhlYyBiYWNrZW5kIGJhc2hcbmBgYFxuXG5Zb3Ugc2hvdWxkIHNlZSBhbiBvdXRwdXQgbGlrZTpcblxuYGBgY29uc29sZVxucm9vdEA3ZjI2MDdhZjMxYzM6L2FwcCNcbmBgYFxuXG50aGF0IG1lYW5zIHRoYXQgeW91IGFyZSBpbiBhIGBiYXNoYCBzZXNzaW9uIGluc2lkZSB5b3VyIGNvbnRhaW5lciwgYXMgYSBgcm9vdGAgdXNlciwgdW5kZXIgdGhlIGAvYXBwYCBkaXJlY3RvcnksIHRoaXMgZGlyZWN0b3J5IGhhcyBhbm90aGVyIGRpcmVjdG9yeSBjYWxsZWQgXCJhcHBcIiBpbnNpZGUsIHRoYXQncyB3aGVyZSB5b3VyIGNvZGUgbGl2ZXMgaW5zaWRlIHRoZSBjb250YWluZXI6IGAvYXBwL2FwcGAuXG5cblRoZXJlIHlvdSBjYW4gdXNlIHRoZSBgZmFzdGFwaSBydW4gLS1yZWxvYWRgIGNvbW1hbmQgdG8gcnVuIHRoZSBkZWJ1ZyBsaXZlIHJlbG9hZGluZyBzZXJ2ZXIuXG5cbmBgYGNvbnNvbGVcbiQgZmFzdGFwaSBydW4gLS1yZWxvYWQgYXBwL21haW4ucHlcbmBgYFxuXG4uLi5pdCB3aWxsIGxvb2sgbGlrZTpcblxuYGBgY29uc29sZVxucm9vdEA3ZjI2MDdhZjMxYzM6L2FwcCMgZmFzdGFwaSBydW4gLS1yZWxvYWQgYXBwL21haW4ucHlcbmBgYFxuXG5hbmQgdGhlbiBoaXQgZW50ZXIuIFRoYXQgcnVucyB0aGUgbGl2ZSByZWxvYWRpbmcgc2VydmVyIHRoYXQgYXV0byByZWxvYWRzIHdoZW4gaXQgZGV0ZWN0cyBjb2RlIGNoYW5nZXMuXG4uLi5cblxuYGBgYmFzaFxuZG9ja2VyIGNvbXBvc2UgZXhlYyBiYWNrZW5kIGJhc2ggc2NyaXB0cy90ZXN0cy1zdGFydC5zaFxuYGBgXG5cblRoYXQgYC9hcHAvc2NyaXB0cy90ZXN0cy1zdGFydC5zaGAgc2NyaXB0IGp1c3QgY2FsbHMgYHB5dGVzdGAgYWZ0ZXIgbWFraW5nIHN1cmUgdGhhdCB0aGUgcmVzdCBvZiB0aGUgc3RhY2sgaXMgcnVubmluZy4gSWYgeW91IG5lZWQgdG8gcGFzcyBleHRyYSBhcmd1bWVudHMgdG8gYHB5dGVzdGAsIHlvdSBjYW4gcGFzcyB0aGVtIHRvIHRoYXQgY29tbWFuZCBhbmQgdGhleSB3aWxsIGJlIGZvcndhcmRlZC5cblxuRm9yIGV4YW1wbGUsIHRvIHN0b3Agb24gZmlyc3QgZXJyb3I6XG5cbmBgYGJhc2hcbmRvY2tlciBjb21wb3NlIGV4ZWMgYmFja2VuZCBiYXNoIHNjcmlwdHMvdGVzdHMtc3RhcnQuc2ggLXhcbmBgYFxuXG4jIyMgVGVzdCBDb3ZlcmFnZVxuXG5XaGVuIHRoZSB0ZXN0cyBhcmUgcnVuLCBhIGZpbGUgYGh0bWxjb3YvaW5kZXguaHRtbGAgaXMgZ2VuZXJhdGVkLCB5b3UgY2FuIG9wZW4gaXQgaW4geW91ciBicm93c2VyIHRvIHNlZSB0aGUgY292ZXJhZ2Ugb2YgdGhlIHRlc3RzLlxuXG4jIyBNaWdyYXRpb25zXG4uLi5cblBhdGg6IGRvYy9GdWxsLVN0YWNrLUZhc3RBUEktVGVtcGxhdGXlrabkuaDmiYvlhowubWRcbi4uLlxuXG5gYGBcbmZyb250ZW5kL1xu4pSc4pSA4pSAIHNyYy9cbuKUgiAgIOKUnOKUgOKUgCBhc3NldHMvICAgICAgICAgIyDpnZnmgIHotYTmupBcbuKUgiAgIOKUnOKUgOKUgCBjbGllbnQvICAgICAgICAgIyDnlJ/miJDnmoQgQVBJIOWuouaIt+err1xu4pSCICAg4pSc4pSA4pSAIGNvbXBvbmVudHMvICAgICAjIFJlYWN0IOe7hOS7tlxu4pSCICAg4pSc4pSA4pSAIGhvb2tzLyAgICAgICAgICAjIOiHquWumuS5iSBob29rc1xu4pSCICAg4pSc4pSA4pSAIHJvdXRlcy8gICAgICAgICAjIOi3r+eUseWSjOmhtemdolxu4pSCICAg4pSU4pSA4pSAIC4uLlxu4pSc4pSA4pSAIHRlc3RzLyAgICAgICAgICAgICAgIyBQbGF5d3JpZ2h0IOa1i+ivlVxu4pSU4pSA4pSAIC4uLlxuYGBgXG5cbiMjIDQuIOWQjuerr+aetuaehFxuXG4jIyMgRmFzdEFQSSDlupTnlKjnu5PmnoRcblxuRmFzdEFQSSDlupTnlKjnmoTlhaXlj6PngrnmmK8gYGJhY2tlbmQvYXBwL21haW4ucHlg77yM5a6D5Yid5aeL5YyWIEZhc3RBUEkg5bqU55So5bm25YyF5ZCr5omA5pyJ6Lev55Sx44CCXG5cbmBgYHB5dGhvblxuIyBiYWNrZW5kL2FwcC9tYWluLnB5XG5mcm9tIGZhc3RhcGkgaW1wb3J0IEZhc3RBUElcbmZyb20gYXBwLmFwaS5tYWluIGltcG9ydCBhcGlfcm91dGVyXG5mcm9tIGFwcC5jb3JlLmNvbmZpZyBpbXBvcnQgc2V0dGluZ3NcblxuYXBwID0gRmFzdEFQSShcbiAgICB0aXRsZT1zZXR0aW5ncy5QUk9KRUNUX05BTUUsXG4gICAgb3BlbmFwaV91cmw9Zlwie3NldHRpbmdzLkFQSV9WMV9TVFJ9L29wZW5hcGkuanNvblwiLFxuKVxuLi4uXG5gYGBcblxuIyMgNi4g5byA5Y+R546v5aKD6YWN572uXG5cbiMjIyDmnKzlnLDlvIDlj5Hnjq/looNcblxuRnVsbC1TdGFjay1GYXN0QVBJLVRlbXBsYXRlIOS9v+eUqCBEb2NrZXIgQ29tcG9zZSDorr7nva7mnKzlnLDlvIDlj5Hnjq/looPvvJpcblxuYGBgYmFzaFxuIyDlkK/liqjlvIDlj5Hnjq/looNcbmRvY2tlciBjb21wb3NlIHdhdGNoXG5gYGBcblxu6L+Z5bCG5ZCv5Yqo5Lul5LiL5pyN5Yqh77yaXG5cbi0g5ZCO56uvIEFQSSAoaHR0cDovL2xvY2FsaG9zdDo4MDAwKVxuLSDliY3nq6/lvIDlj5HmnI3liqHlmaggKGh0dHA6Ly9sb2NhbGhvc3Q6NTE3Mylcbi0gUG9zdGdyZVNRTCDmlbDmja7lupNcbi0gQWRtaW5lciDmlbDmja7lupPnrqHnkIblt6XlhbcgKGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MClcbi0gVHJhZWZpayDku6PnkIYgKGh0dHA6Ly9sb2NhbGhvc3Q6ODA5MClcbi0gTWFpbENhdGNoZXIg6YKu5Lu25rWL6K+V5bel5YW3IChodHRwOi8vbG9jYWxob3N0OjEwODApXG5cbiMjIyDnjq/looPlj5jph49cblxu5byA5Y+R546v5aKD55qE6YWN572u5a2Y5YKo5ZyoIGAuZW52YCDmlofku7bkuK3vvJpcblxuYGBgXG4jIC5lbnZcbkRPTUFJTj1sb2NhbGhvc3RcblNUQUNLX05BTUU9ZmFzdGFwaS1wcm9qZWN0XG5QUk9KRUNUX05BTUU9RmFzdEFQSSBQcm9qZWN0XG5TRUNSRVRfS0VZPWNoYW5nZXRoaXNcbkZJUlNUX1NVUEVSVVNFUj1hZG1pbkBleGFtcGxlLmNvbVxuRklSU1RfU1VQRVJVU0VSX1BBU1NXT1JEPWNoYW5nZXRoaXNcblBPU1RHUkVTX1BBU1NXT1JEPWNoYW5nZXRoaXNcblBPU1RHUkVTX1NFUlZFUj1kYlxuUE9TVEdSRVNfUE9SVD01NDMyXG5QT1NUR1JFU19VU0VSPXBvc3RncmVzXG5QT1NUR1JFU19EQj1hcHBcbmBgYFxuXG4jIyMg5YmN56uv5byA5Y+RXG5cbuWJjeerr+W8gOWPkeWPr+S7peWcqCBEb2NrZXIg5a655Zmo5YaF6L+b6KGM77yM5Lmf5Y+v5Lul5Zyo5pys5Zyw6L+b6KGM77yaXG5cbmBgYGJhc2hcbiMg5pys5Zyw5YmN56uv5byA5Y+RXG5jZCBmcm9udGVuZFxubnBtIGluc3RhbGxcbm5wbSBydW4gZGV2XG5gYGBcblxuIyMjIOWQjuerr+W8gOWPkVxuXG7lkI7nq6/lvIDlj5HlkIzmoLflj6/ku6XlnKggRG9ja2VyIOWuueWZqOWGhei/m+ihjO+8jOS5n+WPr+S7peWcqOacrOWcsOi/m+ihjO+8mlxuXG5gYGBiYXNoXG4jIOacrOWcsOWQjuerr+W8gOWPkVxuY2QgYmFja2VuZFxudXYgc3luY1xuc291cmNlIC52ZW52L2Jpbi9hY3RpdmF0ZVxuZmFzdGFwaSBkZXYgYXBwL21haW4ucHlcbmBgYFxuXG4jIyA3LiBEb2NrZXIg5LiO5a655Zmo5YyWXG5cbiMjIyBEb2NrZXIgQ29tcG9zZSDphY3nva5cblxu6aG555uu5L2/55SoIERvY2tlciBDb21wb3NlIOeuoeeQhuWuueWZqO+8mlxuXG5gYGB5YW1sXG4jIGRvY2tlci1jb21wb3NlLnltbFxudmVyc2lvbjogJzMuOCdcbnNlcnZpY2VzOlxuICBiYWNrZW5kOlxuICAgIGltYWdlOiAnJHtET0NLRVJfSU1BR0VfQkFDS0VORH06JHtUQUctbGF0ZXN0fSdcbiAgICBkZXBlbmRzX29uOlxuICAgICAgLSBkYlxuICAgIGVudl9maWxlOlxuICAgICAgLSAuZW52XG4gICAgZW52aXJvbm1lbnQ6XG4gICAgICAtIERPTUFJTj0ke0RPTUFJTn1cbiAgICAgIC0gRlJPTlRFTkRfSE9TVD0ke0ZST05URU5EX0hPU1R9XG4gICAgICAjIOWFtuS7lueOr+Wig+WPmOmHjy4uLlxuXG4gIGZyb250ZW5kOlxuICAgIGltYWdlOiAnJHtET0NLRVJfSU1BR0VfRlJPTlRFTkR9OiR7VEFHLWxhdGVzdH0nXG4gICAgZW52X2ZpbGU6XG4gICAgICAtIC5lbnZcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgIC0gVklURV9BUElfVVJMPSR7RlJPTlRFTkRfSE9TVH1cblxuICBkYjpcbiAgICBpbWFnZTogcG9zdGdyZXM6MTVcbiAgICB2b2x1bWVzOlxuICAgICAgLSBhcHAtZGItZGF0YTovdmFyL2xpYi9wb3N0Z3Jlc3FsL2RhdGEvcGdkYXRhXG4gICAgZW52X2ZpbGU6XG4gICAgICAtIC5lbnZcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgIC0gUEdEQVRBPS92YXIvbGliL3Bvc3RncmVzcWwvZGF0YS9wZ2RhdGFcbiAgICAgICMg5YW25LuW546v5aKD5Y+Y6YePLi4uXG4uLi5cblBhdGg6IGJhY2tlbmQvc2NyaXB0cy90ZXN0cy1zdGFydC5zaFxuIyEgL3Vzci9iaW4vZW52IGJhc2hcbnNldCAtZVxuc2V0IC14XG5cbnB5dGhvbiBhcHAvdGVzdHNfcHJlX3N0YXJ0LnB5XG5cbmJhc2ggc2NyaXB0cy90ZXN0LnNoIFwiJEBcIlxuLi4uXG5QYXRoOiBkb2NrZXItY29tcG9zZS5vdmVycmlkZS55bWxcbi4uLlxuXG4gIGJhY2tlbmQ6XG4gICAgcmVzdGFydDogXCJub1wiXG4gICAgcG9ydHM6XG4gICAgICAtIFwiODAwMDo4MDAwXCJcbiAgICBidWlsZDpcbiAgICAgIGNvbnRleHQ6IC4vYmFja2VuZFxuICAgICMgY29tbWFuZDogc2xlZXAgaW5maW5pdHkgICMgSW5maW5pdGUgbG9vcCB0byBrZWVwIGNvbnRhaW5lciBhbGl2ZSBkb2luZyBub3RoaW5nXG4gICAgY29tbWFuZDpcbiAgICAgIC0gZmFzdGFwaVxuICAgICAgLSBydW5cbiAgICAgIC0gLS1yZWxvYWRcbiAgICAgIC0gXCJhcHAvbWFpbi5weVwiXG4gICAgZGV2ZWxvcDpcbiAgICAgIHdhdGNoOlxuICAgICAgICAtIHBhdGg6IC4vYmFja2VuZFxuICAgICAgICAgIGFjdGlvbjogc3luY1xuICAgICAgICAgIHRhcmdldDogL2FwcFxuICAgICAgICAgIGlnbm9yZTpcbiAgICAgICAgICAgIC0gLi9iYWNrZW5kLy52ZW52XG4gICAgICAgICAgICAtIC52ZW52XG4gICAgICAgIC0gcGF0aDogLi9iYWNrZW5kL3B5cHJvamVjdC50b21sXG4gICAgICAgICAgYWN0aW9uOiByZWJ1aWxkXG4gICAgIyBUT0RPOiByZW1vdmUgb25jZSBjb3ZlcmFnZSBpcyBkb25lIGxvY2FsbHlcbiAgICB2b2x1bWVzOlxuICAgICAgLSAuL2JhY2tlbmQvaHRtbGNvdjovYXBwL2h0bWxjb3ZcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgIFNNVFBfSE9TVDogXCJtYWlsY2F0Y2hlclwiXG4gICAgICBTTVRQX1BPUlQ6IFwiMTAyNVwiXG4gICAgICBTTVRQX1RMUzogXCJmYWxzZVwiXG4gICAgICBFTUFJTFNfRlJPTV9FTUFJTDogXCJub3JlcGx5QGV4YW1wbGUuY29tXCJcblxuICBtYWlsY2F0Y2hlcjpcbiAgICBpbWFnZTogc2NoaWNrbGluZy9tYWlsY2F0Y2hlclxuICAgIHBvcnRzOlxuICAgICAgLSBcIjEwODA6MTA4MFwiXG4gICAgICAtIFwiMTAyNToxMDI1XCJcblxuICBmcm9udGVuZDpcbiAgICByZXN0YXJ0OiBcIm5vXCJcbiAgICBwb3J0czpcbiAgICAgIC0gXCI1MTczOjgwXCJcbiAgICBidWlsZDpcbiAgICAgIGNvbnRleHQ6IC4vZnJvbnRlbmRcbiAgICAgIGFyZ3M6XG4gICAgICAgIC0gVklURV9BUElfVVJMPWh0dHA6Ly9sb2NhbGhvc3Q6ODAwMFxuICAgICAgICAtIE5PREVfRU5WPWRldmVsb3BtZW50XG4uLi5cblBhdGg6IGJhY2tlbmQvRG9ja2VyZmlsZVxuLi4uXG5cbiMgSW5zdGFsbCBkZXBlbmRlbmNpZXNcbiMgUmVmOiBodHRwczovL2RvY3MuYXN0cmFsLnNoL3V2L2d1aWRlcy9pbnRlZ3JhdGlvbi9kb2NrZXIvI2ludGVybWVkaWF0ZS1sYXllcnNcblJVTiAtLW1vdW50PXR5cGU9Y2FjaGUsdGFyZ2V0PS9yb290Ly5jYWNoZS91diBcXFxuICAgIC0tbW91bnQ9dHlwZT1iaW5kLHNvdXJjZT11di5sb2NrLHRhcmdldD11di5sb2NrIFxcXG4gICAgLS1tb3VudD10eXBlPWJpbmQsc291cmNlPXB5cHJvamVjdC50b21sLHRhcmdldD1weXByb2plY3QudG9tbCBcXFxuICAgIHV2IHN5bmMgLS1mcm96ZW4gLS1uby1pbnN0YWxsLXByb2plY3RcblxuRU5WIFBZVEhPTlBBVEg9L2FwcFxuXG5DT1BZIC4vc2NyaXB0cyAvYXBwL3NjcmlwdHNcblxuQ09QWSAuL3B5cHJvamVjdC50b21sIC4vdXYubG9jayAuL2FsZW1iaWMuaW5pIC9hcHAvXG5cbkNPUFkgLi9hcHAgL2FwcC9hcHBcblxuIyBTeW5jIHRoZSBwcm9qZWN0XG4jIFJlZjogaHR0cHM6Ly9kb2NzLmFzdHJhbC5zaC91di9ndWlkZXMvaW50ZWdyYXRpb24vZG9ja2VyLyNpbnRlcm1lZGlhdGUtbGF5ZXJzXG5SVU4gLS1tb3VudD10eXBlPWNhY2hlLHRhcmdldD0vcm9vdC8uY2FjaGUvdXYgXFxcbiAgICB1diBzeW5jXG5cbkNNRCBbXCJmYXN0YXBpXCIsIFwicnVuXCIsIFwiLS13b3JrZXJzXCIsIFwiNFwiLCBcImFwcC9tYWluLnB5XCJdXG4uLi5cblBhdGg6IHNjcmlwdHMvdGVzdC5zaFxuIyEgL3Vzci9iaW4vZW52IHNoXG5cbiMgRXhpdCBpbiBjYXNlIG9mIGVycm9yXG5zZXQgLWVcbnNldCAteFxuXG5kb2NrZXIgY29tcG9zZSBidWlsZFxuZG9ja2VyIGNvbXBvc2UgZG93biAtdiAtLXJlbW92ZS1vcnBoYW5zICMgUmVtb3ZlIHBvc3NpYmx5IHByZXZpb3VzIGJyb2tlbiBzdGFja3MgbGVmdCBoYW5naW5nIGFmdGVyIGFuIGVycm9yXG5kb2NrZXIgY29tcG9zZSB1cCAtZFxuZG9ja2VyIGNvbXBvc2UgZXhlYyAtVCBiYWNrZW5kIGJhc2ggc2NyaXB0cy90ZXN0cy1zdGFydC5zaCBcIiRAXCJcbmRvY2tlciBjb21wb3NlIGRvd24gLXYgLS1yZW1vdmUtb3JwaGFuc1xuLi4uXG5QYXRoOiBiYWNrZW5kL2FwcC9tYWluLnB5XG5pbXBvcnQgc2VudHJ5X3Nka1xuZnJvbSBmYXN0YXBpIGltcG9ydCBGYXN0QVBJXG5mcm9tIGZhc3RhcGkucm91dGluZyBpbXBvcnQgQVBJUm91dGVcbmZyb20gc3RhcmxldHRlLm1pZGRsZXdhcmUuY29ycyBpbXBvcnQgQ09SU01pZGRsZXdhcmVcblxuZnJvbSBhcHAuYXBpLm1haW4gaW1wb3J0IGFwaV9yb3V0ZXJcbmZyb20gYXBwLmNvcmUuY29uZmlnIGltcG9ydCBzZXR0aW5nc1xuXG5cbmRlZiBjdXN0b21fZ2VuZXJhdGVfdW5pcXVlX2lkKHJvdXRlOiBBUElSb3V0ZSkgLT4gc3RyOlxuICAgIHJldHVybiBmXCJ7cm91dGUudGFnc1swXX0te3JvdXRlLm5hbWV9XCJcblxuXG5pZiBzZXR0aW5ncy5TRU5UUllfRFNOIGFuZCBzZXR0aW5ncy5FTlZJUk9OTUVOVCAhPSBcImxvY2FsXCI6XG4gICAgc2VudHJ5X3Nkay5pbml0KGRzbj1zdHIoc2V0dGluZ3MuU0VOVFJZX0RTTiksIGVuYWJsZV90cmFjaW5nPVRydWUpXG5cbmFwcCA9IEZhc3RBUEkoXG4gICAgdGl0bGU9c2V0dGluZ3MuUFJPSkVDVF9OQU1FLFxuICAgIG9wZW5hcGlfdXJsPWZcIntzZXR0aW5ncy5BUElfVjFfU1RSfS9vcGVuYXBpLmpzb25cIixcbiAgICBnZW5lcmF0ZV91bmlxdWVfaWRfZnVuY3Rpb249Y3VzdG9tX2dlbmVyYXRlX3VuaXF1ZV9pZCxcbilcblxuIyBTZXQgYWxsIENPUlMgZW5hYmxlZCBvcmlnaW5zXG5pZiBzZXR0aW5ncy5hbGxfY29yc19vcmlnaW5zOlxuICAgIGFwcC5hZGRfbWlkZGxld2FyZShcbiAgICAgICAgQ09SU01pZGRsZXdhcmUsXG4gICAgICAgIGFsbG93X29yaWdpbnM9c2V0dGluZ3MuYWxsX2NvcnNfb3JpZ2lucyxcbiAgICAgICAgYWxsb3dfY3JlZGVudGlhbHM9VHJ1ZSxcbiAgICAgICAgYWxsb3dfbWV0aG9kcz1bXCIqXCJdLFxuICAgICAgICBhbGxvd19oZWFkZXJzPVtcIipcIl0sXG4gICAgKVxuXG5hcHAuaW5jbHVkZV9yb3V0ZXIoYXBpX3JvdXRlciwgcHJlZml4PXNldHRpbmdzLkFQSV9WMV9TVFIpXG4uLi5cblBhdGg6IGRvY2tlci1jb21wb3NlLnltbFxuc2VydmljZXM6XG5cbiAgZGI6XG4gICAgaW1hZ2U6IHBvc3RncmVzOjEyXG4gICAgcmVzdGFydDogYWx3YXlzXG4gICAgaGVhbHRoY2hlY2s6XG4gICAgICB0ZXN0OiBbXCJDTUQtU0hFTExcIiwgXCJwZ19pc3JlYWR5IC1VICR7UE9TVEdSRVNfVVNFUn0gLWQgJHtQT1NUR1JFU19EQn1cIl1cbiAgICAgIGludGVydmFsOiAxMHNcbiAgICAgIHJldHJpZXM6IDVcbiAgICAgIHN0YXJ0X3BlcmlvZDogMzBzXG4gICAgICB0aW1lb3V0OiAxMHNcbiAgICB2b2x1bWVzOlxuICAgICAgLSBhcHAtZGItZGF0YTovdmFyL2xpYi9wb3N0Z3Jlc3FsL2RhdGEvcGdkYXRhXG4gICAgZW52X2ZpbGU6XG4gICAgICAtIC5lbnZcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgIC0gUEdEQVRBPS92YXIvbGliL3Bvc3RncmVzcWwvZGF0YS9wZ2RhdGFcbiAgICAgIC0gUE9TVEdSRVNfUEFTU1dPUkQ9JHtQT1NUR1JFU19QQVNTV09SRD9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBQT1NUR1JFU19VU0VSPSR7UE9TVEdSRVNfVVNFUj9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBQT1NUR1JFU19EQj0ke1BPU1RHUkVTX0RCP1ZhcmlhYmxlIG5vdCBzZXR9XG5cbiAgYWRtaW5lcjpcbiAgICBpbWFnZTogYWRtaW5lclxuICAgIHJlc3RhcnQ6IGFsd2F5c1xuICAgIG5ldHdvcmtzOlxuICAgICAgLSB0cmFlZmlrLXB1YmxpY1xuICAgICAgLSBkZWZhdWx0XG4gICAgZGVwZW5kc19vbjpcbiAgICAgIC0gZGJcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgIC0gQURNSU5FUl9ERVNJR049cGVwYS1saW5oYS1kYXJrXG4gICAgbGFiZWxzOlxuICAgICAgLSB0cmFlZmlrLmVuYWJsZT10cnVlXG4gICAgICAtIHRyYWVmaWsuZG9ja2VyLm5ldHdvcms9dHJhZWZpay1wdWJsaWNcbiAgICAgIC0gdHJhZWZpay5jb25zdHJhaW50LWxhYmVsPXRyYWVmaWstcHVibGljXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1hZG1pbmVyLWh0dHAucnVsZT1Ib3N0KGBhZG1pbmVyLiR7RE9NQUlOP1ZhcmlhYmxlIG5vdCBzZXR9YClcbiAgICAgIC0gdHJhZWZpay5odHRwLnJvdXRlcnMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWFkbWluZXItaHR0cC5lbnRyeXBvaW50cz1odHRwXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1hZG1pbmVyLWh0dHAubWlkZGxld2FyZXM9aHR0cHMtcmVkaXJlY3RcbiAgICAgIC0gdHJhZWZpay5odHRwLnJvdXRlcnMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWFkbWluZXItaHR0cHMucnVsZT1Ib3N0KGBhZG1pbmVyLiR7RE9NQUlOP1ZhcmlhYmxlIG5vdCBzZXR9YClcbiAgICAgIC0gdHJhZWZpay5odHRwLnJvdXRlcnMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWFkbWluZXItaHR0cHMuZW50cnlwb2ludHM9aHR0cHNcbi4uLlxuXG4gIHByZXN0YXJ0OlxuICAgIGltYWdlOiAnJHtET0NLRVJfSU1BR0VfQkFDS0VORD9WYXJpYWJsZSBub3Qgc2V0fToke1RBRy1sYXRlc3R9J1xuICAgIGJ1aWxkOlxuICAgICAgY29udGV4dDogLi9iYWNrZW5kXG4gICAgbmV0d29ya3M6XG4gICAgICAtIHRyYWVmaWstcHVibGljXG4gICAgICAtIGRlZmF1bHRcbiAgICBkZXBlbmRzX29uOlxuICAgICAgZGI6XG4gICAgICAgIGNvbmRpdGlvbjogc2VydmljZV9oZWFsdGh5XG4gICAgICAgIHJlc3RhcnQ6IHRydWVcbiAgICBjb21tYW5kOiBiYXNoIHNjcmlwdHMvcHJlc3RhcnQuc2hcbiAgICBlbnZfZmlsZTpcbiAgICAgIC0gLmVudlxuICAgIGVudmlyb25tZW50OlxuICAgICAgLSBET01BSU49JHtET01BSU59XG4gICAgICAtIEZST05URU5EX0hPU1Q9JHtGUk9OVEVORF9IT1NUP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIEVOVklST05NRU5UPSR7RU5WSVJPTk1FTlR9XG4gICAgICAtIEJBQ0tFTkRfQ09SU19PUklHSU5TPSR7QkFDS0VORF9DT1JTX09SSUdJTlN9XG4gICAgICAtIFNFQ1JFVF9LRVk9JHtTRUNSRVRfS0VZP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIEZJUlNUX1NVUEVSVVNFUj0ke0ZJUlNUX1NVUEVSVVNFUj9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBGSVJTVF9TVVBFUlVTRVJfUEFTU1dPUkQ9JHtGSVJTVF9TVVBFUlVTRVJfUEFTU1dPUkQ/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gU01UUF9IT1NUPSR7U01UUF9IT1NUfVxuICAgICAgLSBTTVRQX1VTRVI9JHtTTVRQX1VTRVJ9XG4gICAgICAtIFNNVFBfUEFTU1dPUkQ9JHtTTVRQX1BBU1NXT1JEfVxuICAgICAgLSBFTUFJTFNfRlJPTV9FTUFJTD0ke0VNQUlMU19GUk9NX0VNQUlMfVxuICAgICAgLSBQT1NUR1JFU19TRVJWRVI9ZGJcbiAgICAgIC0gUE9TVEdSRVNfUE9SVD0ke1BPU1RHUkVTX1BPUlR9XG4gICAgICAtIFBPU1RHUkVTX0RCPSR7UE9TVEdSRVNfREJ9XG4gICAgICAtIFBPU1RHUkVTX1VTRVI9JHtQT1NUR1JFU19VU0VSP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIFBPU1RHUkVTX1BBU1NXT1JEPSR7UE9TVEdSRVNfUEFTU1dPUkQ/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gU0VOVFJZX0RTTj0ke1NFTlRSWV9EU059XG5cbiAgYmFja2VuZDpcbiAgICBpbWFnZTogJyR7RE9DS0VSX0lNQUdFX0JBQ0tFTkQ/VmFyaWFibGUgbm90IHNldH06JHtUQUctbGF0ZXN0fSdcbiAgICByZXN0YXJ0OiBhbHdheXNcbiAgICBuZXR3b3JrczpcbiAgICAgIC0gdHJhZWZpay1wdWJsaWNcbiAgICAgIC0gZGVmYXVsdFxuICAgIGRlcGVuZHNfb246XG4gICAgICBkYjpcbiAgICAgICAgY29uZGl0aW9uOiBzZXJ2aWNlX2hlYWx0aHlcbiAgICAgICAgcmVzdGFydDogdHJ1ZVxuICAgICAgcHJlc3RhcnQ6XG4gICAgICAgIGNvbmRpdGlvbjogc2VydmljZV9jb21wbGV0ZWRfc3VjY2Vzc2Z1bGx5XG4gICAgZW52X2ZpbGU6XG4gICAgICAtIC5lbnZcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgIC0gRE9NQUlOPSR7RE9NQUlOfVxuICAgICAgLSBGUk9OVEVORF9IT1NUPSR7RlJPTlRFTkRfSE9TVD9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBFTlZJUk9OTUVOVD0ke0VOVklST05NRU5UfVxuICAgICAgLSBCQUNLRU5EX0NPUlNfT1JJR0lOUz0ke0JBQ0tFTkRfQ09SU19PUklHSU5TfVxuICAgICAgLSBTRUNSRVRfS0VZPSR7U0VDUkVUX0tFWT9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBGSVJTVF9TVVBFUlVTRVI9JHtGSVJTVF9TVVBFUlVTRVI/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gRklSU1RfU1VQRVJVU0VSX1BBU1NXT1JEPSR7RklSU1RfU1VQRVJVU0VSX1BBU1NXT1JEP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIFNNVFBfSE9TVD0ke1NNVFBfSE9TVH1cbiAgICAgIC0gU01UUF9VU0VSPSR7U01UUF9VU0VSfVxuICAgICAgLSBTTVRQX1BBU1NXT1JEPSR7U01UUF9QQVNTV09SRH1cbiAgICAgIC0gRU1BSUxTX0ZST01fRU1BSUw9JHtFTUFJTFNfRlJPTV9FTUFJTH1cbiAgICAgIC0gUE9TVEdSRVNfU0VSVkVSPWRiXG4gICAgICAtIFBPU1RHUkVTX1BPUlQ9JHtQT1NUR1JFU19QT1JUfVxuICAgICAgLSBQT1NUR1JFU19EQj0ke1BPU1RHUkVTX0RCfVxuICAgICAgLSBQT1NUR1JFU19VU0VSPSR7UE9TVEdSRVNfVVNFUj9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBQT1NUR1JFU19QQVNTV09SRD0ke1BPU1RHUkVTX1BBU1NXT1JEP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIFNFTlRSWV9EU049JHtTRU5UUllfRFNOfVxuXG4gICAgaGVhbHRoY2hlY2s6XG4gICAgICB0ZXN0OiBbXCJDTURcIiwgXCJjdXJsXCIsIFwiLWZcIiwgXCJodHRwOi8vbG9jYWxob3N0OjgwMDAvYXBpL3YxL3V0aWxzL2hlYWx0aC1jaGVjay9cIl1cbiAgICAgIGludGVydmFsOiAxMHNcbiAgICAgIHRpbWVvdXQ6IDVzXG4gICAgICByZXRyaWVzOiA1XG5cbiAgICBidWlsZDpcbiAgICAgIGNvbnRleHQ6IC4vYmFja2VuZFxuICAgIGxhYmVsczpcbiAgICAgIC0gdHJhZWZpay5lbmFibGU9dHJ1ZVxuICAgICAgLSB0cmFlZmlrLmRvY2tlci5uZXR3b3JrPXRyYWVmaWstcHVibGljXG4gICAgICAtIHRyYWVmaWsuY29uc3RyYWludC1sYWJlbD10cmFlZmlrLXB1YmxpY1xuXG4gICAgICAtIHRyYWVmaWsuaHR0cC5zZXJ2aWNlcy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tYmFja2VuZC5sb2FkYmFsYW5jZXIuc2VydmVyLnBvcnQ9ODAwMFxuXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1iYWNrZW5kLWh0dHAucnVsZT1Ib3N0KGBhcGkuJHtET01BSU4/VmFyaWFibGUgbm90IHNldH1gKVxuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tYmFja2VuZC1odHRwLmVudHJ5cG9pbnRzPWh0dHBcbi4uLlxuXG4gIGZyb250ZW5kOlxuICAgIGltYWdlOiAnJHtET0NLRVJfSU1BR0VfRlJPTlRFTkQ/VmFyaWFibGUgbm90IHNldH06JHtUQUctbGF0ZXN0fSdcbiAgICByZXN0YXJ0OiBhbHdheXNcbiAgICBuZXR3b3JrczpcbiAgICAgIC0gdHJhZWZpay1wdWJsaWNcbiAgICAgIC0gZGVmYXVsdFxuICAgIGJ1aWxkOlxuICAgICAgY29udGV4dDogLi9mcm9udGVuZFxuICAgICAgYXJnczpcbiAgICAgICAgLSBWSVRFX0FQSV9VUkw9aHR0cHM6Ly9hcGkuJHtET01BSU4/VmFyaWFibGUgbm90IHNldH1cbiAgICAgICAgLSBOT0RFX0VOVj1wcm9kdWN0aW9uXG4gICAgbGFiZWxzOlxuICAgICAgLSB0cmFlZmlrLmVuYWJsZT10cnVlXG4gICAgICAtIHRyYWVmaWsuZG9ja2VyLm5ldHdvcms9dHJhZWZpay1wdWJsaWNcbiAgICAgIC0gdHJhZWZpay5jb25zdHJhaW50LWxhYmVsPXRyYWVmaWstcHVibGljXG5cbiAgICAgIC0gdHJhZWZpay5odHRwLnNlcnZpY2VzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1mcm9udGVuZC5sb2FkYmFsYW5jZXIuc2VydmVyLnBvcnQ9ODBcblxuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tZnJvbnRlbmQtaHR0cC5ydWxlPUhvc3QoYGRhc2hib2FyZC4ke0RPTUFJTj9WYXJpYWJsZSBub3Qgc2V0fWApXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1mcm9udGVuZC1odHRwLmVudHJ5cG9pbnRzPWh0dHBcblxuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tZnJvbnRlbmQtaHR0cHMucnVsZT1Ib3N0KGBkYXNoYm9hcmQuJHtET01BSU4/VmFyaWFibGUgbm90IHNldH1gKVxuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tZnJvbnRlbmQtaHR0cHMuZW50cnlwb2ludHM9aHR0cHNcbiAgICAgIC0gdHJhZWZpay5odHRwLnJvdXRlcnMuJHtTVEFDS19OQU1FP1ZhcmlhYmxlIG5vdCBzZXR9LWZyb250ZW5kLWh0dHBzLnRscz10cnVlXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1mcm9udGVuZC1odHRwcy50bHMuY2VydHJlc29sdmVyPWxlXG5cbiAgICAgICMgRW5hYmxlIHJlZGlyZWN0aW9uIGZvciBIVFRQIGFuZCBIVFRQU1xuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tZnJvbnRlbmQtaHR0cC5taWRkbGV3YXJlcz1odHRwcy1yZWRpcmVjdFxudm9sdW1lczpcbiAgYXBwLWRiLWRhdGE6XG5cbm5ldHdvcmtzOlxuICB0cmFlZmlrLXB1YmxpYzpcbiAgICAjIEFsbG93IHNldHRpbmcgaXQgdG8gZmFsc2UgZm9yIHRlc3RpbmdcbiAgICBleHRlcm5hbDogdHJ1ZVxuLi4uXG5QYXRoOiBiYWNrZW5kL2FwcC9hcGkvbWFpbi5weVxuZnJvbSBmYXN0YXBpIGltcG9ydCBBUElSb3V0ZXJcblxuZnJvbSBhcHAuYXBpLnJvdXRlcyBpbXBvcnQgaXRlbXMsIGxvZ2luLCBwcml2YXRlLCB1c2VycywgdXRpbHMsIGNoaWxkcmVuLCBncm93dGhfcmVjb3JkcywgZG9jdW1lbnRzLCBjaGF0XG5mcm9tIGFwcC5jb3JlLmNvbmZpZyBpbXBvcnQgc2V0dGluZ3NcblxuYXBpX3JvdXRlciA9IEFQSVJvdXRlcigpXG5hcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKGxvZ2luLnJvdXRlcilcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIodXNlcnMucm91dGVyKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcih1dGlscy5yb3V0ZXIpXG5hcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKGl0ZW1zLnJvdXRlcilcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIoY2hpbGRyZW4ucm91dGVyLCBwcmVmaXg9XCIvY2hpbGRyZW5cIiwgdGFncz1bXCJjaGlsZHJlblwiXSlcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIoZ3Jvd3RoX3JlY29yZHMucm91dGVyLCBwcmVmaXg9XCIvZ3Jvd3RoLXJlY29yZHNcIiwgdGFncz1bXCJncm93dGgtcmVjb3Jkc1wiXSlcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIoZG9jdW1lbnRzLnJvdXRlciwgcHJlZml4PVwiL2RvY3VtZW50c1wiLCB0YWdzPVtcImRvY3VtZW50c1wiXSlcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIoY2hhdC5yb3V0ZXIsIHByZWZpeD1cIi9jaGF0XCIsIHRhZ3M9W1wiY2hhdFwiXSlcblxuXG5pZiBzZXR0aW5ncy5FTlZJUk9OTUVOVCA9PSBcImxvY2FsXCI6XG4gICAgYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihwcml2YXRlLnJvdXRlcilcbi4uLlxuUGF0aDogYmFja2VuZC9hcHAvY29yZS9jb25maWcucHlcbi4uLlxuICAgIEFQSV9WMV9TVFI6IHN0ciA9IFwiL2FwaS92MVwiXG4gICAgU0VDUkVUX0tFWTogc3RyID0gc2VjcmV0cy50b2tlbl91cmxzYWZlKDMyKVxuICAgICMgNjAgbWludXRlcyAqIDI0IGhvdXJzICogOCBkYXlzID0gOCBkYXlzXG4gICAgQUNDRVNTX1RPS0VOX0VYUElSRV9NSU5VVEVTOiBpbnQgPSA2MCAqIDI0ICogOFxuICAgIEZST05URU5EX0hPU1Q6IHN0ciA9IFwiaHR0cDovL2xvY2FsaG9zdDo1MTczXCJcbiAgICBFTlZJUk9OTUVOVDogTGl0ZXJhbFtcImxvY2FsXCIsIFwic3RhZ2luZ1wiLCBcInByb2R1Y3Rpb25cIl0gPSBcImxvY2FsXCJcblxuICAgICMgTExNIHNldHRpbmdzXG4gICAgT1BFTlJPVVRFUl9BUElfS0VZOiBzdHIgPSBcIlwiXG4gICAgREVGQVVMVF9MTE1fTU9ERUw6IHN0ciA9IFwib3BlbmFpL2dwdC00by1taW5pXCJcbiAgICBPUEVOUk9VVEVSX0JBU0VfVVJMOiBzdHIgPSBcImh0dHBzOi8vb3BlbnJvdXRlci5haS9hcGkvdjFcIlxuXG4gICAgIyBSQUcgc2V0dGluZ3NcbiAgICBNQVhfRE9DVU1FTlRTX1BFUl9VU0VSOiBpbnQgPSA1MFxuICAgIE1BWF9ET0NVTUVOVF9TSVpFX01COiBpbnQgPSAxMFxuXG4gICAgQkFDS0VORF9DT1JTX09SSUdJTlM6IEFubm90YXRlZFtcbiAgICAgICAgbGlzdFtBbnlVcmxdIHwgc3RyLCBCZWZvcmVWYWxpZGF0b3IocGFyc2VfY29ycylcbiAgICBdID0gW11cblxuICAgIEBjb21wdXRlZF9maWVsZCAgIyB0eXBlOiBpZ25vcmVbcHJvcC1kZWNvcmF0b3JdXG4gICAgQHByb3BlcnR5XG4gICAgZGVmIGFsbF9jb3JzX29yaWdpbnMoc2VsZikgLT4gbGlzdFtzdHJdOlxuICAgICAgICByZXR1cm4gW3N0cihvcmlnaW4pLnJzdHJpcChcIi9cIikgZm9yIG9yaWdpbiBpbiBzZWxmLkJBQ0tFTkRfQ09SU19PUklHSU5TXSArIFtcbiAgICAgICAgICAgIHNlbGYuRlJPTlRFTkRfSE9TVFxuICAgICAgICBdXG5cbiAgICBQUk9KRUNUX05BTUU6IHN0clxuICAgIFNFTlRSWV9EU046IEh0dHBVcmwgfCBOb25lID0gTm9uZVxuICAgIFBPU1RHUkVTX1NFUlZFUjogc3RyXG4gICAgUE9TVEdSRVNfUE9SVDogaW50ID0gNTQzMlxuICAgIFBPU1RHUkVTX1VTRVI6IHN0clxuICAgIFBPU1RHUkVTX1BBU1NXT1JEOiBzdHIgPSBcIlwiXG4gICAgUE9TVEdSRVNfREI6IHN0ciA9IFwiXCJcblxuICAgIEBjb21wdXRlZF9maWVsZCAgIyB0eXBlOiBpZ25vcmVbcHJvcC1kZWNvcmF0b3JdXG4gICAgQHByb3BlcnR5XG4gICAgZGVmIFNRTEFMQ0hFTVlfREFUQUJBU0VfVVJJKHNlbGYpIC0+IFBvc3RncmVzRHNuOlxuICAgICAgICByZXR1cm4gTXVsdGlIb3N0VXJsLmJ1aWxkKFxuICAgICAgICAgICAgc2NoZW1lPVwicG9zdGdyZXNxbCtwc3ljb3BnXCIsXG4gICAgICAgICAgICB1c2VybmFtZT1zZWxmLlBPU1RHUkVTX1VTRVIsXG4gICAgICAgICAgICBwYXNzd29yZD1zZWxmLlBPU1RHUkVTX1BBU1NXT1JELFxuICAgICAgICAgICAgaG9zdD1zZWxmLlBPU1RHUkVTX1NFUlZFUixcbiAgICAgICAgICAgIHBvcnQ9c2VsZi5QT1NUR1JFU19QT1JULFxuICAgICAgICAgICAgcGF0aD1zZWxmLlBPU1RHUkVTX0RCLFxuICAgICAgICApXG4uLi5cblBhdGg6IGZyb250ZW5kL3NyYy9tYWluLnRzeFxuaW1wb3J0IHtcbiAgTXV0YXRpb25DYWNoZSxcbiAgUXVlcnlDYWNoZSxcbiAgUXVlcnlDbGllbnQsXG4gIFF1ZXJ5Q2xpZW50UHJvdmlkZXIsXG59IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIlxuaW1wb3J0IHsgUm91dGVyUHJvdmlkZXIsIGNyZWF0ZVJvdXRlciB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3Qtcm91dGVyXCJcbmltcG9ydCBSZWFjdCwgeyBTdHJpY3RNb2RlIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tL2NsaWVudFwiXG5pbXBvcnQgeyByb3V0ZVRyZWUgfSBmcm9tIFwiLi9yb3V0ZVRyZWUuZ2VuXCJcblxuaW1wb3J0IHsgQXBpRXJyb3IsIE9wZW5BUEkgfSBmcm9tIFwiLi9jbGllbnRcIlxuaW1wb3J0IHsgQ3VzdG9tUHJvdmlkZXIgfSBmcm9tIFwiLi9jb21wb25lbnRzL3VpL3Byb3ZpZGVyXCJcblxuT3BlbkFQSS5CQVNFID0gaW1wb3J0Lm1ldGEuZW52LlZJVEVfQVBJX1VSTFxuT3BlbkFQSS5UT0tFTiA9IGFzeW5jICgpID0+IHtcbiAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiYWNjZXNzX3Rva2VuXCIpIHx8IFwiXCJcbn1cblxuY29uc3QgaGFuZGxlQXBpRXJyb3IgPSAoZXJyb3I6IEVycm9yKSA9PiB7XG4gIGlmIChlcnJvciBpbnN0YW5jLi4uIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMTk5ZmQ5NzEtMzlmZi00MTFiLWI3NmMtMjgwOGNkMzgwYTk5O3Rvb2x1X3ZydHhfMDEzSjdHajlzM0R1aXg2RFhKdUo4MkFTIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IGJhY2tlbmQvYXBwL2NvcmUvY29uZmlnLnB5XG5pbXBvcnQgc2VjcmV0c1xuaW1wb3J0IHdhcm5pbmdzXG5mcm9tIHR5cGluZyBpbXBvcnQgQW5ub3RhdGVkLCBBbnksIExpdGVyYWxcblxuZnJvbSBweWRhbnRpYyBpbXBvcnQgKFxuICAgIEFueVVybCxcbiAgICBCZWZvcmVWYWxpZGF0b3IsXG4gICAgRW1haWxTdHIsXG4gICAgSHR0cFVybCxcbiAgICBQb3N0Z3Jlc0RzbixcbiAgICBjb21wdXRlZF9maWVsZCxcbiAgICBtb2RlbF92YWxpZGF0b3IsXG4pXG5mcm9tIHB5ZGFudGljX2NvcmUgaW1wb3J0IE11bHRpSG9zdFVybFxuZnJvbSBweWRhbnRpY19zZXR0aW5ncyBpbXBvcnQgQmFzZVNldHRpbmdzLCBTZXR0aW5nc0NvbmZpZ0RpY3RcbmZyb20gdHlwaW5nX2V4dGVuc2lvbnMgaW1wb3J0IFNlbGZcblxuXG5kZWYgcGFyc2VfY29ycyh2OiBBbnkpIC0+IGxpc3Rbc3RyXSB8IHN0cjpcbiAgICBpZiBpc2luc3RhbmNlKHYsIHN0cikgYW5kIG5vdCB2LnN0YXJ0c3dpdGgoXCJbXCIpOlxuICAgICAgICByZXR1cm4gW2kuc3RyaXAoKSBmb3IgaSBpbiB2LnNwbGl0KFwiLFwiKV1cbiAgICBlbGlmIGlzaW5zdGFuY2UodiwgbGlzdCB8IHN0cik6XG4gICAgICAgIHJldHVybiB2XG4gICAgcmFpc2UgVmFsdWVFcnJvcih2KVxuXG5cbmNsYXNzIFNldHRpbmdzKEJhc2VTZXR0aW5ncyk6XG4gICAgbW9kZWxfY29uZmlnID0gU2V0dGluZ3NDb25maWdEaWN0KFxuICAgICAgICAjIFVzZSB0b3AgbGV2ZWwgLmVudiBmaWxlIChvbmUgbGV2ZWwgYWJvdmUgLi9iYWNrZW5kLylcbiAgICAgICAgZW52X2ZpbGU9XCIuLi8uZW52XCIsXG4gICAgICAgIGVudl9pZ25vcmVfZW1wdHk9VHJ1ZSxcbiAgICAgICAgZXh0cmE9XCJpZ25vcmVcIixcbiAgICApXG4gICAgQVBJX1YxX1NUUjogc3RyID0gXCIvYXBpL3YxXCJcbiAgICBTRUNSRVRfS0VZOiBzdHIgPSBzZWNyZXRzLnRva2VuX3VybHNhZmUoMzIpXG4gICAgIyA2MCBtaW51dGVzICogMjQgaG91cnMgKiA4IGRheXMgPSA4IGRheXNcbiAgICBBQ0NFU1NfVE9LRU5fRVhQSVJFX01JTlVURVM6IGludCA9IDYwICogMjQgKiA4XG4gICAgRlJPTlRFTkRfSE9TVDogc3RyID0gXCJodHRwOi8vbG9jYWxob3N0OjUxNzNcIlxuICAgIEVOVklST05NRU5UOiBMaXRlcmFsW1wibG9jYWxcIiwgXCJzdGFnaW5nXCIsIFwicHJvZHVjdGlvblwiXSA9IFwibG9jYWxcIlxuXG4gICAgIyBMTE0gc2V0dGluZ3NcbiAgICBPUEVOUk9VVEVSX0FQSV9LRVk6IHN0ciA9IFwiXCJcbiAgICBERUZBVUxUX0xMTV9NT0RFTDogc3RyID0gXCJvcGVuYWkvZ3B0LTRvLW1pbmlcIlxuICAgIE9QRU5ST1VURVJfQkFTRV9VUkw6IHN0ciA9IFwiaHR0cHM6Ly9vcGVucm91dGVyLmFpL2FwaS92MVwiXG5cbiAgICAjIFJBRyBzZXR0aW5nc1xuICAgIE1BWF9ET0NVTUVOVFNfUEVSX1VTRVI6IGludCA9IDUwXG4gICAgTUFYX0RPQ1VNRU5UX1NJWkVfTUI6IGludCA9IDEwXG5cbiAgICBCQUNLRU5EX0NPUlNfT1JJR0lOUzogQW5ub3RhdGVkW1xuICAgICAgICBsaXN0W0FueVVybF0gfCBzdHIsIEJlZm9yZVZhbGlkYXRvcihwYXJzZV9jb3JzKVxuICAgIF0gPSBbXVxuXG4gICAgQGNvbXB1dGVkX2ZpZWxkICAjIHR5cGU6IGlnbm9yZVtwcm9wLWRlY29yYXRvcl1cbiAgICBAcHJvcGVydHlcbiAgICBkZWYgYWxsX2NvcnNfb3JpZ2lucyhzZWxmKSAtPiBsaXN0W3N0cl06XG4gICAgICAgIHJldHVybiBbc3RyKG9yaWdpbikucnN0cmlwKFwiL1wiKSBmb3Igb3JpZ2luIGluIHNlbGYuQkFDS0VORF9DT1JTX09SSUdJTlNdICsgW1xuICAgICAgICAgICAgc2VsZi5GUk9OVEVORF9IT1NUXG4gICAgICAgIF1cblxuICAgIFBST0pFQ1RfTkFNRTogc3RyXG4gICAgU0VOVFJZX0RTTjogSHR0cFVybCB8IE5vbmUgPSBOb25lXG4gICAgUE9TVEdSRVNfU0VSVkVSOiBzdHJcbiAgICBQT1NUR1JFU19QT1JUOiBpbnQgPSA1NDMyXG4gICAgUE9TVEdSRVNfVVNFUjogc3RyXG4gICAgUE9TVEdSRVNfUEFTU1dPUkQ6IHN0ciA9IFwiXCJcbiAgICBQT1NUR1JFU19EQjogc3RyID0gXCJcIlxuXG4gICAgQGNvbXB1dGVkX2ZpZWxkICAjIHR5cGU6IGlnbm9yZVtwcm9wLWRlY29yYXRvcl1cbiAgICBAcHJvcGVydHlcbiAgICBkZWYgU1FMQUxDSEVNWV9EQVRBQkFTRV9VUkkoc2VsZikgLT4gUG9zdGdyZXNEc246XG4gICAgICAgIHJldHVybiBNdWx0aUhvc3RVcmwuYnVpbGQoXG4gICAgICAgICAgICBzY2hlbWU9XCJwb3N0Z3Jlc3FsK3BzeWNvcGdcIixcbiAgICAgICAgICAgIHVzZXJuYW1lPXNlbGYuUE9TVEdSRVNfVVNFUixcbiAgICAgICAgICAgIHBhc3N3b3JkPXNlbGYuUE9TVEdSRVNfUEFTU1dPUkQsXG4gICAgICAgICAgICBob3N0PXNlbGYuUE9TVEdSRVNfU0VSVkVSLFxuICAgICAgICAgICAgcG9ydD1zZWxmLlBPU1RHUkVTX1BPUlQsXG4gICAgICAgICAgICBwYXRoPXNlbGYuUE9TVEdSRVNfREIsXG4gICAgICAgIClcblxuICAgIFNNVFBfVExTOiBib29sID0gVHJ1ZVxuICAgIFNNVFBfU1NMOiBib29sID0gRmFsc2VcbiAgICBTTVRQX1BPUlQ6IGludCA9IDU4N1xuICAgIFNNVFBfSE9TVDogc3RyIHwgTm9uZSA9IE5vbmVcbiAgICBTTVRQX1VTRVI6IHN0ciB8IE5vbmUgPSBOb25lXG4gICAgU01UUF9QQVNTV09SRDogc3RyIHwgTm9uZSA9IE5vbmVcbiAgICBFTUFJTFNfRlJPTV9FTUFJTDogRW1haWxTdHIgfCBOb25lID0gTm9uZVxuICAgIEVNQUlMU19GUk9NX05BTUU6IEVtYWlsU3RyIHwgTm9uZSA9IE5vbmVcblxuICAgIEBtb2RlbF92YWxpZGF0b3IobW9kZT1cImFmdGVyXCIpXG4gICAgZGVmIF9zZXRfZGVmYXVsdF9lbWFpbHNfZnJvbShzZWxmKSAtPiBTZWxmOlxuICAgICAgICBpZiBub3Qgc2VsZi5FTUFJTFNfRlJPTV9OQU1FOlxuICAgICAgICAgICAgc2VsZi5FTUFJTFNfRlJPTV9OQU1FID0gc2VsZi5QUk9KRUNUX05BTUVcbiAgICAgICAgcmV0dXJuIHNlbGZcblxuICAgIEVNQUlMX1JFU0VUX1RPS0VOX0VYUElSRV9IT1VSUzogaW50ID0gNDhcblxuICAgIEBjb21wdXRlZF9maWVsZCAgIyB0eXBlOiBpZ25vcmVbcHJvcC1kZWNvcmF0b3JdXG4gICAgQHByb3BlcnR5XG4gICAgZGVmIGVtYWlsc19lbmFibGVkKHNlbGYpIC0+IGJvb2w6XG4gICAgICAgIHJldHVybiBib29sKHNlbGYuU01UUF9IT1NUIGFuZCBzZWxmLkVNQUlMU19GUk9NX0VNQUlMKVxuXG4gICAgRU1BSUxfVEVTVF9VU0VSOiBFbWFpbFN0ciA9IFwidGVzdEBleGFtcGxlLmNvbVwiXG4gICAgRklSU1RfU1VQRVJVU0VSOiBFbWFpbFN0clxuICAgIEZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRDogc3RyXG5cbiAgICBkZWYgX2NoZWNrX2RlZmF1bHRfc2VjcmV0KHNlbGYsIHZhcl9uYW1lOiBzdHIsIHZhbHVlOiBzdHIgfCBOb25lKSAtPiBOb25lOlxuICAgICAgICBpZiB2YWx1ZSA9PSBcImNoYW5nZXRoaXNcIjpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAoXG4gICAgICAgICAgICAgICAgZidUaGUgdmFsdWUgb2Yge3Zhcl9uYW1lfSBpcyBcImNoYW5nZXRoaXNcIiwgJ1xuICAgICAgICAgICAgICAgIFwiZm9yIHNlY3VyaXR5LCBwbGVhc2UgY2hhbmdlIGl0LCBhdCBsZWFzdCBmb3IgZGVwbG95bWVudHMuXCJcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGlmIHNlbGYuRU5WSVJPTk1FTlQgPT0gXCJsb2NhbFwiOlxuICAgICAgICAgICAgICAgIHdhcm5pbmdzLndhcm4obWVzc2FnZSwgc3RhY2tsZXZlbD0xKVxuICAgICAgICAgICAgZWxzZTpcbiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKG1lc3NhZ2UpXG5cbiAgICBAbW9kZWxfdmFsaWRhdG9yKG1vZGU9XCJhZnRlclwiKVxuICAgIGRlZiBfZW5mb3JjZV9ub25fZGVmYXVsdF9zZWNyZXRzKHNlbGYpIC0+IFNlbGY6XG4gICAgICAgIHNlbGYuX2NoZWNrX2RlZmF1bHRfc2VjcmV0KFwiU0VDUkVUX0tFWVwiLCBzZWxmLlNFQ1JFVF9LRVkpXG4gICAgICAgIHNlbGYuX2NoZWNrX2RlZmF1bHRfc2VjcmV0KFwiUE9TVEdSRVNfUEFTU1dPUkRcIiwgc2VsZi5QT1NUR1JFU19QQVNTV09SRClcbiAgICAgICAgc2VsZi5fY2hlY2tfZGVmYXVsdF9zZWNyZXQoXG4gICAgICAgICAgICBcIkZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRFwiLCBzZWxmLkZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRFxuICAgICAgICApXG5cbiAgICAgICAgcmV0dXJuIHNlbGZcblxuXG5zZXR0aW5ncyA9IFNldHRpbmdzKCkgICMgdHlwZTogaWdub3JlXG4uLi5cblBhdGg6IC5lbnZcbiMgRG9tYWluXG4jIFRoaXMgd291bGQgYmUgc2V0IHRvIHRoZSBwcm9kdWN0aW9uIGRvbWFpbiB3aXRoIGFuIGVudiB2YXIgb24gZGVwbG95bWVudFxuIyB1c2VkIGJ5IFRyYWVmaWsgdG8gdHJhbnNtaXQgdHJhZmZpYyBhbmQgYXFjdWlyZSBUTFMgY2VydGlmaWNhdGVzXG5ET01BSU49bG9jYWxob3N0XG4jIFRvIHRlc3QgdGhlIGxvY2FsIFRyYWVmaWsgY29uZmlnXG4jIERPTUFJTj1sb2NhbGhvc3QudGlhbmdvbG8uY29tXG5cbiMgVXNlZCBieSB0aGUgYmFja2VuZCB0byBnZW5lcmF0ZSBsaW5rcyBpbiBlbWFpbHMgdG8gdGhlIGZyb250ZW5kXG5GUk9OVEVORF9IT1NUPWh0dHA6Ly9sb2NhbGhvc3Q6NTE3M1xuIyBJbiBzdGFnaW5nIGFuZCBwcm9kdWN0aW9uLCBzZXQgdGhpcyBlbnYgdmFyIHRvIHRoZSBmcm9udGVuZCBob3N0LCBlLmcuXG4jIEZST05URU5EX0hPU1Q9aHR0cHM6Ly9kYXNoYm9hcmQuZXhhbXBsZS5jb21cblxuIyBFbnZpcm9ubWVudDogbG9jYWwsIHN0YWdpbmcsIHByb2R1Y3Rpb25cbkVOVklST05NRU5UPWxvY2FsXG5cblBST0pFQ1RfTkFNRT1cIlBhcmVudGluZyBBc3Npc3RhbnRcIlxuU1RBQ0tfTkFNRT1mdWxsLXN0YWNrLWZhc3RhcGktcHJvamVjdFxuXG4jIEJhY2tlbmRcbkJBQ0tFTkRfQ09SU19PUklHSU5TPVwiaHR0cDovL2xvY2FsaG9zdCxodHRwOi8vbG9jYWxob3N0OjUxNzMsaHR0cHM6Ly9sb2NhbGhvc3QsaHR0cHM6Ly9sb2NhbGhvc3Q6NTE3MyxodHRwOi8vbG9jYWxob3N0LnRpYW5nb2xvLmNvbVwiXG5TRUNSRVRfS0VZPUJhVHNaMDJPV3ZZSnpCUlNrQ2ZIX2NiNzF2ejJpLW1Uck9CbTYzM2xHbUlcbkZJUlNUX1NVUEVSVVNFUj0xMzIxNjY5ODk4N0AxNjMuY29tXG5GSVJTVF9TVVBFUlVTRVJfUEFTU1dPUkQ9R3Vhbm1vITAxXG5cbiMgRW1haWxzXG5TTVRQX0hPU1Q9XG5TTVRQX1VTRVI9XG5TTVRQX1BBU1NXT1JEPVxuRU1BSUxTX0ZST01fRU1BSUw9aW5mb0BleGFtcGxlLmNvbVxuU01UUF9UTFM9VHJ1ZVxuU01UUF9TU0w9RmFsc2VcblNNVFBfUE9SVD01ODdcblxuIyBQb3N0Z3Jlc1xuUE9TVEdSRVNfU0VSVkVSPWF3cy0wLWFwLW5vcnRoZWFzdC0xLnBvb2xlci5zdXBhYmFzZS5jb21cblBPU1RHUkVTX1BPUlQ9NjU0M1xuUE9TVEdSRVNfREI9cG9zdGdyZXNcblBPU1RHUkVTX1VTRVI9cG9zdGdyZXMucHZhZXRjcGZ1aGV2Z2VtY3Foc2hcblBPU1RHUkVTX1BBU1NXT1JEPUd1YW5tbyEwMVxuXG5TRU5UUllfRFNOPVxuXG4jIExMTSBTZXR0aW5nc1xuT1BFTlJPVVRFUl9BUElfS0VZPXNrLW9yLXYxLTk4MTg0NGQ4MWNiMTAwNGUwMWNlZTcyZjYzYjdiYmJlNGM5MGFlZWQwZjRhODc0ZjMwZDg1MDFiNWQwMGI2YTVcbkRFRkFVTFRfTExNX01PREVMPWRlZXBzZWVrL2RlZXBzZWVrLWNoYXQtdjMtMDMyNDpmcmVlXG5PUEVOUk9VVEVSX0JBU0VfVVJMPWh0dHBzOi8vb3BlbnJvdXRlci5haS9hcGkvdjFcblxuIyBDb25maWd1cmUgdGhlc2Ugd2l0aCB5b3VyIG93biBEb2NrZXIgcmVnaXN0cnkgaW1hZ2VzXG5ET0NLRVJfSU1BR0VfQkFDS0VORD1iYWNrZW5kXG5ET0NLRVJfSU1BR0VfRlJPTlRFTkQ9ZnJvbnRlbmRcbi4uLlxuUGF0aDogZnJvbnRlbmQvdGVzdHMvY29uZmlnLnRzXG5pbXBvcnQgcGF0aCBmcm9tIFwibm9kZTpwYXRoXCJcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tIFwibm9kZTp1cmxcIlxuaW1wb3J0IGRvdGVudiBmcm9tIFwiZG90ZW52XCJcblxuY29uc3QgX19maWxlbmFtZSA9IGZpbGVVUkxUb1BhdGgoaW1wb3J0Lm1ldGEudXJsKVxuY29uc3QgX19kaXJuYW1lID0gcGF0aC5kaXJuYW1lKF9fZmlsZW5hbWUpXG5cbmRvdGVudi5jb25maWcoeyBwYXRoOiBwYXRoLmpvaW4oX19kaXJuYW1lLCBcIi4uLy4uLy5lbnZcIikgfSlcblxuY29uc3QgeyBGSVJTVF9TVVBFUlVTRVIsIEZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRCB9ID0gcHJvY2Vzcy5lbnZcblxuaWYgKHR5cGVvZiBGSVJTVF9TVVBFUlVTRVIgIT09IFwic3RyaW5nXCIpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwiRW52aXJvbm1lbnQgdmFyaWFibGUgRklSU1RfU1VQRVJVU0VSIGlzIHVuZGVmaW5lZFwiKVxufVxuXG5pZiAodHlwZW9mIEZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRCAhPT0gXCJzdHJpbmdcIikge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJFbnZpcm9ubWVudCB2YXJpYWJsZSBGSVJTVF9TVVBFUlVTRVJfUEFTU1dPUkQgaXMgdW5kZWZpbmVkXCIpXG59XG5cbmV4cG9ydCBjb25zdCBmaXJzdFN1cGVydXNlciA9IEZJUlNUX1NVUEVSVVNFUiBhcyBzdHJpbmdcbmV4cG9ydCBjb25zdCBmaXJzdFN1cGVydXNlclBhc3N3b3JkID0gRklSU1RfU1VQRVJVU0VSX1BBU1NXT1JEIGFzIHN0cmluZ1xuLi4uXG5QYXRoOiBkb2NrZXItY29tcG9zZS5vdmVycmlkZS55bWxcbi4uLlxuXG4gIGJhY2tlbmQ6XG4gICAgcmVzdGFydDogXCJub1wiXG4gICAgcG9ydHM6XG4gICAgICAtIFwiODAwMDo4MDAwXCJcbiAgICBidWlsZDpcbiAgICAgIGNvbnRleHQ6IC4vYmFja2VuZFxuICAgICMgY29tbWFuZDogc2xlZXAgaW5maW5pdHkgICMgSW5maW5pdGUgbG9vcCB0byBrZWVwIGNvbnRhaW5lciBhbGl2ZSBkb2luZyBub3RoaW5nXG4gICAgY29tbWFuZDpcbiAgICAgIC0gZmFzdGFwaVxuICAgICAgLSBydW5cbiAgICAgIC0gLS1yZWxvYWRcbiAgICAgIC0gXCJhcHAvbWFpbi5weVwiXG4gICAgZGV2ZWxvcDpcbiAgICAgIHdhdGNoOlxuICAgICAgICAtIHBhdGg6IC4vYmFja2VuZFxuICAgICAgICAgIGFjdGlvbjogc3luY1xuICAgICAgICAgIHRhcmdldDogL2FwcFxuICAgICAgICAgIGlnbm9yZTpcbiAgICAgICAgICAgIC0gLi9iYWNrZW5kLy52ZW52XG4gICAgICAgICAgICAtIC52ZW52XG4gICAgICAgIC0gcGF0aDogLi9iYWNrZW5kL3B5cHJvamVjdC50b21sXG4gICAgICAgICAgYWN0aW9uOiByZWJ1aWxkXG4gICAgIyBUT0RPOiByZW1vdmUgb25jZSBjb3ZlcmFnZSBpcyBkb25lIGxvY2FsbHlcbiAgICB2b2x1bWVzOlxuICAgICAgLSAuL2JhY2tlbmQvaHRtbGNvdjovYXBwL2h0bWxjb3ZcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgIFNNVFBfSE9TVDogXCJtYWlsY2F0Y2hlclwiXG4gICAgICBTTVRQX1BPUlQ6IFwiMTAyNVwiXG4gICAgICBTTVRQX1RMUzogXCJmYWxzZVwiXG4gICAgICBFTUFJTFNfRlJPTV9FTUFJTDogXCJub3JlcGx5QGV4YW1wbGUuY29tXCJcblxuICBtYWlsY2F0Y2hlcjpcbiAgICBpbWFnZTogc2NoaWNrbGluZy9tYWlsY2F0Y2hlclxuICAgIHBvcnRzOlxuICAgICAgLSBcIjEwODA6MTA4MFwiXG4gICAgICAtIFwiMTAyNToxMDI1XCJcblxuICBmcm9udGVuZDpcbiAgICByZXN0YXJ0OiBcIm5vXCJcbiAgICBwb3J0czpcbiAgICAgIC0gXCI1MTczOjgwXCJcbiAgICBidWlsZDpcbiAgICAgIGNvbnRleHQ6IC4vZnJvbnRlbmRcbiAgICAgIGFyZ3M6XG4gICAgICAgIC0gVklURV9BUElfVVJMPWh0dHA6Ly9sb2NhbGhvc3Q6ODAwMFxuICAgICAgICAtIE5PREVfRU5WPWRldmVsb3BtZW50XG5cbiAgcGxheXdyaWdodDpcbiAgICBidWlsZDpcbiAgICAgIGNvbnRleHQ6IC4vZnJvbnRlbmRcbiAgICAgIGRvY2tlcmZpbGU6IERvY2tlcmZpbGUucGxheXdyaWdodFxuICAgICAgYXJnczpcbiAgICAgICAgLSBWSVRFX0FQSV9VUkw9aHR0cDovL2JhY2tlbmQ6ODAwMFxuICAgICAgICAtIE5PREVfRU5WPXByb2R1Y3Rpb25cbiAgICBpcGM6IGhvc3RcbiAgICBkZXBlbmRzX29uOlxuICAgICAgLSBiYWNrZW5kXG4gICAgICAtIG1haWxjYXRjaGVyXG4gICAgZW52X2ZpbGU6XG4gICAgICAtIC5lbnZcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgIC0gVklURV9BUElfVVJMPWh0dHA6Ly9iYWNrZW5kOjgwMDBcbiAgICAgIC0gTUFJTENBVENIRVJfSE9TVD1odHRwOi8vbWFpbGNhdGNoZXI6MTA4MFxuICAgICAgIyBGb3IgdGhlIHJlcG9ydHMgd2hlbiBydW4gbG9jYWxseVxuICAgICAgLSBQTEFZV1JJR0hUX0hUTUxfSE9TVD0wLjAuMC4wXG4gICAgICAtIENJPSR7Q0l9XG4gICAgdm9sdW1lczpcbiAgICAgIC0gLi9mcm9udGVuZC9ibG9iLXJlcG9ydDovYXBwL2Jsb2ItcmVwb3J0XG4gICAgICAtIC4vZnJvbnRlbmQvdGVzdC1yZXN1bHRzOi9hcHAvdGVzdC1yZXN1bHRzXG4gICAgcG9ydHM6XG4gICAgICAtIDkzMjM6OTMyM1xuXG5uZXR3b3JrczpcbiAgdHJhZWZpay1wdWJsaWM6XG4gICAgIyBGb3IgbG9jYWwgZGV2LCBkb24ndCBleHBlY3QgYW4gZXh0ZXJuYWwgVHJhZWZpayBuZXR3b3JrXG4gICAgZXh0ZXJuYWw6IGZhbHNlXG4uLi5cblBhdGg6IGZyb250ZW5kLy5lbnZcblZJVEVfQVBJX1VSTD1odHRwOi8vbG9jYWxob3N0OjgwMDBcbk1BSUxDQVRDSEVSX0hPU1Q9aHR0cDovL2xvY2FsaG9zdDoxMDgwXG4uLi5cblBhdGg6IC5jb3BpZXIvdXBkYXRlX2RvdGVudi5weVxuLi4uXG5cbiMgVXBkYXRlIHRoZSAuZW52IGZpbGUgd2l0aCB0aGUgYW5zd2VycyBmcm9tIHRoZSAuY29waWVyLWFuc3dlcnMueW1sIGZpbGVcbiMgd2l0aG91dCB1c2luZyBKaW5qYTIgdGVtcGxhdGVzIGluIHRoZSAuZW52IGZpbGUsIHRoaXMgd2F5IHRoZSBjb2RlIHdvcmtzIGFzIGlzXG4jIHdpdGhvdXQgbmVlZGluZyBDb3BpZXIsIGJ1dCBpZiBDb3BpZXIgaXMgdXNlZCwgdGhlIC5lbnYgZmlsZSB3aWxsIGJlIHVwZGF0ZWRcbnJvb3RfcGF0aCA9IFBhdGgoX19maWxlX18pLnBhcmVudC5wYXJlbnRcbmFuc3dlcnNfcGF0aCA9IFBhdGgoX19maWxlX18pLnBhcmVudCAvIFwiLmNvcGllci1hbnN3ZXJzLnltbFwiXG5hbnN3ZXJzID0ganNvbi5sb2FkcyhhbnN3ZXJzX3BhdGgucmVhZF90ZXh0KCkpXG5lbnZfcGF0aCA9IHJvb3RfcGF0aCAvIFwiLmVudlwiXG5lbnZfY29udGVudCA9IGVudl9wYXRoLnJlYWRfdGV4dCgpXG5saW5lcyA9IFtdXG5mb3IgbGluZSBpbiBlbnZfY29udGVudC5zcGxpdGxpbmVzKCk6XG4gICAgZm9yIGtleSwgdmFsdWUgaW4gYW5zd2Vycy5pdGVtcygpOlxuICAgICAgICB1cHBlcl9rZXkgPSBrZXkudXBwZXIoKVxuICAgICAgICBpZiBsaW5lLnN0YXJ0c3dpdGgoZlwie3VwcGVyX2tleX09XCIpOlxuICAgICAgICAgICAgaWYgXCIgXCIgaW4gdmFsdWU6XG4gICAgICAgICAgICAgICAgY29udGVudCA9IGZcInt1cHBlcl9rZXl9PXt2YWx1ZSFyfVwiXG4gICAgICAgICAgICBlbHNlOlxuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBmXCJ7dXBwZXJfa2V5fT17dmFsdWV9XCJcbiAgICAgICAgICAgIG5ld19saW5lID0gbGluZS5yZXBsYWNlKGxpbmUsIGNvbnRlbnQpXG4gICAgICAgICAgICBsaW5lcy5hcHBlbmQobmV3X2xpbmUpXG4gICAgICAgICAgICBicmVha1xuICAgIGVsc2U6XG4uLi5cblBhdGg6IGRvYy9GdWxsLVN0YWNrLUZhc3RBUEktVGVtcGxhdGXlrabkuaDmiYvlhowubWRcbi4uLlxuXG5hcHAuaW5jbHVkZV9yb3V0ZXIoYXBpX3JvdXRlciwgcHJlZml4PXNldHRpbmdzLkFQSV9WMV9TVFIpXG5gYGBcblxuIyMjIOmFjee9rueuoeeQhlxuXG7phY3nva7pgJrov4cgYGJhY2tlbmQvYXBwL2NvcmUvY29uZmlnLnB5YCDnrqHnkIbvvIzkvb/nlKggUHlkYW50aWMg55qEIGBCYXNlU2V0dGluZ3NgIOexu++8mlxuXG5gYGBweXRob25cbiMgYmFja2VuZC9hcHAvY29yZS9jb25maWcucHlcbmZyb20gcHlkYW50aWNfc2V0dGluZ3MgaW1wb3J0IEJhc2VTZXR0aW5nc1xuXG5jbGFzcyBTZXR0aW5ncyhCYXNlU2V0dGluZ3MpOlxuICAgIEFQSV9WMV9TVFI6IHN0ciA9IFwiL2FwaS92MVwiXG4gICAgU0VDUkVUX0tFWTogc3RyXG4gICAgIyDlhbbku5bphY3nva4uLi5cblxuc2V0dGluZ3MgPSBTZXR0aW5ncygpXG5gYGBcblxuIyMjIOaVsOaNruW6k+aooeWei1xuXG7mlbDmja7lupPmqKHlnovkvb/nlKggU1FMTW9kZWwg5a6a5LmJ77yM5a6D57uT5ZCI5LqGIFNRTEFsY2hlbXkg5ZKMIFB5ZGFudGlj77yaXG5cbmBgYHB5dGhvblxuIyBiYWNrZW5kL2FwcC9tb2RlbHMucHlcbmZyb20gc3FsbW9kZWwgaW1wb3J0IEZpZWxkLCBTUUxNb2RlbFxuaW1wb3J0IHV1aWRcblxuY2xhc3MgVXNlcihTUUxNb2RlbCwgdGFibGU9VHJ1ZSk6XG4gICAgaWQ6IHV1aWQuVVVJRCA9IEZpZWxkKGRlZmF1bHRfZmFjdG9yeT11dWlkLnV1aWQ0LCBwcmltYXJ5X2tleT1UcnVlKVxuICAgIGVtYWlsOiBzdHIgPSBGaWVsZCh1bmlxdWU9VHJ1ZSwgaW5kZXg9VHJ1ZSlcbiAgICBoYXNoZWRfcGFzc3dvcmQ6IHN0clxuICAgIGlzX2FjdGl2ZTogYm9vbCA9IFRydWVcbiAgICBpc19zdXBlcnVzZXI6IGJvb2wgPSBGYWxzZVxuICAgICMg5YW25LuW5a2X5q61Li4uXG5gYGBcbi4uLlxuYGBgXG5cbiMjIDYuIOW8gOWPkeeOr+Wig+mFjee9rlxuXG4jIyMg5pys5Zyw5byA5Y+R546v5aKDXG5cbkZ1bGwtU3RhY2stRmFzdEFQSS1UZW1wbGF0ZSDkvb/nlKggRG9ja2VyIENvbXBvc2Ug6K6+572u5pys5Zyw5byA5Y+R546v5aKD77yaXG5cbmBgYGJhc2hcbiMg5ZCv5Yqo5byA5Y+R546v5aKDXG5kb2NrZXIgY29tcG9zZSB3YXRjaFxuYGBgXG5cbui/meWwhuWQr+WKqOS7peS4i+acjeWKoe+8mlxuXG4tIOWQjuerryBBUEkgKGh0dHA6Ly9sb2NhbGhvc3Q6ODAwMClcbi0g5YmN56uv5byA5Y+R5pyN5Yqh5ZmoIChodHRwOi8vbG9jYWxob3N0OjUxNzMpXG4tIFBvc3RncmVTUUwg5pWw5o2u5bqTXG4tIEFkbWluZXIg5pWw5o2u5bqT566h55CG5bel5YW3IChodHRwOi8vbG9jYWxob3N0OjgwODApXG4tIFRyYWVmaWsg5Luj55CGIChodHRwOi8vbG9jYWxob3N0OjgwOTApXG4tIE1haWxDYXRjaGVyIOmCruS7tua1i+ivleW3peWFtyAoaHR0cDovL2xvY2FsaG9zdDoxMDgwKVxuXG4jIyMg546v5aKD5Y+Y6YePXG5cbuW8gOWPkeeOr+Wig+eahOmFjee9ruWtmOWCqOWcqCBgLmVudmAg5paH5Lu25Lit77yaXG5cbmBgYFxuIyAuZW52XG5ET01BSU49bG9jYWxob3N0XG5TVEFDS19OQU1FPWZhc3RhcGktcHJvamVjdFxuUFJPSkVDVF9OQU1FPUZhc3RBUEkgUHJvamVjdFxuU0VDUkVUX0tFWT1jaGFuZ2V0aGlzXG5GSVJTVF9TVVBFUlVTRVI9YWRtaW5AZXhhbXBsZS5jb21cbkZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRD1jaGFuZ2V0aGlzXG5QT1NUR1JFU19QQVNTV09SRD1jaGFuZ2V0aGlzXG5QT1NUR1JFU19TRVJWRVI9ZGJcblBPU1RHUkVTX1BPUlQ9NTQzMlxuUE9TVEdSRVNfVVNFUj1wb3N0Z3Jlc1xuUE9TVEdSRVNfREI9YXBwXG5gYGBcblxuIyMjIOWJjeerr+W8gOWPkVxuXG7liY3nq6/lvIDlj5Hlj6/ku6XlnKggRG9ja2VyIOWuueWZqOWGhei/m+ihjO+8jOS5n+WPr+S7peWcqOacrOWcsOi/m+ihjO+8mlxuXG5gYGBiYXNoXG4jIOacrOWcsOWJjeerr+W8gOWPkVxuY2QgZnJvbnRlbmRcbm5wbSBpbnN0YWxsXG5ucG0gcnVuIGRldlxuYGBgXG5cbiMjIyDlkI7nq6/lvIDlj5Fcblxu5ZCO56uv5byA5Y+R5ZCM5qC35Y+v5Lul5ZyoIERvY2tlciDlrrnlmajlhoXov5vooYzvvIzkuZ/lj6/ku6XlnKjmnKzlnLDov5vooYzvvJpcblxuYGBgYmFzaFxuIyDmnKzlnLDlkI7nq6/lvIDlj5FcbmNkIGJhY2tlbmRcbnV2IHN5bmNcbnNvdXJjZSAudmVudi9iaW4vYWN0aXZhdGVcbmZhc3RhcGkgZGV2IGFwcC9tYWluLnB5XG5gYGBcblxuIyMgNy4gRG9ja2VyIOS4juWuueWZqOWMllxuXG4jIyMgRG9ja2VyIENvbXBvc2Ug6YWN572uXG5cbumhueebruS9v+eUqCBEb2NrZXIgQ29tcG9zZSDnrqHnkIblrrnlmajvvJpcblxuYGBgeWFtbFxuIyBkb2NrZXItY29tcG9zZS55bWxcbnZlcnNpb246ICczLjgnXG5zZXJ2aWNlczpcbiAgYmFja2VuZDpcbiAgICBpbWFnZTogJyR7RE9DS0VSX0lNQUdFX0JBQ0tFTkR9OiR7VEFHLWxhdGVzdH0nXG4gICAgZGVwZW5kc19vbjpcbiAgICAgIC0gZGJcbiAgICBlbnZfZmlsZTpcbiAgICAgIC0gLmVudlxuICAgIGVudmlyb25tZW50OlxuICAgICAgLSBET01BSU49JHtET01BSU59XG4gICAgICAtIEZST05URU5EX0hPU1Q9JHtGUk9OVEVORF9IT1NUfVxuICAgICAgIyDlhbbku5bnjq/looPlj5jph48uLi5cblxuICBmcm9udGVuZDpcbiAgICBpbWFnZTogJyR7RE9DS0VSX0lNQUdFX0ZST05URU5EfToke1RBRy1sYXRlc3R9J1xuICAgIGVudl9maWxlOlxuICAgICAgLSAuZW52XG4gICAgZW52aXJvbm1lbnQ6XG4gICAgICAtIFZJVEVfQVBJX1VSTD0ke0ZST05URU5EX0hPU1R9XG5cbiAgZGI6XG4gICAgaW1hZ2U6IHBvc3RncmVzOjE1XG4gICAgdm9sdW1lczpcbiAgICAgIC0gYXBwLWRiLWRhdGE6L3Zhci9saWIvcG9zdGdyZXNxbC9kYXRhL3BnZGF0YVxuICAgIGVudl9maWxlOlxuICAgICAgLSAuZW52XG4gICAgZW52aXJvbm1lbnQ6XG4gICAgICAtIFBHREFUQT0vdmFyL2xpYi9wb3N0Z3Jlc3FsL2RhdGEvcGdkYXRhXG4gICAgICAjIOWFtuS7lueOr+Wig+WPmOmHjy4uLlxuXG52b2x1bWVzOlxuICBhcHAtZGItZGF0YTpcbmBgYFxuXG4jIyMg5byA5Y+R546v5aKD6KaG55uWXG5cbmBkb2NrZXItY29tcG9zZS5vdmVycmlkZS55bWxgIOaWh+S7tuWMheWQq+W8gOWPkeeOr+Wig+eJueWumueahOmFjee9ru+8mlxuXG5gYGB5YW1sXG4jIGRvY2tlci1jb21wb3NlLm92ZXJyaWRlLnltbFxudmVyc2lvbjogJzMuOCdcbnNlcnZpY2VzOlxuICBiYWNrZW5kOlxuICAgIGJ1aWxkOlxuICAgICAgY29udGV4dDogLi9iYWNrZW5kXG4gICAgICBkb2NrZXJmaWxlOiBEb2NrZXJmaWxlXG4gICAgdm9sdW1lczpcbiAgICAgIC0gLi9iYWNrZW5kL2FwcDovYXBwL2FwcFxuICAgIGNvbW1hbmQ6IGZhc3RhcGkgcnVuIC0tcmVsb2FkIGFwcC9tYWluLnB5XG5cbiAgZnJvbnRlbmQ6XG4gICAgYnVpbGQ6XG4gICAgICBjb250ZXh0OiAuL2Zyb250ZW5kXG4gICAgICBkb2NrZXJmaWxlOiBEb2NrZXJmaWxlXG4gICAgdm9sdW1lczpcbiAgICAgIC0gLi9mcm9udGVuZDovYXBwXG4gICAgICAtIC9hcHAvbm9kZV9tb2R1bGVzXG4gICAgY29tbWFuZDogbnBtIHJ1biBkZXZcblxuICAjIOWFtuS7luacjeWKoS4uLlxuYGBgXG5cbiMjIDguIOaVsOaNruW6k+S4jui/geenu1xuXG4jIyMg5pWw5o2u5bqT6K6+572uXG5cbumhueebruS9v+eUqCBQb3N0Z3JlU1FMIOS9nOS4uuaVsOaNruW6k++8jOmAmui/hyBTUUxNb2RlbCDov5vooYwgT1JNIOaTjeS9nO+8mlxuXG5gYGBweXRob25cbiMgYmFja2VuZC9hcHAvY29yZS9kYi5weVxuZnJvbSBzcWxtb2RlbCBpbXBvcnQgY3JlYXRlX2VuZ2luZSwgU1FMTW9kZWwsIFNlc3Npb25cbmZyb20gYXBwLmNvcmUuY29uZmlnIGltcG9ydCBzZXR0aW5nc1xuXG5lbmdpbmUgPSBjcmVhdGVfZW5naW5lKHNldHRpbmdzLlNRTEFMQ0hFTVlfREFUQUJBU0VfVVJJKVxuXG5kZWYgZ2V0X3Nlc3Npb24oKTpcbiAgICB3aXRoIFNlc3Npb24oZW5naW5lKSBhcyBzZXNzaW9uOlxuICAgICAgICB5aWVsZCBzZXNzaW9uXG5gYGBcbi4uLlxuUGF0aDogZG9ja2VyLWNvbXBvc2UueW1sXG5zZXJ2aWNlczpcblxuICBkYjpcbiAgICBpbWFnZTogcG9zdGdyZXM6MTJcbiAgICByZXN0YXJ0OiBhbHdheXNcbiAgICBoZWFsdGhjaGVjazpcbiAgICAgIHRlc3Q6IFtcIkNNRC1TSEVMTFwiLCBcInBnX2lzcmVhZHkgLVUgJHtQT1NUR1JFU19VU0VSfSAtZCAke1BPU1RHUkVTX0RCfVwiXVxuICAgICAgaW50ZXJ2YWw6IDEwc1xuICAgICAgcmV0cmllczogNVxuICAgICAgc3RhcnRfcGVyaW9kOiAzMHNcbiAgICAgIHRpbWVvdXQ6IDEwc1xuICAgIHZvbHVtZXM6XG4gICAgICAtIGFwcC1kYi1kYXRhOi92YXIvbGliL3Bvc3RncmVzcWwvZGF0YS9wZ2RhdGFcbiAgICBlbnZfZmlsZTpcbiAgICAgIC0gLmVudlxuICAgIGVudmlyb25tZW50OlxuICAgICAgLSBQR0RBVEE9L3Zhci9saWIvcG9zdGdyZXNxbC9kYXRhL3BnZGF0YVxuICAgICAgLSBQT1NUR1JFU19QQVNTV09SRD0ke1BPU1RHUkVTX1BBU1NXT1JEP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIFBPU1RHUkVTX1VTRVI9JHtQT1NUR1JFU19VU0VSP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIFBPU1RHUkVTX0RCPSR7UE9TVEdSRVNfREI/VmFyaWFibGUgbm90IHNldH1cbi4uLlxuXG4gIGJhY2tlbmQ6XG4gICAgaW1hZ2U6ICcke0RPQ0tFUl9JTUFHRV9CQUNLRU5EP1ZhcmlhYmxlIG5vdCBzZXR9OiR7VEFHLWxhdGVzdH0nXG4gICAgcmVzdGFydDogYWx3YXlzXG4gICAgbmV0d29ya3M6XG4gICAgICAtIHRyYWVmaWstcHVibGljXG4gICAgICAtIGRlZmF1bHRcbiAgICBkZXBlbmRzX29uOlxuICAgICAgZGI6XG4gICAgICAgIGNvbmRpdGlvbjogc2VydmljZV9oZWFsdGh5XG4gICAgICAgIHJlc3RhcnQ6IHRydWVcbiAgICAgIHByZXN0YXJ0OlxuICAgICAgICBjb25kaXRpb246IHNlcnZpY2VfY29tcGxldGVkX3N1Y2Nlc3NmdWxseVxuICAgIGVudl9maWxlOlxuICAgICAgLSAuZW52XG4gICAgZW52aXJvbm1lbnQ6XG4gICAgICAtIERPTUFJTj0ke0RPTUFJTn1cbiAgICAgIC0gRlJPTlRFTkRfSE9TVD0ke0ZST05URU5EX0hPU1Q/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gRU5WSVJPTk1FTlQ9JHtFTlZJUk9OTUVOVH1cbiAgICAgIC0gQkFDS0VORF9DT1JTX09SSUdJTlM9JHtCQUNLRU5EX0NPUlNfT1JJR0lOU31cbiAgICAgIC0gU0VDUkVUX0tFWT0ke1NFQ1JFVF9LRVk/VmFyaWFibGUgbm90IHNldH1cbiAgICAgIC0gRklSU1RfU1VQRVJVU0VSPSR7RklSU1RfU1VQRVJVU0VSP1ZhcmlhYmxlIG5vdCBzZXR9XG4gICAgICAtIEZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRD0ke0ZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRD9WYXJpYWJsZSBub3Qgc2V0fVxuICAgICAgLSBTTVRQX0hPU1Q9JHtTTVRQX0hPU1R9XG4gICAgICAtIFNNVFBfVVNFUj0ke1NNVFBfVVNFUn1cbiAgICAgIC0gU01UUF9QQVNTV09SRD0ke1NNVFBfUEFTU1dPUkR9XG4gICAgICAtIEVNQUlMU19GUk9NX0VNQUlMPSR7RU1BSUxTX0ZST01fRU1BSUx9XG4gICAgICAtIFBPU1RHUkVTX1NFUlZFUj1kYlxuICAgICAgLSBQT1NUR1JFU19QT1JUPSR7UE9TVEdSRVNfUE9SVH1cbi4uLlxuXG4gIGZyb250ZW5kOlxuICAgIGltYWdlOiAnJHtET0NLRVJfSU1BR0VfRlJPTlRFTkQ/VmFyaWFibGUgbm90IHNldH06JHtUQUctbGF0ZXN0fSdcbiAgICByZXN0YXJ0OiBhbHdheXNcbiAgICBuZXR3b3JrczpcbiAgICAgIC0gdHJhZWZpay1wdWJsaWNcbiAgICAgIC0gZGVmYXVsdFxuICAgIGJ1aWxkOlxuICAgICAgY29udGV4dDogLi9mcm9udGVuZFxuICAgICAgYXJnczpcbiAgICAgICAgLSBWSVRFX0FQSV9VUkw9aHR0cHM6Ly9hcGkuJHtET01BSU4/VmFyaWFibGUgbm90IHNldH1cbiAgICAgICAgLSBOT0RFX0VOVj1wcm9kdWN0aW9uXG4gICAgbGFiZWxzOlxuICAgICAgLSB0cmFlZmlrLmVuYWJsZT10cnVlXG4gICAgICAtIHRyYWVmaWsuZG9ja2VyLm5ldHdvcms9dHJhZWZpay1wdWJsaWNcbiAgICAgIC0gdHJhZWZpay5jb25zdHJhaW50LWxhYmVsPXRyYWVmaWstcHVibGljXG5cbiAgICAgIC0gdHJhZWZpay5odHRwLnNlcnZpY2VzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1mcm9udGVuZC5sb2FkYmFsYW5jZXIuc2VydmVyLnBvcnQ9ODBcblxuICAgICAgLSB0cmFlZmlrLmh0dHAucm91dGVycy4ke1NUQUNLX05BTUU/VmFyaWFibGUgbm90IHNldH0tZnJvbnRlbmQtaHR0cC5ydWxlPUhvc3QoYGRhc2hib2FyZC4ke0RPTUFJTj9WYXJpYWJsZSBub3Qgc2V0fWApXG4gICAgICAtIHRyYWVmaWsuaHR0cC5yb3V0ZXJzLiR7U1RBQ0tfTkFNRT9WYXJpYWJsZSBub3Qgc2V0fS1mcm9udGVuZC1odHRwLmVudHJ5cG9pbnRzPWh0dHBcbi4uLlxuUGF0aDogZnJvbnRlbmQvRG9ja2VyZmlsZVxuIyBTdGFnZSAwLCBcImJ1aWxkLXN0YWdlXCIsIGJhc2VkIG9uIE5vZGUuanMsIHRvIGJ1aWxkIGFuZCBjb21waWxlIHRoZSBmcm9udGVuZFxuRlJPTSBub2RlOjIwIEFTIGJ1aWxkLXN0YWdlXG5cbldPUktESVIgL2FwcFxuXG5DT1BZIHBhY2thZ2UqLmpzb24gL2FwcC9cblxuUlVOIG5wbSBpbnN0YWxsXG5cbkNPUFkgLi8gL2FwcC9cblxuQVJHIFZJVEVfQVBJX1VSTD0ke1ZJVEVfQVBJX1VSTH1cblxuUlVOIG5wbSBydW4gYnVpbGRcblxuXG4jIFN0YWdlIDEsIGJhc2VkIG9uIE5naW54LCB0byBoYXZlIG9ubHkgdGhlIGNvbXBpbGVkIGFwcCwgcmVhZHkgZm9yIHByb2R1Y3Rpb24gd2l0aCBOZ2lueFxuRlJPTSBuZ2lueDoxXG5cbkNPUFkgLS1mcm9tPWJ1aWxkLXN0YWdlIC9hcHAvZGlzdC8gL3Vzci9zaGFyZS9uZ2lueC9odG1sXG5cbkNPUFkgLi9uZ2lueC5jb25mIC9ldGMvbmdpbngvY29uZi5kL2RlZmF1bHQuY29uZlxuQ09QWSAuL25naW54LWJhY2tlbmQtbm90LWZvdW5kLmNvbmYgL2V0Yy9uZ2lueC9leHRyYS1jb25mLmQvYmFja2VuZC1ub3QtZm91bmQuY29uZlxuLi4uXG5QYXRoOiBmcm9udGVuZC9SRUFETUUubWRcbi4uLlxuXG4qIERvd25sb2FkIHRoZSBPcGVuQVBJIEpTT04gZmlsZSBmcm9tIGBodHRwOi8vbG9jYWxob3N0L2FwaS92MS9vcGVuYXBpLmpzb25gIGFuZCBjb3B5IGl0IHRvIGEgbmV3IGZpbGUgYG9wZW5hcGkuanNvbmAgYXQgdGhlIHJvb3Qgb2YgdGhlIGBmcm9udGVuZGAgZGlyZWN0b3J5LlxuXG4qIFRvIGdlbmVyYXRlIHRoZSBmcm9udGVuZCBjbGllbnQsIHJ1bjpcblxuYGBgYmFzaFxubnBtIHJ1biBnZW5lcmF0ZS1jbGllbnRcbmBgYFxuXG4qIENvbW1pdCB0aGUgY2hhbmdlcy5cblxuTm90aWNlIHRoYXQgZXZlcnl0aW1lIHRoZSBiYWNrZW5kIGNoYW5nZXMgKGNoYW5naW5nIHRoZSBPcGVuQVBJIHNjaGVtYSksIHlvdSBzaG91bGQgZm9sbG93IHRoZXNlIHN0ZXBzIGFnYWluIHRvIHVwZGF0ZSB0aGUgZnJvbnRlbmQgY2xpZW50LlxuXG4jIyBVc2luZyBhIFJlbW90ZSBBUElcblxuSWYgeW91IHdhbnQgdG8gdXNlIGEgcmVtb3RlIEFQSSwgeW91IGNhbiBzZXQgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIGBWSVRFX0FQSV9VUkxgIHRvIHRoZSBVUkwgb2YgdGhlIHJlbW90ZSBBUEkuIEZvciBleGFtcGxlLCB5b3UgY2FuIHNldCBpdCBpbiB0aGUgYGZyb250ZW5kLy5lbnZgIGZpbGU6XG5cbmBgYGVudlxuVklURV9BUElfVVJMPWh0dHBzOi8vYXBpLm15LWRvbWFpbi5leGFtcGxlLmNvbVxuYGBgXG5cblRoZW4sIHdoZW4geW91IHJ1biB0aGUgZnJvbnRlbmQsIGl0IHdpbGwgdXNlIHRoYXQgVVJMIGFzIHRoZSBiYXNlIFVSTCBmb3IgdGhlIEFQSS5cblxuIyMgQ29kZSBTdHJ1Y3R1cmVcbi4uLlxuUGF0aDogY29waWVyLnltbFxucHJvamVjdF9uYW1lOlxuICB0eXBlOiBzdHJcbiAgaGVscDogVGhlIG5hbWUgb2YgdGhlIHByb2plY3QsIHNob3duIHRvIEFQSSB1c2VycyAoaW4gLmVudilcbiAgZGVmYXVsdDogRmFzdEFQSSBQcm9qZWN0XG5cbnN0YWNrX25hbWU6XG4gIHR5cGU6IHN0clxuICBoZWxwOiBUaGUgbmFtZSBvZiB0aGUgc3RhY2sgdXNlZCBmb3IgRG9ja2VyIENvbXBvc2UgbGFiZWxzIChubyBzcGFjZXMpIChpbiAuZW52KVxuICBkZWZhdWx0OiBmYXN0YXBpLXByb2plY3Rcblxuc2VjcmV0X2tleTpcbiAgdHlwZTogc3RyXG4gIGhlbHA6IHxcbiAgICAnVGhlIHNlY3JldCBrZXkgZm9yIHRoZSBwcm9qZWN0LCB1c2VkIGZvciBzZWN1cml0eSxcbiAgICBzdG9yZWQgaW4gLmVudiwgeW91IGNhbiBnZW5lcmF0ZSBvbmUgd2l0aDpcbiAgICBweXRob24gLWMgXCJpbXBvcnQgc2VjcmV0czsgcHJpbnQoc2VjcmV0cy50b2tlbl91cmxzYWZlKDMyKSlcIidcbiAgZGVmYXVsdDogY2hhbmdldGhpc1xuXG5maXJzdF9zdXBlcnVzZXI6XG4gIHR5cGU6IHN0clxuICBoZWxwOiBUaGUgZW1haWwgb2YgdGhlIGZpcnN0IHN1cGVydXNlciAoaW4gLmVudilcbiAgZGVmYXVsdDogYWRtaW5AZXhhbXBsZS5jb21cblxuZmlyc3Rfc3VwZXJ1c2VyX3Bhc3N3b3JkOlxuICB0eXBlOiBzdHJcbiAgaGVscDogVGhlIHBhc3N3b3JkIG9mIHRoZSBmaXJzdCBzdXBlcnVzZXIgKGluIC5lbnYpXG4gIGRlZmF1bHQ6IGNoYW5nZXRoaXNcblxuc210cF9ob3N0OlxuICB0eXBlOiBzdHJcbiAgaGVscDogVGhlIFNNVFAgc2VydmVyIGhvc3QgdG8gc2VuZCBlbWFpbHMsIHlvdSBjYW4gc2V0IGl0IGxhdGVyIGluIC5lbnZcbiAgZGVmYXVsdDogXCJcIlxuLi4uXG5QYXRoOiBiYWNrZW5kL2FwcC9jb3JlL2RiLnB5XG5mcm9tIHNxbG1vZGVsIGltcG9ydCBTZXNzaW9uLCBjcmVhdGVfZW5naW5lLCBzZWxlY3RcblxuZnJvbSBhcHAgaW1wb3J0IGNydWRcbmZyb20gYXBwLmNvcmUuY29uZmlnIGltcG9ydCBzZXR0aW5nc1xuZnJvbSBhcHAubW9kZWxzIGltcG9ydCBVc2VyLCBVc2VyQ3JlYXRlXG5cbmVuZ2luZSA9IGNyZWF0ZV9lbmdpbmUoc3RyKHNldHRpbmdzLlNRTEFMQ0hFTVlfREFUQUJBU0VfVVJJKSlcblxuXG4jIG1ha2Ugc3VyZSBhbGwgU1FMTW9kZWwgbW9kZWxzIGFyZSBpbXBvcnRlZCAoYXBwLm1vZGVscykgYmVmb3JlIGluaXRpYWxpemluZyBEQlxuIyBvdGhlcndpc2UsIFNRTE1vZGVsIG1pZ2h0IGZhaWwgdG8gaW5pdGlhbGl6ZSByZWxhdGlvbnNoaXBzIHByb3Blcmx5XG4jIGZvciBtb3JlIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYXN0YXBpL2Z1bGwtc3RhY2stZmFzdGFwaS10ZW1wbGF0ZS9pc3N1ZXMvMjhcblxuXG5kZWYgaW5pdF9kYihzZXNzaW9uOiBTZXNzaW9uKSAtPiBOb25lOlxuICAgICMgVGFibGVzIHNob3VsZCBiZSBjcmVhdGVkIHdpdGggQWxlbWJpYyBtaWdyYXRpb25zXG4gICAgIyBCdXQgaWYgeW91IGRvbid0IHdhbnQgdG8gdXNlIG1pZ3JhdGlvbnMsIGNyZWF0ZVxuICAgICMgdGhlIHRhYmxlcyB1bi1jb21tZW50aW5nIHRoZSBuZXh0IGxpbmVzXG4gICAgIyBmcm9tIHNxbG1vZGVsIGltcG9ydCBTUUxNb2RlbFxuXG4gICAgIyBUaGlzIHdvcmtzIGJlY2F1c2UgdGhlIG1vZGVscyBhcmUgYWxyZWFkeSBpbXBvcnRlZCBhbmQgcmVnaXN0ZXJlZCBmcm9tIGFwcC5tb2RlbHNcbiAgICAjIFNRTE1vZGVsLm1ldGFkYXRhLmNyZWF0ZV9hbGwoZW5naW5lKVxuXG4gICAgdXNlciA9IHNlc3Npb24uZXhlYyhcbiAgICAgICAgc2VsZWN0KFVzZXIpLndoZXJlKFVzZXIuZW1haWwgPT0gc2V0dGluZ3MuRklSU1RfU1VQRVJVU0VSKVxuICAgICkuZmlyc3QoKVxuICAgIGlmIG5vdCB1c2VyOlxuICAgICAgICB1c2VyX2luID0gVXNlckNyZWF0ZShcbiAgICAgICAgICAgIGVtYWlsPXNldHRpbmdzLkZJUlNUX1NVUEVSVVNFUixcbiAgICAgICAgICAgIHBhc3N3b3JkPXNldHRpbmdzLkZJUlNUX1NVUEVSVVNFUl9QQVNTV09SRCxcbiAgICAgICAgICAgIGlzX3N1cGVydXNlcj1UcnVlLFxuICAgICAgICApXG4gICAgICAgIHVzZXIgPSBjcnVkLmNyZWF0ZV91c2VyKHNlc3Npb249c2Vzc2lvbiwgdXNlcl9jcmVhdGU9dXNlcl9pbilcbi4uLlxuUGF0aDogZnJvbnRlbmQvc3JjL21haW4udHN4XG5pbXBvcnQge1xuICBNdXRhdGlvbkNhY2hlLFxuICBRdWVyeUNhY2hlLFxuICBRdWVyeUNsaWVudCxcbiAgUXVlcnlDbGllbnRQcm92aWRlcixcbn0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiXG5pbXBvcnQgeyBSb3V0ZXJQcm92aWRlciwgY3JlYXRlUm91dGVyIH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1yb3V0ZXJcIlxuaW1wb3J0IFJlYWN0LCB7IFN0cmljdE1vZGUgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCJcbmltcG9ydCB7IHJvdXRlVHJlZSB9IGZyb20gXCIuL3JvdXRlVHJlZS5nZW5cIlxuXG5pbXBvcnQgeyBBcGlFcnJvciwgT3BlbkFQSSB9IGZyb20gXCIuL2NsaWVudFwiXG5pbXBvcnQgeyBDdXN0b21Qcm92aWRlciB9IGZyb20gXCIuL2NvbXBvbmVudHMvdWkvcHJvdmlkZXJcIlxuXG5PcGVuQVBJLkJBU0UgPSBpbXBvcnQubWV0YS5lbnYuVklURV9BUElfVVJMXG5PcGVuQVBJLlRPS0VOID0gYXN5bmMgKCkgPT4ge1xuICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJhY2Nlc3NfdG9rZW5cIikgfHwgXCJcIlxufVxuXG5jb25zdCBoYW5kbGVBcGlFcnJvciA9IChlcnJvcjogRXJyb3IpID0+IHtcbiAgaWYgKGVycm9yIGluc3RhbmNlb2YgQXBpRXJyb3IgJiYgWzQwMSwgNDAzXS5pbmNsdWRlcyhlcnJvci5zdGF0dXMpKSB7XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJhY2Nlc3NfdG9rZW5cIilcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IFwiL2xvZ2luXCJcbiAgfVxufVxuLi4uXG5QYXRoOiBiYWNrZW5kL2FsZW1iaWMuaW5pXG4jIEEgZ2VuZXJpYywgc2luZ2xlIGRhdGFiYXNlIGNvbmZpZ3VyYXRpb24uXG5cblthbGVtYmljXVxuIyBwYXRoIHRvIG1pZ3JhdGlvbiBzY3JpcHRzXG5zY3JpcHRfbG9jYXRpb24gPSBhcHAvYWxlbWJpY1xuXG4jIHRlbXBsYXRlIHVzZWQgdG8gZ2VuZXJhdGUgbWlncmF0aW9uIGZpbGVzXG4jIGZpbGVfdGVtcGxhdGUgPSAlJShyZXYpc18lJShzbHVnKXNcblxuIyB0aW1lem9uZSB0byB1c2Ugd2hlbiByZW5kZXJpbmcgdGhlIGRhdGVcbiMgd2l0aGluIHRoZSBtaWdyYXRpb24gZmlsZSBhcyB3ZWxsIGFzIHRoZSBmaWxlbmFtZS5cbiMgc3RyaW5nIHZhbHVlIGlzIHBhc3NlZCB0byBkYXRldXRpbC50ei5nZXR0eigpXG4jIGxlYXZlIGJsYW5rIGZvciBsb2NhbHRpbWVcbiMgdGltZXpvbmUgPVxuXG4jIG1heCBsZW5ndGggb2YgY2hhcmFjdGVycyB0byBhcHBseSB0byB0aGVcbiMgXCJzbHVnXCIgZmllbGRcbiN0cnVuY2F0ZV9zbHVnX2xlbmd0aCA9IDQwXG5cbiMgc2V0IHRvICd0cnVlJyB0byBydW4gdGhlIGVudmlyb25tZW50IGR1cmluZ1xuIyB0aGUgJ3JldmlzaW9uJyBjb21tYW5kLCByZWdhcmRsZXNzIG9mIGF1dG9nZW5lcmF0ZVxuIyByZXZpc2lvbl9lbnZpcm9ubWVudCA9IGZhbHNlXG5cbiMgc2V0IHRvICd0cnVlJyB0byBhbGxvdyAucHljIGFuZCAucHlvIGZpbGVzIHdpdGhvdXRcbiMgYSBzb3VyY2UgLnB5IGZpbGUgdG8gYmUgZGV0ZWN0ZWQgYXMgcmV2aXNpb25zIGluIHRoZVxuIyB2ZXJzaW9ucy8gZGlyZWN0b3J5XG4jIHNvdXJjZWxlc3MgPSBmYWxzZVxuLi4uXG5QYXRoOiBiYWNrZW5kL0RvY2tlcmZpbGVcbi4uLlxuXG4jIEluc3RhbGwgZGVwZW5kZW5jaWVzXG4jIFJlZjogaHR0cHM6Ly9kb2NzLmFzdHJhbC5zaC91di9ndWlkZXMvaW50ZWdyYXRpb24vZG9ja2VyLyNpbnRlcm1lZGlhdGUtbGF5ZXJzXG5SVU4gLS1tb3VudD10eXBlPWNhY2hlLHRhcmdldD0vcm9vdC8uY2FjaGUvdXYgXFxcbiAgICAtLW1vdW50PXR5cGU9YmluZCxzb3VyY2U9dXYubG9jayx0YXJnZXQ9dXYubG9jayBcXFxuICAgIC0tbW91bnQ9dHlwZT1iaW5kLHNvdXJjZT1weXByb2plY3QudG9tbCx0YXJnZXQ9cHlwcm9qZWN0LnRvbWwgXFxcbiAgICB1diBzeW5jIC0tZnJvemVuIC0tbm8taW5zdGFsbC1wcm9qZWN0XG5cbkVOViBQWVRIT05QQVRIPS9hcHBcblxuQ09QWSAuL3NjcmlwdHMgL2FwcC9zY3JpcHRzXG5cbkNPUFkgLi9weXByb2plY3QudG9tbCAuL3V2LmxvY2sgLi9hbGVtYmljLmluaSAvYS4uLiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjg2OGU5NWY5LTg5OTgtNDA1YS1hNTQwLTIwZmIzYzBjNzRlODt0b29sdV92cnR4XzAxUnhEY2ZOWWNVYjU0SjJTa2NSenpOOCI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBiYWNrZW5kL3JlcXVpcmVtZW50cy50eHRcbiMgRmFzdEFQSVxuZmFzdGFwaT49MC4xMTUuMFxudXZpY29ybj49MC4zMC4wXG5weWRhbnRpYz49Mi45LjBcbnB5ZGFudGljLXNldHRpbmdzPj0yLjUuMFxuc3FsbW9kZWw+PTAuMC4yMlxuZW1haWwtdmFsaWRhdG9yPj0yLjIuMFxucHl0aG9uLW11bHRpcGFydD49MC4wLjEwXG5cbiMgRGF0YWJhc2VcbnBzeWNvcGc+PTMuMi4wXG5hbGVtYmljPj0xLjEzLjBcblxuIyBTZWN1cml0eVxucHl0aG9uLWpvc2U+PTMuMy4wXG5wYXNzbGliPj0xLjcuNFxuYmNyeXB0Pj00LjAuMVxuXG4jIEVtYWlsXG5lbWFpbHM+PTAuNlxuamluamEyPj0zLjEuNFxuXG4jIFJBRyBTeXN0ZW1cbmxhbmdjaGFpbj49MC4xLjBcbmxhbmdjaGFpbi1jb3JlPj0wLjEuMFxubGFuZ2NoYWluLWNvbW11bml0eT49MC4xLjBcbmxhbmdjaGFpbi1jaHJvbWE+PTAuMS4wXG5jaHJvbWFkYj49MC40LjBcbmh0dHB4Pj0wLjI3LjBcbnB5cGRmPj00LjAuMFxuZG9jeDJ0eHQ+PTAuOFxudW5zdHJ1Y3R1cmVkPj0wLjEyLjBcbi4uLlxuUGF0aDogYmFja2VuZC9weXByb2plY3QudG9tbFxuW3Byb2plY3RdXG5uYW1lID0gXCJhcHBcIlxudmVyc2lvbiA9IFwiMC4xLjBcIlxuZGVzY3JpcHRpb24gPSBcIlwiXG5yZXF1aXJlcy1weXRob24gPSBcIj49My4xMCw8NC4wXCJcbmRlcGVuZGVuY2llcyA9IFtcbiAgICBcImZhc3RhcGlbc3RhbmRhcmRdPDEuMC4wLD49MC4xMTQuMlwiLFxuICAgIFwicHl0aG9uLW11bHRpcGFydDwxLjAuMCw+PTAuMC43XCIsXG4gICAgXCJlbWFpbC12YWxpZGF0b3I8My4wLjAuMCw+PTIuMS4wLnBvc3QxXCIsXG4gICAgXCJwYXNzbGliW2JjcnlwdF08Mi4wLjAsPj0xLjcuNFwiLFxuICAgIFwidGVuYWNpdHk8OS4wLjAsPj04LjIuM1wiLFxuICAgIFwicHlkYW50aWM+Mi4wXCIsXG4gICAgXCJlbWFpbHM8MS4wLD49MC42XCIsXG4gICAgXCJqaW5qYTI8NC4wLjAsPj0zLjEuNFwiLFxuICAgIFwiYWxlbWJpYzwyLjAuMCw+PTEuMTIuMVwiLFxuICAgIFwiaHR0cHg8MS4wLjAsPj0wLjI1LjFcIixcbiAgICBcInBzeWNvcGdbYmluYXJ5XTw0LjAuMCw+PTMuMS4xM1wiLFxuICAgIFwic3FsbW9kZWw8MS4wLjAsPj0wLjAuMjFcIixcbiAgICAjIFBpbiBiY3J5cHQgdW50aWwgcGFzc2xpYiBzdXBwb3J0cyB0aGUgbGF0ZXN0XG4gICAgXCJiY3J5cHQ9PTQuMC4xXCIsXG4gICAgXCJweWRhbnRpYy1zZXR0aW5nczwzLjAuMCw+PTIuMi4xXCIsXG4gICAgXCJzZW50cnktc2RrW2Zhc3RhcGldPDIuMC4wLD49MS40MC42XCIsXG4gICAgXCJweWp3dDwzLjAuMCw+PTIuOC4wXCIsXG5dXG5cblt0b29sLnV2XVxuZGV2LWRlcGVuZGVuY2llcyA9IFtcbiAgICBcInB5dGVzdDw4LjAuMCw+PTcuNC4zXCIsXG4gICAgXCJteXB5PDIuMC4wLD49MS44LjBcIixcbiAgICBcInJ1ZmY8MS4wLjAsPj0wLjIuMlwiLFxuICAgIFwicHJlLWNvbW1pdDw0LjAuMCw+PTMuNi4yXCIsXG4gICAgXCJ0eXBlcy1wYXNzbGliPDIuMC4wLjAsPj0xLjcuNy4yMDI0MDEwNlwiLFxuICAgIFwiY292ZXJhZ2U8OC4wLjAsPj03LjQuM1wiLFxuXVxuXG5bYnVpbGQtc3lzdGVtXVxucmVxdWlyZXMgPSBbXCJoYXRjaGxpbmdcIl1cbmJ1aWxkLWJhY2tlbmQgPSBcImhhdGNobGluZy5idWlsZFwiXG5cblt0b29sLm15cHldXG5zdHJpY3QgPSB0cnVlXG5leGNsdWRlID0gW1widmVudlwiLCBcIi52ZW52XCIsIFwiYWxlbWJpY1wiXVxuXG5bdG9vbC5ydWZmXVxudGFyZ2V0LXZlcnNpb24gPSBcInB5MzEwXCJcbmV4Y2x1ZGUgPSBbXCJhbGVtYmljXCJdXG5cblt0b29sLnJ1ZmYubGludF1cbnNlbGVjdCA9IFtcbiAgICBcIkVcIiwgICMgcHljb2Rlc3R5bGUgZXJyb3JzXG4gICAgXCJXXCIsICAjIHB5Y29kZXN0eWxlIHdhcm5pbmdzXG4gICAgXCJGXCIsICAjIHB5Zmxha2VzXG4gICAgXCJJXCIsICAjIGlzb3J0XG4gICAgXCJCXCIsICAjIGZsYWtlOC1idWdiZWFyXG4gICAgXCJDNFwiLCAgIyBmbGFrZTgtY29tcHJlaGVuc2lvbnNcbiAgICBcIlVQXCIsICAjIHB5dXBncmFkZVxuICAgIFwiQVJHMDAxXCIsICMgdW51c2VkIGFyZ3VtZW50cyBpbiBmdW5jdGlvbnNcbl1cbi4uLlxuUGF0aDogZG9jL2Zhc3RBcGkgUmFn5py65Zmo5Lq6Lm1kXG4uLi5cblxu5YWz5rOo54K55YiG56a777ya5q+P5Liq5paH5Lu26LSf6LSj54m55a6a5Yqf6IO9XG7mqKHlnZfljJbvvJrnu4Tku7blj6/ku6Xni6znq4vlvIDlj5HlkozmtYvor5VcbuWPr+aJqeWxleaAp++8mumaj+edgOmhueebruWinumVv++8jOWPr+S7pei9u+advua3u+WKoOaWsOWKn+iDvVxu5Y+v6K+75oCn77ya5riF5pmw55qE5paH5Lu25ZG95ZCN5ZKM5YiG56a755qE5YWz5rOo54K55L2/5paw5byA5Y+R5Lq65ZGY6IO95aSf5b+r6YCf55CG6Kej6aG555uuIDUuIOeOr+Wig+iuvue9rlxu5Yib5bu66aG555uu55uu5b2V77yaXG5ta2RpciByYWctZmFzdGFwaS1wcm9qZWN0XG5jZCByYWctZmFzdGFwaS1wcm9qZWN0XG7lronoo4Xkvp3otZbvvJpcbuWIm+W7uiByZXF1aXJlbWVudHMudHh0IOaWh+S7tu+8mlxuXG5sYW5nY2hhaW5cbmxhbmdjaGFpbi1vcGVuYWlcbmxhbmdjaGFpbi1jb3JlXG5sYW5nY2hhaW5fY29tbXVuaXR5XG5kb2N4MnR4dFxucHlwZGZcbmxhbmdjaGFpbl9jaHJvbWFcbnB5dGhvbi1tdWx0aXBhcnRcbmZhc3RhcGlcbnV2aWNvcm5cbuWuieijheS+nei1lu+8mlxuXG42LiDmlbDmja7mqKHlnovlrprkuYlcbiAgIOS9v+eUqCBQeWRhbnRpYyDlrprkuYnor7fmsYLlkozlk43lupTmqKHlnovmmK8gRmFzdEFQSSDnmoTmnIDkvbPlrp7ot7XjgILlnKggcHlkYW50aWNfbW9kZWxzLnB5IOS4re+8mlxuXG7ov5nkupvmqKHlnovnoa7kv53vvJpcblxu6L6T5YWl5pWw5o2u6aqM6K+BXG7muIXmmbDnmoQgQVBJIOWlkee6plxu6Ieq5YqoIEFQSSDmlofmoaPnlJ/miJBcbuexu+Wei+WuieWFqFxu5Zyo5LiL5LiA6YOo5YiG5Lit77yM5oiR5bCG6K+m57uG5LuL57uN5pWw5o2u5bqT6K6+572u44CB5ZCR6YeP5a2Y5YKo6ZuG5oiQ5Lul5Y+KIExhbmdDaGFpbiBSQUcg5a6e546w44CCXG4uLi5cblBhdGg6IGJhY2tlbmQvdXYubG9ja1xuLi4uXG5cbltbcGFja2FnZV1dXG5uYW1lID0gXCJhcHBcIlxudmVyc2lvbiA9IFwiMC4xLjBcIlxuc291cmNlID0geyBlZGl0YWJsZSA9IFwiLlwiIH1cbmRlcGVuZGVuY2llcyA9IFtcbiAgICB7IG5hbWUgPSBcImFsZW1iaWNcIiB9LFxuICAgIHsgbmFtZSA9IFwiYmNyeXB0XCIgfSxcbiAgICB7IG5hbWUgPSBcImVtYWlsLXZhbGlkYXRvclwiIH0sXG4gICAgeyBuYW1lID0gXCJlbWFpbHNcIiB9LFxuICAgIHsgbmFtZSA9IFwiZmFzdGFwaVwiLCBleHRyYSA9IFtcInN0YW5kYXJkXCJdIH0sXG4gICAgeyBuYW1lID0gXCJodHRweFwiIH0sXG4gICAgeyBuYW1lID0gXCJqaW5qYTJcIiB9LFxuICAgIHsgbmFtZSA9IFwicGFzc2xpYlwiLCBleHRyYSA9IFtcImJjcnlwdFwiXSB9LFxuICAgIHsgbmFtZSA9IFwicHN5Y29wZ1wiLCBleHRyYSA9IFtcImJpbmFyeVwiXSB9LFxuICAgIHsgbmFtZSA9IFwicHlkYW50aWNcIiB9LFxuICAgIHsgbmFtZSA9IFwicHlkYW50aWMtc2V0dGluZ3NcIiB9LFxuICAgIHsgbmFtZSA9IFwicHlqd3RcIiB9LFxuICAgIHsgbmFtZSA9IFwicHl0aG9uLW11bHRpcGFydFwiIH0sXG4gICAgeyBuYW1lID0gXCJzZW50cnktc2RrXCIsIGV4dHJhID0gW1wiZmFzdGFwaVwiXSB9LFxuICAgIHsgbmFtZSA9IFwic3FsbW9kZWxcIiB9LFxuICAgIHsgbmFtZSA9IFwidGVuYWNpdHlcIiB9LFxuXVxuXG5bcGFja2FnZS5kZXYtZGVwZW5kZW5jaWVzXVxuZGV2ID0gW1xuICAgIHsgbmFtZSA9IFwiY292ZXJhZ2VcIiB9LFxuICAgIHsgbmFtZSA9IFwibXlweVwiIH0sXG4gICAgeyBuYW1lID0gXCJwcmUtY29tbWl0XCIgfSxcbiAgICB7IG5hbWUgPSBcInB5dGVzdFwiIH0sXG4gICAgeyBuYW1lID0gXCJydWZmXCIgfSxcbiAgICB7IG5hbWUgPSBcInR5cGVzLXBhc3NsaWJcIiB9LFxuXVxuXG5bcGFja2FnZS5tZXRhZGF0YV1cbnJlcXVpcmVzLWRpc3QgPSBbXG4gICAgeyBuYW1lID0gXCJhbGVtYmljXCIsIHNwZWNpZmllciA9IFwiPj0xLjEyLjEsPDIuMC4wXCIgfSxcbiAgICB7IG5hbWUgPSBcImJjcnlwdFwiLCBzcGVjaWZpZXIgPSBcIj09NC4wLjFcIiB9LFxuICAgIHsgbmFtZSA9IFwiZW1haWwtdmFsaWRhdG9yXCIsIHNwZWNpZmllciA9IFwiPj0yLjEuMC5wb3N0MSw8My4wLjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJlbWFpbHNcIiwgc3BlY2lmaWVyID0gXCI+PTAuNiw8MS4wXCIgfSxcbiAgICB7IG5hbWUgPSBcImZhc3RhcGlcIiwgZXh0cmFzID0gW1wic3RhbmRhcmRcIl0sIHNwZWNpZmllciA9IFwiPj0wLjExNC4yLDwxLjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJodHRweFwiLCBzcGVjaWZpZXIgPSBcIj49MC4yNS4xLDwxLjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJqaW5qYTJcIiwgc3BlY2lmaWVyID0gXCI+PTMuMS40LDw0LjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJwYXNzbGliXCIsIGV4dHJhcyA9IFtcImJjcnlwdFwiXSwgc3BlY2lmaWVyID0gXCI+PTEuNy40LDwyLjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJwc3ljb3BnXCIsIGV4dHJhcyA9IFtcImJpbmFyeVwiXSwgc3BlY2lmaWVyID0gXCI+PTMuMS4xMyw8NC4wLjBcIiB9LFxuICAgIHsgbmFtZSA9IFwicHlkYW50aWNcIiwgc3BlY2lmaWVyID0gXCI+Mi4wXCIgfSxcbiAgICB7IG5hbWUgPSBcInB5ZGFudGljLXNldHRpbmdzXCIsIHNwZWNpZmllciA9IFwiPj0yLjIuMSw8My4wLjBcIiB9LFxuICAgIHsgbmFtZSA9IFwicHlqd3RcIiwgc3BlY2lmaWVyID0gXCI+PTIuOC4wLDwzLjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJweXRob24tbXVsdGlwYXJ0XCIsIHNwZWNpZmllciA9IFwiPj0wLjAuNyw8MS4wLjBcIiB9LFxuICAgIHsgbmFtZSA9IFwic2VudHJ5LXNka1wiLCBleHRyYXMgPSBbXCJmYXN0YXBpXCJdLCBzcGVjaWZpZXIgPSBcIj49MS40MC42LDwyLjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJzcWxtb2RlbFwiLCBzcGVjaWZpZXIgPSBcIj49MC4wLjIxLDwxLjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJ0ZW5hY2l0eVwiLCBzcGVjaWZpZXIgPSBcIj49OC4yLjMsPDkuMC4wXCIgfSxcbl1cblxuW3BhY2thZ2UubWV0YWRhdGEucmVxdWlyZXMtZGV2XVxuZGV2ID0gW1xuICAgIHsgbmFtZSA9IFwiY292ZXJhZ2VcIiwgc3BlY2lmaWVyID0gXCI+PTcuNC4zLDw4LjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJteXB5XCIsIHNwZWNpZmllciA9IFwiPj0xLjguMCw8Mi4wLjBcIiB9LFxuICAgIHsgbmFtZSA9IFwicHJlLWNvbW1pdFwiLCBzcGVjaWZpZXIgPSBcIj49My42LjIsPDQuMC4wXCIgfSxcbiAgICB7IG5hbWUgPSBcInB5dGVzdFwiLCBzcGVjaWZpZXIgPSBcIj49Ny40LjMsPDguMC4wXCIgfSxcbiAgICB7IG5hbWUgPSBcInJ1ZmZcIiwgc3BlY2lmaWVyID0gXCI+PTAuMi4yLDwxLjAuMFwiIH0sXG4gICAgeyBuYW1lID0gXCJ0eXBlcy1wYXNzbGliXCIsIHNwZWNpZmllciA9IFwiPj0xLjcuNy4yMDI0MDEwNiw8Mi4wLjAuMFwiIH0sXG5dXG4uLi5cblxuW3BhY2thZ2Uub3B0aW9uYWwtZGVwZW5kZW5jaWVzXVxuc3RhbmRhcmQgPSBbXG4gICAgeyBuYW1lID0gXCJlbWFpbC12YWxpZGF0b3JcIiB9LFxuICAgIHsgbmFtZSA9IFwiZmFzdGFwaS1jbGlcIiwgZXh0cmEgPSBbXCJzdGFuZGFyZFwiXSB9LFxuICAgIHsgbmFtZSA9IFwiaHR0cHhcIiB9LFxuICAgIHsgbmFtZSA9IFwiamluamEyXCIgfSxcbiAgICB7IG5hbWUgPSBcInB5dGhvbi1tdWx0aXBhcnRcIiB9LFxuICAgIHsgbmFtZSA9IFwidXZpY29yblwiLCBleHRyYSA9IFtcInN0YW5kYXJkXCJdIH0sXG5dXG5cbltbcGFja2FnZV1dXG5uYW1lID0gXCJmYXN0YXBpLWNsaVwiXG52ZXJzaW9uID0gXCIwLjAuNVwiXG5zb3VyY2UgPSB7IHJlZ2lzdHJ5ID0gXCJodHRwczovL3B5cGkub3JnL3NpbXBsZVwiIH1cbmRlcGVuZGVuY2llcyA9IFtcbiAgICB7IG5hbWUgPSBcInR5cGVyXCIgfSxcbiAgICB7IG5hbWUgPSBcInV2aWNvcm5cIiwgZXh0cmEgPSBbXCJzdGFuZGFyZFwiXSB9LFxuXVxuLi4uXG4gICAgeyB1cmwgPSBcImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9hOS9mOS9iNmJjYWY4NzRmNDEwNTY0YTc4OTA4NzM5YzgwODYxYTE3MTc4OGVmNGQ0Zjc2ZjUwMDk2NTY2NzJkZmUvcHlkYW50aWNfY29yZS0yLjIzLjQtcHAzMTAtcHlweTMxMF9wcDczLXdpbl9hbWQ2NC53aGxcIiwgaGFzaCA9IFwic2hhMjU2OjlhNWJjZTlkMjNhYWM4ZjBjZjA4MzZlY2ZjMDMzODk2YWE4NDQzYjUwMWM1OGQwNjAyZGJmZDViZDViMzc3NTNcIiwgc2l6ZSA9IDE5MjAzNDQgfSxcbl1cblxuW1twYWNrYWdlXV1cbm5hbWUgPSBcInB5ZGFudGljLXNldHRpbmdzXCJcbnZlcnNpb24gPSBcIjIuNS4yXCJcbnNvdXJjZSA9IHsgcmVnaXN0cnkgPSBcImh0dHBzOi8vcHlwaS5vcmcvc2ltcGxlXCIgfVxuZGVwZW5kZW5jaWVzID0gW1xuICAgIHsgbmFtZSA9IFwicHlkYW50aWNcIiB9LFxuICAgIHsgbmFtZSA9IFwicHl0aG9uLWRvdGVudlwiIH0sXG5dXG4uLi5cblxuW3BhY2thZ2Uub3B0aW9uYWwtZGVwZW5kZW5jaWVzXVxuc3RhbmRhcmQgPSBbXG4gICAgeyBuYW1lID0gXCJjb2xvcmFtYVwiLCBtYXJrZXIgPSBcInN5c19wbGF0Zm9ybSA9PSAnd2luMzInXCIgfSxcbiAgICB7IG5hbWUgPSBcImh0dHB0b29sc1wiIH0sXG4gICAgeyBuYW1lID0gXCJweXRob24tZG90ZW52XCIgfSxcbiAgICB7IG5hbWUgPSBcInB5eWFtbFwiIH0sXG4gICAgeyBuYW1lID0gXCJ1dmxvb3BcIiwgbWFya2VyID0gXCJwbGF0Zm9ybV9weXRob25faW1wbGVtZW50YXRpb24gIT0gJ1B5UHknIGFuZCBzeXNfcGxhdGZvcm0gIT0gJ2N5Z3dpbicgYW5kIHN5c19wbGF0Zm9ybSAhPSAnd2luMzInXCIgfSxcbiAgICB7IG5hbWUgPSBcIndhdGNoZmlsZXNcIiB9LFxuICAgIHsgbmFtZSA9IFwid2Vic29ja2V0c1wiIH0sXG5dXG4uLi5cblBhdGg6IHB5cHJvamVjdC50b21sXG5bcHJvamVjdF1cbm5hbWUgPSBcInBhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyXCJcbnZlcnNpb24gPSBcIjAuMS4wXCJcbmRlc2NyaXB0aW9uID0gXCJBZGQgeW91ciBkZXNjcmlwdGlvbiBoZXJlXCJcbnJlcXVpcmVzLXB5dGhvbiA9IFwiPj0zLjEwXCJcbmRlcGVuZGVuY2llcyA9IFtdXG4uLi5cblBhdGg6IGZyb250ZW5kL3BucG0tbG9jay55YW1sXG4uLi5cblxuICAuOlxuICAgIGRlcGVuZGVuY2llczpcbiAgICAgICdAY2hha3JhLXVpL3JlYWN0JzpcbiAgICAgICAgc3BlY2lmaWVyOiBeMy44LjBcbiAgICAgICAgdmVyc2lvbjogMy4xNS4xKEBlbW90aW9uL3JlYWN0QDExLjE0LjApKHJlYWN0LWRvbUAxOC4zLjEpKHJlYWN0QDE4LjMuMSlcbiAgICAgICdAZW1vdGlvbi9yZWFjdCc6XG4gICAgICAgIHNwZWNpZmllcjogXjExLjE0LjBcbiAgICAgICAgdmVyc2lvbjogMTEuMTQuMChAdHlwZXMvcmVhY3RAMTguMy4yMCkocmVhY3RAMTguMy4xKVxuICAgICAgJ0B0YW5zdGFjay9yZWFjdC1xdWVyeSc6XG4gICAgICAgIHNwZWNpZmllcjogXjUuMjguMTRcbiAgICAgICAgdmVyc2lvbjogNS43Mi4xKHJlYWN0QDE4LjMuMSlcbiAgICAgICdAdGFuc3RhY2svcmVhY3QtcXVlcnktZGV2dG9vbHMnOlxuICAgICAgICBzcGVjaWZpZXI6IF41LjI4LjE0XG4gICAgICAgIHZlcnNpb246IDUuNzIuMShAdGFuc3RhY2svcmVhY3QtcXVlcnlANS43Mi4xKShyZWFjdEAxOC4zLjEpXG4gICAgICAnQHRhbnN0YWNrL3JlYWN0LXJvdXRlcic6XG4gICAgICAgIHNwZWNpZmllcjogMS4xOS4xXG4gICAgICAgIHZlcnNpb246IDEuMTkuMShyZWFjdC1kb21AMTguMy4xKShyZWFjdEAxOC4zLjEpXG4gICAgICBheGlvczpcbiAgICAgICAgc3BlY2lmaWVyOiAxLjcuNFxuICAgICAgICB2ZXJzaW9uOiAxLjcuNFxuICAgICAgZm9ybS1kYXRhOlxuICAgICAgICBzcGVjaWZpZXI6IDQuMC4wXG4gICAgICAgIHZlcnNpb246IDQuMC4wXG4gICAgICBuZXh0LXRoZW1lczpcbiAgICAgICAgc3BlY2lmaWVyOiBeMC40LjRcbiAgICAgICAgdmVyc2lvbjogMC40LjYocmVhY3QtZG9tQDE4LjMuMSkocmVhY3RAMTguMy4xKVxuICAgICAgcmVhY3Q6XG4gICAgICAgIHNwZWNpZmllcjogXjE4LjIuMFxuICAgICAgICB2ZXJzaW9uOiAxOC4zLjFcbiAgICAgIHJlYWN0LWRvbTpcbiAgICAgICAgc3BlY2lmaWVyOiBeMTguMi4wXG4gICAgICAgIHZlcnNpb246IDE4LjMuMShyZWFjdEAxOC4zLjEpXG4gICAgICByZWFjdC1lcnJvci1ib3VuZGFyeTpcbiAgICAgICAgc3BlY2lmaWVyOiBeNC4wLjEzXG4gICAgICAgIHZlcnNpb246IDQuMS4yKHJlYWN0QDE4LjMuMSlcbiAgICAgIHJlYWN0LWhvb2stZm9ybTpcbiAgICAgICAgc3BlY2lmaWVyOiA3LjQ5LjNcbiAgICAgICAgdmVyc2lvbjogNy40OS4zKHJlYWN0QDE4LjMuMSlcbiAgICAgIHJlYWN0LWljb25zOlxuICAgICAgICBzcGVjaWZpZXI6IF41LjQuMFxuICAgICAgICB2ZXJzaW9uOiA1LjUuMChyZWFjdEAxOC4zLjEpXG4gICAgICB6b2Q6XG4gICAgICAgIHNwZWNpZmllcjogXjMuMjQuMlxuICAgICAgICB2ZXJzaW9uOiAzLjI0LjJcbiAgICBkZXZEZXBlbmRlbmNpZXM6XG4gICAgICAnQGJpb21lanMvYmlvbWUnOlxuICAgICAgICBzcGVjaWZpZXI6IDEuNi4xXG4gICAgICAgIHZlcnNpb246IDEuNi4xXG4gICAgICAnQGhleS1hcGkvb3BlbmFwaS10cyc6XG4gICAgICAgIHNwZWNpZmllcjogXjAuNTcuMFxuICAgICAgICB2ZXJzaW9uOiAwLjU3LjEodHlwZXNjcmlwdEA1LjguMylcbiAgICAgICdAcGxheXdyaWdodC90ZXN0JzpcbiAgICAgICAgc3BlY2lmaWVyOiBeMS40NS4yXG4gICAgICAgIHZlcnNpb246IDEuNTEuMVxuICAgICAgJ0B0YW5zdGFjay9yb3V0ZXItZGV2dG9vbHMnOlxuICAgICAgICBzcGVjaWZpZXI6IDEuMTkuMVxuICAgICAgICB2ZXJzaW9uOiAxLjE5LjEoY3NzdHlwZUAzLjEuMykocmVhY3QtZG9tQDE4LjMuMSkocmVhY3RAMTguMy4xKVxuICAgICAgJ0B0YW5zdGFjay9yb3V0ZXItdml0ZS1wbHVnaW4nOlxuICAgICAgICBzcGVjaWZpZXI6IDEuMTkuMFxuICAgICAgICB2ZXJzaW9uOiAxLjE5LjBcbiAgICAgICdAdHlwZXMvbm9kZSc6XG4gICAgICAgIHNwZWNpZmllcjogXjIwLjEwLjVcbiAgICAgICAgdmVyc2lvbjogMjAuMTcuMzBcbiAgICAgICdAdHlwZXMvcmVhY3QnOlxuICAgICAgICBzcGVjaWZpZXI6IF4xOC4yLjM3XG4gICAgICAgIHZlcnNpb246IDE4LjMuMjBcbiAgICAgICdAdHlwZXMvcmVhY3QtZG9tJzpcbiAgICAgICAgc3BlY2lmaWVyOiBeMTguMi4xNVxuLi4uXG5cbiAgJ0B0YW5zdGFjay9oaXN0b3J5QDEuMTUuMTMnOiB7fVxuXG4gICdAdGFuc3RhY2svcXVlcnktY29yZUA1LjcyLjEnOiB7fVxuXG4gICdAdGFuc3RhY2svcXVlcnktZGV2dG9vbHNANS43Mi4xJzoge31cblxuICAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5LWRldnRvb2xzQDUuNzIuMShAdGFuc3RhY2svcmVhY3QtcXVlcnlANS43Mi4xKShyZWFjdEAxOC4zLjEpJzpcbiAgICBkZXBlbmRlbmNpZXM6XG4gICAgICAnQHRhbnN0YWNrL3F1ZXJ5LWRldnRvb2xzJzogNS43Mi4xXG4gICAgICAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JzogNS43Mi4xKHJlYWN0QDE4LjMuMSlcbiAgICAgIHJlYWN0OiAxOC4zLjFcblxuICAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5QDUuNzIuMShyZWFjdEAxOC4zLjEpJzpcbiAgICBkZXBlbmRlbmNpZXM6XG4gICAgICAnQHRhbnN0YWNrL3F1ZXJ5LWNvcmUnOiA1LjcyLjFcbiAgICAgIHJlYWN0OiAxOC4zLjFcblxuICAnQHRhbnN0YWNrL3JlYWN0LXJvdXRlckAxLjE5LjEocmVhY3QtZG9tQDE4LjMuMSkocmVhY3RAMTguMy4xKSc6XG4gICAgZGVwZW5kZW5jaWVzOlxuICAgICAgJ0B0YW5zdGFjay9oaXN0b3J5JzogMS4xNS4xM1xuICAgICAgJ0B0YW5zdGFjay9yZWFjdC1zdG9yZSc6IDAuMi4xKHJlYWN0LWRvbUAxOC4zLjEpKHJlYWN0QDE4LjMuMSlcbiAgICAgIHJlYWN0OiAxOC4zLjFcbiAgICAgIHJlYWN0LWRvbTogMTguMy4xKHJlYWN0QDE4LjMuMSlcbiAgICAgIHRpbnktaW52YXJpYW50OiAxLjMuM1xuICAgICAgdGlueS13YXJuaW5nOiAxLjAuM1xuLi4uXG5QYXRoOiBmcm9udGVuZC9wYWNrYWdlLmpzb25cbntcbiAgXCJuYW1lXCI6IFwiZnJvbnRlbmRcIixcbiAgXCJwcml2YXRlXCI6IHRydWUsXG4gIFwidmVyc2lvblwiOiBcIjAuMC4wXCIsXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiZGV2XCI6IFwidml0ZVwiLFxuICAgIFwiYnVpbGRcIjogXCJ0c2MgLXAgdHNjb25maWcuYnVpbGQuanNvbiAmJiB2aXRlIGJ1aWxkXCIsXG4gICAgXCJsaW50XCI6IFwiYmlvbWUgY2hlY2sgLS1hcHBseS11bnNhZmUgLS1uby1lcnJvcnMtb24tdW5tYXRjaGVkIC0tZmlsZXMtaWdub3JlLXVua25vd249dHJ1ZSAuL1wiLFxuICAgIFwicHJldmlld1wiOiBcInZpdGUgcHJldmlld1wiLFxuICAgIFwiZ2VuZXJhdGUtY2xpZW50XCI6IFwib3BlbmFwaS10c1wiXG4gIH0sXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkBjaGFrcmEtdWkvcmVhY3RcIjogXCJeMy44LjBcIixcbiAgICBcIkBlbW90aW9uL3JlYWN0XCI6IFwiXjExLjE0LjBcIixcbiAgICBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiOiBcIl41LjI4LjE0XCIsXG4gICAgXCJAdGFuc3RhY2svcmVhY3QtcXVlcnktZGV2dG9vbHNcIjogXCJeNS4yOC4xNFwiLFxuICAgIFwiQHRhbnN0YWNrL3JlYWN0LXJvdXRlclwiOiBcIjEuMTkuMVwiLFxuICAgIFwiYXhpb3NcIjogXCIxLjcuNFwiLFxuICAgIFwiZm9ybS1kYXRhXCI6IFwiNC4wLjBcIixcbiAgICBcIm5leHQtdGhlbWVzXCI6IFwiXjAuNC40XCIsXG4gICAgXCJyZWFjdFwiOiBcIl4xOC4yLjBcIixcbiAgICBcInJlYWN0LWRvbVwiOiBcIl4xOC4yLjBcIixcbiAgICBcInJlYWN0LWVycm9yLWJvdW5kYXJ5XCI6IFwiXjQuMC4xM1wiLFxuICAgIFwicmVhY3QtaG9vay1mb3JtXCI6IFwiNy40OS4zXCIsXG4gICAgXCJyZWFjdC1pY29uc1wiOiBcIl41LjQuMFwiLFxuICAgIFwiem9kXCI6IFwiXjMuMjQuMlwiXG4gIH0sXG4uLi5cblBhdGg6IGJhY2tlbmQvYXBwL3JhZy9yYWdfY2hhaW4ucHlcblwiXCJcIlxuUkFHIGNoYWluIGltcGxlbWVudGF0aW9uIGZvciB0aGUgcGFyZW50aW5nIGFzc2lzdGFudC5cblwiXCJcIlxuZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QsIERpY3QsIEFueSwgT3B0aW9uYWxcbmltcG9ydCB1dWlkXG5cbmZyb20gbGFuZ2NoYWluX2NvcmUub3V0cHV0X3BhcnNlcnMgaW1wb3J0IFN0ck91dHB1dFBhcnNlclxuZnJvbSBsYW5nY2hhaW5fY29yZS5wcm9tcHRzIGltcG9ydCBDaGF0UHJvbXB0VGVtcGxhdGUsIE1lc3NhZ2VzUGxhY2Vob2xkZXJcbmZyb20gbGFuZ2NoYWluLmNoYWlucyBpbXBvcnQgY3JlYXRlX2hpc3RvcnlfYXdhcmVfcmV0cmlldmVyLCBjcmVhdGVfcmV0cmlldmFsX2NoYWluXG5mcm9tIGxhbmdjaGFpbi5jaGFpbnMuY29tYmluZV9kb2N1bWVudHMgaW1wb3J0IGNyZWF0ZV9zdHVmZl9kb2N1bWVudHNfY2hhaW5cblxuZnJvbSBhcHAucmFnLnZlY3RvcnN0b3JlIGltcG9ydCBnZXRfcmV0cmlldmVyXG5mcm9tIGFwcC5yYWcub3BlbnJvdXRlcl9jbGllbnQgaW1wb3J0IGdldF9vcGVucm91dGVyX2NoYXRfbW9kZWxcbmZyb20gYXBwLmNvcmUuY29uZmlnIGltcG9ydCBzZXR0aW5nc1xuXG5cbiMgSW5pdGlhbGl6ZSBvdXRwdXQgcGFyc2VyXG5vdXRwdXRfcGFyc2VyID0gU3RyT3V0cHV0UGFyc2VyKClcbi4uLlxuXG5cbmRlZiBnZXRfcmFnX2NoYWluKG1vZGVsX25hbWU6IHN0ciA9IE5vbmUsIGNoaWxkX2luZm86IE9wdGlvbmFsW0RpY3Rbc3RyLCBBbnldXSA9IE5vbmUpOlxuICAgIFwiXCJcIlxuICAgIENyZWF0ZSBhIFJBRyBjaGFpbiBmb3IgdGhlIHBhcmVudGluZyBhc3Npc3RhbnQuXG5cbiAgICBBcmdzOlxuICAgICAgICBtb2RlbF9uYW1lOiBOYW1lIG9mIHRoZSBtb2RlbCB0byB1c2UgKGUuZy4sIFwib3BlbmFpL2dwdC00by1taW5pXCIsIFwiYW50aHJvcGljL2NsYXVkZS0zLW9wdXNcIilcbiAgICAgICAgY2hpbGRfaW5mbzogT3B0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNoaWxkXG5cbiAgICBSZXR1cm5zOlxuICAgICAgICBBIFJBRyBjaGFpblxuICAgIFwiXCJcIlxuICAgICMgSW5pdGlhbGl6ZSBsYW5ndWFnZSBtb2RlbFxuICAgIGxsbSA9IGdldF9vcGVucm91dGVyX2NoYXRfbW9kZWwoXG4gICAgICAgIG1vZGVsPW1vZGVsX25hbWUgb3Igc2V0dGluZ3MuREVGQVVMVF9MTE1fTU9ERUwsXG4gICAgICAgIHRlbXBlcmF0dXJlPTAuN1xuICAgIClcblxuICAgICMgR2V0IHJldHJpZXZlclxuICAgIHJldHJpZXZlciA9IGdldF9yZXRyaWV2ZXIoc2VhcmNoX2t3YXJncz17XCJrXCI6IDN9KVxuXG4gICAgIyBDcmVhdGUgaGlzdG9yeS1hd2FyZSByZXRyaWV2ZXJcbiAgICBoaXN0b3J5X2F3YXJlX3JldHJpZXZlciA9IGNyZWF0ZV9oaXN0b3J5X2F3YXJlX3JldHJpZXZlcihcbiAgICAgICAgbGxtLFxuICAgICAgICByZXRyaWV2ZXIsXG4gICAgICAgIGNvbnRleHR1YWxpemVfcV9wcm9tcHRcbiAgICApXG5cbiAgICAjIENyZWF0ZSBxdWVzdGlvbi1hbnN3ZXJpbmcgY2hhaW5cbiAgICBxdWVzdGlvbl9hbnN3ZXJfY2hhaW4gPSBjcmVhdGVfc3R1ZmZfZG9jdW1lbnRzX2NoYWluKFxuICAgICAgICBsbG0sXG4gICAgICAgIHFhX3Byb21wdFxuICAgIClcblxuICAgICMgQ3JlYXRlIHJldHJpZXZhbCBjaGFpblxuICAgIHJhZ19jaGFpbiA9IGNyZWF0ZV9yZXRyaWV2YWxfY2hhaW4oXG4gICAgICAgIGhpc3RvcnlfYXdhcmVfcmV0cmlldmVyLFxuICAgICAgICBxdWVzdGlvbl9hbnN3ZXJfY2hhaW5cbiAgICApXG5cbiAgICByZXR1cm4gcmFnX2NoYWluXG5cblxuYXN5bmMgZGVmIGdlbmVyYXRlX3Jlc3BvbnNlKFxuICAgIHF1ZXN0aW9uOiBzdHIsXG4gICAgY2hhdF9oaXN0b3J5OiBMaXN0W0RpY3Rbc3RyLCBzdHJdXSxcbiAgICBzZXNzaW9uX2lkOiBzdHIsXG4gICAgY2hpbGRfaW5mbzogT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dID0gTm9uZSxcbiAgICBtb2RlbF9uYW1lOiBzdHIgPSBcImdwdC00by1taW5pXCJcbikgLT4gRGljdFtzdHIsIEFueV06XG4gICAgXCJcIlwiXG4gICAgR2VuZXJhdGUgYSByZXNwb25zZSB1c2luZyB0aGUgUkFHIGNoYWluLlxuXG4gICAgQXJnczpcbiAgICAgICAgcXVlc3Rpb246IFVzZXIncyBxdWVzdGlvblxuICAgICAgICBjaGF0X2hpc3Rvcnk6IExpc3Qgb2YgcHJldmlvdXMgbWVzc2FnZXNcbiAgICAgICAgc2Vzc2lvbl9pZDogU2Vzc2lvbiBJRFxuICAgICAgICBjaGlsZF9pbmZvOiBPcHRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hpbGRcbiAgICAgICAgbW9kZWxfbmFtZTogTmFtZSBvZiB0aGUgT3BlbkFJIG1vZGVsIHRvIHVzZVxuXG4gICAgUmV0dXJuczpcbiAgICAgICAgRGljdGlvbmFyeSBjb250YWluaW5nIHRoZSBhbnN3ZXIgYW5kIHNvdXJjZSBkb2N1bWVudHNcbiAgICBcIlwiXCJcbiAgICAjIEdldCBSQUcgY2hhaW5cbiAgICByYWdfY2hhaW4gPSBnZXRfcmFnX2NoYWluKG1vZGVsX25hbWUsIGNoaWxkX2luZm8pXG5cbiAgICAjIFByZXBhcmUgaW5wdXRcbiAgICBjaGFpbl9pbnB1dCA9IHtcbiAgICAgICAgXCJpbnB1dFwiOiBxdWVzdGlvbixcbiAgICAgICAgXCJjaGF0X2hpc3RvcnlcIjogY2hhdF9oaXN0b3J5XG4gICAgfVxuXG4gICAgIyBBZGQgY2hpbGQgaW5mbyBpZiBhdmFpbGFibGVcbiAgICBpZiBjaGlsZF9pbmZvOlxuICAgICAgICBjaGFpbl9pbnB1dFtcImNoaWxkX2luZm9cIl0gPSBzdHIoY2hpbGRfaW5mbylcbiAgICBlbHNlOlxuICAgICAgICBjaGFpbl9pbnB1dFtcImNoaWxkX2luZm9cIl0gPSBcIk5vIHNwZWNpZmljIGNoaWxkIGluZm9ybWF0aW9uIHByb3ZpZGVkLlwiXG5cbiAgICAjIEludm9rZSBjaGFpblxuICAgIHJlc3VsdCA9IHJhZ19jaGFpbi5pbnZva2UoY2hhaW5faW5wdXQpXG5cbiAgICAjIEV4dHJhY3QgYW5zd2VyIGFuZCBzb3VyY2UgZG9jdW1lbnRzXG4gICAgYW5zd2VyID0gcmVzdWx0LmdldChcImFuc3dlclwiLCBcIkkgY291bGRuJ3QgZ2VuZXJhdGUgYW4gYW5zd2VyLlwiKVxuICAgIHNvdXJjZV9kb2N1bWVudHMgPSByZXN1bHQuZ2V0KFwic291cmNlX2RvY3VtZW50c1wiLCBbXSlcblxuICAgICMgRm9ybWF0IHNvdXJjZSBkb2N1bWVudHNcbiAgICBzb3VyY2VzID0gW11cbiAgICBmb3IgZG9jIGluIHNvdXJjZV9kb2N1bWVudHM6XG4gICAgICAgIGlmIGhhc2F0dHIoZG9jLCAnbWV0YWRhdGEnKTpcbiAgICAgICAgICAgIHNvdXJjZXMuYXBwZW5kKGRvYy5tZXRhZGF0YSlcblxuICAgIHJldHVybiB7XG4gICAgICAgIFwiYW5zd2VyXCI6IGFuc3dlcixcbiAgICAgICAgXCJzZXNzaW9uX2lkXCI6IHNlc3Npb25faWQsXG4gICAgICAgIFwic291cmNlc1wiOiBzb3VyY2VzXG4gICAgfVxuLi4uXG5QYXRoOiBiYWNrZW5kL2FwcC9yYWcvdmVjdG9yc3RvcmUucHlcbi4uLlxuXG5cbmNsYXNzIE9wZW5Sb3V0ZXJFbWJlZGRpbmdzKEVtYmVkZGluZ3MpOlxuICAgIFwiXCJcIk9wZW5Sb3V0ZXIgZW1iZWRkaW5ncyB3cmFwcGVyLlwiXCJcIlxuXG4gICAgZGVmIF9faW5pdF9fKFxuICAgICAgICBzZWxmLFxuICAgICAgICBhcGlfa2V5OiBzdHIgPSBzZXR0aW5ncy5PUEVOUk9VVEVSX0FQSV9LRVksXG4gICAgICAgIGJhc2VfdXJsOiBzdHIgPSBzZXR0aW5ncy5PUEVOUk9VVEVSX0JBU0VfVVJMLFxuICAgICAgICBtb2RlbDogc3RyID0gXCJvcGVuYWkvdGV4dC1lbWJlZGRpbmctMy1zbWFsbFwiXG4gICAgKTpcbiAgICAgICAgc2VsZi5hcGlfa2V5ID0gYXBpX2tleVxuICAgICAgICBzZWxmLmJhc2VfdXJsID0gYmFzZV91cmxcbiAgICAgICAgc2VsZi5tb2RlbCA9IG1vZGVsXG5cbiAgICBkZWYgZW1iZWRfZG9jdW1lbnRzKHNlbGYsIHRleHRzOiBMaXN0W3N0cl0pIC0+IExpc3RbTGlzdFtmbG9hdF1dOlxuICAgICAgICBcIlwiXCJFbWJlZCBkb2N1bWVudHMgdXNpbmcgT3BlblJvdXRlciBBUEkuXCJcIlwiXG4gICAgICAgIGVtYmVkZGluZ3MgPSBbXVxuXG4gICAgICAgICMgUHJvY2VzcyBpbiBiYXRjaGVzIHRvIGF2b2lkIEFQSSBsaW1pdHNcbiAgICAgICAgYmF0Y2hfc2l6ZSA9IDIwXG4gICAgICAgIGZvciBpIGluIHJhbmdlKDAsIGxlbih0ZXh0cyksIGJhdGNoX3NpemUpOlxuICAgICAgICAgICAgYmF0Y2ggPSB0ZXh0c1tpOmkrYmF0Y2hfc2l6ZV1cbiAgICAgICAgICAgIGJhdGNoX2VtYmVkZGluZ3MgPSBzZWxmLl9nZXRfZW1iZWRkaW5ncyhiYXRjaClcbiAgICAgICAgICAgIGVtYmVkZGluZ3MuZXh0ZW5kKGJhdGNoX2VtYmVkZGluZ3MpXG5cbiAgICAgICAgcmV0dXJuIGVtYmVkZGluZ3Ncbi4uLlxuXG4gICAgZGVmIF9nZXRfZW1iZWRkaW5ncyhzZWxmLCB0ZXh0czogTGlzdFtzdHJdKSAtPiBMaXN0W0xpc3RbZmxvYXRdXTpcbiAgICAgICAgXCJcIlwiR2V0IGVtYmVkZGluZ3MgZnJvbSBPcGVuUm91dGVyIEFQSS5cIlwiXCJcbiAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgIFwiQXV0aG9yaXphdGlvblwiOiBmXCJCZWFyZXIge3NlbGYuYXBpX2tleX1cIixcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgXCJIVFRQLVJlZmVyZXJcIjogc2V0dGluZ3MuRlJPTlRFTkRfSE9TVCxcbiAgICAgICAgICAgIFwiWC1UaXRsZVwiOiBzZXR0aW5ncy5QUk9KRUNUX05BTUUsXG4gICAgICAgIH1cblxuICAgICAgICBwYXlsb2FkID0ge1xuICAgICAgICAgICAgXCJtb2RlbFwiOiBzZWxmLm1vZGVsLFxuICAgICAgICAgICAgXCJpbnB1dFwiOiB0ZXh0cyxcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeTpcbiAgICAgICAgICAgIHdpdGggaHR0cHguQ2xpZW50KHRpbWVvdXQ9NjAuMCkgYXMgY2xpZW50OlxuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gY2xpZW50LnBvc3QoXG4gICAgICAgICAgICAgICAgICAgIGZcIntzZWxmLmJhc2VfdXJsfS9lbWJlZGRpbmdzXCIsXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9aGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAganNvbj1wYXlsb2FkLFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICByZXNwb25zZS5yYWlzZV9mb3Jfc3RhdHVzKClcbiAgICAgICAgICAgICAgICBkYXRhID0gcmVzcG9uc2UuanNvbigpXG5cbiAgICAgICAgICAgICAgICAjIEV4dHJhY3QgZW1iZWRkaW5ncyBmcm9tIHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgZW1iZWRkaW5ncyA9IFtpdGVtW1wiZW1iZWRkaW5nXCJdIGZvciBpdGVtIGluIGRhdGFbXCJkYXRhXCJdXVxuICAgICAgICAgICAgICAgIHJldHVybiBlbWJlZGRpbmdzXG5cbiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcihmXCJFcnJvciBjYWxsaW5nIE9wZW5Sb3V0ZXIgQVBJOiB7c3RyKGUpfVwiKVxuXG5cbiMgSW5pdGlhbGl6ZSBlbWJlZGRpbmcgZnVuY3Rpb25cbmVtYmVkZGluZ19mdW5jdGlvbiA9IE9wZW5Sb3V0ZXJFbWJlZGRpbmdzKClcblxuIyBJbml0aWFsaXplIENocm9tYSB2ZWN0b3Igc3RvcmVcbkNIUk9NQV9QRVJTSVNUX0RJUkVDVE9SWSA9IG9zLnBhdGguam9pbihvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5kaXJuYW1lKG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXykpKSwgXCJjaHJvbWFfZGJcIilcbm9zLm1ha2VkaXJzKENIUk9NQV9QRVJTSVNUX0RJUkVDVE9SWSwgZXhpc3Rfb2s9VHJ1ZSlcblxudmVjdG9yc3RvcmUgPSBDaHJvbWEoXG4gICAgcGVyc2lzdF9kaXJlY3Rvcnk9Q0hST01BX1BFUlNJU1RfRElSRUNUT1JZLFxuICAgIGVtYmVkZGluZ19mdW5jdGlvbj1lbWJlZGRpbmdfZnVuY3Rpb25cbilcbi4uLlxuXG5cbmRlZiBpbmRleF9kb2N1bWVudChmaWxlX3BhdGg6IHN0ciwgZG9jdW1lbnRfaWQ6IHV1aWQuVVVJRCwgbWV0YWRhdGE6IE9wdGlvbmFsW0RpY3Rbc3RyLCBBbnldXSA9IE5vbmUpIC0+IGludDpcbiAgICBcIlwiXCJcbiAgICBQcm9jZXNzIGFuZCBpbmRleCBhIGRvY3VtZW50IHRvIHRoZSB2ZWN0b3Igc3RvcmUuXG5cbiAgICBBcmdzOlxuICAgICAgICBmaWxlX3BhdGg6IFBhdGggdG8gdGhlIGRvY3VtZW50IGZpbGVcbiAgICAgICAgZG9jdW1lbnRfaWQ6IFVVSUQgb2YgdGhlIGRvY3VtZW50XG4gICAgICAgIG1ldGFkYXRhOiBBZGRpdGlvbmFsIG1ldGFkYXRhIHRvIHN0b3JlIHdpdGggdGhlIGRvY3VtZW50XG5cbiAgICBSZXR1cm5zOlxuICAgICAgICBOdW1iZXIgb2YgY2h1bmtzIGluZGV4ZWRcbiAgICBcIlwiXCJcbiAgICB0cnk6XG4gICAgICAgICMgTG9hZCBhbmQgc3BsaXQgdGhlIGRvY3VtZW50XG4gICAgICAgIHNwbGl0cyA9IGxvYWRfYW5kX3NwbGl0X2RvY3VtZW50KGZpbGVfcGF0aClcblxuICAgICAgICAjIEFkZCBtZXRhZGF0YSB0byBlYWNoIHNwbGl0XG4gICAgICAgIGZvciBzcGxpdCBpbiBzcGxpdHM6XG4gICAgICAgICAgICBzcGxpdC5tZXRhZGF0YVsnZG9jdW1lbnRfaWQnXSA9IHN0cihkb2N1bWVudF9pZClcbiAgICAgICAgICAgIGlmIG1ldGFkYXRhOlxuICAgICAgICAgICAgICAgIHNwbGl0Lm1ldGFkYXRhLnVwZGF0ZShtZXRhZGF0YSlcblxuICAgICAgICAjIEFkZCBkb2N1bWVudHMgdG8gdGhlIHZlY3RvciBzdG9yZVxuICAgICAgICB2ZWN0b3JzdG9yZS5hZGRfZG9jdW1lbnRzKHNwbGl0cylcblxuICAgICAgICByZXR1cm4gbGVuKHNwbGl0cylcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHByaW50KGZcIkVycm9yIGluZGV4aW5nIGRvY3VtZW50OiB7ZX1cIilcbiAgICAgICAgcmFpc2Vcbi4uLlxuUGF0aDogYmFja2VuZC9hcHAvcmFnL29wZW5yb3V0ZXJfY2xpZW50LnB5XG5cIlwiXCJcbk9wZW5Sb3V0ZXIgY2xpZW50IGZvciBMTE0gaW50ZWdyYXRpb24uXG5cIlwiXCJcbmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBMaXN0LCBBbnksIE9wdGlvbmFsXG5pbXBvcnQganNvblxuaW1wb3J0IGh0dHB4XG5mcm9tIGxhbmdjaGFpbl9jb3JlLmxhbmd1YWdlX21vZGVscy5jaGF0X21vZGVscyBpbXBvcnQgQmFzZUNoYXRNb2RlbFxuZnJvbSBsYW5nY2hhaW5fY29yZS5tZXNzYWdlcyBpbXBvcnQgKFxuICAgIEFJTWVzc2FnZSxcbiAgICBCYXNlTWVzc2FnZSxcbiAgICBDaGF0TWVzc2FnZSxcbiAgICBIdW1hbk1lc3NhZ2UsXG4gICAgU3lzdGVtTWVzc2FnZSxcbilcbmZyb20gbGFuZ2NoYWluX2NvcmUub3V0cHV0cyBpbXBvcnQgQ2hhdEdlbmVyYXRpb24sIENoYXRSZXN1bHRcbmZyb20gbGFuZ2NoYWluX2NvcmUuY2FsbGJhY2tzLm1hbmFnZXIgaW1wb3J0IENhbGxiYWNrTWFuYWdlckZvckxMTVJ1blxuXG5mcm9tIGFwcC5jb3JlLmNvbmZpZyBpbXBvcnQgc2V0dGluZ3NcblxuXG5jbGFzcyBPcGVuUm91dGVyQ2hhdE1vZGVsKEJhc2VDaGF0TW9kZWwpOlxuICAgIFwiXCJcIkNoYXQgbW9kZWwgdGhhdCB1c2VzIE9wZW5Sb3V0ZXIgQVBJLlwiXCJcIlxuICAgIFxuICAgIGFwaV9rZXk6IHN0clxuICAgIGJhc2VfdXJsOiBzdHIgPSBcImh0dHBzOi8vb3BlbnJvdXRlci5haS9hcGkvdjFcIlxuICAgIG1vZGVsOiBzdHIgPSBcIm9wZW5haS9ncHQtNG8tbWluaVwiXG4gICAgdGVtcGVyYXR1cmU6IGZsb2F0ID0gMC43XG4gICAgbWF4X3Rva2VuczogT3B0aW9uYWxbaW50XSA9IE5vbmVcbiAgICB0b3BfcDogT3B0aW9uYWxbZmxvYXRdID0gTm9uZVxuLi4uXG4gICAgICAgIFxuICAgICAgICAjIENvbnZlcnQgTGFuZ0NoYWluIG1lc3NhZ2VzIHRvIE9wZW5Sb3V0ZXIgZm9ybWF0XG4gICAgICAgIGZvciBtZXNzYWdlIGluIG1lc3NhZ2VzOlxuICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShtZXNzYWdlLCBTeXN0ZW1NZXNzYWdlKTpcbiAgICAgICAgICAgICAgICBtZXNzYWdlX2RpY3RzLmFwcGVuZCh7XCJyb2xlXCI6IFwic3lzdGVtXCIsIFwiY29udGVudFwiOiBtZXNzYWdlLmNvbnRlbnR9KVxuICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKG1lc3NhZ2UsIEh1bWFuTWVzc2FnZSk6XG4gICAgICAgICAgICAgICAgbWVzc2FnZV9kaWN0cy5hcHBlbmQoe1wicm9sZVwiOiBcInVzZXJcIiwgXCJjb250ZW50XCI6IG1lc3NhZ2UuY29udGVudH0pXG4gICAgICAgICAgICBlbGlmIGlzaW5zdGFuY2UobWVzc2FnZSwgQUlNZXNzYWdlKTpcbiAgICAgICAgICAgICAgICBtZXNzYWdlX2RpY3RzLmFwcGVuZCh7XCJyb2xlXCI6IFwiYXNzaXN0YW50XCIsIFwiY29udGVudFwiOiBtZXNzYWdlLmNvbnRlbnR9KVxuICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKG1lc3NhZ2UsIENoYXRNZXNzYWdlKTpcbiAgICAgICAgICAgICAgICBtZXNzYWdlX2RpY3RzLmFwcGVuZCh7XCJyb2xlXCI6IG1lc3NhZ2Uucm9sZSwgXCJjb250ZW50XCI6IG1lc3NhZ2UuY29udGVudH0pXG4gICAgICAgICAgICBlbHNlOlxuICAgICAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoZlwiR290IHVua25vd24gbWVzc2FnZSB0eXBlOiB7bWVzc2FnZX1cIilcbiAgICAgICAgXG4gICAgICAgICMgUHJlcGFyZSB0aGUgcmVxdWVzdCBwYXlsb2FkXG4gICAgICAgIHBheWxvYWQgPSB7XG4gICAgICAgICAgICBcIm1vZGVsXCI6IHNlbGYubW9kZWwsXG4gICAgICAgICAgICBcIm1lc3NhZ2VzXCI6IG1lc3NhZ2VfZGljdHMsXG4gICAgICAgICAgICBcInRlbXBlcmF0dXJlXCI6IHNlbGYudGVtcGVyYXR1cmUsXG4gICAgICAgIH1cbi4uLlxuICAgICAgICBcbiAgICAgICAgdHJ5OlxuICAgICAgICAgICAgd2l0aCBodHRweC5DbGllbnQodGltZW91dD02MC4wKSBhcyBjbGllbnQ6XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBjbGllbnQucG9zdChcbiAgICAgICAgICAgICAgICAgICAgZlwie3NlbGYuYmFzZV91cmx9L2NoYXQvY29tcGxldGlvbnNcIixcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycz1oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBqc29uPXBheWxvYWQsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKVxuICAgICAgICAgICAgICAgIHJlc3BvbnNlX2RhdGEgPSByZXNwb25zZS5qc29uKClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAjIEV4dHJhY3QgdGhlIHJlc3BvbnNlIGNvbnRlbnRcbiAgICAgICAgICAgICAgICBtZXNzYWdlX2NvbnRlbnQgPSByZXNwb25zZV9kYXRhW1wiY2hvaWNlc1wiXVswXVtcIm1lc3NhZ2VcIl1bXCJjb250ZW50XCJdXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgIyBDcmVhdGUgYSBDaGF0R2VuZXJhdGlvbiBvYmplY3RcbiAgICAgICAgICAgICAgICBnZW5lcmF0aW9uID0gQ2hhdEdlbmVyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U9QUlNZXNzYWdlKGNvbnRlbnQ9bWVzc2FnZV9jb250ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGlvbl9pbmZvPXtcImZpbmlzaF9yZWFzb25cIjogcmVzcG9uc2VfZGF0YVtcImNob2ljZXNcIl1bMF0uZ2V0KFwiZmluaXNoX3JlYXNvblwiKX1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgIyBSZXR1cm4gdGhlIENoYXRSZXN1bHRcbiAgICAgICAgICAgICAgICByZXR1cm4gQ2hhdFJlc3VsdChnZW5lcmF0aW9ucz1bZ2VuZXJhdGlvbl0pXG4gICAgICAgIFxuICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKGZcIkVycm9yIGNhbGxpbmcgT3BlblJvdXRlciBBUEk6IHtzdHIoZSl9XCIpXG4gICAgXG4gICAgQHByb3BlcnR5XG4gICAgZGVmIF9sbG1fdHlwZShzZWxmKSAtPiBzdHI6XG4gICAgICAgIFwiXCJcIlJldHVybiB0aGUgdHlwZSBvZiBMTE0uXCJcIlwiXG4gICAgICAgIHJldHVybiBcIm9wZW5yb3V0ZXJcIlxuXG5cbmRlZiBnZXRfb3BlbnJvdXRlcl9jaGF0X21vZGVsKFxuICAgIG1vZGVsOiBzdHIgPSBOb25lLFxuICAgIHRlbXBlcmF0dXJlOiBmbG9hdCA9IDAuNyxcbiAgICBtYXhfdG9rZW5zOiBPcHRpb25hbFtpbnRdID0gTm9uZSxcbiAgICB0b3BfcDogT3B0aW9uYWxbZmxvYXRdID0gTm9uZSxcbikgLT4gT3BlblJvdXRlckNoYXRNb2RlbDpcbiAgICBcIlwiXCJcbiAgICBHZXQgYW4gT3BlblJvdXRlckNoYXRNb2RlbCBpbnN0YW5jZS5cbiAgICBcbiAgICBBcmdzOlxuICAgICAgICBtb2RlbDogTW9kZWwgbmFtZSAoZS5nLiwgXCJvcGVuYWkvZ3B0LTRvLW1pbmlcIiwgXCJhbnRocm9waWMvY2xhdWRlLTMtb3B1c1wiKVxuICAgICAgICB0ZW1wZXJhdHVyZTogVGVtcGVyYXR1cmUgZm9yIGdlbmVyYXRpb25cbiAgICAgICAgbWF4X3Rva2VuczogTWF4aW11bSB0b2tlbnMgdG8gZ2VuZXJhdGVcbiAgICAgICAgdG9wX3A6IFRvcC1wIHNhbXBsaW5nIHBhcmFtZXRlclxuICAgICAgICBcbiAgICBSZXR1cm5zOlxuICAgICAgICBPcGVuUm91dGVyQ2hhdE1vZGVsIGluc3RhbmNlXG4gICAgXCJcIlwiXG4gICAgcmV0dXJuIE9wZW5Sb3V0ZXJDaGF0TW9kZWwoXG4gICAgICAgIGFwaV9rZXk9c2V0dGluZ3MuT1BFTlJPVVRFUl9BUElfS0VZLFxuICAgICAgICBiYXNlX3VybD1zZXR0aW5ncy5PUEVOUk9VVEVSX0JBU0VfVVJMLFxuICAgICAgICBtb2RlbD1tb2RlbCBvciBzZXR0aW5ncy5ERUZBVUxUX0xMTV9NT0RFTCxcbiAgICAgICAgdGVtcGVyYXR1cmU9dGVtcGVyYXR1cmUsXG4gICAgICAgIG1heF90b2tlbnM9bWF4X3Rva2VucyxcbiAgICAgICAgdG9wX3A9dG9wX3AuLi4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJmYmU2MGY2ZS1jYTM0LTQ0YTYtYTI3OC0yYmZmNzE2NDA0YTk7dG9vbHVfdnJ0eF8wMTFVb21ONjVyYVZpRVpyaEY3WWFqQVgiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiQ29tbWFuZCBpcyBzdGlsbCBydW5uaW5nIGFmdGVyIDAgc2Vjb25kcy4gWW91IGNhbiB1c2UgcmVhZC1wcm9jZXNzIHRvIGdldCBtb3JlIG91dHB1dFxuYW5kIGtpbGwtcHJvY2VzcyB0byB0ZXJtaW5hdGUgaXQgaWYgbmVlZGVkLlxuUElEIDRcbk91dHB1dCBzbyBmYXI6XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImUxNzZmYzNiLTU4MmItNGQ5OC04NjcxLTkxNmMyMzkzNzQyZjt0b29sdV92cnR4XzAxTkt2OTdSOW1wR3hFRENRR1d1dmtXNCI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJDb21tYW5kIGlzIHN0aWxsIHJ1bm5pbmcgYWZ0ZXIgMCBzZWNvbmRzLiBZb3UgY2FuIHVzZSByZWFkLXByb2Nlc3MgdG8gZ2V0IG1vcmUgb3V0cHV0XG5hbmQga2lsbC1wcm9jZXNzIHRvIHRlcm1pbmF0ZSBpdCBpZiBuZWVkZWQuXG5QSUQgNVxuT3V0cHV0IHNvIGZhcjpcbjxzdGRvdXQ+XG5cbjwvc3Rkb3V0PlxuPHN0ZGVycj5cblxuPC9zdGRlcnI+IiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiZjUxZDI0YWMtNGI5Yi00OGE2LTljM2UtOWMwNTg2MDI0YzgyO3Rvb2x1X3ZydHhfMDFEdDNWc25RdVc3WGZ3SkdDN0pQcllEIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDUgKHN0YXR1czogY29tcGxldGVkKTpcbjxvdXRwdXQ+dG90YWwgMzIwXHJcbmRyd3hyLXhyLXhAIDMyIHBpcGlsdSAgc3RhZmYgICAxMDI0IEFwciAxMCAxNDo1MCAuXHJcbmRyd3hyLXhyLXhAICA4IHBpcGlsdSAgc3RhZmYgICAgMjU2IEFwciAxMCAxMzo0NyAuLlxyXG5kcnd4ci14ci14ICAgNCBwaXBpbHUgIHN0YWZmICAgIDEyOCBBcHIgMTAgMDk6MjAgLmNvcGllclxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgMTUwOSBBcHIgMTAgMTM6MTMgLmVudlxyXG5kcnd4ci14ci14ICAxNCBwaXBpbHUgIHN0YWZmICAgIDQ0OCBBcHIgMTAgMTQ6NTAgLmdpdFxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgICAyOSBBcHIgMTAgMDk6MjAgLmdpdGF0dHJpYnV0ZXNcclxuZHJ3eHIteHIteCAgIDggcGlwaWx1ICBzdGFmZiAgICAyNTYgQXByIDEwIDA5OjIwIC5naXRodWJcclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgICAgOTEgQXByIDEwIDA5OjIwIC5naXRpZ25vcmVcclxuZHJ3eHIteHIteEAgMTEgcGlwaWx1ICBzdGFmZiAgICAzNTIgQXByIDEwIDE1OjAyIC5pZGVhXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgODc0IEFwciAxMCAwOToyMCAucHJlLWNvbW1pdC1jb25maWcueWFtbFxyXG5kcnd4ci14ci14QCAgMyBwaXBpbHUgIHN0YWZmICAgICA5NiBBcHIgMTAgMTM6NDggLnZzY29kZVxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgMTA3NiBBcHIgMTAgMDk6MjAgTElDRU5TRVxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgODgzNiBBcHIgMTAgMDk6MjAgUkVBRE1FLm1kXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAxMTA4IEFwciAxMCAwOToyMCBTRUNVUklUWS5tZFxyXG5kcnd4ci14ci14ICAxNSBwaXBpbHUgIHN0YWZmICAgIDQ4MCBBcHIgMTAgMTQ6NTIgYmFja2VuZFxyXG5kcnd4ci14ci14ICAgMiBwaXBpbHUgIHN0YWZmICAgICA2NCBBcHIgMTAgMTE6MzIgY2hyb21hX2RiXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAyMTE4IEFwciAxMCAwOToyMCBjb3BpZXIueW1sXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgIDExMzUyIEFwciAxMCAwOToyMCBkZXBsb3ltZW50Lm1kXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICA3Nzc2IEFwciAxMCAwOToyMCBkZXZlbG9wbWVudC5tZFxyXG5kcnd4ci14ci14ICAgOCBwaXBpbHUgIHN0YWZmICAgIDI1NiBBcHIgMTAgMDk6NTkgZG9jXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAzNzQ0IEFwciAxMCAwOToyMCBkb2NrZXItY29tcG9zZS5vdmVycmlkZS55bWxcclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgIDM5ODEgQXByIDEwIDA5OjIwIGRvY2tlci1jb21wb3NlLnRyYWVmaWsueW1sXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICA2NDY0IEFwciAxMCAwOToyMCBkb2NrZXItY29tcG9zZS55bWxcclxuZHJ3eHIteHIteCAgMjYgcGlwaWx1ICBzdGFmZiAgICA4MzIgQXByIDEwIDE0OjE4IGZyb250ZW5kXHJcbmRyd3hyLXhyLXggICAzIHBpcGlsdSAgc3RhZmYgICAgIDk2IEFwciAxMCAwOToyMCBob29rc1xyXG5kcnd4ci14ci14ICAxMSBwaXBpbHUgIHN0YWZmICAgIDM1MiBBcHIgMTAgMDk6MjAgaW1nXHJcbi1ydy1yLS1yLS1AICAxIHBpcGlsdSAgc3RhZmYgICAgMTA0IEFwciAxMCAxMzozMCBtYWluLnB5XHJcbi1ydy1yLS1yLS1AICAxIHBpcGlsdSAgc3RhZmYgICAgMTUxIEFwciAxMCAxMzozMCBweXByb2plY3QudG9tbFxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICA3MDI0MiBBcHIgMTAgMDk6MjAgcmVsZWFzZS1ub3Rlcy5tZFxyXG5kcnd4ci14ci14ICAgOCBwaXBpbHUgIHN0YWZmICAgIDI1NiBBcHIgMTAgMDk6MjAgc2NyaXB0c1xyXG5kcnd4ci14ci14ICAgMiBwaXBpbHUgIHN0YWZmICAgICA2NCBBcHIgMTAgMTE6MzIgdXBsb2Fkc1xyXG4tcnctci0tci0tQCAgMSBwaXBpbHUgIHN0YWZmICAgIDE0NiBBcHIgMTAgMTQ6NDAgdXYubG9ja1xyXG48L291dHB1dD5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI1MjQxMTNkZS00YjE4LTQ5OTktOWQ5My1mNjE5MDU2ZjBlYzk7dG9vbHVfdnJ0eF8wMUF1UWRVZW5BOW12eEFHdWJFWDR0a2YiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiAuZW52OlxuICAgICAxXHQjIERvbWFpblxuICAgICAyXHQjIFRoaXMgd291bGQgYmUgc2V0IHRvIHRoZSBwcm9kdWN0aW9uIGRvbWFpbiB3aXRoIGFuIGVudiB2YXIgb24gZGVwbG95bWVudFxuICAgICAzXHQjIHVzZWQgYnkgVHJhZWZpayB0byB0cmFuc21pdCB0cmFmZmljIGFuZCBhcWN1aXJlIFRMUyBjZXJ0aWZpY2F0ZXNcbiAgICAgNFx0RE9NQUlOPWxvY2FsaG9zdFxuICAgICA1XHQjIFRvIHRlc3QgdGhlIGxvY2FsIFRyYWVmaWsgY29uZmlnXG4gICAgIDZcdCMgRE9NQUlOPWxvY2FsaG9zdC50aWFuZ29sby5jb21cbiAgICAgN1x0XG4gICAgIDhcdCMgVXNlZCBieSB0aGUgYmFja2VuZCB0byBnZW5lcmF0ZSBsaW5rcyBpbiBlbWFpbHMgdG8gdGhlIGZyb250ZW5kXG4gICAgIDlcdEZST05URU5EX0hPU1Q9aHR0cDovL2xvY2FsaG9zdDo1MTczXG4gICAgMTBcdCMgSW4gc3RhZ2luZyBhbmQgcHJvZHVjdGlvbiwgc2V0IHRoaXMgZW52IHZhciB0byB0aGUgZnJvbnRlbmQgaG9zdCwgZS5nLlxuICAgIDExXHQjIEZST05URU5EX0hPU1Q9aHR0cHM6Ly9kYXNoYm9hcmQuZXhhbXBsZS5jb21cbiAgICAxMlx0XG4gICAgMTNcdCMgRW52aXJvbm1lbnQ6IGxvY2FsLCBzdGFnaW5nLCBwcm9kdWN0aW9uXG4gICAgMTRcdEVOVklST05NRU5UPWxvY2FsXG4gICAgMTVcdFxuICAgIDE2XHRQUk9KRUNUX05BTUU9XCJQYXJlbnRpbmcgQXNzaXN0YW50XCJcbiAgICAxN1x0U1RBQ0tfTkFNRT1mdWxsLXN0YWNrLWZhc3RhcGktcHJvamVjdFxuICAgIDE4XHRcbiAgICAxOVx0IyBCYWNrZW5kXG4gICAgMjBcdEJBQ0tFTkRfQ09SU19PUklHSU5TPVwiaHR0cDovL2xvY2FsaG9zdCxodHRwOi8vbG9jYWxob3N0OjUxNzMsaHR0cHM6Ly9sb2NhbGhvc3QsaHR0cHM6Ly9sb2NhbGhvc3Q6NTE3MyxodHRwOi8vbG9jYWxob3N0LnRpYW5nb2xvLmNvbVwiXG4gICAgMjFcdFNFQ1JFVF9LRVk9QmFUc1owMk9XdllKekJSU2tDZkhfY2I3MXZ6MmktbVRyT0JtNjMzbEdtSVxuICAgIDIyXHRGSVJTVF9TVVBFUlVTRVI9MTMyMTY2OTg5ODdAMTYzLmNvbVxuICAgIDIzXHRGSVJTVF9TVVBFUlVTRVJfUEFTU1dPUkQ9R3Vhbm1vITAxXG4gICAgMjRcdFxuICAgIDI1XHQjIEVtYWlsc1xuICAgIDI2XHRTTVRQX0hPU1Q9XG4gICAgMjdcdFNNVFBfVVNFUj1cbiAgICAyOFx0U01UUF9QQVNTV09SRD1cbiAgICAyOVx0RU1BSUxTX0ZST01fRU1BSUw9aW5mb0BleGFtcGxlLmNvbVxuICAgIDMwXHRTTVRQX1RMUz1UcnVlXG4gICAgMzFcdFNNVFBfU1NMPUZhbHNlXG4gICAgMzJcdFNNVFBfUE9SVD01ODdcbiAgICAzM1x0XG4gICAgMzRcdCMgUG9zdGdyZXNcbiAgICAzNVx0UE9TVEdSRVNfU0VSVkVSPWF3cy0wLWFwLW5vcnRoZWFzdC0xLnBvb2xlci5zdXBhYmFzZS5jb21cbiAgICAzNlx0UE9TVEdSRVNfUE9SVD02NTQzXG4gICAgMzdcdFBPU1RHUkVTX0RCPXBvc3RncmVzXG4gICAgMzhcdFBPU1RHUkVTX1VTRVI9cG9zdGdyZXMucHZhZXRjcGZ1aGV2Z2VtY3Foc2hcbiAgICAzOVx0UE9TVEdSRVNfUEFTU1dPUkQ9R3Vhbm1vITAxXG4gICAgNDBcdFxuICAgIDQxXHRTRU5UUllfRFNOPVxuICAgIDQyXHRcbiAgICA0M1x0IyBMTE0gU2V0dGluZ3NcbiAgICA0NFx0T1BFTlJPVVRFUl9BUElfS0VZPXNrLW9yLXYxLTk4MTg0NGQ4MWNiMTAwNGUwMWNlZTcyZjYzYjdiYmJlNGM5MGFlZWQwZjRhODc0ZjMwZDg1MDFiNWQwMGI2YTVcbiAgICA0NVx0REVGQVVMVF9MTE1fTU9ERUw9ZGVlcHNlZWsvZGVlcHNlZWstY2hhdC12My0wMzI0OmZyZWVcbiAgICA0Nlx0T1BFTlJPVVRFUl9CQVNFX1VSTD1odHRwczovL29wZW5yb3V0ZXIuYWkvYXBpL3YxXG4gICAgNDdcdFxuICAgIDQ4XHQjIENvbmZpZ3VyZSB0aGVzZSB3aXRoIHlvdXIgb3duIERvY2tlciByZWdpc3RyeSBpbWFnZXNcbiAgICA0OVx0RE9DS0VSX0lNQUdFX0JBQ0tFTkQ9YmFja2VuZFxuICAgIDUwXHRET0NLRVJfSU1BR0VfRlJPTlRFTkQ9ZnJvbnRlbmRcbiAgICA1MVx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiA1MVxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMThkMmFjODMtNDc5Yi00OGU4LTk3MmQtY2VmMDQyMTFiZGYzO3Rvb2x1X3ZydHhfMDFCQkt0OWVnelZERVc1SzQxWjNiUXU3Ijp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkNvbW1hbmQgaXMgc3RpbGwgcnVubmluZyBhZnRlciAwIHNlY29uZHMuIFlvdSBjYW4gdXNlIHJlYWQtcHJvY2VzcyB0byBnZXQgbW9yZSBvdXRwdXRcbmFuZCBraWxsLXByb2Nlc3MgdG8gdGVybWluYXRlIGl0IGlmIG5lZWRlZC5cblBJRCA2XG5PdXRwdXQgc28gZmFyOlxuPHN0ZG91dD5cblxuPC9zdGRvdXQ+XG48c3RkZXJyPlxuXG48L3N0ZGVycj4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI1NzI4ZWZiYS1lNGI5LTQ0MTItYmYwNy1mNjRiMDg5ZmEyMjQ7dG9vbHVfdnJ0eF8wMUw1Z2Z6NFRpWmNqVURCZWhKTGlvUXIiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSBpcyB0aGUgb3V0cHV0IGZyb20gdGVybWluYWwgNiAoc3RhdHVzOiBjb21wbGV0ZWQpOlxuPG91dHB1dD50b3RhbCA0OTZcclxuZHJ3eHIteHIteCAgMTUgcGlwaWx1ICBzdGFmZiAgICAgNDgwIEFwciAxMCAxNDo1MiAuXHJcbmRyd3hyLXhyLXhAIDMyIHBpcGlsdSAgc3RhZmYgICAgMTAyNCBBcHIgMTAgMTQ6NTAgLi5cclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgICAgIDc2IEFwciAxMCAwOToyMCAuZG9ja2VyaWdub3JlXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgICA3NCBBcHIgMTAgMDk6MjAgLmdpdGlnbm9yZVxyXG5kcnd4ci14ci14QCAgOCBwaXBpbHUgIHN0YWZmICAgICAyNTYgQXByIDEwIDE1OjA0IC52ZW52XHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgMTI2MiBBcHIgMTAgMDk6MjAgRG9ja2VyZmlsZVxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgIDc3NjMgQXByIDEwIDA5OjIwIFJFQURNRS5tZFxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgIDE1OTYgQXByIDEwIDA5OjIwIGFsZW1iaWMuaW5pXHJcbmRyd3hyLXhyLXggIDE3IHBpcGlsdSAgc3RhZmYgICAgIDU0NCBBcHIgMTAgMTE6MjggYXBwXHJcbmRyd3hyLXhyLXhAICAzIHBpcGlsdSAgc3RhZmYgICAgICA5NiBBcHIgMTAgMTQ6MDQgY2hyb21hX2RiXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgMTc0MiBBcHIgMTAgMDk6MjAgcHlwcm9qZWN0LnRvbWxcclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgICAgNDY5IEFwciAxMCAxMzoxMSByZXF1aXJlbWVudHMudHh0XHJcbmRyd3hyLXhyLXggICA4IHBpcGlsdSAgc3RhZmYgICAgIDI1NiBBcHIgMTAgMDk6MjAgc2NyaXB0c1xyXG5kcnd4ci14ci14QCAgMiBwaXBpbHUgIHN0YWZmICAgICAgNjQgQXByIDEwIDE0OjA0IHVwbG9hZHNcclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgMjE5ODE2IEFwciAxMCAwOToyMCB1di5sb2NrXHJcbjwvb3V0cHV0PlxuPHJldHVybi1jb2RlPlxuMFxuPC9yZXR1cm4tY29kZT5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImExY2E0NDEyLWNhYmItNGVmNS04NmUyLTI2MGNkOTE0ZjQ2Yzt0b29sdV92cnR4XzAxQzNHN1F2OTlUR2d2ZXA3NUh5YlAxViI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGJhY2tlbmQvcmVxdWlyZW1lbnRzLnR4dDpcbiAgICAgMVx0IyBGYXN0QVBJXG4gICAgIDJcdGZhc3RhcGk+PTAuMTE1LjBcbiAgICAgM1x0dXZpY29ybj49MC4zMC4wXG4gICAgIDRcdHB5ZGFudGljPj0yLjkuMFxuICAgICA1XHRweWRhbnRpYy1zZXR0aW5ncz49Mi41LjBcbiAgICAgNlx0c3FsbW9kZWw+PTAuMC4yMlxuICAgICA3XHRlbWFpbC12YWxpZGF0b3I+PTIuMi4wXG4gICAgIDhcdHB5dGhvbi1tdWx0aXBhcnQ+PTAuMC4xMFxuICAgICA5XHRcbiAgICAxMFx0IyBEYXRhYmFzZVxuICAgIDExXHRwc3ljb3BnPj0zLjIuMFxuICAgIDEyXHRhbGVtYmljPj0xLjEzLjBcbiAgICAxM1x0XG4gICAgMTRcdCMgU2VjdXJpdHlcbiAgICAxNVx0cHl0aG9uLWpvc2U+PTMuMy4wXG4gICAgMTZcdHBhc3NsaWI+PTEuNy40XG4gICAgMTdcdGJjcnlwdD49NC4wLjFcbiAgICAxOFx0XG4gICAgMTlcdCMgRW1haWxcbiAgICAyMFx0ZW1haWxzPj0wLjZcbiAgICAyMVx0amluamEyPj0zLjEuNFxuICAgIDIyXHRcbiAgICAyM1x0IyBSQUcgU3lzdGVtXG4gICAgMjRcdGxhbmdjaGFpbj49MC4xLjBcbiAgICAyNVx0bGFuZ2NoYWluLWNvcmU+PTAuMS4wXG4gICAgMjZcdGxhbmdjaGFpbi1jb21tdW5pdHk+PTAuMS4wXG4gICAgMjdcdGxhbmdjaGFpbi1jaHJvbWE+PTAuMS4wXG4gICAgMjhcdGNocm9tYWRiPj0wLjQuMFxuICAgIDI5XHRodHRweD49MC4yNy4wXG4gICAgMzBcdHB5cGRmPj00LjAuMFxuICAgIDMxXHRkb2N4MnR4dD49MC44XG4gICAgMzJcdHVuc3RydWN0dXJlZD49MC4xMi4wXG4gICAgMzNcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogMzNcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjE4MTY3ZDQ0LWNhZTktNGYxMC1iNGFjLTgzMjcxMWQ1NTBkNjt0b29sdV92cnR4XzAxNnBldFl1eUVIOGR1ZGhmYWluSEdZciI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJDb21tYW5kIGlzIHN0aWxsIHJ1bm5pbmcgYWZ0ZXIgMCBzZWNvbmRzLiBZb3UgY2FuIHVzZSByZWFkLXByb2Nlc3MgdG8gZ2V0IG1vcmUgb3V0cHV0XG5hbmQga2lsbC1wcm9jZXNzIHRvIHRlcm1pbmF0ZSBpdCBpZiBuZWVkZWQuXG5QSUQgN1xuT3V0cHV0IHNvIGZhcjpcbjxzdGRvdXQ+XG5cbjwvc3Rkb3V0PlxuPHN0ZGVycj5cblxuPC9zdGRlcnI+IiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiYTQwNzk4NzMtMDNhZC00OTFkLWJiZTUtNDExYjlkYTI3MWU5O3Rvb2x1X3ZydHhfMDFCdFFrMkU2clRhWGVxRzFubnM3RGpQIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDcgKHN0YXR1czogY29tcGxldGVkKTpcbjxvdXRwdXQ+UmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGZhc3RhcGk+PTAuMTE1LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIC1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMikpICgwLjExNS4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogdXZpY29ybj49MC4zMC4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMpKSAoMC4zMC42KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHlkYW50aWM+PTIuOS4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDQpKSAoMi4xMS4zKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHlkYW50aWMtc2V0dGluZ3M+PTIuNS4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDUpKSAoMi41LjIpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBzcWxtb2RlbD49MC4wLjIyIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDYpKSAoMC4wLjIyKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogZW1haWwtdmFsaWRhdG9yPj0yLjIuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gLXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSA3KSkgKDIuMi4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHl0aG9uLW11bHRpcGFydD49MC4wLjEwIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDgpKSAoMC4wLjEwKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHN5Y29wZz49My4yLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIC1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMTEpKSAoMy4yLjIpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBhbGVtYmljPj0xLjEzLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIC1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMTIpKSAoMS4xMy4yKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHl0aG9uLWpvc2U+PTMuMy4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDE1KSkgKDMuNC4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcGFzc2xpYj49MS43LjQgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIC1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMTYpKSAoMS43LjQpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBiY3J5cHQ+PTQuMC4xIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDE3KSkgKDQuMC4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogZW1haWxzPj0wLjYgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIC1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjApKSAoMC42KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogamluamEyPj0zLjEuNCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gLXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyMSkpICgzLjEuNClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGxhbmdjaGFpbj49MC4xLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIC1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjQpKSAoMC4zLjIzKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogbGFuZ2NoYWluLWNvcmU+PTAuMS4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI1KSkgKDAuMy41MSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGxhbmdjaGFpbi1jb21tdW5pdHk+PTAuMS4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI2KSkgKDAuMy4yMSlcclxuQ29sbGVjdGluZyBsYW5nY2hhaW4tY2hyb21hPj0wLjEuMCAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI3KSlcclxuICBVc2luZyBjYWNoZWQgbGFuZ2NoYWluX2Nocm9tYS0wLjIuMi1weTMtbm9uZS1hbnkud2hsLm1ldGFkYXRhICgxLjMga0IpXHJcbkNvbGxlY3RpbmcgY2hyb21hZGI+PTAuNC4wIChmcm9tIC1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKVxyXG4gIFVzaW5nIGNhY2hlZCBjaHJvbWFkYi0xLjAuNC1jcDM5LWFiaTMtbWFjb3N4XzExXzBfYXJtNjQud2hsLm1ldGFkYXRhICg2Ljkga0IpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBodHRweD49MC4yNy4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSAtciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI5KSkgKDAuMjcuMilcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHB5cGRmPj00LjAuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gLXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAzMCkpICg1LjQuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGRvY3gydHh0Pj0wLjggaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIC1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzEpKSAoMC45KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogdW5zdHJ1Y3R1cmVkPj0wLjEyLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIC1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoMC4xNy4yKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogc3RhcmxldHRlPDAuMzkuMCw+PTAuMzcuMiBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gZmFzdGFwaT49MC4xMTUuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyKSkgKDAuMzguNilcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHR5cGluZy1leHRlbnNpb25zPj00LjguMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gZmFzdGFwaT49MC4xMTUuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyKSkgKDQuMTIuMilcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGNsaWNrPj03LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHV2aWNvcm4+PTAuMzAuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAzKSkgKDguMS43KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogaDExPj0wLjggaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHV2aWNvcm4+PTAuMzAuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAzKSkgKDAuMTQuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGFubm90YXRlZC10eXBlcz49MC42LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHB5ZGFudGljPj0yLjkuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSA0KSkgKDAuNy4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHlkYW50aWMtY29yZT09Mi4zMy4xIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBweWRhbnRpYz49Mi45LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgNCkpICgyLjMzLjEpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiB0eXBpbmctaW5zcGVjdGlvbj49MC40LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHB5ZGFudGljPj0yLjkuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSA0KSkgKDAuNC4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHl0aG9uLWRvdGVudj49MC4yMS4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBweWRhbnRpYy1zZXR0aW5ncz49Mi41LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgNSkpICgxLjAuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IFNRTEFsY2hlbXk8Mi4xLjAsPj0yLjAuMTQgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHNxbG1vZGVsPj0wLjAuMjItPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgNikpICgyLjAuMzUpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBkbnNweXRob24+PTIuMC4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBlbWFpbC12YWxpZGF0b3I+PTIuMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDcpKSAoMi42LjEpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBpZG5hPj0yLjAuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gZW1haWwtdmFsaWRhdG9yPj0yLjIuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSA3KSkgKDMuMTApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBNYWtvIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBhbGVtYmljPj0xLjEzLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMTIpKSAoMS4zLjUpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBlY2RzYSE9MC4xNSBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gcHl0aG9uLWpvc2U+PTMuMy4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDE1KSkgKDAuMTkuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHJzYSE9NC4xLjEsIT00LjQsPDUuMCw+PTQuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gcHl0aG9uLWpvc2U+PTMuMy4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDE1KSkgKDQuOSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHB5YXNuMTwwLjUuMCw+PTAuNC4xIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBweXRob24tam9zZT49My4zLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMTUpKSAoMC40LjgpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBjc3N1dGlscyBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gZW1haWxzPj0wLjYtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjApKSAoMi4xMS4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogbHhtbCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gZW1haWxzPj0wLjYtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjApKSAoNS4zLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBjaGFyZGV0IGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBlbWFpbHM+PTAuNi0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyMCkpICg1LjIuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHB5dGhvbi1kYXRldXRpbCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gZW1haWxzPj0wLjYtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjApKSAoMi45LjAucG9zdDApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiByZXF1ZXN0cyBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gZW1haWxzPj0wLjYtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjApKSAoMi4zMi4zKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHJlbWFpbGVyIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBlbWFpbHM+PTAuNi0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyMCkpICgzLjEwLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBNYXJrdXBTYWZlPj0yLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGppbmphMj49My4xLjQtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjEpKSAoMi4xLjUpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBsYW5nY2hhaW4tdGV4dC1zcGxpdHRlcnM8MS4wLjAsPj0wLjMuOCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gbGFuZ2NoYWluPj0wLjEuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyNCkpICgwLjMuOClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGxhbmdzbWl0aDwwLjQsPj0wLjEuMTcgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGxhbmdjaGFpbj49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjQpKSAoMC4zLjI4KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogUHlZQU1MPj01LjMgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGxhbmdjaGFpbj49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjQpKSAoNi4wLjIpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiB0ZW5hY2l0eSE9OC40LjAsPDEwLjAuMCw+PTguMS4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBsYW5nY2hhaW4tY29yZT49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjUpKSAoOC41LjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBqc29ucGF0Y2g8Mi4wLD49MS4zMyBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gbGFuZ2NoYWluLWNvcmU+PTAuMS4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI1KSkgKDEuMzMpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBwYWNrYWdpbmc8MjUsPj0yMy4yIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBsYW5nY2hhaW4tY29yZT49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjUpKSAoMjQuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGFpb2h0dHA8NC4wLjAsPj0zLjguMyBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gbGFuZ2NoYWluLWNvbW11bml0eT49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjYpKSAoMy4xMS4xNilcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGRhdGFjbGFzc2VzLWpzb248MC43LD49MC41LjcgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGxhbmdjaGFpbi1jb21tdW5pdHk+PTAuMS4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI2KSkgKDAuNi43KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogaHR0cHgtc3NlPDEuMC4wLD49MC40LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGxhbmdjaGFpbi1jb21tdW5pdHk+PTAuMS4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI2KSkgKDAuNC4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogbnVtcHk8Myw+PTEuMjYuMiBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gbGFuZ2NoYWluLWNvbW11bml0eT49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjYpKSAoMS4yNi40KVxyXG4gIFVzaW5nIGNhY2hlZCBjaHJvbWFkYi0wLjYuMy1weTMtbm9uZS1hbnkud2hsLm1ldGFkYXRhICg2Ljgga0IpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBidWlsZD49MS4wLjMgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgxLjIuMi5wb3N0MSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGNocm9tYS1obnN3bGliPT0wLjcuNiBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gY2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDAuNy42KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcG9zdGhvZz49Mi40LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgzLjIzLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBvbm54cnVudGltZT49MS4xNC4xIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMS4yMS4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogb3BlbnRlbGVtZXRyeS1hcGk+PTEuMi4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMS4zMS4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogb3BlbnRlbGVtZXRyeS1leHBvcnRlci1vdGxwLXByb3RvLWdycGM+PTEuMi4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMS4zMS4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24tZmFzdGFwaT49MC40MWIwIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMC41MmIxKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogb3BlbnRlbGVtZXRyeS1zZGs+PTEuMi4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMS4zMS4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogdG9rZW5pemVycz49MC4xMy4yIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMC4yMS4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHlwaWthPj0wLjQ4LjkgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgwLjQ4LjkpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiB0cWRtPj00LjY1LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICg0LjY3LjEpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBvdmVycmlkZXM+PTcuMy4xIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoNy43LjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBpbXBvcnRsaWItcmVzb3VyY2VzIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoNi41LjIpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBncnBjaW8+PTEuNTguMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gY2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDEuNzEuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHR5cGVyPj0wLjkuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gY2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDAuMTIuNSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGt1YmVybmV0ZXM+PTI4LjEuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gY2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDMyLjAuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IG1taDM+PTQuMC4xIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoNS4xLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBvcmpzb24+PTMuOS4xMiBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gY2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDMuMTAuMTYpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiByaWNoPj0xMC4xMS4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMTMuOC4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogYW55aW8gaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGh0dHB4Pj0wLjI3LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjkpKSAoNC42LjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBjZXJ0aWZpIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBodHRweD49MC4yNy4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI5KSkgKDIwMjQuOC4zMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGh0dHBjb3JlPT0xLiogaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGh0dHB4Pj0wLjI3LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjkpKSAoMS4wLjUpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBzbmlmZmlvIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBodHRweD49MC4yNy4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI5KSkgKDEuMy4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogZmlsZXR5cGUgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDEuMi4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHl0aG9uLW1hZ2ljIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSB1bnN0cnVjdHVyZWQ+PTAuMTIuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAzMikpICgwLjQuMjcpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBubHRrIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSB1bnN0cnVjdHVyZWQ+PTAuMTIuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAzMikpICgzLjkuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGJlYXV0aWZ1bHNvdXA0IGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSB1bnN0cnVjdHVyZWQ+PTAuMTIuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAzMikpICg0LjEzLjMpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBlbW9qaSBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gdW5zdHJ1Y3R1cmVkPj0wLjEyLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoMi4xNC4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHl0aG9uLWlzbzYzOSBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gdW5zdHJ1Y3R1cmVkPj0wLjEyLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoMjAyNS4yLjE4KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogbGFuZ2RldGVjdCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gdW5zdHJ1Y3R1cmVkPj0wLjEyLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoMS4wLjkpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiByYXBpZGZ1enogaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDMuMTMuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGJhY2tvZmYgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDIuMi4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogdW5zdHJ1Y3R1cmVkLWNsaWVudCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gdW5zdHJ1Y3R1cmVkPj0wLjEyLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoMC4zMi4zKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogd3JhcHQgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDEuMTcuMilcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHBzdXRpbCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gdW5zdHJ1Y3R1cmVkPj0wLjEyLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoNy4wLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBweXRob24tb3htc2cgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDAuMC4yKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogaHRtbDVsaWIgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDEuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGFpb2hhcHB5ZXllYmFsbHM+PTIuMy4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBhaW9odHRwPDQuMC4wLD49My44LjMtPmxhbmdjaGFpbi1jb21tdW5pdHk+PTAuMS4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI2KSkgKDIuNi4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogYWlvc2lnbmFsPj0xLjEuMiBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gYWlvaHR0cDw0LjAuMCw+PTMuOC4zLT5sYW5nY2hhaW4tY29tbXVuaXR5Pj0wLjEuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyNikpICgxLjMuMilcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGF0dHJzPj0xNy4zLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGFpb2h0dHA8NC4wLjAsPj0zLjguMy0+bGFuZ2NoYWluLWNvbW11bml0eT49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjYpKSAoMjUuMy4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogZnJvemVubGlzdD49MS4xLjEgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGFpb2h0dHA8NC4wLjAsPj0zLjguMy0+bGFuZ2NoYWluLWNvbW11bml0eT49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjYpKSAoMS41LjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBtdWx0aWRpY3Q8Ny4wLD49NC41IGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBhaW9odHRwPDQuMC4wLD49My44LjMtPmxhbmdjaGFpbi1jb21tdW5pdHk+PTAuMS4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI2KSkgKDYuNC4yKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHJvcGNhY2hlPj0wLjIuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gYWlvaHR0cDw0LjAuMCw+PTMuOC4zLT5sYW5nY2hhaW4tY29tbXVuaXR5Pj0wLjEuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyNikpICgwLjMuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHlhcmw8Mi4wLD49MS4xNy4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBhaW9odHRwPDQuMC4wLD49My44LjMtPmxhbmdjaGFpbi1jb21tdW5pdHk+PTAuMS4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI2KSkgKDEuMTkuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHB5cHJvamVjdF9ob29rcyBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gYnVpbGQ+PTEuMC4zLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMS4yLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBtYXJzaG1hbGxvdzw0LjAuMCw+PTMuMTguMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gZGF0YWNsYXNzZXMtanNvbjwwLjcsPj0wLjUuNy0+bGFuZ2NoYWluLWNvbW11bml0eT49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjYpKSAoMy4yNi4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogdHlwaW5nLWluc3BlY3Q8MSw+PTAuNC4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBkYXRhY2xhc3Nlcy1qc29uPDAuNyw+PTAuNS43LT5sYW5nY2hhaW4tY29tbXVuaXR5Pj0wLjEuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyNikpICgwLjkuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHNpeD49MS45LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGVjZHNhIT0wLjE1LT5weXRob24tam9zZT49My4zLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMTUpKSAoMS4xNi4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDoganNvbnBvaW50ZXI+PTEuOSBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20ganNvbnBhdGNoPDIuMCw+PTEuMzMtPmxhbmdjaGFpbi1jb3JlPj0wLjEuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyNSkpICgzLjAuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGdvb2dsZS1hdXRoPj0xLjAuMSBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20ga3ViZXJuZXRlcz49MjguMS4wLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMi4zOC4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogd2Vic29ja2V0LWNsaWVudCE9MC40MC4wLCE9MC40MS4qLCE9MC40Mi4qLD49MC4zMi4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBrdWJlcm5ldGVzPj0yOC4xLjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgxLjguMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHJlcXVlc3RzLW9hdXRobGliIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBrdWJlcm5ldGVzPj0yOC4xLjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgyLjAuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IG9hdXRobGliPj0zLjIuMiBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20ga3ViZXJuZXRlcz49MjguMS4wLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMy4yLjIpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiB1cmxsaWIzPj0xLjI0LjIgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGt1YmVybmV0ZXM+PTI4LjEuMC0+Y2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDIuMi4zKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogZHVyYXRpb25weT49MC43IGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBrdWJlcm5ldGVzPj0yOC4xLjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgwLjkpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiByZXF1ZXN0cy10b29sYmVsdDwyLjAuMCw+PTEuMC4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBsYW5nc21pdGg8MC40LD49MC4xLjE3LT5sYW5nY2hhaW4+PTAuMS4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI0KSkgKDEuMC4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogenN0YW5kYXJkPDAuMjQuMCw+PTAuMjMuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gbGFuZ3NtaXRoPDAuNCw+PTAuMS4xNy0+bGFuZ2NoYWluPj0wLjEuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyNCkpICgwLjIzLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBjb2xvcmVkbG9ncyBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gb25ueHJ1bnRpbWU+PTEuMTQuMS0+Y2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDE1LjAuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGZsYXRidWZmZXJzIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBvbm54cnVudGltZT49MS4xNC4xLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMjUuMi4xMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHByb3RvYnVmIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBvbm54cnVudGltZT49MS4xNC4xLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoNS4yOS40KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogc3ltcHkgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIG9ubnhydW50aW1lPj0xLjE0LjEtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgxLjEzLjMpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBkZXByZWNhdGVkPj0xLjIuNiBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gb3BlbnRlbGVtZXRyeS1hcGk+PTEuMi4wLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMS4yLjE4KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogaW1wb3J0bGliLW1ldGFkYXRhPDguNy4wLD49Ni4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBvcGVudGVsZW1ldHJ5LWFwaT49MS4yLjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICg4LjYuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGdvb2dsZWFwaXMtY29tbW9uLXByb3Rvc349MS41MiBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gb3BlbnRlbGVtZXRyeS1leHBvcnRlci1vdGxwLXByb3RvLWdycGM+PTEuMi4wLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMS42OS4yKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogb3BlbnRlbGVtZXRyeS1leHBvcnRlci1vdGxwLXByb3RvLWNvbW1vbj09MS4zMS4xIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBvcGVudGVsZW1ldHJ5LWV4cG9ydGVyLW90bHAtcHJvdG8tZ3JwYz49MS4yLjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgxLjMxLjEpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBvcGVudGVsZW1ldHJ5LXByb3RvPT0xLjMxLjEgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIG9wZW50ZWxlbWV0cnktZXhwb3J0ZXItb3RscC1wcm90by1ncnBjPj0xLjIuMC0+Y2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDEuMzEuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IG9wZW50ZWxlbWV0cnktaW5zdHJ1bWVudGF0aW9uLWFzZ2k9PTAuNTJiMSBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24tZmFzdGFwaT49MC40MWIwLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMC41MmIxKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb249PTAuNTJiMSBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24tZmFzdGFwaT49MC40MWIwLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMC41MmIxKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogb3BlbnRlbGVtZXRyeS1zZW1hbnRpYy1jb252ZW50aW9ucz09MC41MmIxIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBvcGVudGVsZW1ldHJ5LWluc3RydW1lbnRhdGlvbi1mYXN0YXBpPj0wLjQxYjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgwLjUyYjEpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBvcGVudGVsZW1ldHJ5LXV0aWwtaHR0cD09MC41MmIxIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBvcGVudGVsZW1ldHJ5LWluc3RydW1lbnRhdGlvbi1mYXN0YXBpPj0wLjQxYjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgwLjUyYjEpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBhc2dpcmVmfj0zLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIG9wZW50ZWxlbWV0cnktaW5zdHJ1bWVudGF0aW9uLWFzZ2k9PTAuNTJiMS0+b3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24tZmFzdGFwaT49MC40MWIwLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMy44LjEpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBtb25vdG9uaWM+PTEuNSBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gcG9zdGhvZz49Mi40LjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgxLjYpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBkaXN0cm8+PTEuNS4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBwb3N0aG9nPj0yLjQuMC0+Y2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDEuOS4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogY2hhcnNldC1ub3JtYWxpemVyPDQsPj0yIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSByZXF1ZXN0cy0+ZW1haWxzPj0wLjYtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjApKSAoMy4zLjIpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBtYXJrZG93bi1pdC1weT49Mi4yLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHJpY2g+PTEwLjExLjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgzLjAuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHB5Z21lbnRzPDMuMC4wLD49Mi4xMy4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSByaWNoPj0xMC4xMS4wLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMi4xOC4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogaHVnZ2luZ2ZhY2UtaHViPDEuMCw+PTAuMTYuNCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gdG9rZW5pemVycz49MC4xMy4yLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMC4zMC4yKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogc2hlbGxpbmdoYW0+PTEuMy4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSB0eXBlcj49MC45LjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgxLjUuNClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGh0dHB0b29scz49MC41LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHV2aWNvcm5bc3RhbmRhcmRdPj0wLjE4LjMtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgwLjYuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHV2bG9vcCE9MC4xNS4wLCE9MC4xNS4xLD49MC4xNC4wIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSB1dmljb3JuW3N0YW5kYXJkXT49MC4xOC4zLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMC4yMC4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogd2F0Y2hmaWxlcz49MC4xMyBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gdXZpY29ybltzdGFuZGFyZF0+PTAuMTguMy0+Y2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDAuMjQuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHdlYnNvY2tldHM+PTEwLjQgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHV2aWNvcm5bc3RhbmRhcmRdPj0wLjE4LjMtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgxMy4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogc291cHNpZXZlPjEuMiBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gYmVhdXRpZnVsc291cDQtPnVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDIuNilcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IG1vcmUtaXRlcnRvb2xzIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjc3N1dGlscy0+ZW1haWxzPj0wLjYtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjApKSAoMTAuNS4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogd2ViZW5jb2RpbmdzIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBodG1sNWxpYi0+dW5zdHJ1Y3R1cmVkPj0wLjEyLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoMC41LjEpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBqb2JsaWIgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIG5sdGstPnVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDEuNC4yKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcmVnZXg+PTIwMjEuOC4zIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBubHRrLT51bnN0cnVjdHVyZWQ+PTAuMTIuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAzMikpICgyMDI0LjExLjYpXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBjc3NzZWxlY3QgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHByZW1haWxlci0+ZW1haWxzPj0wLjYtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjApKSAoMS4yLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBjYWNoZXRvb2xzIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBwcmVtYWlsZXItPmVtYWlscz49MC42LT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDIwKSkgKDUuNS4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogb2xlZmlsZSBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gcHl0aG9uLW94bXNnLT51bnN0cnVjdHVyZWQ+PTAuMTIuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAzMikpICgwLjQ3KVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogYWlvZmlsZXM+PTI0LjEuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gdW5zdHJ1Y3R1cmVkLWNsaWVudC0+dW5zdHJ1Y3R1cmVkPj0wLjEyLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoMjQuMS4wKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogY3J5cHRvZ3JhcGh5Pj0zLjEgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHVuc3RydWN0dXJlZC1jbGllbnQtPnVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDQ0LjAuMilcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGV2YWwtdHlwZS1iYWNrcG9ydD49MC4yLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHVuc3RydWN0dXJlZC1jbGllbnQtPnVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDAuMi4yKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogbmVzdC1hc3luY2lvPj0xLjYuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gdW5zdHJ1Y3R1cmVkLWNsaWVudC0+dW5zdHJ1Y3R1cmVkPj0wLjEyLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoMS42LjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBjZmZpPj0xLjEyIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBjcnlwdG9ncmFwaHk+PTMuMS0+dW5zdHJ1Y3R1cmVkLWNsaWVudC0+dW5zdHJ1Y3R1cmVkPj0wLjEyLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMzIpKSAoMS4xNy4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogcHlhc24xLW1vZHVsZXM+PTAuMi4xIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBnb29nbGUtYXV0aD49MS4wLjEtPmt1YmVybmV0ZXM+PTI4LjEuMC0+Y2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDAuNC4xKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogZmlsZWxvY2sgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGh1Z2dpbmdmYWNlLWh1YjwxLjAsPj0wLjE2LjQtPnRva2VuaXplcnM+PTAuMTMuMi0+Y2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDMuMTYuMSlcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IGZzc3BlYz49MjAyMy41LjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGh1Z2dpbmdmYWNlLWh1YjwxLjAsPj0wLjE2LjQtPnRva2VuaXplcnM+PTAuMTMuMi0+Y2hyb21hZGI+PTAuNC4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDI4KSkgKDIwMjUuMy4yKVxyXG5SZXF1aXJlbWVudCBhbHJlYWR5IHNhdGlzZmllZDogemlwcD49My4yMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gaW1wb3J0bGliLW1ldGFkYXRhPDguNy4wLD49Ni4wLT5vcGVudGVsZW1ldHJ5LWFwaT49MS4yLjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgzLjIxLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBtZHVybH49MC4xIGluIC4vLnZlbnYvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcyAoZnJvbSBtYXJrZG93bi1pdC1weT49Mi4yLjAtPnJpY2g+PTEwLjExLjAtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgwLjEuMilcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IG15cHktZXh0ZW5zaW9ucz49MC4zLjAgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIHR5cGluZy1pbnNwZWN0PDEsPj0wLjQuMC0+ZGF0YWNsYXNzZXMtanNvbjwwLjcsPj0wLjUuNy0+bGFuZ2NoYWluLWNvbW11bml0eT49MC4xLjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjYpKSAoMS4wLjApXHJcblJlcXVpcmVtZW50IGFscmVhZHkgc2F0aXNmaWVkOiBodW1hbmZyaWVuZGx5Pj05LjEgaW4gLi8udmVudi9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzIChmcm9tIGNvbG9yZWRsb2dzLT5vbm54cnVudGltZT49MS4xNC4xLT5jaHJvbWFkYj49MC40LjAtPi1yIHJlcXVpcmVtZW50cy50eHQgKGxpbmUgMjgpKSAoMTAuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IG1wbWF0aDwxLjQsPj0xLjEuMCBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gc3ltcHktPm9ubnhydW50aW1lPj0xLjE0LjEtPmNocm9tYWRiPj0wLjQuMC0+LXIgcmVxdWlyZW1lbnRzLnR4dCAobGluZSAyOCkpICgxLjMuMClcclxuUmVxdWlyZW1lbnQgYWxyZWFkeSBzYXRpc2ZpZWQ6IHB5Y3BhcnNlciBpbiAuLy52ZW52L2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMgKGZyb20gY2ZmaT49MS4xMi0+Y3J5cHRvZ3JhcGh5Pj0zLjEtPnVuc3RydWN0dXJlZC1jbGllbnQtPnVuc3RydWN0dXJlZD49MC4xMi4wLT4tciByZXF1aXJlbWVudHMudHh0IChsaW5lIDMyKSkgKDIuMjIpXHJcblVzaW5nIGNhY2hlZCBsYW5nY2hhaW5fY2hyb21hLTAuMi4yLXB5My1ub25lLWFueS53aGwgKDExIGtCKVxyXG5Vc2luZyBjYWNoZWQgY2hyb21hZGItMC42LjMtcHkzLW5vbmUtYW55LndobCAoNjExIGtCKVxyXG5JbnN0YWxsaW5nIGNvbGxlY3RlZCBwYWNrYWdlczogY2hyb21hZGIsIGxhbmdjaGFpbi1jaHJvbWFcclxuU3VjY2Vzc2Z1bGx5IGluc3RhbGxlZCBjaHJvbWFkYi0wLjYuMyBsYW5nY2hhaW4tY2hyb21hLTAuMi4yXHJcblxyXG5cdTAwMWJbMW1bXHUwMDFiWzBtXHUwMDFiWzM0OzQ5bW5vdGljZVx1MDAxYlswbVx1MDAxYlsxOzM5OzQ5bV1cdTAwMWJbMG1cdTAwMWJbMzk7NDltIEEgbmV3IHJlbGVhc2Ugb2YgcGlwIGlzIGF2YWlsYWJsZTogXHUwMDFiWzBtXHUwMDFiWzMxOzQ5bTI0LjMuMVx1MDAxYlswbVx1MDAxYlszOTs0OW0gLT4gXHUwMDFiWzBtXHUwMDFiWzMyOzQ5bTI1LjAuMVx1MDAxYlswbVxyXG5cdTAwMWJbMW1bXHUwMDFiWzBtXHUwMDFiWzM0OzQ5bW5vdGljZVx1MDAxYlswbVx1MDAxYlsxOzM5OzQ5bV1cdTAwMWJbMG1cdTAwMWJbMzk7NDltIFRvIHVwZGF0ZSwgcnVuOiBcdTAwMWJbMG1cdTAwMWJbMzI7NDltcGlwIGluc3RhbGwgLS11cGdyYWRlIHBpcFx1MDAxYlswbVxyXG48L291dHB1dD5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIzYWE4N2IxYi00ZWI5LTRmZmEtYmY1Zi1hMDdhNTJhMDg1NTM7dG9vbHVfdnJ0eF8wMUtiZ0FKdXliZlc4aEpFUmRTSDF4OWEiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiUHJvY2VzcyBsYXVuY2hlZCB3aXRoIFBJRCA4IiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiYzVkZjA5YzQtNmFmYi00OTVlLTlhMzEtMjhhZmQxNzFjYmVhO3Rvb2x1X3ZydHhfMDFLYzh2dldaNFh0cGN3Q25zcWgxd1RHIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDggKHN0YXR1czogc3RpbGwgcnVubmluZyk6XG48b3V0cHV0Plx1MDAxYlszNG1JTkZPICAgIFx1MDAxYlswbSBVc2luZyBwYXRoIFx1MDAxYlszNG1hcHAvbWFpbi5weVx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuXHUwMDFiWzM0bUlORk8gICAgXHUwMDFiWzBtIFJlc29sdmVkIGFic29sdXRlIHBhdGggXHUwMDFiWzM1bS9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQvYXBwL1x1MDAxYlswbVx1MDAxYls5NW1tYWluLnB5XHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuXHUwMDFiWzM0bUlORk8gICAgXHUwMDFiWzBtIFNlYXJjaGluZyBmb3IgcGFja2FnZSBmaWxlIHN0cnVjdHVyZSBmcm9tIGRpcmVjdG9yaWVzIHdpdGggXHUwMDFiWzM0bV9faW5pdF9fLnB5XHUwMDFiWzBtIGZpbGVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cdTAwMWJbMzRtSU5GTyAgICBcdTAwMWJbMG0gSW1wb3J0aW5nIGZyb20gXHUwMDFiWzM1bS9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL1x1MDAxYlswbVx1MDAxYls5NW1iYWNrZW5kXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pWt4pSAIFx1MDAxYlsxOzMybVB5dGhvbiBwYWNrYWdlIGZpbGUgc3RydWN0dXJlXHUwMDFiWzBtIOKUgOKVriAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pSCICDwn5OBIGFwcCAgICAgICAgICAgICAgICAgICAgICAgICDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pSCICDilJzilIDilIAgXHUwMDFiWzJt8J+QjSBfX2luaXRfXy5weVx1MDAxYlswbSAgICAgICAgICAgICDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pSCICDilJTilIDilIAg8J+QjSBtYWluLnB5ICAgICAgICAgICAgICAgICDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKVsOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKVryAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcblx1MDAxYlszNG1JTkZPICAgIFx1MDAxYlswbSBJbXBvcnRpbmcgbW9kdWxlIFx1MDAxYlszMm1hcHAubWFpblx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuSU5GTzpjaHJvbWFkYi50ZWxlbWV0cnkucHJvZHVjdC5wb3N0aG9nOkFub255bWl6ZWQgdGVsZW1ldHJ5IGVuYWJsZWQuIFNlZSAgICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vZG9jcy50cnljaHJvbWEuY29tL3RlbGVtZXRyeSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cclxuXHUwMDFiWzM0bUlORk8gICAgXHUwMDFiWzBtIEZvdW5kIGltcG9ydGFibGUgRmFzdEFQSSBhcHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDila3ilIDilIAgXHUwMDFiWzE7MzJtSW1wb3J0YWJsZSBGYXN0QVBJIGFwcFx1MDAxYlswbSDilIDilIDila4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pSCICBcdTAwMWJbMzg7NTsyMDQ7NDg7NTsyMzVtZnJvbVx1MDAxYlswbVx1MDAxYlszODs1OzIzMTs0ODs1OzIzNW0gXHUwMDFiWzBtXHUwMDFiWzM4OzU7MjMxOzQ4OzU7MjM1bWFwcFx1MDAxYlswbVx1MDAxYlszODs1OzIzMTs0ODs1OzIzNW0uXHUwMDFiWzBtXHUwMDFiWzM4OzU7MjMxOzQ4OzU7MjM1bW1haW5cdTAwMWJbMG1cdTAwMWJbMzg7NTsyMzE7NDg7NTsyMzVtIFx1MDAxYlswbVx1MDAxYlszODs1OzIwNDs0ODs1OzIzNW1pbXBvcnRcdTAwMWJbMG1cdTAwMWJbMzg7NTsyMzE7NDg7NTsyMzVtIFx1MDAxYlswbVx1MDAxYlszODs1OzIzMTs0ODs1OzIzNW1hcHBcdTAwMWJbMG0gIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilbDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDila8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcblx1MDAxYlszNG1JTkZPICAgIFx1MDAxYlswbSBVc2luZyBpbXBvcnQgc3RyaW5nIFx1MDAxYlsxOzMybWFwcC5tYWluOmFwcFx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKVreKUgFx1MDAxYlswbVx1MDAxYlszMm3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIBcdTAwMWJbMG0gRmFzdEFQSSBDTEkgLSBQcm9kdWN0aW9uIG1vZGUgXHUwMDFiWzMybeKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgFx1MDAxYlswbVx1MDAxYlszMm3ilIDila5cdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilIJcdTAwMWJbMG1cdTAwMWJbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdTAwMWJbMG1cdTAwMWJbMzJt4pSCXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pSCXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzI7MzJtU2VydmluZyBhdDpcdTAwMWJbMG1cdTAwMWJbMzJtIFx1MDAxYlswbVx1MDAxYlszMm1odHRwOi8vMC4wLjAuMDo4MDAwXHUwMDFiWzBtXHUwMDFiWzMybSAgICAgICAgICAgICAgICAgIFx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm3ilIJcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilIJcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm3ilIJcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilIJcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMjszMm1BUEkgZG9jczpcdTAwMWJbMG1cdTAwMWJbMzJtIFx1MDAxYlswbVx1MDAxYlszMm1odHRwOi8vMC4wLjAuMDo4MDAwL2RvY3NcdTAwMWJbMG1cdTAwMWJbMzJtICAgICAgICAgICAgICAgXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybeKUglx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKUglx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybeKUglx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKUglx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlsyOzMybVJ1bm5pbmcgaW4gcHJvZHVjdGlvbiBtb2RlLCBmb3IgZGV2ZWxvcG1lbnQgdXNlOlx1MDAxYlswbVx1MDAxYlszMm0gXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybeKUglx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKUglx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybeKUglx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKUglx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlsxOzMybWZhc3RhcGkgZGV2XHUwMDFiWzBtXHUwMDFiWzMybSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybeKUglx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKUglx1MDAxYlswbVx1MDAxYlszMm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx1MDAxYlswbVx1MDAxYlszMm3ilIJcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilbDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDila9cdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuXHUwMDFiWzMybUlORk9cdTAwMWJbMG06ICAgICBXaWxsIHdhdGNoIGZvciBjaGFuZ2VzIGluIHRoZXNlIGRpcmVjdG9yaWVzOiBbJy9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL2JhY2tlbmQnXVxyXG5cdTAwMWJbMzJtSU5GT1x1MDAxYlswbTogICAgIFV2aWNvcm4gcnVubmluZyBvbiBcdTAwMWJbMW1odHRwOi8vMC4wLjAuMDo4MDAwXHUwMDFiWzBtIChQcmVzcyBDVFJMK0MgdG8gcXVpdClcclxuXHUwMDFiWzMybUlORk9cdTAwMWJbMG06ICAgICBTdGFydGVkIHJlbG9hZGVyIHByb2Nlc3MgW1x1MDAxYlszNm1cdTAwMWJbMW02ODkyMlx1MDAxYlswbV0gdXNpbmcgXHUwMDFiWzM2bVx1MDAxYlsxbVdhdGNoRmlsZXNcdTAwMWJbMG1cclxuPC9vdXRwdXQ+XG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIyOTEwNWE3OS01YzM3LTRjZDUtYmIyOS0wZTg5MDE2ZmFlY2Y7dG9vbHVfdnJ0eF8wMUM2SHRlcVRUbzlwSnlYV0Y0QkgxQ3giOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiQ29tbWFuZCBpcyBzdGlsbCBydW5uaW5nIGFmdGVyIDAgc2Vjb25kcy4gWW91IGNhbiB1c2UgcmVhZC1wcm9jZXNzIHRvIGdldCBtb3JlIG91dHB1dFxuYW5kIGtpbGwtcHJvY2VzcyB0byB0ZXJtaW5hdGUgaXQgaWYgbmVlZGVkLlxuUElEIDlcbk91dHB1dCBzbyBmYXI6XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImRiOGVjYjRhLWFmZjQtNGE5My04Zjc1LTE4M2JkYTM3M2QyYjt0b29sdV92cnR4XzAxM2ROSHYxRFBvanVFY1RNdUg3RFNKRSI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlIGlzIHRoZSBvdXRwdXQgZnJvbSB0ZXJtaW5hbCA5IChzdGF0dXM6IGNvbXBsZXRlZCk6XG48b3V0cHV0PnRvdGFsIDg0OFxyXG5kcnd4ci14ci14ICAyNiBwaXBpbHUgIHN0YWZmICAgICA4MzIgQXByIDEwIDE0OjE4IC5cclxuZHJ3eHIteHIteEAgMzIgcGlwaWx1ICBzdGFmZiAgICAxMDI0IEFwciAxMCAxNDo1MCAuLlxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgICAgMTggQXByIDEwIDA5OjIwIC5kb2NrZXJpZ25vcmVcclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgICAgIDc0IEFwciAxMCAwOToyMCAuZW52XHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgIDM1MyBBcHIgMTAgMDk6MjAgLmdpdGlnbm9yZVxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgICAgIDMgQXByIDEwIDA5OjIwIC5udm1yY1xyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgICA1MjcgQXByIDEwIDA5OjIwIERvY2tlcmZpbGVcclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgICAgMTYyIEFwciAxMCAwOToyMCBEb2NrZXJmaWxlLnBsYXl3cmlnaHRcclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgICA0NzQ3IEFwciAxMCAwOToyMCBSRUFETUUubWRcclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgICAgNjY0IEFwciAxMCAwOToyMCBiaW9tZS5qc29uXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgIDQ1NCBBcHIgMTAgMDk6MjAgaW5kZXguaHRtbFxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgICAxMDUgQXByIDEwIDA5OjIwIG5naW54LWJhY2tlbmQtbm90LWZvdW5kLmNvbmZcclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgICAgMTg4IEFwciAxMCAwOToyMCBuZ2lueC5jb25mXHJcbmRyd3hyLXhyLXggIDI3IHBpcGlsdSAgc3RhZmYgICAgIDg2NCBBcHIgMTAgMTQ6MTggbm9kZV9tb2R1bGVzXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgIDcyNCBBcHIgMTAgMDk6MjAgb3BlbmFwaS10cy5jb25maWcudHNcclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgMjYxODc2IEFwciAxMCAwOToyMCBwYWNrYWdlLWxvY2suanNvblxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgIDEyNTkgQXByIDEwIDA5OjIwIHBhY2thZ2UuanNvblxyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgIDI0ODAgQXByIDEwIDA5OjIwIHBsYXl3cmlnaHQuY29uZmlnLnRzXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICA5MjQ5MCBBcHIgMTAgMTA6NTIgcG5wbS1sb2NrLnlhbWxcclxuZHJ3eHIteHIteCAgIDMgcGlwaWx1ICBzdGFmZiAgICAgIDk2IEFwciAxMCAwOToyMCBwdWJsaWNcclxuZHJ3eHIteHIteCAgMTIgcGlwaWx1ICBzdGFmZiAgICAgMzg0IEFwciAxMCAwOToyMCBzcmNcclxuZHJ3eHIteHIteCAgIDkgcGlwaWx1ICBzdGFmZiAgICAgMjg4IEFwciAxMCAwOToyMCB0ZXN0c1xyXG4tcnctci0tci0tICAgMSBwaXBpbHUgIHN0YWZmICAgICAgNjcgQXByIDEwIDA5OjIwIHRzY29uZmlnLmJ1aWxkLmpzb25cclxuLXJ3LXItLXItLSAgIDEgcGlwaWx1ICBzdGFmZiAgICAgNzE3IEFwciAxMCAwOToyMCB0c2NvbmZpZy5qc29uXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgIDIxMyBBcHIgMTAgMDk6MjAgdHNjb25maWcubm9kZS5qc29uXHJcbi1ydy1yLS1yLS0gICAxIHBpcGlsdSAgc3RhZmYgICAgIDM2NyBBcHIgMTAgMDk6MjAgdml0ZS5jb25maWcudHNcclxuPC9vdXRwdXQ+XG48cmV0dXJuLWNvZGU+XG4wXG48L3JldHVybi1jb2RlPlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiY2YxNzY1OWUtMzcwOS00M2U2LWI1Y2UtYzRlYTYyOGFmN2U4O3Rvb2x1X3ZydHhfMDFDc2IyYVRZd2NiRjZzZHM1VDlUaVF1Ijp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gZnJvbnRlbmQvcGFja2FnZS5qc29uOlxuICAgICAxXHR7XG4gICAgIDJcdCAgXCJuYW1lXCI6IFwiZnJvbnRlbmRcIixcbiAgICAgM1x0ICBcInByaXZhdGVcIjogdHJ1ZSxcbiAgICAgNFx0ICBcInZlcnNpb25cIjogXCIwLjAuMFwiLFxuICAgICA1XHQgIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICAgICA2XHQgIFwic2NyaXB0c1wiOiB7XG4gICAgIDdcdCAgICBcImRldlwiOiBcInZpdGVcIixcbiAgICAgOFx0ICAgIFwiYnVpbGRcIjogXCJ0c2MgLXAgdHNjb25maWcuYnVpbGQuanNvbiAmJiB2aXRlIGJ1aWxkXCIsXG4gICAgIDlcdCAgICBcImxpbnRcIjogXCJiaW9tZSBjaGVjayAtLWFwcGx5LXVuc2FmZSAtLW5vLWVycm9ycy1vbi11bm1hdGNoZWQgLS1maWxlcy1pZ25vcmUtdW5rbm93bj10cnVlIC4vXCIsXG4gICAgMTBcdCAgICBcInByZXZpZXdcIjogXCJ2aXRlIHByZXZpZXdcIixcbiAgICAxMVx0ICAgIFwiZ2VuZXJhdGUtY2xpZW50XCI6IFwib3BlbmFwaS10c1wiXG4gICAgMTJcdCAgfSxcbiAgICAxM1x0ICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgMTRcdCAgICBcIkBjaGFrcmEtdWkvcmVhY3RcIjogXCJeMy44LjBcIixcbiAgICAxNVx0ICAgIFwiQGVtb3Rpb24vcmVhY3RcIjogXCJeMTEuMTQuMFwiLFxuICAgIDE2XHQgICAgXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjogXCJeNS4yOC4xNFwiLFxuICAgIDE3XHQgICAgXCJAdGFuc3RhY2svcmVhY3QtcXVlcnktZGV2dG9vbHNcIjogXCJeNS4yOC4xNFwiLFxuICAgIDE4XHQgICAgXCJAdGFuc3RhY2svcmVhY3Qtcm91dGVyXCI6IFwiMS4xOS4xXCIsXG4gICAgMTlcdCAgICBcImF4aW9zXCI6IFwiMS43LjRcIixcbiAgICAyMFx0ICAgIFwiZm9ybS1kYXRhXCI6IFwiNC4wLjBcIixcbiAgICAyMVx0ICAgIFwibmV4dC10aGVtZXNcIjogXCJeMC40LjRcIixcbiAgICAyMlx0ICAgIFwicmVhY3RcIjogXCJeMTguMi4wXCIsXG4gICAgMjNcdCAgICBcInJlYWN0LWRvbVwiOiBcIl4xOC4yLjBcIixcbiAgICAyNFx0ICAgIFwicmVhY3QtZXJyb3ItYm91bmRhcnlcIjogXCJeNC4wLjEzXCIsXG4gICAgMjVcdCAgICBcInJlYWN0LWhvb2stZm9ybVwiOiBcIjcuNDkuM1wiLFxuICAgIDI2XHQgICAgXCJyZWFjdC1pY29uc1wiOiBcIl41LjQuMFwiLFxuICAgIDI3XHQgICAgXCJ6b2RcIjogXCJeMy4yNC4yXCJcbiAgICAyOFx0ICB9LFxuICAgIDI5XHQgIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICAzMFx0ICAgIFwiQGJpb21lanMvYmlvbWVcIjogXCIxLjYuMVwiLFxuICAgIDMxXHQgICAgXCJAaGV5LWFwaS9vcGVuYXBpLXRzXCI6IFwiXjAuNTcuMFwiLFxuICAgIDMyXHQgICAgXCJAcGxheXdyaWdodC90ZXN0XCI6IFwiXjEuNDUuMlwiLFxuICAgIDMzXHQgICAgXCJAdGFuc3RhY2svcm91dGVyLWRldnRvb2xzXCI6IFwiMS4xOS4xXCIsXG4gICAgMzRcdCAgICBcIkB0YW5zdGFjay9yb3V0ZXItdml0ZS1wbHVnaW5cIjogXCIxLjE5LjBcIixcbiAgICAzNVx0ICAgIFwiQHR5cGVzL25vZGVcIjogXCJeMjAuMTAuNVwiLFxuICAgIDM2XHQgICAgXCJAdHlwZXMvcmVhY3RcIjogXCJeMTguMi4zN1wiLFxuICAgIDM3XHQgICAgXCJAdHlwZXMvcmVhY3QtZG9tXCI6IFwiXjE4LjIuMTVcIixcbiAgICAzOFx0ICAgIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3Qtc3djXCI6IFwiXjMuNS4wXCIsXG4gICAgMzlcdCAgICBcImRvdGVudlwiOiBcIl4xNi40LjVcIixcbiAgICA0MFx0ICAgIFwidHlwZXNjcmlwdFwiOiBcIl41LjIuMlwiLFxuICAgIDQxXHQgICAgXCJ2aXRlXCI6IFwiXjUuNC4xNFwiXG4gICAgNDJcdCAgfVxuICAgIDQzXHR9XG4gICAgNDRcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogNDRcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjcwOWVkNTQyLTE3ODEtNGI2Zi05Y2FkLTBjZDQ0YjJlOTlmMzt0b29sdV92cnR4XzAxS25IMndaTTJYWjZoTGRRNDJFaEt6eCI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJQcm9jZXNzIGxhdW5jaGVkIHdpdGggUElEIDEwIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiZmU2NjUwM2YtM2E1MS00NjA1LThjNmItYjY1N2FlYTI5OWI1O3Rvb2x1X3ZydHhfMDFDNUVTQ0xtRzlicFZqZmZRd0FjaFVNIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDEwIChzdGF0dXM6IHN0aWxsIHJ1bm5pbmcpOlxuPG91dHB1dD5cclxuPiBmcm9udGVuZEAwLjAuMCBkZXZcclxuPiB2aXRlXHJcblxyXG5cdTAwMWJbMUdcdTAwMWJbMEtcclxu4pm777iPICBHZW5lcmF0aW5nIHJvdXRlcy4uLlxyXG7inIUgUHJvY2Vzc2VkIHJvdXRlcyBpbiA2Nm1zXHJcblJlLW9wdGltaXppbmcgZGVwZW5kZW5jaWVzIGJlY2F1c2UgbG9ja2ZpbGUgaGFzIGNoYW5nZWRcclxuUG9ydCA1MTczIGlzIGluIHVzZSwgdHJ5aW5nIGFub3RoZXIgb25lLi4uXHJcblxyXG4gIFx1MDAxYlszMm1cdTAwMWJbMW1WSVRFXHUwMDFiWzIybSB2NS40LjE3XHUwMDFiWzM5bSAgXHUwMDFiWzJtcmVhZHkgaW4gXHUwMDFiWzBtXHUwMDFiWzFtMjkzXHUwMDFiWzIybVx1MDAxYlsybVx1MDAxYlswbSBtc1x1MDAxYlsyMm1cclxuXHJcbiAgXHUwMDFiWzMybeKenFx1MDAxYlszOW0gIFx1MDAxYlsxbUxvY2FsXHUwMDFiWzIybTogICBcdTAwMWJbMzZtaHR0cDovL2xvY2FsaG9zdDpcdTAwMWJbMW01MTc0XHUwMDFiWzIybS9cdTAwMWJbMzltXHJcblx1MDAxYlsybSAgXHUwMDFiWzMybeKenFx1MDAxYlszOW0gIFx1MDAxYlsxbU5ldHdvcmtcdTAwMWJbMjJtXHUwMDFiWzJtOiB1c2UgXHUwMDFiWzIybVx1MDAxYlsxbS0taG9zdFx1MDAxYlsyMm1cdTAwMWJbMm0gdG8gZXhwb3NlXHUwMDFiWzIybVxyXG5cdTAwMWJbMm1cdTAwMWJbMzJtICDinpxcdTAwMWJbMzltXHUwMDFiWzIybVx1MDAxYlsybSAgcHJlc3MgXHUwMDFiWzIybVx1MDAxYlsxbWggKyBlbnRlclx1MDAxYlsyMm1cdTAwMWJbMm0gdG8gc2hvdyBoZWxwXHUwMDFiWzIybVxyXG48L291dHB1dD5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjEyZGQ5ODcyLTRjZTEtNGNkZi1hODNhLTNkMDIwNzIxN2Y2NDt0b29sdV92cnR4XzAxQ1FTUnBOV2tHQTZ6YkhDd2hqdG5DSCI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlIGlzIHRoZSBvdXRwdXQgZnJvbSB0ZXJtaW5hbCA4IChzdGF0dXM6IHN0aWxsIHJ1bm5pbmcpOlxuPG91dHB1dD5cdTAwMWJbMzRtSU5GTyAgICBcdTAwMWJbMG0gVXNpbmcgcGF0aCBcdTAwMWJbMzRtYXBwL21haW4ucHlcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcblx1MDAxYlszNG1JTkZPICAgIFx1MDAxYlswbSBSZXNvbHZlZCBhYnNvbHV0ZSBwYXRoIFx1MDAxYlszNW0vVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kL2FwcC9cdTAwMWJbMG1cdTAwMWJbOTVtbWFpbi5weVx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcblx1MDAxYlszNG1JTkZPICAgIFx1MDAxYlswbSBTZWFyY2hpbmcgZm9yIHBhY2thZ2UgZmlsZSBzdHJ1Y3R1cmUgZnJvbSBkaXJlY3RvcmllcyB3aXRoIFx1MDAxYlszNG1fX2luaXRfXy5weVx1MDAxYlswbSBmaWxlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuXHUwMDFiWzM0bUlORk8gICAgXHUwMDFiWzBtIEltcG9ydGluZyBmcm9tIFx1MDAxYlszNW0vVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9cdTAwMWJbMG1cdTAwMWJbOTVtYmFja2VuZFx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKVreKUgCBcdTAwMWJbMTszMm1QeXRob24gcGFja2FnZSBmaWxlIHN0cnVjdHVyZVx1MDAxYlswbSDilIDila4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKUgiAg8J+TgSBhcHAgICAgICAgICAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKUgiAg4pSc4pSA4pSAIFx1MDAxYlsybfCfkI0gX19pbml0X18ucHlcdTAwMWJbMG0gICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKUgiAg4pSU4pSA4pSAIPCfkI0gbWFpbi5weSAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilbDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDila8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cdTAwMWJbMzRtSU5GTyAgICBcdTAwMWJbMG0gSW1wb3J0aW5nIG1vZHVsZSBcdTAwMWJbMzJtYXBwLm1haW5cdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbklORk86Y2hyb21hZGIudGVsZW1ldHJ5LnByb2R1Y3QucG9zdGhvZzpBbm9ueW1pemVkIHRlbGVtZXRyeSBlbmFibGVkLiBTZWUgICAgICAgICAgICAgICAgICAgICBodHRwczovL2RvY3MudHJ5Y2hyb21hLmNvbS90ZWxlbWV0cnkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXHJcblx1MDAxYlszNG1JTkZPICAgIFx1MDAxYlswbSBGb3VuZCBpbXBvcnRhYmxlIEZhc3RBUEkgYXBwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pWt4pSA4pSAIFx1MDAxYlsxOzMybUltcG9ydGFibGUgRmFzdEFQSSBhcHBcdTAwMWJbMG0g4pSA4pSA4pWuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKUgiAgXHUwMDFiWzM4OzU7MjA0OzQ4OzU7MjM1bWZyb21cdTAwMWJbMG1cdTAwMWJbMzg7NTsyMzE7NDg7NTsyMzVtIFx1MDAxYlswbVx1MDAxYlszODs1OzIzMTs0ODs1OzIzNW1hcHBcdTAwMWJbMG1cdTAwMWJbMzg7NTsyMzE7NDg7NTsyMzVtLlx1MDAxYlswbVx1MDAxYlszODs1OzIzMTs0ODs1OzIzNW1tYWluXHUwMDFiWzBtXHUwMDFiWzM4OzU7MjMxOzQ4OzU7MjM1bSBcdTAwMWJbMG1cdTAwMWJbMzg7NTsyMDQ7NDg7NTsyMzVtaW1wb3J0XHUwMDFiWzBtXHUwMDFiWzM4OzU7MjMxOzQ4OzU7MjM1bSBcdTAwMWJbMG1cdTAwMWJbMzg7NTsyMzE7NDg7NTsyMzVtYXBwXHUwMDFiWzBtICDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pWw4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pWvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cdTAwMWJbMzRtSU5GTyAgICBcdTAwMWJbMG0gVXNpbmcgaW1wb3J0IHN0cmluZyBcdTAwMWJbMTszMm1hcHAubWFpbjphcHBcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ila3ilIBcdTAwMWJbMG1cdTAwMWJbMzJt4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAXHUwMDFiWzBtIEZhc3RBUEkgQ0xJIC0gUHJvZHVjdGlvbiBtb2RlIFx1MDAxYlszMm3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIBcdTAwMWJbMG1cdTAwMWJbMzJt4pSA4pWuXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pSCXHUwMDFiWzBtXHUwMDFiWzMybSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHUwMDFiWzBtXHUwMDFiWzMybeKUglx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKUglx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlsyOzMybVNlcnZpbmcgYXQ6XHUwMDFiWzBtXHUwMDFiWzMybSBcdTAwMWJbMG1cdTAwMWJbMzJtaHR0cDovLzAuMC4wLjA6ODAwMFx1MDAxYlswbVx1MDAxYlszMm0gICAgICAgICAgICAgICAgICBcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJt4pSCXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pSCXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJt4pSCXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pSCXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzI7MzJtQVBJIGRvY3M6XHUwMDFiWzBtXHUwMDFiWzMybSBcdTAwMWJbMG1cdTAwMWJbMzJtaHR0cDovLzAuMC4wLjA6ODAwMC9kb2NzXHUwMDFiWzBtXHUwMDFiWzMybSAgICAgICAgICAgICAgIFx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm3ilIJcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilIJcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm3ilIJcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilIJcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMjszMm1SdW5uaW5nIGluIHByb2R1Y3Rpb24gbW9kZSwgZm9yIGRldmVsb3BtZW50IHVzZTpcdTAwMWJbMG1cdTAwMWJbMzJtIFx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm3ilIJcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilIJcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm3ilIJcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilIJcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMTszMm1mYXN0YXBpIGRldlx1MDAxYlswbVx1MDAxYlszMm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm3ilIJcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilIJcdTAwMWJbMG1cdTAwMWJbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdTAwMWJbMG1cdTAwMWJbMzJt4pSCXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pWw4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pWvXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcblx1MDAxYlszMm1JTkZPXHUwMDFiWzBtOiAgICAgV2lsbCB3YXRjaCBmb3IgY2hhbmdlcyBpbiB0aGVzZSBkaXJlY3RvcmllczogWycvVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kJ11cclxuXHUwMDFiWzMybUlORk9cdTAwMWJbMG06ICAgICBVdmljb3JuIHJ1bm5pbmcgb24gXHUwMDFiWzFtaHR0cDovLzAuMC4wLjA6ODAwMFx1MDAxYlswbSAoUHJlc3MgQ1RSTCtDIHRvIHF1aXQpXHJcblx1MDAxYlszMm1JTkZPXHUwMDFiWzBtOiAgICAgU3RhcnRlZCByZWxvYWRlciBwcm9jZXNzIFtcdTAwMWJbMzZtXHUwMDFiWzFtNjg5MjJcdTAwMWJbMG1dIHVzaW5nIFx1MDAxYlszNm1cdTAwMWJbMW1XYXRjaEZpbGVzXHUwMDFiWzBtXHJcbklORk86Y2hyb21hZGIudGVsZW1ldHJ5LnByb2R1Y3QucG9zdGhvZzpBbm9ueW1pemVkIHRlbGVtZXRyeSBlbmFibGVkLiBTZWUgICAgICAgICAgICAgICAgICAgICBodHRwczovL2RvY3MudHJ5Y2hyb21hLmNvbS90ZWxlbWV0cnkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXHJcblx1MDAxYlszMm1JTkZPXHUwMDFiWzBtOiAgICAgU3RhcnRlZCBzZXJ2ZXIgcHJvY2VzcyBbXHUwMDFiWzM2bTY4OTM1XHUwMDFiWzBtXVxyXG5cdTAwMWJbMzJtSU5GT1x1MDAxYlswbTogICAgIFdhaXRpbmcgZm9yIGFwcGxpY2F0aW9uIHN0YXJ0dXAuXHJcblx1MDAxYlszMm1JTkZPXHUwMDFiWzBtOiAgICAgQXBwbGljYXRpb24gc3RhcnR1cCBjb21wbGV0ZS5cclxuPC9vdXRwdXQ+XG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJmYmZkNjJkNi05ZWI4LTRiYTQtOTFmMi0yMTBkYjY3MjE5YTg7dG9vbHVfdnJ0eF8wMTFtOUtaa0tZdmk4VENMdlFzQlcyNVQiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiQ29tbWFuZCBpcyBzdGlsbCBydW5uaW5nIGFmdGVyIDAgc2Vjb25kcy4gWW91IGNhbiB1c2UgcmVhZC1wcm9jZXNzIHRvIGdldCBtb3JlIG91dHB1dFxuYW5kIGtpbGwtcHJvY2VzcyB0byB0ZXJtaW5hdGUgaXQgaWYgbmVlZGVkLlxuUElEIDExXG5PdXRwdXQgc28gZmFyOlxuPHN0ZG91dD5cblxuPC9zdGRvdXQ+XG48c3RkZXJyPlxuXG48L3N0ZGVycj4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIwNjEyNzQxMS1iZjVhLTRlNjQtODg3ZS1hYmJiMDI1NGE4MDU7dG9vbHVfdnJ0eF8wMUVuSlhSdVozZ0pCU0VBRmN5SkxBdDUiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSBpcyB0aGUgb3V0cHV0IGZyb20gdGVybWluYWwgMTEgKHN0YXR1czogY29tcGxldGVkKTpcbjxvdXRwdXQ+dHJ1ZTwvb3V0cHV0PlxuPHJldHVybi1jb2RlPlxuMFxuPC9yZXR1cm4tY29kZT5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjZlYTdlOWNkLTYyZTktNGIyZS1iY2Q2LTY0YmE4ZjZjOWY5ZDt0b29sdV92cnR4XzAxVlo0YXdFbU1BUjdOM2VGam40N3JQcyI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIC5lbnY6XG4gICAgNDNcdCMgTExNIFNldHRpbmdzXG4gICAgNDRcdE9QRU5ST1VURVJfQVBJX0tFWT1zay1vci12MS05ODE4NDRkODFjYjEwMDRlMDFjZWU3MmY2M2I3YmJiZTRjOTBhZWVkMGY0YTg3NGYzMGQ4NTAxYjVkMDBiNmE1XG4gICAgNDVcdERFRkFVTFRfTExNX01PREVMPWRlZXBzZWVrL2RlZXBzZWVrLWNoYXQtdjMtMDMyNDpmcmVlXG4gICAgNDZcdE9QRU5ST1VURVJfQkFTRV9VUkw9aHR0cHM6Ly9vcGVucm91dGVyLmFpL2FwaS92MVxuVG90YWwgbGluZXMgaW4gZmlsZTogNTFcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjg2MjFiN2MxLTBkMmItNDE4Mi1hMmI0LTU5MThkOTVhZTRlZTt0b29sdV92cnR4XzAxMXpUVzFQbUxCTW1jd1BtYXNNYWVmVSI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBiYWNrZW5kL2FwcC9hcGkvcm91dGVzL2NoYXQucHlcblwiXCJcIlxuQVBJIHJvdXRlcyBmb3IgY2hhdCBmdW5jdGlvbmFsaXR5LlxuXCJcIlwiXG5mcm9tIHR5cGluZyBpbXBvcnQgQW55LCBMaXN0LCBEaWN0XG5pbXBvcnQgdXVpZFxuaW1wb3J0IGh0dHB4XG5cbmZyb20gZmFzdGFwaSBpbXBvcnQgQVBJUm91dGVyLCBEZXBlbmRzLCBIVFRQRXhjZXB0aW9uLCBRdWVyeVxuZnJvbSBzcWxtb2RlbCBpbXBvcnQgU2Vzc2lvbiwgc2VsZWN0XG5mcm9tIHB5ZGFudGljIGltcG9ydCBCYXNlTW9kZWxcblxuZnJvbSBhcHAuYXBpLmRlcHMgaW1wb3J0IGdldF9jdXJyZW50X2FjdGl2ZV91c2VyLCBnZXRfZGJcbmZyb20gYXBwLm1vZGVscyBpbXBvcnQgKFxuICAgIFVzZXIsIENoaWxkLCBDaGF0UmVxdWVzdCwgQ2hhdFJlc3BvbnNlLCBDaGF0SGlzdG9yeSwgQ2hhdEhpc3Rvcmllc1B1YmxpY1xuKVxuZnJvbSBhcHAucmFnLnJhZ19jaGFpbiBpbXBvcnQgZ2VuZXJhdGVfcmVzcG9uc2VcbmZyb20gYXBwLnJhZy5jaGF0X2hpc3RvcnkgaW1wb3J0IHNhdmVfY2hhdF9pbnRlcmFjdGlvbiwgZ2V0X2NoYXRfaGlzdG9yeSwgZ2V0X2NoaWxkX2luZm9cbmZyb20gYXBwLmNvcmUuY29uZmlnIGltcG9ydCBzZXR0aW5nc1xuXG5cbmNsYXNzIE1vZGVsSW5mbyhCYXNlTW9kZWwpOlxuICAgIGlkOiBzdHJcbiAgICBuYW1lOiBzdHJcbiAgICBwcm92aWRlcjogc3RyXG4gICAgZGVzY3JpcHRpb246IHN0ciA9IFwiXCJcblxuXG5jbGFzcyBNb2RlbHNSZXNwb25zZShCYXNlTW9kZWwpOlxuICAgIG1vZGVsczogTGlzdFtNb2RlbEluZm9dXG5cbnJvdXRlciA9IEFQSVJvdXRlcigpXG5cblxuQHJvdXRlci5wb3N0KFwiL1wiLCByZXNwb25zZV9tb2RlbD1DaGF0UmVzcG9uc2UpXG5hc3luYyBkZWYgY2hhdChcbiAgICAqLFxuICAgIGRiOiBTZXNzaW9uID0gRGVwZW5kcyhnZXRfZGIpLFxuICAgIGNoYXRfcmVxdWVzdDogQ2hhdFJlcXVlc3QsXG4gICAgY3VycmVudF91c2VyOiBVc2VyID0gRGVwZW5kcyhnZXRfY3VycmVudF9hY3RpdmVfdXNlciksXG4pIC0+IEFueTpcbiAgICBcIlwiXCJcbiAgICBDaGF0IHdpdGggdGhlIEFJIGFzc2lzdGFudC5cbiAgICBcIlwiXCJcbiAgICAjIEdlbmVyYXRlIHNlc3Npb24gSUQgaWYgbm90IHByb3ZpZGVkXG4gICAgc2Vzc2lvbl9pZCA9IGNoYXRfcmVxdWVzdC5zZXNzaW9uX2lkIG9yIHN0cih1dWlkLnV1aWQ0KCkpXG5cbiAgICAjIEdldCBjaGlsZCBpbmZvIGlmIGNoaWxkX2lkIGlzIHByb3ZpZGVkXG4gICAgY2hpbGRfaW5mbyA9IE5vbmVcbiAgICBpZiBjaGF0X3JlcXVlc3QuY2hpbGRfaWQ6XG4gICAgICAgICMgQ2hlY2sgaWYgY2hpbGQgZXhpc3RzIGFuZCBiZWxvbmdzIHRvIGN1cnJlbnQgdXNlclxuICAgICAgICBjaGlsZCA9IGRiLmdldChDaGlsZCwgY2hhdF9yZXF1ZXN0LmNoaWxkX2lkKVxuICAgICAgICBpZiBub3QgY2hpbGQ6XG4gICAgICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwNCwgZGV0YWlsPVwiQ2hpbGQgbm90IGZvdW5kXCIpXG4gICAgICAgIGlmIGNoaWxkLnBhcmVudF9pZCAhPSBjdXJyZW50X3VzZXIuaWQ6XG4gICAgICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwMywgZGV0YWlsPVwiTm90IGVub3VnaCBwZXJtaXNzaW9uc1wiKVxuXG4gICAgICAgICMgR2V0IGNoaWxkIGluZm9cbiAgICAgICAgY2hpbGRfaW5mbyA9IGdldF9jaGlsZF9pbmZvKGRiLCBjaGF0X3JlcXVlc3QuY2hpbGRfaWQpXG5cbiAgICAjIEdldCBjaGF0IGhpc3RvcnlcbiAgICBjaGF0X2hpc3RvcnkgPSBnZXRfY2hhdF9oaXN0b3J5KGRiLCBzZXNzaW9uX2lkKVxuXG4gICAgIyBHZW5lcmF0ZSByZXNwb25zZVxuICAgIHRyeTpcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgZ2VuZXJhdGVfcmVzcG9uc2UoXG4gICAgICAgICAgICBxdWVzdGlvbj1jaGF0X3JlcXVlc3QucXVlc3Rpb24sXG4gICAgICAgICAgICBjaGF0X2hpc3Rvcnk9Y2hhdF9oaXN0b3J5LFxuICAgICAgICAgICAgc2Vzc2lvbl9pZD1zZXNzaW9uX2lkLFxuICAgICAgICAgICAgY2hpbGRfaW5mbz1jaGlsZF9pbmZvLFxuICAgICAgICAgICAgbW9kZWxfbmFtZT1jaGF0X3JlcXVlc3QubW9kZWxcbiAgICAgICAgKVxuXG4gICAgICAgICMgU2F2ZSBjaGF0IGludGVyYWN0aW9uXG4gICAgICAgIHNhdmVfY2hhdF9pbnRlcmFjdGlvbihcbiAgICAgICAgICAgIGRiPWRiLFxuICAgICAgICAgICAgdXNlcl9pZD1jdXJyZW50X3VzZXIuaWQsXG4gICAgICAgICAgICBzZXNzaW9uX2lkPXNlc3Npb25faWQsXG4gICAgICAgICAgICB1c2VyX3F1ZXJ5PWNoYXRfcmVxdWVzdC5xdWVzdGlvbixcbiAgICAgICAgICAgIGFpX3Jlc3BvbnNlPXJlc3VsdFtcImFuc3dlclwiXSxcbiAgICAgICAgICAgIG1vZGVsPWNoYXRfcmVxdWVzdC5tb2RlbCxcbiAgICAgICAgICAgIGNoaWxkX2lkPWNoYXRfcmVxdWVzdC5jaGlsZF9pZCxcbiAgICAgICAgICAgIHNvdXJjZXM9cmVzdWx0LmdldChcInNvdXJjZXNcIilcbiAgICAgICAgKVxuXG4gICAgICAgIHJldHVybiBDaGF0UmVzcG9uc2UoXG4gICAgICAgICAgICBhbnN3ZXI9cmVzdWx0W1wiYW5zd2VyXCJdLFxuICAgICAgICAgICAgc2Vzc2lvbl9pZD1zZXNzaW9uX2lkLFxuICAgICAgICAgICAgc291cmNlcz1yZXN1bHQuZ2V0KFwic291cmNlc1wiKVxuICAgICAgICApXG4gICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPXN0cihlKSlcblxuXG5Acm91dGVyLmdldChcIi9oaXN0b3J5XCIsIHJlc3BvbnNlX21vZGVsPUNoYXRIaXN0b3JpZXNQdWJsaWMpXG5kZWYgZ2V0X2NoYXRfaGlzdG9yaWVzKFxuICAgICosXG4gICAgZGI6IFNlc3Npb24gPSBEZXBlbmRzKGdldF9kYiksXG4gICAgc2Vzc2lvbl9pZDogc3RyID0gTm9uZSxcbiAgICBjaGlsZF9pZDogdXVpZC5VVUlEID0gTm9uZSxcbiAgICBza2lwOiBpbnQgPSAwLFxuICAgIGxpbWl0OiBpbnQgPSAxMDAsXG4gICAgY3VycmVudF91c2VyOiBVc2VyID0gRGVwZW5kcyhnZXRfY3VycmVudF9hY3RpdmVfdXNlciksXG4pIC0+IEFueTpcbiAgICBcIlwiXCJcbiAgICBHZXQgY2hhdCBoaXN0b3J5LlxuICAgIFwiXCJcIlxuICAgICMgQnVpbGQgcXVlcnlcbiAgICBxdWVyeSA9IHNlbGVjdChDaGF0SGlzdG9yeSkud2hlcmUoQ2hhdEhpc3RvcnkudXNlcl9pZCA9PSBjdXJyZW50X3VzZXIuaWQpXG5cbiAgICAjIEZpbHRlciBieSBzZXNzaW9uX2lkIGlmIHByb3ZpZGVkXG4gICAgaWYgc2Vzc2lvbl9pZDpcbiAgICAgICAgcXVlcnkgPSBxdWVyeS53aGVyZShDaGF0SGlzdG9yeS5zZXNzaW9uX2lkID09IHNlc3Npb25faWQpXG5cbiAgICAjIEZpbHRlciBieSBjaGlsZF9pZCBpZiBwcm92aWRlZFxuICAgIGlmIGNoaWxkX2lkOlxuICAgICAgICAjIENoZWNrIGlmIGNoaWxkIGV4aXN0cyBhbmQgYmVsb25ncyB0byBjdXJyZW50IHVzZXJcbiAgICAgICAgY2hpbGQgPSBkYi5nZXQoQ2hpbGQsIGNoaWxkX2lkKVxuICAgICAgICBpZiBub3QgY2hpbGQ6XG4gICAgICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwNCwgZGV0YWlsPVwiQ2hpbGQgbm90IGZvdW5kXCIpXG4gICAgICAgIGlmIGNoaWxkLnBhcmVudF9pZCAhPSBjdXJyZW50X3VzZXIuaWQ6XG4gICAgICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwMywgZGV0YWlsPVwiTm90IGVub3VnaCBwZXJtaXNzaW9uc1wiKVxuXG4gICAgICAgIHF1ZXJ5ID0gcXVlcnkud2hlcmUoQ2hhdEhpc3RvcnkuY2hpbGRfaWQgPT0gY2hpbGRfaWQpXG5cbiAgICAjIEFkZCBwYWdpbmF0aW9uXG4gICAgcXVlcnkgPSBxdWVyeS5vcmRlcl9ieShDaGF0SGlzdG9yeS5jcmVhdGVkX2F0LmRlc2MoKSkub2Zmc2V0KHNraXApLmxpbWl0KGxpbWl0KVxuXG4gICAgIyBFeGVjdXRlIHF1ZXJ5XG4gICAgY2hhdF9oaXN0b3JpZXMgPSBkYi5leGVjKHF1ZXJ5KS5hbGwoKVxuXG4gICAgIyBDb3VudCB0b3RhbFxuICAgIGNvdW50X3F1ZXJ5ID0gc2VsZWN0KENoYXRIaXN0b3J5KS53aGVyZShDaGF0SGlzdG9yeS51c2VyX2lkID09IGN1cnJlbnRfdXNlci5pZClcbiAgICBpZiBzZXNzaW9uX2lkOlxuICAgICAgICBjb3VudF9xdWVyeSA9IGNvdW50X3F1ZXJ5LndoZXJlKENoYXRIaXN0b3J5LnNlc3Npb25faWQgPT0gc2Vzc2lvbl9pZClcbiAgICBpZiBjaGlsZF9pZDpcbiAgICAgICAgY291bnRfcXVlcnkgPSBjb3VudF9xdWVyeS53aGVyZShDaGF0SGlzdG9yeS5jaGlsZF9pZCA9PSBjaGlsZF9pZClcbiAgICB0b3RhbF9jb3VudCA9IGxlbihkYi5leGVjKGNvdW50X3F1ZXJ5KS5hbGwoKSlcblxuICAgIHJldHVybiBDaGF0SGlzdG9yaWVzUHVibGljKGRhdGE9Y2hhdF9oaXN0b3JpZXMsIGNvdW50PXRvdGFsX2NvdW50KVxuXG5cbkByb3V0ZXIuZ2V0KFwiL3Nlc3Npb25zXCIsIHJlc3BvbnNlX21vZGVsPUxpc3Rbc3RyXSlcbmRlZiBnZXRfY2hhdF9zZXNzaW9ucyhcbiAgICAqLFxuICAgIGRiOiBTZXNzaW9uID0gRGVwZW5kcyhnZXRfZGIpLFxuICAgIGN1cnJlbnRfdXNlcjogVXNlciA9IERlcGVuZHMoZ2V0X2N1cnJlbnRfYWN0aXZlX3VzZXIpLFxuKSAtPiBBbnk6XG4gICAgXCJcIlwiXG4gICAgR2V0IHVuaXF1ZSBjaGF0IHNlc3Npb25zIGZvciB0aGUgY3VycmVudCB1c2VyLlxuICAgIFwiXCJcIlxuICAgIHF1ZXJ5ID0gKFxuICAgICAgICBzZWxlY3QoQ2hhdEhpc3Rvcnkuc2Vzc2lvbl9pZClcbiAgICAgICAgLndoZXJlKENoYXRIaXN0b3J5LnVzZXJfaWQgPT0gY3VycmVudF91c2VyLmlkKVxuICAgICAgICAuZGlzdGluY3QoKVxuICAgIClcblxuICAgIHNlc3Npb25zID0gZGIuZXhlYyhxdWVyeSkuYWxsKClcbiAgICByZXR1cm4gc2Vzc2lvbnNcblxuXG5Acm91dGVyLmdldChcIi9tb2RlbHNcIiwgcmVzcG9uc2VfbW9kZWw9TW9kZWxzUmVzcG9uc2UpXG5hc3luYyBkZWYgZ2V0X2F2YWlsYWJsZV9tb2RlbHMoXG4gICAgKixcbiAgICBjdXJyZW50X3VzZXI6IFVzZXIgPSBEZXBlbmRzKGdldF9jdXJyZW50X2FjdGl2ZV91c2VyKSxcbikgLT4gQW55OlxuICAgIFwiXCJcIlxuICAgIEdldCBhdmFpbGFibGUgbW9kZWxzIGZyb20gT3BlblJvdXRlci5cbiAgICBcIlwiXCJcbiAgICB0cnk6XG4gICAgICAgICMgRGVmaW5lIGEgbGlzdCBvZiByZWNvbW1lbmRlZCBtb2RlbHMgZm9yIHBhcmVudGluZyBhc3Npc3RhbnRcbiAgICAgICAgcmVjb21tZW5kZWRfbW9kZWxzID0gW1xuICAgICAgICAgICAgTW9kZWxJbmZvKFxuICAgICAgICAgICAgICAgIGlkPVwib3BlbmFpL2dwdC00by1taW5pXCIsXG4gICAgICAgICAgICAgICAgbmFtZT1cIkdQVC00byBNaW5pXCIsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXI9XCJPcGVuQUlcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbj1cIlNtYWxsZXIsIGZhc3RlciwgYW5kIG1vcmUgYWZmb3JkYWJsZSB2ZXJzaW9uIG9mIEdQVC00b1wiXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgTW9kZWxJbmZvKFxuICAgICAgICAgICAgICAgIGlkPVwiYW50aHJvcGljL2NsYXVkZS0zLW9wdXNcIixcbiAgICAgICAgICAgICAgICBuYW1lPVwiQ2xhdWRlIDMgT3B1c1wiLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyPVwiQW50aHJvcGljXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb249XCJBbnRocm9waWMncyBtb3N0IHBvd2VyZnVsIG1vZGVsIGZvciBjb21wbGV4IHRhc2tzXCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBNb2RlbEluZm8oXG4gICAgICAgICAgICAgICAgaWQ9XCJhbnRocm9waWMvY2xhdWRlLTMtc29ubmV0XCIsXG4gICAgICAgICAgICAgICAgbmFtZT1cIkNsYXVkZSAzIFNvbm5ldFwiLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyPVwiQW50aHJvcGljXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb249XCJCYWxhbmNlZCBtb2RlbCBmb3IgbW9zdCB0YXNrc1wiXG4gICAgICAgICAgICApLFxuLi4uXG5cbiAgICAgICAgIyBZb3UgY291bGQgYWxzbyBmZXRjaCBtb2RlbHMgZHluYW1pY2FsbHkgZnJvbSBPcGVuUm91dGVyIEFQSVxuICAgICAgICAjIGhlYWRlcnMgPSB7XG4gICAgICAgICMgICAgIFwiQXV0aG9yaXphdGlvblwiOiBmXCJCZWFyZXIge3NldHRpbmdzLk9QRU5ST1VURVJfQVBJX0tFWX1cIixcbiAgICAgICAgIyAgICAgXCJIVFRQLVJlZmVyZXJcIjogc2V0dGluZ3MuRlJPTlRFTkRfSE9TVCxcbiAgICAgICAgIyB9XG4gICAgICAgICMgYXN5bmMgd2l0aCBodHRweC5Bc3luY0NsaWVudCgpIGFzIGNsaWVudDpcbiAgICAgICAgIyAgICAgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuZ2V0KFxuICAgICAgICAjICAgICAgICAgZlwie3NldHRpbmdzLk9QRU5ST1VURVJfQkFTRV9VUkx9L21vZGVsc1wiLFxuICAgICAgICAjICAgICAgICAgaGVhZGVycz1oZWFkZXJzLFxuICAgICAgICAjICAgICApXG4gICAgICAgICMgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKVxuICAgICAgICAjICAgICBtb2RlbHNfZGF0YSA9IHJlc3BvbnNlLmpzb24oKVxuICAgICAgICAjICAgICAjIFByb2Nlc3MgbW9kZWxzIGRhdGEuLi5cblxuICAgICAgICByZXR1cm4gTW9kZWxzUmVzcG9uc2UobW9kZWxzPXJlY29tbWVuZGVkX21vZGVscylcbiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NTAwLCBkZXRhaWw9ZlwiRXJyb3IgZmV0Y2hpbmcgbW9kZWxzOiB7c3RyKGUpfVwiKVxuLi4uXG5QYXRoOiBiYWNrZW5kL2FwcC9yYWcvb3BlbnJvdXRlcl9jbGllbnQucHlcblwiXCJcIlxuT3BlblJvdXRlciBjbGllbnQgZm9yIExMTSBpbnRlZ3JhdGlvbi5cblwiXCJcIlxuZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QsIExpc3QsIEFueSwgT3B0aW9uYWxcbmltcG9ydCBqc29uXG5pbXBvcnQgaHR0cHhcbmZyb20gbGFuZ2NoYWluX2NvcmUubGFuZ3VhZ2VfbW9kZWxzLmNoYXRfbW9kZWxzIGltcG9ydCBCYXNlQ2hhdE1vZGVsXG5mcm9tIGxhbmdjaGFpbl9jb3JlLm1lc3NhZ2VzIGltcG9ydCAoXG4gICAgQUlNZXNzYWdlLFxuICAgIEJhc2VNZXNzYWdlLFxuICAgIENoYXRNZXNzYWdlLFxuICAgIEh1bWFuTWVzc2FnZSxcbiAgICBTeXN0ZW1NZXNzYWdlLFxuKVxuZnJvbSBsYW5nY2hhaW5fY29yZS5vdXRwdXRzIGltcG9ydCBDaGF0R2VuZXJhdGlvbiwgQ2hhdFJlc3VsdFxuZnJvbSBsYW5nY2hhaW5fY29yZS5jYWxsYmFja3MubWFuYWdlciBpbXBvcnQgQ2FsbGJhY2tNYW5hZ2VyRm9yTExNUnVuXG5cbmZyb20gYXBwLmNvcmUuY29uZmlnIGltcG9ydCBzZXR0aW5nc1xuXG5cbmNsYXNzIE9wZW5Sb3V0ZXJDaGF0TW9kZWwoQmFzZUNoYXRNb2RlbCk6XG4gICAgXCJcIlwiQ2hhdCBtb2RlbCB0aGF0IHVzZXMgT3BlblJvdXRlciBBUEkuXCJcIlwiXG4gICAgXG4gICAgYXBpX2tleTogc3RyXG4gICAgYmFzZV91cmw6IHN0ciA9IFwiaHR0cHM6Ly9vcGVucm91dGVyLmFpL2FwaS92MVwiXG4gICAgbW9kZWw6IHN0ciA9IFwib3BlbmFpL2dwdC00by1taW5pXCJcbiAgICB0ZW1wZXJhdHVyZTogZmxvYXQgPSAwLjdcbiAgICBtYXhfdG9rZW5zOiBPcHRpb25hbFtpbnRdID0gTm9uZVxuICAgIHRvcF9wOiBPcHRpb25hbFtmbG9hdF0gPSBOb25lXG4gICAgXG4gICAgZGVmIF9nZW5lcmF0ZShcbiAgICAgICAgc2VsZiwgbWVzc2FnZXM6IExpc3RbQmFzZU1lc3NhZ2VdLCBzdG9wOiBPcHRpb25hbFtMaXN0W3N0cl1dID0gTm9uZSwgXG4gICAgICAgIHJ1bl9tYW5hZ2VyOiBPcHRpb25hbFtDYWxsYmFja01hbmFnZXJGb3JMTE1SdW5dID0gTm9uZSwgKiprd2FyZ3M6IEFueVxuICAgICkgLT4gQ2hhdFJlc3VsdDpcbiAgICAgICAgXCJcIlwiR2VuZXJhdGUgYSBjaGF0IHJlc3BvbnNlLlwiXCJcIlxuICAgICAgICBtZXNzYWdlX2RpY3RzID0gW11cbi4uLlxuICAgICAgICBcbiAgICAgICAgIyBBZGQgb3B0aW9uYWwgcGFyYW1ldGVycyBpZiBwcm92aWRlZFxuICAgICAgICBpZiBzdG9wOlxuICAgICAgICAgICAgcGF5bG9hZFtcInN0b3BcIl0gPSBzdG9wXG4gICAgICAgIGlmIHNlbGYubWF4X3Rva2VuczpcbiAgICAgICAgICAgIHBheWxvYWRbXCJtYXhfdG9rZW5zXCJdID0gc2VsZi5tYXhfdG9rZW5zXG4gICAgICAgIGlmIHNlbGYudG9wX3A6XG4gICAgICAgICAgICBwYXlsb2FkW1widG9wX3BcIl0gPSBzZWxmLnRvcF9wXG4gICAgICAgIFxuICAgICAgICAjIEFkZCBhZGRpdGlvbmFsIGt3YXJnc1xuICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBrd2FyZ3MuaXRlbXMoKTpcbiAgICAgICAgICAgIHBheWxvYWRba2V5XSA9IHZhbHVlXG4gICAgICAgIFxuICAgICAgICAjIE1ha2UgdGhlIEFQSSByZXF1ZXN0XG4gICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogZlwiQmVhcmVyIHtzZWxmLmFwaV9rZXl9XCIsXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIFwiSFRUUC1SZWZlcmVyXCI6IHNldHRpbmdzLkZST05URU5EX0hPU1QsICAjIFJlcXVpcmVkIGJ5IE9wZW5Sb3V0ZXJcbiAgICAgICAgICAgIFwiWC1UaXRsZVwiOiBzZXR0aW5ncy5QUk9KRUNUX05BTUUsICAjIE9wdGlvbmFsIGJ1dCByZWNvbW1lbmRlZFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0cnk6XG4gICAgICAgICAgICB3aXRoIGh0dHB4LkNsaWVudCh0aW1lb3V0PTYwLjApIGFzIGNsaWVudDpcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IGNsaWVudC5wb3N0KFxuICAgICAgICAgICAgICAgICAgICBmXCJ7c2VsZi5iYXNlX3VybH0vY2hhdC9jb21wbGV0aW9uc1wiLFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPWhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIGpzb249cGF5bG9hZCxcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UucmFpc2VfZm9yX3N0YXR1cygpXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VfZGF0YSA9IHJlc3BvbnNlLmpzb24oKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICMgRXh0cmFjdCB0aGUgcmVzcG9uc2UgY29udGVudFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VfY29udGVudCA9IHJlc3BvbnNlX2RhdGFbXCJjaG9pY2VzXCJdWzBdW1wibWVzc2FnZVwiXVtcImNvbnRlbnRcIl1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAjIENyZWF0ZSBhIENoYXRHZW5lcmF0aW9uIG9iamVjdFxuICAgICAgICAgICAgICAgIGdlbmVyYXRpb24gPSBDaGF0R2VuZXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZT1BSU1lc3NhZ2UoY29udGVudD1tZXNzYWdlX2NvbnRlbnQpLFxuICAgICAgICAgICAgICAgICAgICBnZW5lcmF0aW9uX2luZm89e1wiZmluaXNoX3JlYXNvblwiOiByZXNwb25zZV9kYXRhW1wiY2hvaWNlc1wiXVswXS5nZXQoXCJmaW5pc2hfcmVhc29uXCIpfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAjIFJldHVybiB0aGUgQ2hhdFJlc3VsdFxuICAgICAgICAgICAgICAgIHJldHVybiBDaGF0UmVzdWx0KGdlbmVyYXRpb25zPVtnZW5lcmF0aW9uXSlcbiAgICAgICAgXG4gICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoZlwiRXJyb3IgY2FsbGluZyBPcGVuUm91dGVyIEFQSToge3N0cihlKX1cIilcbiAgICBcbiAgICBAcHJvcGVydHlcbiAgICBkZWYgX2xsbV90eXBlKHNlbGYpIC0+IHN0cjpcbiAgICAgICAgXCJcIlwiUmV0dXJuIHRoZSB0eXBlIG9mIExMTS5cIlwiXCJcbiAgICAgICAgcmV0dXJuIFwib3BlbnJvdXRlclwiXG5cblxuZGVmIGdldF9vcGVucm91dGVyX2NoYXRfbW9kZWwoXG4gICAgbW9kZWw6IHN0ciA9IE5vbmUsXG4gICAgdGVtcGVyYXR1cmU6IGZsb2F0ID0gMC43LFxuICAgIG1heF90b2tlbnM6IE9wdGlvbmFsW2ludF0gPSBOb25lLFxuICAgIHRvcF9wOiBPcHRpb25hbFtmbG9hdF0gPSBOb25lLFxuKSAtPiBPcGVuUm91dGVyQ2hhdE1vZGVsOlxuICAgIFwiXCJcIlxuICAgIEdldCBhbiBPcGVuUm91dGVyQ2hhdE1vZGVsIGluc3RhbmNlLlxuICAgIFxuICAgIEFyZ3M6XG4gICAgICAgIG1vZGVsOiBNb2RlbCBuYW1lIChlLmcuLCBcIm9wZW5haS9ncHQtNG8tbWluaVwiLCBcImFudGhyb3BpYy9jbGF1ZGUtMy1vcHVzXCIpXG4gICAgICAgIHRlbXBlcmF0dXJlOiBUZW1wZXJhdHVyZSBmb3IgZ2VuZXJhdGlvblxuICAgICAgICBtYXhfdG9rZW5zOiBNYXhpbXVtIHRva2VucyB0byBnZW5lcmF0ZVxuICAgICAgICB0b3BfcDogVG9wLXAgc2FtcGxpbmcgcGFyYW1ldGVyXG4gICAgICAgIFxuICAgIFJldHVybnM6XG4gICAgICAgIE9wZW5Sb3V0ZXJDaGF0TW9kZWwgaW5zdGFuY2VcbiAgICBcIlwiXCJcbiAgICByZXR1cm4gT3BlblJvdXRlckNoYXRNb2RlbChcbiAgICAgICAgYXBpX2tleT1zZXR0aW5ncy5PUEVOUk9VVEVSX0FQSV9LRVksXG4gICAgICAgIGJhc2VfdXJsPXNldHRpbmdzLk9QRU5ST1VURVJfQkFTRV9VUkwsXG4gICAgICAgIG1vZGVsPW1vZGVsIG9yIHNldHRpbmdzLkRFRkFVTFRfTExNX01PREVMLFxuICAgICAgICB0ZW1wZXJhdHVyZT10ZW1wZXJhdHVyZSxcbiAgICAgICAgbWF4X3Rva2Vucz1tYXhfdG9rZW5zLFxuICAgICAgICB0b3BfcD10b3BfcCxcbiAgICApXG4uLi5cblBhdGg6IGJhY2tlbmQvYXBwL2FwaS9tYWluLnB5XG5mcm9tIGZhc3RhcGkgaW1wb3J0IEFQSVJvdXRlclxuXG5mcm9tIGFwcC5hcGkucm91dGVzIGltcG9ydCBpdGVtcywgbG9naW4sIHByaXZhdGUsIHVzZXJzLCB1dGlscywgY2hpbGRyZW4sIGdyb3d0aF9yZWNvcmRzLCBkb2N1bWVudHMsIGNoYXRcbmZyb20gYXBwLmNvcmUuY29uZmlnIGltcG9ydCBzZXR0aW5nc1xuXG5hcGlfcm91dGVyID0gQVBJUm91dGVyKClcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIobG9naW4ucm91dGVyKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcih1c2Vycy5yb3V0ZXIpXG5hcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKHV0aWxzLnJvdXRlcilcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIoaXRlbXMucm91dGVyKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihjaGlsZHJlbi5yb3V0ZXIsIHByZWZpeD1cIi9jaGlsZHJlblwiLCB0YWdzPVtcImNoaWxkcmVuXCJdKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihncm93dGhfcmVjb3Jkcy5yb3V0ZXIsIHByZWZpeD1cIi9ncm93dGgtcmVjb3Jkc1wiLCB0YWdzPVtcImdyb3d0aC1yZWNvcmRzXCJdKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihkb2N1bWVudHMucm91dGVyLCBwcmVmaXg9XCIvZG9jdW1lbnRzXCIsIHRhZ3M9W1wiZG9jdW1lbnRzXCJdKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcihjaGF0LnJvdXRlciwgcHJlZml4PVwiL2NoYXRcIiwgdGFncz1bXCJjaGF0XCJdKVxuLi4uXG5QYXRoOiBkb2MvdXBkYXRlZC1hcmNoaXRlY3R1cmUtZG9jdW1lbnQubWRcbi4uLlxuXG4jIOiBiuWkqeerr+eCuVxuQGFwcC5wb3N0KFwiL2FwaS92MS9haS9jaGF0XCIsIHJlc3BvbnNlX21vZGVsPUNoYXRSZXNwb25zZSlcbmFzeW5jIGRlZiBjaGF0KHJlcXVlc3Q6IENoYXRSZXF1ZXN0KTpcbiAgICAjIOeUn+aIkOS8muivnUlE77yI5aaC5p6c5pyq5o+Q5L6b77yJXG4gICAgc2Vzc2lvbl9pZCA9IHJlcXVlc3Quc2Vzc2lvbl9pZCBvciBzdHIodXVpZDQoKSlcbiAgICBcbiAgICAjIOiOt+WPluiBiuWkqeWOhuWPslxuICAgIGNoYXRfaGlzdG9yeSA9IGdldF9jaGF0X2hpc3Rvcnkoc2Vzc2lvbl9pZClcbiAgICBcbiAgICAjIOiOt+WPluWEv+erpeS/oeaBr++8iOWmguaenOaPkOS+m+S6hmNoaWxkX2lk77yJXG4gICAgY2hpbGRfaW5mbyA9IE5vbmVcbiAgICBpZiByZXF1ZXN0LmNoaWxkX2lkOlxuICAgICAgICBjaGlsZF9pbmZvID0gZ2V0X2NoaWxkX2luZm8ocmVxdWVzdC5jaGlsZF9pZClcbiAgICBcbiAgICAjIOiwg+eUqFJBR+ezu+e7n1xuICAgIHJhZ19zeXN0ZW0gPSBnZXRfcmFnX3N5c3RlbSgpXG4gICAgcmVzdWx0ID0gcmFnX3N5c3RlbS5hbnN3ZXJfcXVlc3Rpb24oXG4gICAgICAgIHF1ZXN0aW9uPXJlcXVlc3QucXVlc3Rpb24sXG4gICAgICAgIGNoYXRfaGlzdG9yeT1jaGF0X2hpc3RvcnksXG4gICAgICAgIGNoaWxkX2luZm89Y2hpbGRfaW5mb1xuICAgIClcbiAgICBcbiAgICAjIOiusOW9leS6pOS6klxuICAgIHNhdmVfY2hhdF9pbnRlcmFjdGlvbihcbiAgICAgICAgc2Vzc2lvbl9pZD1zZXNzaW9uX2lkLFxuICAgICAgICB1c2VyX3F1ZXJ5PXJlcXVlc3QucXVlc3Rpb24sXG4gICAgICAgIGFpX3Jlc3BvbnNlPXJlc3VsdFtcImFuc3dlclwiXSxcbiAgICAgICAgY2hpbGRfaWQ9cmVxdWVzdC5jaGlsZF9pZFxuICAgIClcbi4uLlxuUGF0aDogYmFja2VuZC9hcHAvcmFnL3JhZ19jaGFpbi5weVxuXCJcIlwiXG5SQUcgY2hhaW4gaW1wbGVtZW50YXRpb24gZm9yIHRoZSBwYXJlbnRpbmcgYXNzaXN0YW50LlxuXCJcIlwiXG5mcm9tIHR5cGluZyBpbXBvcnQgTGlzdCwgRGljdCwgQW55LCBPcHRpb25hbFxuaW1wb3J0IHV1aWRcblxuZnJvbSBsYW5nY2hhaW5fY29yZS5vdXRwdXRfcGFyc2VycyBpbXBvcnQgU3RyT3V0cHV0UGFyc2VyXG5mcm9tIGxhbmdjaGFpbl9jb3JlLnByb21wdHMgaW1wb3J0IENoYXRQcm9tcHRUZW1wbGF0ZSwgTWVzc2FnZXNQbGFjZWhvbGRlclxuZnJvbSBsYW5nY2hhaW4uY2hhaW5zIGltcG9ydCBjcmVhdGVfaGlzdG9yeV9hd2FyZV9yZXRyaWV2ZXIsIGNyZWF0ZV9yZXRyaWV2YWxfY2hhaW5cbmZyb20gbGFuZ2NoYWluLmNoYWlucy5jb21iaW5lX2RvY3VtZW50cyBpbXBvcnQgY3JlYXRlX3N0dWZmX2RvY3VtZW50c19jaGFpblxuXG5mcm9tIGFwcC5yYWcudmVjdG9yc3RvcmUgaW1wb3J0IGdldF9yZXRyaWV2ZXJcbmZyb20gYXBwLnJhZy5vcGVucm91dGVyX2NsaWVudCBpbXBvcnQgZ2V0X29wZW5yb3V0ZXJfY2hhdF9tb2RlbFxuZnJvbSBhcHAuY29yZS5jb25maWcgaW1wb3J0IHNldHRpbmdzXG5cblxuIyBJbml0aWFsaXplIG91dHB1dCBwYXJzZXJcbm91dHB1dF9wYXJzZXIgPSBTdHJPdXRwdXRQYXJzZXIoKVxuLi4uXG5cblxuIyBRQSBwcm9tcHRcbnFhX3N5c3RlbV9wcm9tcHQgPSBcIlwiXCJcbllvdSBhcmUgYW4gQUkgcGFyZW50aW5nIGFzc2lzdGFudCBkZXNpZ25lZCB0byBwcm92aWRlIGhlbHBmdWwsIGFjY3VyYXRlLCBhbmQgc3VwcG9ydGl2ZSBhZHZpY2UgdG8gcGFyZW50cy5cblVzZSB0aGUgZm9sbG93aW5nIGNvbnRleHQgdG8gYW5zd2VyIHRoZSB1c2VyJ3MgcXVlc3Rpb24uXG5cbkNvbnRleHQ6IHtjb250ZXh0fVxuXG5HdWlkZWxpbmVzOlxuMS4gQmFzZSB5b3VyIGFuc3dlcnMgb24gdGhlIHByb3ZpZGVkIGNvbnRleHQgYW5kIHNjaWVudGlmaWMgcGFyZW50aW5nIGtub3dsZWRnZS5cbjIuIElmIHRoZSBjb250ZXh0IGRvZXNuJ3QgY29udGFpbiByZWxldmFudCBpbmZvcm1hdGlvbiwgc2F5IHNvIGFuZCBwcm92aWRlIGdlbmVyYWwgYWR2aWNlIGJhc2VkIG9uIGNoaWxkIGRldmVsb3BtZW50IHByaW5jaXBsZXMuXG4zLiBBbHdheXMgYmUgc3VwcG9ydGl2ZSBhbmQgbm9uLWp1ZGdtZW50YWwuXG40LiBGb3IgbWVkaWNhbCBxdWVzdGlvbnMsIHJlbWluZCB0aGUgdXNlciB0byBjb25zdWx0IGhlYWx0aGNhcmUgcHJvZmVzc2lvbmFscy5cbjUuIFByb3ZpZGUgYWdlLWFwcHJvcHJpYXRlIGFkdmljZSB3aGVuIGNoaWxkIGluZm9ybWF0aW9uIGlzIGF2YWlsYWJsZS5cbjYuIEtlZXAgYW5zd2VycyBjb25jaXNlIGJ1dCBpbmZvcm1hdGl2ZS5cbi4uLlxuXG5cbmRlZiBnZXRfcmFnX2NoYWluKG1vZGVsX25hbWU6IHN0ciA9IE5vbmUsIGNoaWxkX2luZm86IE9wdGlvbmFsW0RpY3Rbc3RyLCBBbnldXSA9IE5vbmUpOlxuICAgIFwiXCJcIlxuICAgIENyZWF0ZSBhIFJBRyBjaGFpbiBmb3IgdGhlIHBhcmVudGluZyBhc3Npc3RhbnQuXG5cbiAgICBBcmdzOlxuICAgICAgICBtb2RlbF9uYW1lOiBOYW1lIG9mIHRoZSBtb2RlbCB0byB1c2UgKGUuZy4sIFwib3BlbmFpL2dwdC00by1taW5pXCIsIFwiYW50aHJvcGljL2NsYXVkZS0zLW9wdXNcIilcbiAgICAgICAgY2hpbGRfaW5mbzogT3B0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNoaWxkXG5cbiAgICBSZXR1cm5zOlxuICAgICAgICBBIFJBRyBjaGFpblxuICAgIFwiXCJcIlxuICAgICMgSW5pdGlhbGl6ZSBsYW5ndWFnZSBtb2RlbFxuICAgIGxsbSA9IGdldF9vcGVucm91dGVyX2NoYXRfbW9kZWwoXG4gICAgICAgIG1vZGVsPW1vZGVsX25hbWUgb3Igc2V0dGluZ3MuREVGQVVMVF9MTE1fTU9ERUwsXG4gICAgICAgIHRlbXBlcmF0dXJlPTAuN1xuICAgIClcblxuICAgICMgR2V0IHJldHJpZXZlclxuICAgIHJldHJpZXZlciA9IGdldF9yZXRyaWV2ZXIoc2VhcmNoX2t3YXJncz17XCJrXCI6IDN9KVxuXG4gICAgIyBDcmVhdGUgaGlzdG9yeS1hd2FyZSByZXRyaWV2ZXJcbiAgICBoaXN0b3J5X2F3YXJlX3JldHJpZXZlciA9IGNyZWF0ZV9oaXN0b3J5X2F3YXJlX3JldHJpZXZlcihcbiAgICAgICAgbGxtLFxuICAgICAgICByZXRyaWV2ZXIsXG4gICAgICAgIGNvbnRleHR1YWxpemVfcV9wcm9tcHRcbiAgICApXG5cbiAgICAjIENyZWF0ZSBxdWVzdGlvbi1hbnN3ZXJpbmcgY2hhaW5cbiAgICBxdWVzdGlvbl9hbnN3ZXJfY2hhaW4gPSBjcmVhdGVfc3R1ZmZfZG9jdW1lbnRzX2NoYWluKFxuICAgICAgICBsbG0sXG4gICAgICAgIHFhX3Byb21wdFxuICAgIClcblxuICAgICMgQ3JlYXRlIHJldHJpZXZhbCBjaGFpblxuICAgIHJhZ19jaGFpbiA9IGNyZWF0ZV9yZXRyaWV2YWxfY2hhaW4oXG4gICAgICAgIGhpc3RvcnlfYXdhcmVfcmV0cmlldmVyLFxuICAgICAgICBxdWVzdGlvbl9hbnN3ZXJfY2hhaW5cbiAgICApXG5cbiAgICByZXR1cm4gcmFnX2NoYWluXG5cblxuYXN5bmMgZGVmIGdlbmVyYXRlX3Jlc3BvbnNlKFxuICAgIHF1ZXN0aW9uOiBzdHIsXG4gICAgY2hhdF9oaXN0b3J5OiBMaXN0W0RpY3Rbc3RyLCBzdHJdXSxcbiAgICBzZXNzaW9uX2lkOiBzdHIsXG4gICAgY2hpbGRfaW5mbzogT3B0aW9uYWxbRGljdFtzdHIsIEFueV1dID0gTm9uZSxcbiAgICBtb2RlbF9uYW1lOiBzdHIgPSBcImdwdC00by1taW5pXCJcbikgLT4gRGljdFtzdHIsIEFueV06XG4gICAgXCJcIlwiXG4gICAgR2VuZXJhdGUgYSByZXNwb25zZSB1c2luZyB0aGUgUkFHIGNoYWluLlxuXG4gICAgQXJnczpcbiAgICAgICAgcXVlc3Rpb246IFVzZXIncyBxdWVzdGlvblxuICAgICAgICBjaGF0X2hpc3Rvcnk6IExpc3Qgb2YgcHJldmlvdXMgbWVzc2FnZXNcbiAgICAgICAgc2Vzc2lvbl9pZDogU2Vzc2lvbiBJRFxuICAgICAgICBjaGlsZF9pbmZvOiBPcHRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hpbGRcbiAgICAgICAgbW9kZWxfbmFtZTogTmFtZSBvZiB0aGUgT3BlbkFJIG1vZGVsIHRvIHVzZVxuXG4gICAgUmV0dXJuczpcbiAgICAgICAgRGljdGlvbmFyeSBjb250YWluaW5nIHRoZSBhbnN3ZXIgYW5kIHNvdXJjZSBkb2N1bWVudHNcbiAgICBcIlwiXCJcbiAgICAjIEdldCBSQUcgY2hhaW5cbiAgICByYWdfY2hhaW4gPSBnZXRfcmFnX2NoYWluKG1vZGVsX25hbWUsIGNoaWxkX2luZm8pXG5cbiAgICAjIFByZXBhcmUgaW5wdXRcbiAgICBjaGFpbl9pbnB1dCA9IHtcbiAgICAgICAgXCJpbnB1dFwiOiBxdWVzdGlvbixcbiAgICAgICAgXCJjaGF0X2hpc3RvcnlcIjogY2hhdF9oaXN0b3J5XG4gICAgfVxuXG4gICAgIyBBZGQgY2hpbGQgaW5mbyBpZiBhdmFpbGFibGVcbiAgICBpZiBjaGlsZF9pbmZvOlxuICAgICAgICBjaGFpbl9pbnB1dFtcImNoaWxkX2luZm9cIl0gPSBzdHIoY2hpbGRfaW5mbylcbiAgICBlbHNlOlxuICAgICAgICBjaGFpbl9pbnB1dFtcImNoaWxkX2luZm9cIl0gPSBcIk5vIHNwZWNpZmljIGNoaWxkIGluZm9ybWF0aW9uIHByb3ZpZGVkLlwiXG5cbiAgICAjIEludm9rZSBjaGFpblxuICAgIHJlc3VsdCA9IHJhZ19jaGFpbi5pbnZva2UoY2hhaW5faW5wdXQpXG5cbiAgICAjIEV4dHJhY3QgYW5zd2VyIGFuZCBzb3VyY2UgZG9jdW1lbnRzXG4gICAgYW5zd2VyID0gcmVzdWx0LmdldChcImFuc3dlclwiLCBcIkkgY291bGRuJ3QgZ2VuZXJhdGUgYW4gYW5zd2VyLlwiKVxuICAgIHNvdXJjZV9kb2N1bWVudHMgPSByZXN1bHQuZ2V0KFwic291cmNlX2RvY3VtZW50c1wiLCBbXSlcblxuICAgICMgRm9ybWF0IHNvdXJjZSBkb2N1bWVudHNcbiAgICBzb3VyY2VzID0gW11cbiAgICBmb3IgZG9jIGluIHNvdXJjZV9kb2N1bWVudHM6XG4gICAgICAgIGlmIGhhc2F0dHIoZG9jLCAnbWV0YWRhdGEnKTpcbiAgICAgICAgICAgIHNvdXJjZXMuYXBwZW5kKGRvYy5tZXRhZGF0YSlcblxuICAgIHJldHVybiB7XG4gICAgICAgIFwiYW5zd2VyXCI6IGFuc3dlcixcbiAgICAgICAgXCJzZXNzaW9uX2lkXCI6IHNlc3Npb25faWQsXG4gICAgICAgIFwic291cmNlc1wiOiBzb3VyY2VzXG4gICAgfVxuLi4uXG5QYXRoOiBiYWNrZW5kL2FwcC9yYWcvY2hhdF9oaXN0b3J5LnB5XG5cIlwiXCJcbkNoYXQgaGlzdG9yeSBtYW5hZ2VtZW50IHV0aWxpdGllcy5cblwiXCJcIlxuZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QsIERpY3QsIEFueSwgT3B0aW9uYWxcbmltcG9ydCB1dWlkXG5cbmZyb20gc3FsbW9kZWwgaW1wb3J0IFNlc3Npb24sIHNlbGVjdFxuXG5mcm9tIGFwcC5tb2RlbHMgaW1wb3J0IENoYXRIaXN0b3J5LCBDaGF0SGlzdG9yeUNyZWF0ZSwgVXNlciwgQ2hpbGRcblxuXG5kZWYgc2F2ZV9jaGF0X2ludGVyYWN0aW9uKFxuICAgIGRiOiBTZXNzaW9uLFxuICAgIHVzZXJfaWQ6IHV1aWQuVVVJRCxcbiAgICBzZXNzaW9uX2lkOiBzdHIsXG4gICAgdXNlcl9xdWVyeTogc3RyLFxuICAgIGFpX3Jlc3BvbnNlOiBzdHIsXG4gICAgbW9kZWw6IHN0cixcbiAgICBjaGlsZF9pZDogT3B0aW9uYWxbdXVpZC5VVUlEXSA9IE5vbmUsXG4gICAgc291cmNlczogT3B0aW9uYWxbTGlzdFtEaWN0W3N0ciwgQW55XV1dID0gTm9uZVxuKSAtPiBDaGF0SGlzdG9yeTpcbiAgICBcIlwiXCJcbiAgICBTYXZlIGEgY2hhdCBpbnRlcmFjdGlvbiB0byB0aGUgZGF0YWJhc2UuXG4gICAgXG4gICAgQXJnczpcbiAgICAgICAgZGI6IERhdGFiYXNlIHNlc3Npb25cbiAgICAgICAgdXNlcl9pZDogVXNlciBJRFxuICAgICAgICBzZXNzaW9uX2lkOiBTZXNzaW9uIElEXG4gICAgICAgIHVzZXJfcXVlcnk6IFVzZXIncyBxdWVzdGlvblxuICAgICAgICBhaV9yZXNwb25zZTogQUkncyByZXNwb25zZVxuICAgICAgICBtb2RlbDogTW9kZWwgbmFtZVxuICAgICAgICBjaGlsZF9pZDogT3B0aW9uYWwgY2hpbGQgSURcbiAgICAgICAgc291cmNlczogT3B0aW9uYWwgbGlzdCBvZiBzb3VyY2UgZG9jdW1lbnRzXG4gICAgICAgIFxuICAgIFJldHVybnM6XG4gICAgICAgIENoYXRIaXN0b3J5IGluc3RhbmNlXG4gICAgXCJcIlwiXG4gICAgIyBDcmVhdGUgY2hhdCBoaXN0b3J5IHJlY29yZFxuICAgIGNoYXRfaGlzdG9yeV9kYXRhID0gQ2hhdEhpc3RvcnlDcmVhdGUoXG4gICAgICAgIHVzZXJfaWQ9dXNlcl9pZCxcbiAgICAgICAgY2hpbGRfaWQ9Y2hpbGRfaWQsXG4gICAgICAgIHNlc3Npb25faWQ9c2Vzc2lvbl9pZCxcbiAgICAgICAgdXNlcl9xdWVyeT11c2VyX3F1ZXJ5LFxuICAgICAgICBhaV9yZXNwb25zZT1haV9yZXNwb25zZSxcbiAgICAgICAgbW9kZWw9bW9kZWxcbiAgICApXG4gICAgXG4gICAgIyBDb252ZXJ0IHNvdXJjZXMgdG8gbGlzdCBvZiBzdHJpbmdzIChkb2N1bWVudCBJRHMpXG4gICAgc291cmNlX2lkcyA9IFtdXG4gICAgaWYgc291cmNlczpcbiAgICAgICAgZm9yIHNvdXJjZSBpbiBzb3VyY2VzOlxuICAgICAgICAgICAgaWYgJ2RvY3VtZW50X2lkJyBpbiBzb3VyY2U6XG4gICAgICAgICAgICAgICAgc291cmNlX2lkcy5hcHBlbmQoc291cmNlWydkb2N1bWVudF9pZCddKVxuICAgIFxuICAgICMgQ3JlYXRlIGNoYXQgaGlzdG9yeSBpbnN0YW5jZVxuICAgIGNoYXRfaGlzdG9yeSA9IENoYXRIaXN0b3J5KFxuICAgICAgICAqKmNoYXRfaGlzdG9yeV9kYXRhLm1vZGVsX2R1bXAoKSxcbiAgICAgICAgc291cmNlcz1zb3VyY2VfaWRzIGlmIHNvdXJjZV9pZHMgZWxzZSBOb25lXG4gICAgKVxuICAgIFxuICAgICMgQWRkIHRvIGRhdGFiYXNlXG4gICAgZGIuYWRkKGNoYXRfaGlzdG9yeSlcbiAgICBkYi5jb21taXQoKVxuICAgIGRiLnJlZnJlc2goY2hhdF9oaXN0b3J5KVxuICAgIFxuICAgIHJldHVybiBjaGF0X2hpc3RvcnlcblxuXG5kZWYgZ2V0X2NoYXRfaGlzdG9yeShcbiAgICBkYjogU2Vzc2lvbixcbiAgICBzZXNzaW9uX2lkOiBzdHIsXG4gICAgbGltaXQ6IGludCA9IDEwXG4pIC0+IExpc3RbRGljdFtzdHIsIHN0cl1dOlxuICAgIFwiXCJcIlxuICAgIEdldCBjaGF0IGhpc3RvcnkgZm9yIGEgc2Vzc2lvbi5cbiAgICBcbiAgICBBcmdzOlxuICAgICAgICBkYjogRGF0YWJhc2Ugc2Vzc2lvblxuICAgICAgICBzZXNzaW9uX2lkOiBTZXNzaW9uIElEXG4gICAgICAgIGxpbWl0OiBNYXhpbXVtIG51bWJlciBvZiBtZXNzYWdlcyB0byByZXR1cm5cbiAgICAgICAgXG4gICAgUmV0dXJuczpcbiAgICAgICAgTGlzdCBvZiBtZXNzYWdlcyBpbiB0aGUgZm9ybWF0IGV4cGVjdGVkIGJ5IExhbmdDaGFpblxuICAgIFwiXCJcIlxuICAgICMgUXVlcnkgY2hhdCBoaXN0b3J5XG4gICAgc3RhdGVtZW50ID0gKFxuICAgICAgICBzZWxlY3QoQ2hhdEhpc3RvcnkpXG4gICAgICAgIC53aGVyZShDaGF0SGlzdG9yeS5zZXNzaW9uX2lkID09IHNlc3Npb25faWQpXG4gICAgICAgIC5vcmRlcl9ieShDaGF0SGlzdG9yeS5jcmVhdGVkX2F0LmRlc2MoKSlcbiAgICAgICAgLmxpbWl0KGxpbWl0KVxuICAgIClcbiAgICBcbiAgICBjaGF0X2hpc3RvcmllcyA9IGRiLmV4ZWMoc3RhdGVtZW50KS5hbGwoKVxuICAgIFxuICAgICMgRm9ybWF0IGZvciBMYW5nQ2hhaW5cbiAgICBtZXNzYWdlcyA9IFtdXG4gICAgZm9yIGNoYXQgaW4gcmV2ZXJzZWQoY2hhdF9oaXN0b3JpZXMpOiAgIyBSZXZlcnNlIHRvIGdldCBjaHJvbm9sb2dpY2FsIG9yZGVyXG4gICAgICAgIG1lc3NhZ2VzLmV4dGVuZChbXG4gICAgICAgICAgICB7XCJyb2xlXCI6IFwiaHVtYW5cIiwgXCJjb250ZW50XCI6IGNoYXQudXNlcl9xdWVyeX0sXG4gICAgICAgICAgICB7XCJyb2xlXCI6IFwiYWlcIiwgXCJjb250ZW50XCI6IGNoYXQuYWlfcmVzcG9uc2V9XG4gICAgICAgIF0pXG4gICAgXG4gICAgcmV0dXJuIG1lc3NhZ2VzXG5cblxuZGVmIGdldF9jaGlsZF9pbmZvKGRiOiBTZXNzaW9uLCBjaGlsZF9pZDogdXVpZC5VVUlEKSAtPiBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV06XG4gICAgXCJcIlwiXG4gICAgR2V0IGNoaWxkIGluZm9ybWF0aW9uLlxuICAgIFxuICAgIEFyZ3M6XG4gICAgICAgIGRiOiBEYXRhYmFzZSBzZXNzaW9uXG4gICAgICAgIGNoaWxkX2lkOiBDaGlsZCBJRFxuICAgICAgICBcbiAgICBSZXR1cm5zOlxuICAgICAgICBEaWN0aW9uYXJ5IHdpdGggY2hpbGQgaW5mb3JtYXRpb24gb3IgTm9uZSBpZiBub3QgZm91bmRcbiAgICBcIlwiXCJcbiAgICAjIFF1ZXJ5IGNoaWxkXG4gICAgY2hpbGQgPSBkYi5nZXQoQ2hpbGQsIGNoaWxkX2lkKVxuICAgIGlmIG5vdCBjaGlsZDpcbiAgICAgICAgcmV0dXJuIE5vbmVcbiAgICBcbiAgICAjIENhbGN1bGF0ZSBhZ2VcbiAgICBmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZVxuICAgIHRvZGF5ID0gZGF0ZXRpbWUubm93KCkuZGF0ZSgpXG4gICAgYWdlX2RheXMgPSAodG9kYXkgLSBjaGlsZC5iaXJ0aGRheSkuZGF5c1xuICAgIGFnZV9tb250aHMgPSBhZ2VfZGF5cyAvLyAzMFxuICAgIGFnZV95ZWFycyA9IGFnZV9kYXlzIC8vIDM2NVxuICAgIFxuICAgICMgRm9ybWF0IGNoaWxkIGluZm9cbiAgICBjaGlsZF9pbmZvID0ge1xuICAgICAgICBcIm5hbWVcIjogY2hpbGQubmFtZSxcbiAgICAgICAgXCJnZW5kZXJcIjogY2hpbGQuZ2VuZGVyLFxuICAgICAgICBcImJpcnRoZGF5XCI6IGNoaWxkLmJpcnRoZGF5Lmlzb2Zvcm1hdCgpLFxuICAgICAgICBcImFnZV9kYXlzXCI6IGFnZV9kYXlzLFxuICAgICAgICBcImFnZV9tb250aHNcIjogYWdlX21vbnRocyxcbiAgICAgICAgXCJhZ2VfeWVhcnNcIjogYWdlX3llYXJzXG4gICAgfVxuICAgIFxuICAgIHJldHVybiBjaGlsZF9pbmZvXG4uLi5cblBhdGg6IGJhY2tlbmQvYXBwL21vZGVscy5weVxuLi4uXG5cblxuY2xhc3MgQ2hhdEhpc3RvcnkoQ2hhdEhpc3RvcnlCYXNlLCB0YWJsZT1UcnVlKTpcbiAgICBpZDogdXVpZC5VVUlEID0gRmllbGQoZGVmYXVsdF9mYWN0b3J5PXV1aWQudXVpZDQsIHByaW1hcnlfa2V5PVRydWUpXG4gICAgdXNlcl9pZDogdXVpZC5VVUlEID0gRmllbGQoZm9yZWlnbl9rZXk9XCJ1c2VyLmlkXCIpXG4gICAgdXNlcjogVXNlciA9IFJlbGF0aW9uc2hpcChiYWNrX3BvcHVsYXRlcz1cImNoYXRfaGlzdG9yaWVzXCIpXG4gICAgY2hpbGRfaWQ6IHV1aWQuVVVJRCB8IE5vbmUgPSBGaWVsZChkZWZhdWx0PU5vbmUsIGZvcmVpZ25fa2V5PVwiY2hpbGQuaWRcIilcbiAgICBjaGlsZDogQ2hpbGQgfCBOb25lID0gUmVsYXRpb25zaGlwKGJhY2tfcG9wdWxhdGVzPVwiY2hhdF9oaXN0b3JpZXNcIilcbiAgICBjcmVhdGVkX2F0OiBkYXRldGltZSA9IEZpZWxkKGRlZmF1bHRfZmFjdG9yeT1kYXRldGltZS51dGNub3cpXG4gICAgc291cmNlczogTGlzdFtzdHJdIHwgTm9uZSA9IEZpZWxkKGRlZmF1bHQ9Tm9uZSwgc2FfdHlwZT1KU09OKSAgIyBSZWZlcmVuY2VzIHRvIHNvdXJjZSBkb2N1bWVudHNcblxuXG5jbGFzcyBDaGF0SGlzdG9yeVB1YmxpYyhDaGF0SGlzdG9yeUJhc2UpOlxuICAgIGlkOiB1dWlkLlVVSURcbiAgICB1c2VyX2lkOiB1dWlkLlVVSURcbiAgICBjaGlsZF9pZDogdXVpZC5VVUlEIHwgTm9uZSA9IE5vbmVcbiAgICBjcmVhdGVkX2F0OiBkYXRldGltZVxuICAgIHNvdXJjZXM6IExpc3Rbc3RyXSB8IE5vbmUgPSBOb25lXG4uLi5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjA3ZDZjMmIyLWM5YzMtNGI2Yy1iYWUxLTVhNGQzMDdkOGUxNDt0b29sdV92cnR4XzAxUXl4a0oyNENURFpLeEtOUHo4amlRSCI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBiYWNrZW5kL2FwcC9tb2RlbHMucHlcbmltcG9ydCB1dWlkXG5mcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZSwgZGF0ZVxuZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QsIERpY3QsIEFueVxuXG5mcm9tIHB5ZGFudGljIGltcG9ydCBFbWFpbFN0clxuZnJvbSBzcWxtb2RlbCBpbXBvcnQgRmllbGQsIFJlbGF0aW9uc2hpcCwgU1FMTW9kZWwsIEpTT05cblxuXG4jIFNoYXJlZCBwcm9wZXJ0aWVzXG5jbGFzcyBVc2VyQmFzZShTUUxNb2RlbCk6XG4gICAgZW1haWw6IEVtYWlsU3RyID0gRmllbGQodW5pcXVlPVRydWUsIGluZGV4PVRydWUsIG1heF9sZW5ndGg9MjU1KVxuICAgIGlzX2FjdGl2ZTogYm9vbCA9IFRydWVcbiAgICBpc19zdXBlcnVzZXI6IGJvb2wgPSBGYWxzZVxuICAgIGZ1bGxfbmFtZTogc3RyIHwgTm9uZSA9IEZpZWxkKGRlZmF1bHQ9Tm9uZSwgbWF4X2xlbmd0aD0yNTUpXG5cblxuIyBQcm9wZXJ0aWVzIHRvIHJlY2VpdmUgdmlhIEFQSSBvbiBjcmVhdGlvblxuY2xhc3MgVXNlckNyZWF0ZShVc2VyQmFzZSk6XG4gICAgcGFzc3dvcmQ6IHN0ciA9IEZpZWxkKG1pbl9sZW5ndGg9OCwgbWF4X2xlbmd0aD00MClcblxuXG5jbGFzcyBVc2VyUmVnaXN0ZXIoU1FMTW9kZWwpOlxuICAgIGVtYWlsOiBFbWFpbFN0ciA9IEZpZWxkKG1heF9sZW5ndGg9MjU1KVxuICAgIHBhc3N3b3JkOiBzdHIgPSBGaWVsZChtaW5fbGVuZ3RoPTgsIG1heF9sZW5ndGg9NDApXG4gICAgZnVsbF9uYW1lOiBzdHIgfCBOb25lID0gRmllbGQoZGVmYXVsdD1Ob25lLCBtYXhfbGVuZ3RoPTI1NSlcbi4uLlxuXG5cbiMgRGF0YWJhc2UgbW9kZWwsIGRhdGFiYXNlIHRhYmxlIGluZmVycmVkIGZyb20gY2xhc3MgbmFtZVxuY2xhc3MgVXNlcihVc2VyQmFzZSwgdGFibGU9VHJ1ZSk6XG4gICAgaWQ6IHV1aWQuVVVJRCA9IEZpZWxkKGRlZmF1bHRfZmFjdG9yeT11dWlkLnV1aWQ0LCBwcmltYXJ5X2tleT1UcnVlKVxuICAgIGhhc2hlZF9wYXNzd29yZDogc3RyXG4gICAgaXRlbXM6IGxpc3RbXCJJdGVtXCJdID0gUmVsYXRpb25zaGlwKGJhY2tfcG9wdWxhdGVzPVwib3duZXJcIiwgY2FzY2FkZV9kZWxldGU9VHJ1ZSlcbiAgICBjaGlsZHJlbjogbGlzdFtcIkNoaWxkXCJdID0gUmVsYXRpb25zaGlwKGJhY2tfcG9wdWxhdGVzPVwicGFyZW50XCIsIGNhc2NhZGVfZGVsZXRlPVRydWUpXG4gICAgY2hhdF9oaXN0b3JpZXM6IGxpc3RbXCJDaGF0SGlzdG9yeVwiXSA9IFJlbGF0aW9uc2hpcChiYWNrX3BvcHVsYXRlcz1cInVzZXJcIiwgY2FzY2FkZV9kZWxldGU9VHJ1ZSlcblxuXG4jIFByb3BlcnRpZXMgdG8gcmV0dXJuIHZpYSBBUEksIGlkIGlzIGFsd2F5cyByZXF1aXJlZFxuY2xhc3MgVXNlclB1YmxpYyhVc2VyQmFzZSk6XG4gICAgaWQ6IHV1aWQuVVVJRFxuXG5cbmNsYXNzIFVzZXJzUHVibGljKFNRTE1vZGVsKTpcbiAgICBkYXRhOiBsaXN0W1VzZXJQdWJsaWNdXG4gICAgY291bnQ6IGludFxuXG5cbiMgU2hhcmVkIHByb3BlcnRpZXNcbmNsYXNzIEl0ZW1CYXNlKFNRTE1vZGVsKTpcbiAgICB0aXRsZTogc3RyID0gRmllbGQobWluX2xlbmd0aD0xLCBtYXhfbGVuZ3RoPTI1NSlcbiAgICBkZXNjcmlwdGlvbjogc3RyIHwgTm9uZSA9IEZpZWxkKGRlZmF1bHQ9Tm9uZSwgbWF4X2xlbmd0aD0yNTUpXG4uLi5cblxuXG5jbGFzcyBDaGlsZChDaGlsZEJhc2UsIHRhYmxlPVRydWUpOlxuICAgIGlkOiB1dWlkLlVVSUQgPSBGaWVsZChkZWZhdWx0X2ZhY3Rvcnk9dXVpZC51dWlkNCwgcHJpbWFyeV9rZXk9VHJ1ZSlcbiAgICBwYXJlbnRfaWQ6IHV1aWQuVVVJRCA9IEZpZWxkKGZvcmVpZ25fa2V5PVwidXNlci5pZFwiKVxuICAgIHBhcmVudDogVXNlciA9IFJlbGF0aW9uc2hpcChiYWNrX3BvcHVsYXRlcz1cImNoaWxkcmVuXCIpXG4gICAgY3JlYXRlZF9hdDogZGF0ZXRpbWUgPSBGaWVsZChkZWZhdWx0X2ZhY3Rvcnk9ZGF0ZXRpbWUudXRjbm93KVxuICAgIHVwZGF0ZWRfYXQ6IGRhdGV0aW1lID0gRmllbGQoZGVmYXVsdF9mYWN0b3J5PWRhdGV0aW1lLnV0Y25vdylcbiAgICBncm93dGhfcmVjb3JkczogbGlzdFtcIkdyb3d0aFJlY29yZFwiXSA9IFJlbGF0aW9uc2hpcChiYWNrX3BvcHVsYXRlcz1cImNoaWxkXCIsIGNhc2NhZGVfZGVsZXRlPVRydWUpXG4gICAgY2hhdF9oaXN0b3JpZXM6IGxpc3RbXCJDaGF0SGlzdG9yeVwiXSA9IFJlbGF0aW9uc2hpcChiYWNrX3BvcHVsYXRlcz1cImNoaWxkXCIsIGNhc2NhZGVfZGVsZXRlPVRydWUpXG5cblxuY2xhc3MgQ2hpbGRQdWJsaWMoQ2hpbGRCYXNlKTpcbiAgICBpZDogdXVpZC5VVUlEXG4gICAgcGFyZW50X2lkOiB1dWlkLlVVSURcbiAgICBjcmVhdGVkX2F0OiBkYXRldGltZVxuICAgIHVwZGF0ZWRfYXQ6IGRhdGV0aW1lXG5cblxuY2xhc3MgQ2hpbGRyZW5QdWJsaWMoU1FMTW9kZWwpOlxuICAgIGRhdGE6IGxpc3RbQ2hpbGRQdWJsaWNdXG4gICAgY291bnQ6IGludFxuLi4uXG5cblxuY2xhc3MgRG9jdW1lbnQoRG9jdW1lbnRCYXNlLCB0YWJsZT1UcnVlKTpcbiAgICBpZDogdXVpZC5VVUlEID0gRmllbGQoZGVmYXVsdF9mYWN0b3J5PXV1aWQudXVpZDQsIHByaW1hcnlfa2V5PVRydWUpXG4gICAgZmlsZW5hbWU6IHN0ciA9IEZpZWxkKG1heF9sZW5ndGg9MjU1KVxuICAgIHVwbG9hZF90aW1lc3RhbXA6IGRhdGV0aW1lID0gRmllbGQoZGVmYXVsdF9mYWN0b3J5PWRhdGV0aW1lLnV0Y25vdylcbiAgICBkb2NfbWV0YWRhdGE6IERpY3Rbc3RyLCBBbnldIHwgTm9uZSA9IEZpZWxkKGRlZmF1bHQ9Tm9uZSwgc2FfdHlwZT1KU09OKVxuXG5cbmNsYXNzIERvY3VtZW50UHVibGljKERvY3VtZW50QmFzZSk6XG4gICAgaWQ6IHV1aWQuVVVJRFxuICAgIGZpbGVuYW1lOiBzdHJcbiAgICB1cGxvYWRfdGltZXN0YW1wOiBkYXRldGltZVxuICAgIGRvY19tZXRhZGF0YTogRGljdFtzdHIsIEFueV0gfCBOb25lID0gTm9uZVxuXG5cbmNsYXNzIERvY3VtZW50c1B1YmxpYyhTUUxNb2RlbCk6XG4gICAgZGF0YTogbGlzdFtEb2N1bWVudFB1YmxpY11cbiAgICBjb3VudDogaW50XG5cblxuIyBDaGF0IGhpc3RvcnkgbW9kZWxzXG5jbGFzcyBDaGF0SGlzdG9yeUJhc2UoU1FMTW9kZWwpOlxuICAgIHNlc3Npb25faWQ6IHN0ciA9IEZpZWxkKG1heF9sZW5ndGg9NTApXG4gICAgdXNlcl9xdWVyeTogc3RyXG4gICAgYWlfcmVzcG9uc2U6IHN0clxuICAgIG1vZGVsOiBzdHIgPSBGaWVsZChtYXhfbGVuZ3RoPTUwKVxuXG5cbmNsYXNzIENoYXRIaXN0b3J5Q3JlYXRlKENoYXRIaXN0b3J5QmFzZSk6XG4gICAgdXNlcl9pZDogdXVpZC5VVUlEXG4gICAgY2hpbGRfaWQ6IHV1aWQuVVVJRCB8IE5vbmUgPSBOb25lXG5cblxuY2xhc3MgQ2hhdEhpc3RvcnkoQ2hhdEhpc3RvcnlCYXNlLCB0YWJsZT1UcnVlKTpcbiAgICBpZDogdXVpZC5VVUlEID0gRmllbGQoZGVmYXVsdF9mYWN0b3J5PXV1aWQudXVpZDQsIHByaW1hcnlfa2V5PVRydWUpXG4gICAgdXNlcl9pZDogdXVpZC5VVUlEID0gRmllbGQoZm9yZWlnbl9rZXk9XCJ1c2VyLmlkXCIpXG4gICAgdXNlcjogVXNlciA9IFJlbGF0aW9uc2hpcChiYWNrX3BvcHVsYXRlcz1cImNoYXRfaGlzdG9yaWVzXCIpXG4gICAgY2hpbGRfaWQ6IHV1aWQuVVVJRCB8IE5vbmUgPSBGaWVsZChkZWZhdWx0PU5vbmUsIGZvcmVpZ25fa2V5PVwiY2hpbGQuaWRcIilcbiAgICBjaGlsZDogQ2hpbGQgfCBOb25lID0gUmVsYXRpb25zaGlwKGJhY2tfcG9wdWxhdGVzPVwiY2hhdF9oaXN0b3JpZXNcIilcbiAgICBjcmVhdGVkX2F0OiBkYXRldGltZSA9IEZpZWxkKGRlZmF1bHRfZmFjdG9yeT1kYXRldGltZS51dGNub3cpXG4gICAgc291cmNlczogTGlzdFtzdHJdIHwgTm9uZSA9IEZpZWxkKGRlZmF1bHQ9Tm9uZSwgc2FfdHlwZT1KU09OKSAgIyBSZWZlcmVuY2VzIHRvIHNvdXJjZSBkb2N1bWVudHNcblxuXG5jbGFzcyBDaGF0SGlzdG9yeVB1YmxpYyhDaGF0SGlzdG9yeUJhc2UpOlxuICAgIGlkOiB1dWlkLlVVSURcbiAgICB1c2VyX2lkOiB1dWlkLlVVSURcbiAgICBjaGlsZF9pZDogdXVpZC5VVUlEIHwgTm9uZSA9IE5vbmVcbiAgICBjcmVhdGVkX2F0OiBkYXRldGltZVxuICAgIHNvdXJjZXM6IExpc3Rbc3RyXSB8IE5vbmUgPSBOb25lXG5cblxuY2xhc3MgQ2hhdEhpc3Rvcmllc1B1YmxpYyhTUUxNb2RlbCk6XG4gICAgZGF0YTogbGlzdFtDaGF0SGlzdG9yeVB1YmxpY11cbiAgICBjb3VudDogaW50XG5cblxuIyBDaGF0IHJlcXVlc3QvcmVzcG9uc2UgbW9kZWxzXG5jbGFzcyBDaGF0UmVxdWVzdChTUUxNb2RlbCk6XG4gICAgcXVlc3Rpb246IHN0clxuICAgIHNlc3Npb25faWQ6IHN0ciB8IE5vbmUgPSBOb25lXG4gICAgY2hpbGRfaWQ6IHV1aWQuVVVJRCB8IE5vbmUgPSBOb25lXG4gICAgbW9kZWw6IHN0ciA9IEZpZWxkKGRlZmF1bHQ9XCJvcGVuYWkvZ3B0LTRvLW1pbmlcIiwgbWF4X2xlbmd0aD0xMDApXG5cblxuY2xhc3MgQ2hhdFJlc3BvbnNlKFNRTE1vZGVsKTpcbiAgICBhbnN3ZXI6IHN0clxuICAgIHNlc3Npb25faWQ6IHN0clxuICAgIHNvdXJjZXM6IExpc3RbRGljdFtzdHIsIEFueV1dIHwgTm9uZSA9IE5vbmVcblxuXG4jIEdlbmVyaWMgbWVzc2FnZVxuY2xhc3MgTWVzc2FnZShTUUxNb2RlbCk6XG4gICAgbWVzc2FnZTogc3RyXG5cblxuIyBKU09OIHBheWxvYWQgY29udGFpbmluZyBhY2Nlc3MgdG9rZW5cbmNsYXNzIFRva2VuKFNRTE1vZGVsKTpcbiAgICBhY2Nlc3NfdG9rZW46IHN0clxuICAgIHRva2VuX3R5cGU6IHN0ciA9IFwiYmVhcmVyXCJcblxuXG4jIENvbnRlbnRzIG9mIEpXVCB0b2tlblxuY2xhc3MgVG9rZW5QYXlsb2FkKFNRTE1vZGVsKTpcbiAgICBzdWI6IHN0ciB8IE5vbmUgPSBOb25lXG5cblxuY2xhc3MgTmV3UGFzc3dvcmQoU1FMTW9kZWwpOlxuICAgIHRva2VuOiBzdHJcbiAgICBuZXdfcGFzc3dvcmQ6IHN0ciA9IEZpZWxkKG1pbl9sZW5ndGg9OCwgbWF4X2xlbmd0aD00MClcbi4uLlxuUGF0aDogYmFja2VuZC9hcHAvYXBpL3JvdXRlcy9jaGF0LnB5XG5cIlwiXCJcbkFQSSByb3V0ZXMgZm9yIGNoYXQgZnVuY3Rpb25hbGl0eS5cblwiXCJcIlxuZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgTGlzdCwgRGljdFxuaW1wb3J0IHV1aWRcbmltcG9ydCBodHRweFxuXG5mcm9tIGZhc3RhcGkgaW1wb3J0IEFQSVJvdXRlciwgRGVwZW5kcywgSFRUUEV4Y2VwdGlvbiwgUXVlcnlcbmZyb20gc3FsbW9kZWwgaW1wb3J0IFNlc3Npb24sIHNlbGVjdFxuZnJvbSBweWRhbnRpYyBpbXBvcnQgQmFzZU1vZGVsXG5cbmZyb20gYXBwLmFwaS5kZXBzIGltcG9ydCBnZXRfY3VycmVudF9hY3RpdmVfdXNlciwgZ2V0X2RiXG5mcm9tIGFwcC5tb2RlbHMgaW1wb3J0IChcbiAgICBVc2VyLCBDaGlsZCwgQ2hhdFJlcXVlc3QsIENoYXRSZXNwb25zZSwgQ2hhdEhpc3RvcnksIENoYXRIaXN0b3JpZXNQdWJsaWNcbilcbmZyb20gYXBwLnJhZy5yYWdfY2hhaW4gaW1wb3J0IGdlbmVyYXRlX3Jlc3BvbnNlXG5mcm9tIGFwcC5yYWcuY2hhdF9oaXN0b3J5IGltcG9ydCBzYXZlX2NoYXRfaW50ZXJhY3Rpb24sIGdldF9jaGF0X2hpc3RvcnksIGdldF9jaGlsZF9pbmZvXG5mcm9tIGFwcC5jb3JlLmNvbmZpZyBpbXBvcnQgc2V0dGluZ3NcblxuXG5jbGFzcyBNb2RlbEluZm8oQmFzZU1vZGVsKTpcbiAgICBpZDogc3RyXG4gICAgbmFtZTogc3RyXG4gICAgcHJvdmlkZXI6IHN0clxuICAgIGRlc2NyaXB0aW9uOiBzdHIgPSBcIlwiXG5cblxuY2xhc3MgTW9kZWxzUmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBtb2RlbHM6IExpc3RbTW9kZWxJbmZvXVxuXG5yb3V0ZXIgPSBBUElSb3V0ZXIoKVxuXG5cbkByb3V0ZXIucG9zdChcIi9cIiwgcmVzcG9uc2VfbW9kZWw9Q2hhdFJlc3BvbnNlKVxuYXN5bmMgZGVmIGNoYXQoXG4gICAgKixcbiAgICBkYjogU2Vzc2lvbiA9IERlcGVuZHMoZ2V0X2RiKSxcbiAgICBjaGF0X3JlcXVlc3Q6IENoYXRSZXF1ZXN0LFxuICAgIGN1cnJlbnRfdXNlcjogVXNlciA9IERlcGVuZHMoZ2V0X2N1cnJlbnRfYWN0aXZlX3VzZXIpLFxuKSAtPiBBbnk6XG4gICAgXCJcIlwiXG4gICAgQ2hhdCB3aXRoIHRoZSBBSSBhc3Npc3RhbnQuXG4gICAgXCJcIlwiXG4gICAgIyBHZW5lcmF0ZSBzZXNzaW9uIElEIGlmIG5vdCBwcm92aWRlZFxuICAgIHNlc3Npb25faWQgPSBjaGF0X3JlcXVlc3Quc2Vzc2lvbl9pZCBvciBzdHIodXVpZC51dWlkNCgpKVxuXG4gICAgIyBHZXQgY2hpbGQgaW5mbyBpZiBjaGlsZF9pZCBpcyBwcm92aWRlZFxuICAgIGNoaWxkX2luZm8gPSBOb25lXG4gICAgaWYgY2hhdF9yZXF1ZXN0LmNoaWxkX2lkOlxuICAgICAgICAjIENoZWNrIGlmIGNoaWxkIGV4aXN0cyBhbmQgYmVsb25ncyB0byBjdXJyZW50IHVzZXJcbiAgICAgICAgY2hpbGQgPSBkYi5nZXQoQ2hpbGQsIGNoYXRfcmVxdWVzdC5jaGlsZF9pZClcbiAgICAgICAgaWYgbm90IGNoaWxkOlxuICAgICAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDQsIGRldGFpbD1cIkNoaWxkIG5vdCBmb3VuZFwiKVxuICAgICAgICBpZiBjaGlsZC5wYXJlbnRfaWQgIT0gY3VycmVudF91c2VyLmlkOlxuICAgICAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDMsIGRldGFpbD1cIk5vdCBlbm91Z2ggcGVybWlzc2lvbnNcIilcblxuICAgICAgICAjIEdldCBjaGlsZCBpbmZvXG4gICAgICAgIGNoaWxkX2luZm8gPSBnZXRfY2hpbGRfaW5mbyhkYiwgY2hhdF9yZXF1ZXN0LmNoaWxkX2lkKVxuXG4gICAgIyBHZXQgY2hhdCBoaXN0b3J5XG4gICAgY2hhdF9oaXN0b3J5ID0gZ2V0X2NoYXRfaGlzdG9yeShkYiwgc2Vzc2lvbl9pZClcblxuICAgICMgR2VuZXJhdGUgcmVzcG9uc2VcbiAgICB0cnk6XG4gICAgICAgIHJlc3VsdCA9IGF3YWl0IGdlbmVyYXRlX3Jlc3BvbnNlKFxuICAgICAgICAgICAgcXVlc3Rpb249Y2hhdF9yZXF1ZXN0LnF1ZXN0aW9uLFxuICAgICAgICAgICAgY2hhdF9oaXN0b3J5PWNoYXRfaGlzdG9yeSxcbiAgICAgICAgICAgIHNlc3Npb25faWQ9c2Vzc2lvbl9pZCxcbiAgICAgICAgICAgIGNoaWxkX2luZm89Y2hpbGRfaW5mbyxcbiAgICAgICAgICAgIG1vZGVsX25hbWU9Y2hhdF9yZXF1ZXN0Lm1vZGVsXG4gICAgICAgIClcblxuICAgICAgICAjIFNhdmUgY2hhdCBpbnRlcmFjdGlvblxuICAgICAgICBzYXZlX2NoYXRfaW50ZXJhY3Rpb24oXG4gICAgICAgICAgICBkYj1kYixcbiAgICAgICAgICAgIHVzZXJfaWQ9Y3VycmVudF91c2VyLmlkLFxuICAgICAgICAgICAgc2Vzc2lvbl9pZD1zZXNzaW9uX2lkLFxuICAgICAgICAgICAgdXNlcl9xdWVyeT1jaGF0X3JlcXVlc3QucXVlc3Rpb24sXG4gICAgICAgICAgICBhaV9yZXNwb25zZT1yZXN1bHRbXCJhbnN3ZXJcIl0sXG4gICAgICAgICAgICBtb2RlbD1jaGF0X3JlcXVlc3QubW9kZWwsXG4gICAgICAgICAgICBjaGlsZF9pZD1jaGF0X3JlcXVlc3QuY2hpbGRfaWQsXG4gICAgICAgICAgICBzb3VyY2VzPXJlc3VsdC5nZXQoXCJzb3VyY2VzXCIpXG4gICAgICAgIClcblxuICAgICAgICByZXR1cm4gQ2hhdFJlc3BvbnNlKFxuICAgICAgICAgICAgYW5zd2VyPXJlc3VsdFtcImFuc3dlclwiXSxcbiAgICAgICAgICAgIHNlc3Npb25faWQ9c2Vzc2lvbl9pZCxcbiAgICAgICAgICAgIHNvdXJjZXM9cmVzdWx0LmdldChcInNvdXJjZXNcIilcbiAgICAgICAgKVxuICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT01MDAsIGRldGFpbD1zdHIoZSkpXG4uLi5cblxuXG5Acm91dGVyLmdldChcIi9tb2RlbHNcIiwgcmVzcG9uc2VfbW9kZWw9TW9kZWxzUmVzcG9uc2UpXG5hc3luYyBkZWYgZ2V0X2F2YWlsYWJsZV9tb2RlbHMoXG4gICAgKixcbiAgICBjdXJyZW50X3VzZXI6IFVzZXIgPSBEZXBlbmRzKGdldF9jdXJyZW50X2FjdGl2ZV91c2VyKSxcbikgLT4gQW55OlxuICAgIFwiXCJcIlxuICAgIEdldCBhdmFpbGFibGUgbW9kZWxzIGZyb20gT3BlblJvdXRlci5cbiAgICBcIlwiXCJcbiAgICB0cnk6XG4gICAgICAgICMgRGVmaW5lIGEgbGlzdCBvZiByZWNvbW1lbmRlZCBtb2RlbHMgZm9yIHBhcmVudGluZyBhc3Npc3RhbnRcbiAgICAgICAgcmVjb21tZW5kZWRfbW9kZWxzID0gW1xuICAgICAgICAgICAgTW9kZWxJbmZvKFxuICAgICAgICAgICAgICAgIGlkPVwib3BlbmFpL2dwdC00by1taW5pXCIsXG4gICAgICAgICAgICAgICAgbmFtZT1cIkdQVC00byBNaW5pXCIsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXI9XCJPcGVuQUlcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbj1cIlNtYWxsZXIsIGZhc3RlciwgYW5kIG1vcmUgYWZmb3JkYWJsZSB2ZXJzaW9uIG9mIEdQVC00b1wiXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgTW9kZWxJbmZvKFxuICAgICAgICAgICAgICAgIGlkPVwiYW50aHJvcGljL2NsYXVkZS0zLW9wdXNcIixcbiAgICAgICAgICAgICAgICBuYW1lPVwiQ2xhdWRlIDMgT3B1c1wiLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyPVwiQW50aHJvcGljXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb249XCJBbnRocm9waWMncyBtb3N0IHBvd2VyZnVsIG1vZGVsIGZvciBjb21wbGV4IHRhc2tzXCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBNb2RlbEluZm8oXG4gICAgICAgICAgICAgICAgaWQ9XCJhbnRocm9waWMvY2xhdWRlLTMtc29ubmV0XCIsXG4gICAgICAgICAgICAgICAgbmFtZT1cIkNsYXVkZSAzIFNvbm5ldFwiLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyPVwiQW50aHJvcGljXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb249XCJCYWxhbmNlZCBtb2RlbCBmb3IgbW9zdCB0YXNrc1wiXG4gICAgICAgICAgICApLFxuLi4uXG5QYXRoOiBkb2MvdXBkYXRlZC1hcmNoaXRlY3R1cmUtZG9jdW1lbnQubWRcbi4uLlxuXG4tLSDlhL/nq6Xkv6Hmga/ooahcbkNSRUFURSBUQUJMRSBjaGlsZHJlbiAoXG4gICAgaWQgVVVJRCBQUklNQVJZIEtFWSxcbiAgICBwYXJlbnRfaWQgVVVJRCBSRUZFUkVOQ0VTIHVzZXJzKGlkKSxcbiAgICBuYW1lIFZBUkNIQVIoNTApLFxuICAgIGJpcnRoZGF5IERBVEUsXG4gICAgZ2VuZGVyIFZBUkNIQVIoMTApLFxuICAgIGNyZWF0ZWRfYXQgVElNRVNUQU1QLFxuICAgIHVwZGF0ZWRfYXQgVElNRVNUQU1QXG4pO1xuXG4tLSDmiJDplb/orrDlvZXooahcbkNSRUFURSBUQUJMRSBncm93dGhfcmVjb3JkcyAoXG4gICAgaWQgVVVJRCBQUklNQVJZIEtFWSxcbiAgICBjaGlsZF9pZCBVVUlEIFJFRkVSRU5DRVMgY2hpbGRyZW4oaWQpLFxuICAgIHJlY29yZF90eXBlIFZBUkNIQVIoMjApLFxuICAgIHJlY29yZF9kYXRhIEpTT05CLFxuICAgIHJlY29yZGVkX2F0IFRJTUVTVEFNUCxcbiAgICBub3RlcyBURVhULFxuICAgIGF0dGFjaG1lbnRzIEpTT05CLFxuICAgIGNyZWF0ZWRfYXQgVElNRVNUQU1QXG4pO1xuXG4tLSDogYrlpKnljoblj7LooahcbkNSRUFURSBUQUJMRSBjaGF0X2hpc3RvcnkgKFxuICAgIGlkIFVVSUQgUFJJTUFSWSBLRVksXG4gICAgdXNlcl9pZCBVVUlEIFJFRkVSRU5DRVMgdXNlcnMoaWQpLFxuICAgIGNoaWxkX2lkIFVVSUQgUkVGRVJFTkNFUyBjaGlsZHJlbihpZCksXG4gICAgc2Vzc2lvbl9pZCBWQVJDSEFSKDUwKSxcbiAgICB1c2VyX3F1ZXJ5IFRFWFQsXG4gICAgYWlfcmVzcG9uc2UgVEVYVCxcbiAgICBtb2RlbCBWQVJDSEFSKDUwKSxcbiAgICBjcmVhdGVkX2F0IFRJTUVTVEFNUFxuKTtcbi4uLlxuXG4jIyMgNS4yIEZhc3RBUEkg5a6e546wXG5cbmBgYHB5dGhvblxuIyBtYWluLnB5XG5mcm9tIGZhc3RhcGkgaW1wb3J0IEZhc3RBUEksIEZpbGUsIFVwbG9hZEZpbGUsIEhUVFBFeGNlcHRpb24sIERlcGVuZHNcbmZyb20gcHlkYW50aWMgaW1wb3J0IEJhc2VNb2RlbCwgRmllbGRcbmZyb20gdHlwaW5nIGltcG9ydCBMaXN0LCBPcHRpb25hbFxuZnJvbSB1dWlkIGltcG9ydCBVVUlELCB1dWlkNFxuZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWVcbmltcG9ydCBvc1xuaW1wb3J0IHNodXRpbFxuXG5hcHAgPSBGYXN0QVBJKHRpdGxlPVwiQUkg6IKy5YS/5Yqp5omLIEFQSVwiKVxuXG4jIOiBiuWkqeivt+axguaooeWei1xuY2xhc3MgQ2hhdFJlcXVlc3QoQmFzZU1vZGVsKTpcbiAgICBxdWVzdGlvbjogc3RyXG4gICAgc2Vzc2lvbl9pZDogT3B0aW9uYWxbc3RyXSA9IE5vbmVcbiAgICBjaGlsZF9pZDogT3B0aW9uYWxbVVVJRF0gPSBOb25lXG5cbiMg6IGK5aSp5ZON5bqU5qih5Z6LXG5jbGFzcyBDaGF0UmVzcG9uc2UoQmFzZU1vZGVsKTpcbiAgICBhbnN3ZXI6IHN0clxuICAgIHNlc3Npb25faWQ6IHN0clxuICAgIHNvdXJjZXM6IExpc3RbZGljdF0gPSBbXVxuXG4jIOiBiuWkqeerr+eCuVxuQGFwcC5wb3N0KFwiL2FwaS92MS9haS9jaGF0XCIsIHJlc3BvbnNlX21vZGVsPUNoYXRSZXNwb25zZSlcbmFzeW5jIGRlZiBjaGF0KHJlcXVlc3Q6IENoYXRSZXF1ZXN0KTpcbiAgICAjIOeUn+aIkOS8muivnUlE77yI5aaC5p6c5pyq5o+Q5L6b77yJXG4gICAgc2Vzc2lvbl9pZCA9IHJlcXVlc3Quc2Vzc2lvbl9pZCBvciBzdHIodXVpZDQoKSlcbiAgICBcbiAgICAjIOiOt+WPluiBiuWkqeWOhuWPslxuICAgIGNoYXRfaGlzdG9yeSA9IGdldF9jaGF0X2hpc3Rvcnkoc2Vzc2lvbl9pZClcbiAgICBcbiAgICAjIOiOt+WPluWEv+erpeS/oeaBr++8iOWmguaenOaPkOS+m+S6hmNoaWxkX2lk77yJXG4gICAgY2hpbGRfaW5mbyA9IE5vbmVcbiAgICBpZiByZXF1ZXN0LmNoaWxkX2lkOlxuICAgICAgICBjaGlsZF9pbmZvID0gZ2V0X2NoaWxkX2luZm8ocmVxdWVzdC5jaGlsZF9pZClcbiAgICBcbiAgICAjIOiwg+eUqFJBR+ezu+e7n1xuICAgIHJhZ19zeXN0ZW0gPSBnZXRfcmFnX3N5c3RlbSgpXG4gICAgcmVzdWx0ID0gcmFnX3N5c3RlbS5hbnN3ZXJfcXVlc3Rpb24oXG4gICAgICAgIHF1ZXN0aW9uPXJlcXVlc3QucXVlc3Rpb24sXG4gICAgICAgIGNoYXRfaGlzdG9yeT1jaGF0X2hpc3RvcnksXG4gICAgICAgIGNoaWxkX2luZm89Y2hpbGRfaW5mb1xuICAgIClcbiAgICBcbiAgICAjIOiusOW9leS6pOS6klxuICAgIHNhdmVfY2hhdF9pbnRlcmFjdGlvbihcbiAgICAgICAgc2Vzc2lvbl9pZD1zZXNzaW9uX2lkLFxuICAgICAgICB1c2VyX3F1ZXJ5PXJlcXVlc3QucXVlc3Rpb24sXG4gICAgICAgIGFpX3Jlc3BvbnNlPXJlc3VsdFtcImFuc3dlclwiXSxcbiAgICAgICAgY2hpbGRfaWQ9cmVxdWVzdC5jaGlsZF9pZFxuICAgIClcbi4uLlxuUGF0aDogYmFja2VuZC9hcHAvcmFnL29wZW5yb3V0ZXJfY2xpZW50LnB5XG5cIlwiXCJcbk9wZW5Sb3V0ZXIgY2xpZW50IGZvciBMTE0gaW50ZWdyYXRpb24uXG5cIlwiXCJcbmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBMaXN0LCBBbnksIE9wdGlvbmFsXG5pbXBvcnQganNvblxuaW1wb3J0IGh0dHB4XG5mcm9tIGxhbmdjaGFpbl9jb3JlLmxhbmd1YWdlX21vZGVscy5jaGF0X21vZGVscyBpbXBvcnQgQmFzZUNoYXRNb2RlbFxuZnJvbSBsYW5nY2hhaW5fY29yZS5tZXNzYWdlcyBpbXBvcnQgKFxuICAgIEFJTWVzc2FnZSxcbiAgICBCYXNlTWVzc2FnZSxcbiAgICBDaGF0TWVzc2FnZSxcbiAgICBIdW1hbk1lc3NhZ2UsXG4gICAgU3lzdGVtTWVzc2FnZSxcbilcbmZyb20gbGFuZ2NoYWluX2NvcmUub3V0cHV0cyBpbXBvcnQgQ2hhdEdlbmVyYXRpb24sIENoYXRSZXN1bHRcbmZyb20gbGFuZ2NoYWluX2NvcmUuY2FsbGJhY2tzLm1hbmFnZXIgaW1wb3J0IENhbGxiYWNrTWFuYWdlckZvckxMTVJ1blxuXG5mcm9tIGFwcC5jb3JlLmNvbmZpZyBpbXBvcnQgc2V0dGluZ3NcblxuXG5jbGFzcyBPcGVuUm91dGVyQ2hhdE1vZGVsKEJhc2VDaGF0TW9kZWwpOlxuICAgIFwiXCJcIkNoYXQgbW9kZWwgdGhhdCB1c2VzIE9wZW5Sb3V0ZXIgQVBJLlwiXCJcIlxuICAgIFxuICAgIGFwaV9rZXk6IHN0clxuICAgIGJhc2VfdXJsOiBzdHIgPSBcImh0dHBzOi8vb3BlbnJvdXRlci5haS9hcGkvdjFcIlxuICAgIG1vZGVsOiBzdHIgPSBcIm9wZW5haS9ncHQtNG8tbWluaVwiXG4gICAgdGVtcGVyYXR1cmU6IGZsb2F0ID0gMC43XG4gICAgbWF4X3Rva2VuczogT3B0aW9uYWxbaW50XSA9IE5vbmVcbiAgICB0b3BfcDogT3B0aW9uYWxbZmxvYXRdID0gTm9uZVxuLi4uXG4gICAgICAgIFxuICAgICAgICB0cnk6XG4gICAgICAgICAgICB3aXRoIGh0dHB4LkNsaWVudCh0aW1lb3V0PTYwLjApIGFzIGNsaWVudDpcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IGNsaWVudC5wb3N0KFxuICAgICAgICAgICAgICAgICAgICBmXCJ7c2VsZi5iYXNlX3VybH0vY2hhdC9jb21wbGV0aW9uc1wiLFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPWhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIGpzb249cGF5bG9hZCxcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UucmFpc2VfZm9yX3N0YXR1cygpXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VfZGF0YSA9IHJlc3BvbnNlLmpzb24oKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICMgRXh0cmFjdCB0aGUgcmVzcG9uc2UgY29udGVudFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VfY29udGVudCA9IHJlc3BvbnNlX2RhdGFbXCJjaG9pY2VzXCJdWzBdW1wibWVzc2FnZVwiXVtcImNvbnRlbnRcIl1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAjIENyZWF0ZSBhIENoYXRHZW5lcmF0aW9uIG9iamVjdFxuICAgICAgICAgICAgICAgIGdlbmVyYXRpb24gPSBDaGF0R2VuZXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZT1BSU1lc3NhZ2UoY29udGVudD1tZXNzYWdlX2NvbnRlbnQpLFxuICAgICAgICAgICAgICAgICAgICBnZW5lcmF0aW9uX2luZm89e1wiZmluaXNoX3JlYXNvblwiOiByZXNwb25zZV9kYXRhW1wiY2hvaWNlc1wiXVswXS5nZXQoXCJmaW5pc2hfcmVhc29uXCIpfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAjIFJldHVybiB0aGUgQ2hhdFJlc3VsdFxuICAgICAgICAgICAgICAgIHJldHVybiBDaGF0UmVzdWx0KGdlbmVyYXRpb25zPVtnZW5lcmF0aW9uXSlcbiAgICAgICAgXG4gICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoZlwiRXJyb3IgY2FsbGluZyBPcGVuUm91dGVyIEFQSToge3N0cihlKX1cIilcbiAgICBcbiAgICBAcHJvcGVydHlcbiAgICBkZWYgX2xsbV90eXBlKHNlbGYpIC0+IHN0cjpcbiAgICAgICAgXCJcIlwiUmV0dXJuIHRoZSB0eXBlIG9mIExMTS5cIlwiXCJcbiAgICAgICAgcmV0dXJuIFwib3BlbnJvdXRlclwiXG5cblxuZGVmIGdldF9vcGVucm91dGVyX2NoYXRfbW9kZWwoXG4gICAgbW9kZWw6IHN0ciA9IE5vbmUsXG4gICAgdGVtcGVyYXR1cmU6IGZsb2F0ID0gMC43LFxuICAgIG1heF90b2tlbnM6IE9wdGlvbmFsW2ludF0gPSBOb25lLFxuICAgIHRvcF9wOiBPcHRpb25hbFtmbG9hdF0gPSBOb25lLFxuKSAtPiBPcGVuUm91dGVyQ2hhdE1vZGVsOlxuICAgIFwiXCJcIlxuICAgIEdldCBhbiBPcGVuUm91dGVyQ2hhdE1vZGVsIGluc3RhbmNlLlxuICAgIFxuICAgIEFyZ3M6XG4gICAgICAgIG1vZGVsOiBNb2RlbCBuYW1lIChlLmcuLCBcIm9wZW5haS9ncHQtNG8tbWluaVwiLCBcImFudGhyb3BpYy9jbGF1ZGUtMy1vcHVzXCIpXG4gICAgICAgIHRlbXBlcmF0dXJlOiBUZW1wZXJhdHVyZSBmb3IgZ2VuZXJhdGlvblxuICAgICAgICBtYXhfdG9rZW5zOiBNYXhpbXVtIHRva2VucyB0byBnZW5lcmF0ZVxuICAgICAgICB0b3BfcDogVG9wLXAgc2FtcGxpbmcgcGFyYW1ldGVyXG4gICAgICAgIFxuICAgIFJldHVybnM6XG4gICAgICAgIE9wZW5Sb3V0ZXJDaGF0TW9kZWwgaW5zdGFuY2VcbiAgICBcIlwiXCJcbiAgICByZXR1cm4gT3BlblJvdXRlckNoYXRNb2RlbChcbiAgICAgICAgYXBpX2tleT1zZXR0aW5ncy5PUEVOUk9VVEVSX0FQSV9LRVksXG4gICAgICAgIGJhc2VfdXJsPXNldHRpbmdzLk9QRU5ST1VURVJfQkFTRV9VUkwsXG4gICAgICAgIG1vZGVsPW1vZGVsIG9yIHNldHRpbmdzLkRFRkFVTFRfTExNX01PREVMLFxuICAgICAgICB0ZW1wZXJhdHVyZT10ZW1wZXJhdHVyZSxcbiAgICAgICAgbWF4X3Rva2Vucz1tYXhfdG9rZW5zLFxuICAgICAgICB0b3BfcD10b3BfcCxcbiAgICApXG4uLi5cblBhdGg6IGJhY2tlbmQvYXBwL3JhZy9jaGF0X2hpc3RvcnkucHlcbi4uLlxuXG5cbmRlZiBzYXZlX2NoYXRfaW50ZXJhY3Rpb24oXG4gICAgZGI6IFNlc3Npb24sXG4gICAgdXNlcl9pZDogdXVpZC5VVUlELFxuICAgIHNlc3Npb25faWQ6IHN0cixcbiAgICB1c2VyX3F1ZXJ5OiBzdHIsXG4gICAgYWlfcmVzcG9uc2U6IHN0cixcbiAgICBtb2RlbDogc3RyLFxuICAgIGNoaWxkX2lkOiBPcHRpb25hbFt1dWlkLlVVSURdID0gTm9uZSxcbiAgICBzb3VyY2VzOiBPcHRpb25hbFtMaXN0W0RpY3Rbc3RyLCBBbnldXV0gPSBOb25lXG4pIC0+IENoYXRIaXN0b3J5OlxuICAgIFwiXCJcIlxuICAgIFNhdmUgYSBjaGF0IGludGVyYWN0aW9uIHRvIHRoZSBkYXRhYmFzZS5cbiAgICBcbiAgICBBcmdzOlxuICAgICAgICBkYjogRGF0YWJhc2Ugc2Vzc2lvblxuICAgICAgICB1c2VyX2lkOiBVc2VyIElEXG4gICAgICAgIHNlc3Npb25faWQ6IFNlc3Npb24gSURcbiAgICAgICAgdXNlcl9xdWVyeTogVXNlcidzIHF1ZXN0aW9uXG4gICAgICAgIGFpX3Jlc3BvbnNlOiBBSSdzIHJlc3BvbnNlXG4gICAgICAgIG1vZGVsOiBNb2RlbCBuYW1lXG4gICAgICAgIGNoaWxkX2lkOiBPcHRpb25hbCBjaGlsZCBJRFxuICAgICAgICBzb3VyY2VzOiBPcHRpb25hbCBsaXN0IG9mIHNvdXJjZSBkb2N1bWVudHNcbiAgICAgICAgXG4gICAgUmV0dXJuczpcbiAgICAgICAgQ2hhdEhpc3RvcnkgaW5zdGFuY2VcbiAgICBcIlwiXCJcbiAgICAjIENyZWF0ZSBjaGF0IGhpc3RvcnkgcmVjb3JkXG4gICAgY2hhdF9oaXN0b3J5X2RhdGEgPSBDaGF0SGlzdG9yeUNyZWF0ZShcbiAgICAgICAgdXNlcl9pZD11c2VyX2lkLFxuICAgICAgICBjaGlsZF9pZD1jaGlsZF9pZCxcbiAgICAgICAgc2Vzc2lvbl9pZD1zZXNzaW9uX2lkLFxuICAgICAgICB1c2VyX3F1ZXJ5PXVzZXJfcXVlcnksXG4gICAgICAgIGFpX3Jlc3BvbnNlPWFpX3Jlc3BvbnNlLFxuICAgICAgICBtb2RlbD1tb2RlbFxuICAgIClcbi4uLlxuXG5cbmRlZiBnZXRfY2hhdF9oaXN0b3J5KFxuICAgIGRiOiBTZXNzaW9uLFxuICAgIHNlc3Npb25faWQ6IHN0cixcbiAgICBsaW1pdDogaW50ID0gMTBcbikgLT4gTGlzdFtEaWN0W3N0ciwgc3RyXV06XG4gICAgXCJcIlwiXG4gICAgR2V0IGNoYXQgaGlzdG9yeSBmb3IgYSBzZXNzaW9uLlxuICAgIFxuICAgIEFyZ3M6XG4gICAgICAgIGRiOiBEYXRhYmFzZSBzZXNzaW9uXG4gICAgICAgIHNlc3Npb25faWQ6IFNlc3Npb24gSURcbiAgICAgICAgbGltaXQ6IE1heGltdW0gbnVtYmVyIG9mIG1lc3NhZ2VzIHRvIHJldHVyblxuICAgICAgICBcbiAgICBSZXR1cm5zOlxuICAgICAgICBMaXN0IG9mIG1lc3NhZ2VzIGluIHRoZSBmb3JtYXQgZXhwZWN0ZWQgYnkgTGFuZ0NoYWluXG4gICAgXCJcIlwiXG4gICAgIyBRdWVyeSBjaGF0IGhpc3RvcnlcbiAgICBzdGF0ZW1lbnQgPSAoXG4gICAgICAgIHNlbGVjdChDaGF0SGlzdG9yeSlcbiAgICAgICAgLndoZXJlKENoYXRIaXN0b3J5LnNlc3Npb25faWQgPT0gc2Vzc2lvbl9pZClcbiAgICAgICAgLm9yZGVyX2J5KENoYXRIaXN0b3J5LmNyZWF0ZWRfYXQuZGVzYygpKVxuICAgICAgICAubGltaXQobGltaXQpXG4gICAgKVxuICAgIFxuICAgIGNoYXRfaGlzdG9yaWVzID0gZGIuZXhlYyhzdGF0ZW1lbnQpLmFsbCgpXG4gICAgXG4gICAgIyBGb3JtYXQgZm9yIExhbmdDaGFpblxuICAgIG1lc3NhZ2VzID0gW11cbiAgICBmb3IgY2hhdCBpbiByZXZlcnNlZChjaGF0X2hpc3Rvcmllcyk6ICAjIFJldmVyc2UgdG8gZ2V0IGNocm9ub2xvZ2ljYWwgb3JkZXJcbiAgICAgICAgbWVzc2FnZXMuZXh0ZW5kKFtcbiAgICAgICAgICAgIHtcInJvbGVcIjogXCJodW1hblwiLCBcImNvbnRlbnRcIjogY2hhdC51c2VyX3F1ZXJ5fSxcbiAgICAgICAgICAgIHtcInJvbGVcIjogXCJhaVwiLCBcImNvbnRlbnRcIjogY2hhdC5haV9yZXNwb25zZX1cbiAgICAgICAgXSlcbiAgICBcbiAgICByZXR1cm4gbWVzc2FnZXNcbi4uLlxuUGF0aDogYmFja2VuZC9hcHAvYWxlbWJpYy92ZXJzaW9ucy9hZGRfcmFnX21vZGVscy5weVxuLi4uXG5cbiAgICBvcC5jcmVhdGVfdGFibGUoXG4gICAgICAgICdjaGF0X2hpc3RvcnknLFxuICAgICAgICBzYS5Db2x1bW4oJ3Nlc3Npb25faWQnLCBzYS5TdHJpbmcobGVuZ3RoPTUwKSwgbnVsbGFibGU9RmFsc2UpLFxuICAgICAgICBzYS5Db2x1bW4oJ3VzZXJfcXVlcnknLCBzYS5TdHJpbmcoKSwgbnVsbGFibGU9RmFsc2UpLFxuICAgICAgICBzYS5Db2x1bW4oJ2FpX3Jlc3BvbnNlJywgc2EuU3RyaW5nKCksIG51bGxhYmxlPUZhbHNlKSxcbiAgICAgICAgc2EuQ29sdW1uKCdtb2RlbCcsIHNhLlN0cmluZyhsZW5ndGg9NTApLCBudWxsYWJsZT1GYWxzZSksXG4gICAgICAgIHNhLkNvbHVtbignaWQnLCBwb3N0Z3Jlc3FsLlVVSUQoYXNfdXVpZD1UcnVlKSwgbnVsbGFibGU9RmFsc2UpLFxuICAgICAgICBzYS5Db2x1bW4oJ3VzZXJfaWQnLCBwb3N0Z3Jlc3FsLlVVSUQoYXNfdXVpZD1UcnVlKSwgbnVsbGFibGU9RmFsc2UpLFxuICAgICAgICBzYS5Db2x1bW4oJ2NoaWxkX2lkJywgcG9zdGdyZXNxbC5VVUlEKGFzX3V1aWQ9VHJ1ZSksIG51bGxhYmxlPVRydWUpLFxuICAgICAgICBzYS5Db2x1bW4oJ2NyZWF0ZWRfYXQnLCBzYS5EYXRlVGltZSgpLCBudWxsYWJsZT1GYWxzZSksXG4gICAgICAgIHNhLkNvbHVtbignc291cmNlcycsIHBvc3RncmVzcWwuSlNPTihhc3RleHRfdHlwZT1zYS5UZXh0KCkpLCBudWxsYWJsZT1UcnVlKSxcbiAgICAgICAgc2EuRm9yZWlnbktleUNvbnN0cmFpbnQoWydjaGlsZF9pZCddLCBbJ2NoaWxkLmlkJ10sICksXG4gICAgICAgIHNhLkZvcmVpZ25LZXlDb25zdHJhaW50KFsndXNlcl9pZCddLCBbJ3VzZXIuaWQnXSwgKSxcbiAgICAgICAgc2EuUHJpbWFyeUtleUNvbnN0cmFpbnQoJ2lkJylcbiAgICApXG4uLi5cblBhdGg6IGJhY2tlbmQvYXBwL3JhZy9yYWdfY2hhaW4ucHlcbi4uLlxuXG5cbiMgQ29udGV4dC1hd2FyZSBxdWVzdGlvbiBwcm9tcHRcbmNvbnRleHR1YWxpemVfcV9zeXN0ZW1fcHJvbXB0ID0gXCJcIlwiXG5HaXZlbiB0aGUgY2hhdCBoaXN0b3J5IGFuZCB0aGUgbGF0ZXN0IHVzZXIgcXVlc3Rpb24sIHdoaWNoIG1heSByZWZlcmVuY2UgY29udGV4dCBmcm9tIHRoZSBjaGF0IGhpc3RvcnksXG5mb3JtdWxhdGUgYSBzdGFuZGFsb25lIHF1ZXN0aW9uIHRoYXQgY2FuIGJlIHVuZGVyc3Rvb2Qgd2l0aG91dCB0aGUgY2hhdCBoaXN0b3J5LlxuRG8gbm90IGFuc3dlciB0aGUgcXVlc3Rpb24sIGp1c3QgcmVmb3JtdWxhdGUgaXQgaWYgbmVlZGVkLCBvciByZXR1cm4gaXQgYXMgaXMuXG5cbklmIHRoZSBxdWVzdGlvbiBpcyBhYm91dCBhIGNoaWxkLCBtYWtlIHN1cmUgdG8gaW5jbHVkZSByZWxldmFudCBkZXRhaWxzIGxpa2UgYWdlLCBnZW5kZXIsIG9yIHNwZWNpZmljIGNvbmNlcm5zLlxuXCJcIlwiXG5cbmNvbnRleHR1YWxpemVfcV9wcm9tcHQgPSBDaGF0UHJvbXB0VGVtcGxhdGUuZnJvbV9tZXNzYWdlcyhbXG4gICAgKFwic3lzdGVtXCIsIGNvbnRleHR1YWxpemVfcV9zeXN0ZW1fcHJvbXB0KSxcbiAgICBNZXNzYWdlc1BsYWNlaG9sZGVyKFwiY2hhdF9oaXN0b3J5XCIpLFxuICAgIChcImh1bWFuXCIsIFwie2lucHV0fVwiKSxcbl0pXG4uLi5cblxuUmVtZW1iZXIgdGhhdCBwYXJlbnRpbmcgaXMgcGVyc29uYWwsIGFuZCB5b3VyIGFkdmljZSBzaG91bGQgYmUgYWRhcHRhYmxlIHRvIGRpZmZlcmVudCBwYXJlbnRpbmcgc3R5bGVzIGFuZCBjdWx0dXJhbCBjb250ZXh0cy5cblwiXCJcIlxuXG5xYV9wcm9tcHQgPSBDaGF0UHJvbXB0VGVtcGxhdGUuZnJvbV9tZXNzYWdlcyhbXG4gICAgKFwic3lzdGVtXCIsIHFhX3N5c3RlbV9wcm9tcHQpLFxuICAgIChcInN5c3RlbVwiLCBcIkNoaWxkIEluZm9ybWF0aW9uOiB7Y2hpbGRfaW5mb31cIiksXG4gICAgTWVzc2FnZXNQbGFjZWhvbGRlcih2YXJpYWJsZV9uYW1lPVwiY2hhdF9oaXN0b3J5XCIpLFxuICAgIChcImh1bWFuXCIsIFwie2lucHV0fVwiKVxuXSlcblxuXG5kZWYgZ2V0X3JhZ19jaGFpbihtb2RlbF9uYW1lOiBzdHIgPSBOb25lLCBjaGlsZF9pbmZvOiBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV0gPSBOb25lKTpcbiAgICBcIlwiXCJcbiAgICBDcmVhdGUgYSBSQUcgY2hhaW4gZm9yIHRoZSBwYXJlbnRpbmcgYXNzaXN0YW50LlxuXG4gICAgQXJnczpcbiAgICAgICAgbW9kZWxfbmFtZTogTmFtZSBvZiB0aGUgbW9kZWwgdG8gdXNlIChlLmcuLCBcIm9wZW5haS9ncHQtNG8tbWluaVwiLCBcImFudGhyb3BpYy9jbGF1ZGUtMy1vcHVzXCIpXG4gICAgICAgIGNoaWxkX2luZm86IE9wdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjaGlsZFxuXG4gICAgUmV0dXJuczpcbiAgICAgICAgQSBSQUcgY2hhaW5cbiAgICBcIlwiXCJcbiAgICAjIEluaXRpYWxpemUgbGFuZ3VhZ2UgbW9kZWxcbiAgICBsbG0gPSBnZXRfb3BlbnJvdXRlcl9jaGF0X21vZGVsKFxuICAgICAgICBtb2RlbD1tb2RlbF9uYW1lIG9yIHNldHRpbmdzLkRFRkFVTFRfTExNX01PREVMLFxuICAgICAgICB0ZW1wZXJhdHVyZT0wLjdcbiAgICApXG5cbiAgICAjIEdldCByZXRyaWV2ZXJcbiAgICByZXRyaWV2ZXIgPSBnZXRfcmV0cmlldmVyKHNlYXJjaF9rd2FyZ3M9e1wia1wiOiAzfSlcblxuICAgICMgQ3JlYXRlIGhpc3RvcnktYXdhcmUgcmV0cmlldmVyXG4gICAgaGlzdG9yeV9hd2FyZV9yZXRyaWV2ZXIgPSBjcmVhdGVfaGlzdG9yeV9hd2FyZV9yZXRyaWV2ZXIoXG4gICAgICAgIGxsbSxcbiAgICAgICAgcmV0cmlldmVyLFxuICAgICAgICBjb250ZXh0dWFsaXplX3FfcHJvbXB0XG4gICAgKVxuXG4gICAgIyBDcmVhdGUgcXVlc3Rpb24tYW5zd2VyaW5nIGNoYWluXG4gICAgcXVlc3Rpb25fYW5zd2VyX2NoYWluID0gY3JlYXRlX3N0dWZmX2RvY3VtZW50c19jaGFpbihcbiAgICAgICAgbGxtLFxuICAgICAgICBxYV9wcm9tcHRcbiAgICApXG4uLi5cblxuXG5hc3luYyBkZWYgZ2VuZXJhdGVfcmVzcG9uc2UoXG4gICAgcXVlc3Rpb246IHN0cixcbiAgICBjaGF0X2hpc3Rvcnk6IExpc3RbRGljdFtzdHIsIHN0cl1dLFxuICAgIHNlc3Npb25faWQ6IHN0cixcbiAgICBjaGlsZF9pbmZvOiBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV0gPSBOb25lLFxuICAgIG1vZGVsX25hbWU6IHN0ciA9IFwiZ3B0LTRvLW1pbmlcIlxuKSAtPiBEaWN0W3N0ciwgQW55XTpcbiAgICBcIlwiXCJcbiAgICBHZW5lcmF0ZSBhIHJlc3BvbnNlIHVzaW5nIHRoZSBSQUcgY2hhaW4uXG5cbiAgICBBcmdzOlxuICAgICAgICBxdWVzdGlvbjogVXNlcidzIHF1ZXN0aW9uXG4gICAgICAgIGNoYXRfaGlzdG9yeTogTGlzdCBvZiBwcmV2aW91cyBtZXNzYWdlc1xuICAgICAgICBzZXNzaW9uX2lkOiBTZXNzaW9uIElEXG4gICAgICAgIGNoaWxkX2luZm86IE9wdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjaGlsZFxuICAgICAgICBtb2RlbF9uYW1lOiBOYW1lIG9mIHRoZSBPcGVuQUkgbW9kZWwgdG8gdXNlXG5cbiAgICBSZXR1cm5zOlxuICAgICAgICBEaWN0aW9uYXJ5IGNvbnRhaW5pbmcgdGhlIGFuc3dlciBhbmQgc291cmNlIGRvY3VtZW50c1xuICAgIFwiXCJcIlxuICAgICMgR2V0IFJBRyBjaGFpblxuICAgIHJhZ19jaGFpbiA9IGdldF9yYWdfY2hhaW4obW9kZWxfbmFtZSwgY2hpbGRfaW5mbylcblxuICAgICMgUHJlcGFyZSBpbnB1dFxuICAgIGNoYWluX2lucHV0ID0ge1xuICAgICAgICBcImlucHV0XCI6IHF1ZXN0aW9uLFxuICAgICAgICBcImNoYXRfaGlzdG9yeVwiOiBjaGF0X2hpc3RvcnlcbiAgICB9XG4uLi5cblBhdGg6IGRvYy9GYXN0QVBJ5a2m5Lmg5omL5YaMLm1kXG4uLi5cblxuIyMgNi4g6K+35rGC5L2TXG5cbuS9v+eUqCBQeWRhbnRpYyDmqKHlnovlrprkuYnor7fmsYLkvZPvvJpcblxuYGBgcHl0aG9uXG5mcm9tIHB5ZGFudGljIGltcG9ydCBCYXNlTW9kZWxcblxuY2xhc3MgSXRlbShCYXNlTW9kZWwpOlxuICAgIG5hbWU6IHN0clxuICAgIGRlc2NyaXB0aW9uOiBzdHIgPSBOb25lXG4gICAgcHJpY2U6IGZsb2F0XG4gICAgdGF4OiBmbG9hdCA9IE5vbmVcblxuQGFwcC5wb3N0KFwiL2l0ZW1zL1wiKVxuZGVmIGNyZWF0ZV9pdGVtKGl0ZW06IEl0ZW0pOlxuICAgIHJldHVybiBpdGVtXG5gYGBcblxuIyMjIOivt+axguS9kyArIOi3r+W+hOWPguaVsFxuXG7lkIzml7bkvb/nlKjor7fmsYLkvZPlkozot6/lvoTlj4LmlbDvvJpcblxuYGBgcHl0aG9uXG5AYXBwLnB1dChcIi9pdGVtcy97aXRlbV9pZH1cIilcbmRlZiB1cGRhdGVfaXRlbShpdGVtX2lkOiBpbnQsIGl0ZW06IEl0ZW0pOlxuICAgIHJldHVybiB7XCJpdGVtX2lkXCI6IGl0ZW1faWQsICoqaXRlbS5tb2RlbF9kdW1wKCl9XG5gYGBcblxuIyMjIOivt+axguS9kyArIOi3r+W+hOWPguaVsCArIOafpeivouWPguaVsFxuXG5gYGBweXRob25cbkBhcHAucHV0KFwiL2l0ZW1zL3tpdGVtX2lkfVwiKVxuZGVmIHVwZGF0ZV9pdGVtKGl0ZW1faWQ6IGludCwgaXRlbTogSXRlbSwgcTogc3RyID0gTm9uZSk6XG4gICAgcmVzdWx0ID0ge1wiaXRlbV9pZFwiOiBpdGVtX2lkLCAqKml0ZW0ubW9kZWxfZHVtcCgpfVxuICAgIGlmIHE6XG4gICAgICAgIHJlc3VsdC51cGRhdGUoe1wicVwiOiBxfSlcbiAgICByZXR1cm4gcmVzdWx0XG5gYGBcblxuIyMjIOW1jOWll+aooeWei1xuXG7lrprkuYnltYzlpZfnmoQgUHlkYW50aWMg5qih5Z6L77yaXG5cbmBgYHB5dGhvblxuY2xhc3MgSW1hZ2UoQmFzZU1vZGVsKTpcbiAgICB1cmw6IHN0clxuICAgIG5hbWU6IHN0clxuLi4uXG5QYXRoOiBkb2MvYXJjaGl0ZWN0dXJlLWRvY3VtZW50Lm1kXG4uLi5cblxuLSBKV1Qg6K6k6K+BXG4tIE9BdXRoIDIuMCDnpL7kuqTnmbvlvZVcbi0gUkJBQyDmnYPpmZDmjqfliLZcbi0g5omL5py65Y+3K+mqjOivgeeggeeZu+W9lVxuXG4jIyMgMy4yIOaVsOaNruiusOW9leaooeWdl1xuXG4jIyMjIOaVsOaNruaooeWei1xuXG5gYGBzcWxcbi0tIOWEv+erpeS/oeaBr1xuQ2hpbGQge1xuICAgIGlkOiBVVUlEXG4gICAgbmFtZTogU3RyaW5nXG4gICAgYmlydGhkYXk6IERhdGVcbiAgICBnZW5kZXI6IEVudW1cbiAgICBwYXJlbnRfaWQ6IFVVSURcbiAgICBjcmVhdGVkX2F0OiBUaW1lc3RhbXBcbiAgICB1cGRhdGVkX2F0OiBUaW1lc3RhbXBcbn1cblxuLS0g5oiQ6ZW/6K6w5b2VXG5Hcm93dGhSZWNvcmQge1xuICAgIGlkOiBVVUlEXG4gICAgY2hpbGRfaWQ6IFVVSURcbiAgICByZWNvcmRfdHlwZTogRW51bVxuICAgIHJlY29yZF92YWx1ZTogSlNPTlxuICAgIHJlY29yZGVkX2F0OiBUaW1lc3RhbXBcbi4uLiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjYyNmY0Y2QyLTM5YTgtNDZkOS04YzQzLWJjNmNkNzQ0MDliZjt0b29sdV92cnR4XzAxVXViTndGOXM3V0hURXh1ckhqUkpXdCI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJDb21tYW5kIGlzIHN0aWxsIHJ1bm5pbmcgYWZ0ZXIgMCBzZWNvbmRzLiBZb3UgY2FuIHVzZSByZWFkLXByb2Nlc3MgdG8gZ2V0IG1vcmUgb3V0cHV0XG5hbmQga2lsbC1wcm9jZXNzIHRvIHRlcm1pbmF0ZSBpdCBpZiBuZWVkZWQuXG5QSUQgOVxuT3V0cHV0IHNvIGZhcjpcbjxzdGRvdXQ+XG5cbjwvc3Rkb3V0PlxuPHN0ZGVycj5cblxuPC9zdGRlcnI+IiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiZmFkYjY0NzUtZjRlNi00NzEyLWJiN2UtNTU5NWViMTllZGM5O3Rvb2x1X3ZydHhfMDFSa0pNYnljOTYzWnpKWmhYem10YWFXIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDkgKHN0YXR1czogY29tcGxldGVkKTpcbjxvdXRwdXQ+e1wiZGV0YWlsXCI6XCJOb3QgRm91bmRcIn08L291dHB1dD5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJjY2Q4NDhkNS1iNTNlLTQ0OTMtOWE0Ny0zODgzMzQwYWY5OGI7dG9vbHVfdnJ0eF8wMUVEa3lhSzlZZnJGNHBIc0t5YUpEcHEiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogYmFja2VuZC9hcHAvYXBpL3JvdXRlcy9sb2dpbi5weVxuZnJvbSBkYXRldGltZSBpbXBvcnQgdGltZWRlbHRhXG5mcm9tIHR5cGluZyBpbXBvcnQgQW5ub3RhdGVkLCBBbnlcblxuZnJvbSBmYXN0YXBpIGltcG9ydCBBUElSb3V0ZXIsIERlcGVuZHMsIEhUVFBFeGNlcHRpb25cbmZyb20gZmFzdGFwaS5yZXNwb25zZXMgaW1wb3J0IEhUTUxSZXNwb25zZVxuZnJvbSBmYXN0YXBpLnNlY3VyaXR5IGltcG9ydCBPQXV0aDJQYXNzd29yZFJlcXVlc3RGb3JtXG5cbmZyb20gYXBwIGltcG9ydCBjcnVkXG5mcm9tIGFwcC5hcGkuZGVwcyBpbXBvcnQgQ3VycmVudFVzZXIsIFNlc3Npb25EZXAsIGdldF9jdXJyZW50X2FjdGl2ZV9zdXBlcnVzZXJcbmZyb20gYXBwLmNvcmUgaW1wb3J0IHNlY3VyaXR5XG5mcm9tIGFwcC5jb3JlLmNvbmZpZyBpbXBvcnQgc2V0dGluZ3NcbmZyb20gYXBwLmNvcmUuc2VjdXJpdHkgaW1wb3J0IGdldF9wYXNzd29yZF9oYXNoXG5mcm9tIGFwcC5tb2RlbHMgaW1wb3J0IE1lc3NhZ2UsIE5ld1Bhc3N3b3JkLCBUb2tlbiwgVXNlclB1YmxpY1xuZnJvbSBhcHAudXRpbHMgaW1wb3J0IChcbiAgICBnZW5lcmF0ZV9wYXNzd29yZF9yZXNldF90b2tlbixcbiAgICBnZW5lcmF0ZV9yZXNldF9wYXNzd29yZF9lbWFpbCxcbiAgICBzZW5kX2VtYWlsLFxuICAgIHZlcmlmeV9wYXNzd29yZF9yZXNldF90b2tlbixcbilcblxucm91dGVyID0gQVBJUm91dGVyKHRhZ3M9W1wibG9naW5cIl0pXG5cblxuQHJvdXRlci5wb3N0KFwiL2xvZ2luL2FjY2Vzcy10b2tlblwiKVxuZGVmIGxvZ2luX2FjY2Vzc190b2tlbihcbiAgICBzZXNzaW9uOiBTZXNzaW9uRGVwLCBmb3JtX2RhdGE6IEFubm90YXRlZFtPQXV0aDJQYXNzd29yZFJlcXVlc3RGb3JtLCBEZXBlbmRzKCldXG4pIC0+IFRva2VuOlxuICAgIFwiXCJcIlxuICAgIE9BdXRoMiBjb21wYXRpYmxlIHRva2VuIGxvZ2luLCBnZXQgYW4gYWNjZXNzIHRva2VuIGZvciBmdXR1cmUgcmVxdWVzdHNcbiAgICBcIlwiXCJcbiAgICB1c2VyID0gY3J1ZC5hdXRoZW50aWNhdGUoXG4gICAgICAgIHNlc3Npb249c2Vzc2lvbiwgZW1haWw9Zm9ybV9kYXRhLnVzZXJuYW1lLCBwYXNzd29yZD1mb3JtX2RhdGEucGFzc3dvcmRcbiAgICApXG4gICAgaWYgbm90IHVzZXI6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDAwLCBkZXRhaWw9XCJJbmNvcnJlY3QgZW1haWwgb3IgcGFzc3dvcmRcIilcbiAgICBlbGlmIG5vdCB1c2VyLmlzX2FjdGl2ZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1cIkluYWN0aXZlIHVzZXJcIilcbiAgICBhY2Nlc3NfdG9rZW5fZXhwaXJlcyA9IHRpbWVkZWx0YShtaW51dGVzPXNldHRpbmdzLkFDQ0VTU19UT0tFTl9FWFBJUkVfTUlOVVRFUylcbiAgICByZXR1cm4gVG9rZW4oXG4gICAgICAgIGFjY2Vzc190b2tlbj1zZWN1cml0eS5jcmVhdGVfYWNjZXNzX3Rva2VuKFxuICAgICAgICAgICAgdXNlci5pZCwgZXhwaXJlc19kZWx0YT1hY2Nlc3NfdG9rZW5fZXhwaXJlc1xuICAgICAgICApXG4gICAgKVxuXG5cbkByb3V0ZXIucG9zdChcIi9sb2dpbi90ZXN0LXRva2VuXCIsIHJlc3BvbnNlX21vZGVsPVVzZXJQdWJsaWMpXG5kZWYgdGVzdF90b2tlbihjdXJyZW50X3VzZXI6IEN1cnJlbnRVc2VyKSAtPiBBbnk6XG4gICAgXCJcIlwiXG4gICAgVGVzdCBhY2Nlc3MgdG9rZW5cbiAgICBcIlwiXCJcbiAgICByZXR1cm4gY3VycmVudF91c2VyXG5cblxuQHJvdXRlci5wb3N0KFwiL3Bhc3N3b3JkLXJlY292ZXJ5L3tlbWFpbH1cIilcbmRlZiByZWNvdmVyX3Bhc3N3b3JkKGVtYWlsOiBzdHIsIHNlc3Npb246IFNlc3Npb25EZXApIC0+IE1lc3NhZ2U6XG4gICAgXCJcIlwiXG4gICAgUGFzc3dvcmQgUmVjb3ZlcnlcbiAgICBcIlwiXCJcbiAgICB1c2VyID0gY3J1ZC5nZXRfdXNlcl9ieV9lbWFpbChzZXNzaW9uPXNlc3Npb24sIGVtYWlsPWVtYWlsKVxuXG4gICAgaWYgbm90IHVzZXI6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oXG4gICAgICAgICAgICBzdGF0dXNfY29kZT00MDQsXG4gICAgICAgICAgICBkZXRhaWw9XCJUaGUgdXNlciB3aXRoIHRoaXMgZW1haWwgZG9lcyBub3QgZXhpc3QgaW4gdGhlIHN5c3RlbS5cIixcbiAgICAgICAgKVxuICAgIHBhc3N3b3JkX3Jlc2V0X3Rva2VuID0gZ2VuZXJhdGVfcGFzc3dvcmRfcmVzZXRfdG9rZW4oZW1haWw9ZW1haWwpXG4gICAgZW1haWxfZGF0YSA9IGdlbmVyYXRlX3Jlc2V0X3Bhc3N3b3JkX2VtYWlsKFxuICAgICAgICBlbWFpbF90bz11c2VyLmVtYWlsLCBlbWFpbD1lbWFpbCwgdG9rZW49cGFzc3dvcmRfcmVzZXRfdG9rZW5cbiAgICApXG4gICAgc2VuZF9lbWFpbChcbiAgICAgICAgZW1haWxfdG89dXNlci5lbWFpbCxcbiAgICAgICAgc3ViamVjdD1lbWFpbF9kYXRhLnN1YmplY3QsXG4gICAgICAgIGh0bWxfY29udGVudD1lbWFpbF9kYXRhLmh0bWxfY29udGVudCxcbiAgICApXG4gICAgcmV0dXJuIE1lc3NhZ2UobWVzc2FnZT1cIlBhc3N3b3JkIHJlY292ZXJ5IGVtYWlsIHNlbnRcIilcblxuXG5Acm91dGVyLnBvc3QoXCIvcmVzZXQtcGFzc3dvcmQvXCIpXG5kZWYgcmVzZXRfcGFzc3dvcmQoc2Vzc2lvbjogU2Vzc2lvbkRlcCwgYm9keTogTmV3UGFzc3dvcmQpIC0+IE1lc3NhZ2U6XG4gICAgXCJcIlwiXG4gICAgUmVzZXQgcGFzc3dvcmRcbiAgICBcIlwiXCJcbiAgICBlbWFpbCA9IHZlcmlmeV9wYXNzd29yZF9yZXNldF90b2tlbih0b2tlbj1ib2R5LnRva2VuKVxuICAgIGlmIG5vdCBlbWFpbDpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1cIkludmFsaWQgdG9rZW5cIilcbiAgICB1c2VyID0gY3J1ZC5nZXRfdXNlcl9ieV9lbWFpbChzZXNzaW9uPXNlc3Npb24sIGVtYWlsPWVtYWlsKVxuICAgIGlmIG5vdCB1c2VyOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKFxuICAgICAgICAgICAgc3RhdHVzX2NvZGU9NDA0LFxuICAgICAgICAgICAgZGV0YWlsPVwiVGhlIHVzZXIgd2l0aCB0aGlzIGVtYWlsIGRvZXMgbm90IGV4aXN0IGluIHRoZSBzeXN0ZW0uXCIsXG4gICAgICAgIClcbiAgICBlbGlmIG5vdCB1c2VyLmlzX2FjdGl2ZTpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihzdGF0dXNfY29kZT00MDAsIGRldGFpbD1cIkluYWN0aXZlIHVzZXJcIilcbiAgICBoYXNoZWRfcGFzc3dvcmQgPSBnZXRfcGFzc3dvcmRfaGFzaChwYXNzd29yZD1ib2R5Lm5ld19wYXNzd29yZClcbiAgICB1c2VyLmhhc2hlZF9wYXNzd29yZCA9IGhhc2hlZF9wYXNzd29yZFxuICAgIHNlc3Npb24uYWRkKHVzZXIpXG4gICAgc2Vzc2lvbi5jb21taXQoKVxuICAgIHJldHVybiBNZXNzYWdlKG1lc3NhZ2U9XCJQYXNzd29yZCB1cGRhdGVkIHN1Y2Nlc3NmdWxseVwiKVxuXG5cbkByb3V0ZXIucG9zdChcbiAgICBcIi9wYXNzd29yZC1yZWNvdmVyeS1odG1sLWNvbnRlbnQve2VtYWlsfVwiLFxuICAgIGRlcGVuZGVuY2llcz1bRGVwZW5kcyhnZXRfY3VycmVudF9hY3RpdmVfc3VwZXJ1c2VyKV0sXG4gICAgcmVzcG9uc2VfY2xhc3M9SFRNTFJlc3BvbnNlLFxuKVxuZGVmIHJlY292ZXJfcGFzc3dvcmRfaHRtbF9jb250ZW50KGVtYWlsOiBzdHIsIHNlc3Npb246IFNlc3Npb25EZXApIC0+IEFueTpcbiAgICBcIlwiXCJcbiAgICBIVE1MIENvbnRlbnQgZm9yIFBhc3N3b3JkIFJlY292ZXJ5XG4gICAgXCJcIlwiXG4gICAgdXNlciA9IGNydWQuZ2V0X3VzZXJfYnlfZW1haWwoc2Vzc2lvbj1zZXNzaW9uLCBlbWFpbD1lbWFpbClcblxuICAgIGlmIG5vdCB1c2VyOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKFxuICAgICAgICAgICAgc3RhdHVzX2NvZGU9NDA0LFxuICAgICAgICAgICAgZGV0YWlsPVwiVGhlIHVzZXIgd2l0aCB0aGlzIHVzZXJuYW1lIGRvZXMgbm90IGV4aXN0IGluIHRoZSBzeXN0ZW0uXCIsXG4gICAgICAgIClcbiAgICBwYXNzd29yZF9yZXNldF90b2tlbiA9IGdlbmVyYXRlX3Bhc3N3b3JkX3Jlc2V0X3Rva2VuKGVtYWlsPWVtYWlsKVxuICAgIGVtYWlsX2RhdGEgPSBnZW5lcmF0ZV9yZXNldF9wYXNzd29yZF9lbWFpbChcbiAgICAgICAgZW1haWxfdG89dXNlci5lbWFpbCwgZW1haWw9ZW1haWwsIHRva2VuPXBhc3N3b3JkX3Jlc2V0X3Rva2VuXG4gICAgKVxuXG4gICAgcmV0dXJuIEhUTUxSZXNwb25zZShcbiAgICAgICAgY29udGVudD1lbWFpbF9kYXRhLmh0bWxfY29udGVudCwgaGVhZGVycz17XCJzdWJqZWN0OlwiOiBlbWFpbF9kYXRhLnN1YmplY3R9XG4gICAgKVxuLi4uXG5QYXRoOiBiYWNrZW5kL2FwcC9hcGkvbWFpbi5weVxuZnJvbSBmYXN0YXBpIGltcG9ydCBBUElSb3V0ZXJcblxuZnJvbSBhcHAuYXBpLnJvdXRlcyBpbXBvcnQgaXRlbXMsIGxvZ2luLCBwcml2YXRlLCB1c2VycywgdXRpbHMsIGNoaWxkcmVuLCBncm93dGhfcmVjb3JkcywgZG9jdW1lbnRzLCBjaGF0XG5mcm9tIGFwcC5jb3JlLmNvbmZpZyBpbXBvcnQgc2V0dGluZ3NcblxuYXBpX3JvdXRlciA9IEFQSVJvdXRlcigpXG5hcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKGxvZ2luLnJvdXRlcilcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIodXNlcnMucm91dGVyKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcih1dGlscy5yb3V0ZXIpXG5hcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKGl0ZW1zLnJvdXRlcilcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIoY2hpbGRyZW4ucm91dGVyLCBwcmVmaXg9XCIvY2hpbGRyZW5cIiwgdGFncz1bXCJjaGlsZHJlblwiXSlcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIoZ3Jvd3RoX3JlY29yZHMucm91dGVyLCBwcmVmaXg9XCIvZ3Jvd3RoLXJlY29yZHNcIiwgdGFncz1bXCJncm93dGgtcmVjb3Jkc1wiXSlcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIoZG9jdW1lbnRzLnJvdXRlciwgcHJlZml4PVwiL2RvY3VtZW50c1wiLCB0YWdzPVtcImRvY3VtZW50c1wiXSlcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIoY2hhdC5yb3V0ZXIsIHByZWZpeD1cIi9jaGF0XCIsIHRhZ3M9W1wiY2hhdFwiXSlcbi4uLlxuUGF0aDogYmFja2VuZC9hcHAvYXBpL3JvdXRlcy91c2Vycy5weVxuaW1wb3J0IHV1aWRcbmZyb20gdHlwaW5nIGltcG9ydCBBbnlcblxuZnJvbSBmYXN0YXBpIGltcG9ydCBBUElSb3V0ZXIsIERlcGVuZHMsIEhUVFBFeGNlcHRpb25cbmZyb20gc3FsbW9kZWwgaW1wb3J0IGNvbCwgZGVsZXRlLCBmdW5jLCBzZWxlY3RcblxuZnJvbSBhcHAgaW1wb3J0IGNydWRcbmZyb20gYXBwLmFwaS5kZXBzIGltcG9ydCAoXG4gICAgQ3VycmVudFVzZXIsXG4gICAgU2Vzc2lvbkRlcCxcbiAgICBnZXRfY3VycmVudF9hY3RpdmVfc3VwZXJ1c2VyLFxuKVxuZnJvbSBhcHAuY29yZS5jb25maWcgaW1wb3J0IHNldHRpbmdzXG5mcm9tIGFwcC5jb3JlLnNlY3VyaXR5IGltcG9ydCBnZXRfcGFzc3dvcmRfaGFzaCwgdmVyaWZ5X3Bhc3N3b3JkXG5mcm9tIGFwcC5tb2RlbHMgaW1wb3J0IChcbiAgICBJdGVtLFxuICAgIE1lc3NhZ2UsXG4gICAgVXBkYXRlUGFzc3dvcmQsXG4gICAgVXNlcixcbiAgICBVc2VyQ3JlYXRlLFxuICAgIFVzZXJQdWJsaWMsXG4gICAgVXNlclJlZ2lzdGVyLFxuICAgIFVzZXJzUHVibGljLFxuICAgIFVzZXJVcGRhdGUsXG4gICAgVXNlclVwZGF0ZU1lLFxuKVxuZnJvbSBhcHAudXRpbHMgaW1wb3J0IGdlbmVyYXRlX25ld19hY2NvdW50X2VtYWlsLCBzZW5kX2VtYWlsXG5cbnJvdXRlciA9IEFQSVJvdXRlcihwcmVmaXg9XCIvdXNlcnNcIiwgdGFncz1bXCJ1c2Vyc1wiXSlcblxuXG5Acm91dGVyLmdldChcbiAgICBcIi9cIixcbiAgICBkZXBlbmRlbmNpZXM9W0RlcGVuZHMoZ2V0X2N1cnJlbnRfYWN0aXZlX3N1cGVydXNlcildLFxuICAgIHJlc3BvbnNlX21vZGVsPVVzZXJzUHVibGljLFxuKVxuLi4uXG5kZWYgY3JlYXRlX3VzZXIoKiwgc2Vzc2lvbjogU2Vzc2lvbkRlcCwgdXNlcl9pbjogVXNlckNyZWF0ZSkgLT4gQW55OlxuICAgIFwiXCJcIlxuICAgIENyZWF0ZSBuZXcgdXNlci5cbiAgICBcIlwiXCJcbiAgICB1c2VyID0gY3J1ZC5nZXRfdXNlcl9ieV9lbWFpbChzZXNzaW9uPXNlc3Npb24sIGVtYWlsPXVzZXJfaW4uZW1haWwpXG4gICAgaWYgdXNlcjpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihcbiAgICAgICAgICAgIHN0YXR1c19jb2RlPTQwMCxcbiAgICAgICAgICAgIGRldGFpbD1cIlRoZSB1c2VyIHdpdGggdGhpcyBlbWFpbCBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgc3lzdGVtLlwiLFxuICAgICAgICApXG5cbiAgICB1c2VyID0gY3J1ZC5jcmVhdGVfdXNlcihzZXNzaW9uPXNlc3Npb24sIHVzZXJfY3JlYXRlPXVzZXJfaW4pXG4gICAgaWYgc2V0dGluZ3MuZW1haWxzX2VuYWJsZWQgYW5kIHVzZXJfaW4uZW1haWw6XG4gICAgICAgIGVtYWlsX2RhdGEgPSBnZW5lcmF0ZV9uZXdfYWNjb3VudF9lbWFpbChcbiAgICAgICAgICAgIGVtYWlsX3RvPXVzZXJfaW4uZW1haWwsIHVzZXJuYW1lPXVzZXJfaW4uZW1haWwsIHBhc3N3b3JkPXVzZXJfaW4ucGFzc3dvcmRcbiAgICAgICAgKVxuICAgICAgICBzZW5kX2VtYWlsKFxuICAgICAgICAgICAgZW1haWxfdG89dXNlcl9pbi5lbWFpbCxcbiAgICAgICAgICAgIHN1YmplY3Q9ZW1haWxfZGF0YS5zdWJqZWN0LFxuICAgICAgICAgICAgaHRtbF9jb250ZW50PWVtYWlsX2RhdGEuaHRtbF9jb250ZW50LFxuICAgICAgICApXG4gICAgcmV0dXJuIHVzZXJcblxuXG5Acm91dGVyLnBhdGNoKFwiL21lXCIsIHJlc3BvbnNlX21vZGVsPVVzZXJQdWJsaWMpXG5kZWYgdXBkYXRlX3VzZXJfbWUoXG4gICAgKiwgc2Vzc2lvbjogU2Vzc2lvbkRlcCwgdXNlcl9pbjogVXNlclVwZGF0ZU1lLCBjdXJyZW50X3VzZXI6IEN1cnJlbnRVc2VyXG4pIC0+IEFueTpcbiAgICBcIlwiXCJcbiAgICBVcGRhdGUgb3duIHVzZXIuXG4gICAgXCJcIlwiXG5cbiAgICBpZiB1c2VyX2luLmVtYWlsOlxuICAgICAgICBleGlzdGluZ191c2VyID0gY3J1ZC5nZXRfdXNlcl9ieV9lbWFpbChzZXNzaW9uPXNlc3Npb24sIGVtYWlsPXVzZXJfaW4uZW1haWwpXG4gICAgICAgIGlmIGV4aXN0aW5nX3VzZXIgYW5kIGV4aXN0aW5nX3VzZXIuaWQgIT0gY3VycmVudF91c2VyLmlkOlxuICAgICAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICBzdGF0dXNfY29kZT00MDksIGRldGFpbD1cIlVzZXIgd2l0aCB0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3RzXCJcbiAgICAgICAgICAgIClcbiAgICB1c2VyX2RhdGEgPSB1c2VyX2luLm1vZGVsX2R1bXAoZXhjbHVkZV91bnNldD1UcnVlKVxuICAgIGN1cnJlbnRfdXNlci5zcWxtb2RlbF91cGRhdGUodXNlcl9kYXRhKVxuICAgIHNlc3Npb24uYWRkKGN1cnJlbnRfdXNlcilcbiAgICBzZXNzaW9uLmNvbW1pdCgpXG4gICAgc2Vzc2lvbi5yZWZyZXNoKGN1cnJlbnRfdXNlcilcbiAgICByZXR1cm4gY3VycmVudF91c2VyXG4uLi5cblxuXG5Acm91dGVyLnBvc3QoXCIvc2lnbnVwXCIsIHJlc3BvbnNlX21vZGVsPVVzZXJQdWJsaWMpXG5kZWYgcmVnaXN0ZXJfdXNlcihzZXNzaW9uOiBTZXNzaW9uRGVwLCB1c2VyX2luOiBVc2VyUmVnaXN0ZXIpIC0+IEFueTpcbiAgICBcIlwiXCJcbiAgICBDcmVhdGUgbmV3IHVzZXIgd2l0aG91dCB0aGUgbmVlZCB0byBiZSBsb2dnZWQgaW4uXG4gICAgXCJcIlwiXG4gICAgdXNlciA9IGNydWQuZ2V0X3VzZXJfYnlfZW1haWwoc2Vzc2lvbj1zZXNzaW9uLCBlbWFpbD11c2VyX2luLmVtYWlsKVxuICAgIGlmIHVzZXI6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oXG4gICAgICAgICAgICBzdGF0dXNfY29kZT00MDAsXG4gICAgICAgICAgICBkZXRhaWw9XCJUaGUgdXNlciB3aXRoIHRoaXMgZW1haWwgYWxyZWFkeSBleGlzdHMgaW4gdGhlIHN5c3RlbVwiLFxuICAgICAgICApXG4gICAgdXNlcl9jcmVhdGUgPSBVc2VyQ3JlYXRlLm1vZGVsX3ZhbGlkYXRlKHVzZXJfaW4pXG4gICAgdXNlciA9IGNydWQuY3JlYXRlX3VzZXIoc2Vzc2lvbj1zZXNzaW9uLCB1c2VyX2NyZWF0ZT11c2VyX2NyZWF0ZSlcbiAgICByZXR1cm4gdXNlclxuXG5cbkByb3V0ZXIuZ2V0KFwiL3t1c2VyX2lkfVwiLCByZXNwb25zZV9tb2RlbD1Vc2VyUHVibGljKVxuZGVmIHJlYWRfdXNlcl9ieV9pZChcbiAgICB1c2VyX2lkOiB1dWlkLlVVSUQsIHNlc3Npb246IFNlc3Npb25EZXAsIGN1cnJlbnRfdXNlcjogQ3VycmVudFVzZXJcbikgLT4gQW55OlxuICAgIFwiXCJcIlxuICAgIEdldCBhIHNwZWNpZmljIHVzZXIgYnkgaWQuXG4gICAgXCJcIlwiXG4gICAgdXNlciA9IHNlc3Npb24uZ2V0KFVzZXIsIHVzZXJfaWQpXG4gICAgaWYgdXNlciA9PSBjdXJyZW50X3VzZXI6XG4gICAgICAgIHJldHVybiB1c2VyXG4gICAgaWYgbm90IGN1cnJlbnRfdXNlci5pc19zdXBlcnVzZXI6XG4gICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oXG4gICAgICAgICAgICBzdGF0dXNfY29kZT00MDMsXG4gICAgICAgICAgICBkZXRhaWw9XCJUaGUgdXNlciBkb2Vzbid0IGhhdmUgZW5vdWdoIHByaXZpbGVnZXNcIixcbiAgICAgICAgKVxuICAgIHJldHVybiB1c2VyXG5cblxuQHJvdXRlci5wYXRjaChcbiAgICBcIi97dXNlcl9pZH1cIixcbiAgICBkZXBlbmRlbmNpZXM9W0RlcGVuZHMoZ2V0X2N1cnJlbnRfYWN0aXZlX3N1cGVydXNlcildLFxuICAgIHJlc3BvbnNlX21vZGVsPVVzZXJQdWJsaWMsXG4pXG5kZWYgdXBkYXRlX3VzZXIoXG4gICAgKixcbiAgICBzZXNzaW9uOiBTZXNzaW9uRGVwLFxuICAgIHVzZXJfaWQ6IHV1aWQuVVVJRCxcbiAgICB1c2VyX2luOiBVc2VyVXBkYXRlLFxuKSAtPiBBbnk6XG4gICAgXCJcIlwiXG4gICAgVXBkYXRlIGEgdXNlci5cbiAgICBcIlwiXCJcblxuICAgIGRiX3VzZXIgPSBzZXNzaW9uLmdldChVc2VyLCB1c2VyX2lkKVxuICAgIGlmIG5vdCBkYl91c2VyOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKFxuICAgICAgICAgICAgc3RhdHVzX2NvZGU9NDA0LFxuICAgICAgICAgICAgZGV0YWlsPVwiVGhlIHVzZXIgd2l0aCB0aGlzIGlkIGRvZXMgbm90IGV4aXN0IGluIHRoZSBzeXN0ZW1cIixcbiAgICAgICAgKVxuICAgIGlmIHVzZXJfaW4uZW1haWw6XG4gICAgICAgIGV4aXN0aW5nX3VzZXIgPSBjcnVkLmdldF91c2VyX2J5X2VtYWlsKHNlc3Npb249c2Vzc2lvbiwgZW1haWw9dXNlcl9pbi5lbWFpbClcbiAgICAgICAgaWYgZXhpc3RpbmdfdXNlciBhbmQgZXhpc3RpbmdfdXNlci5pZCAhPSB1c2VyX2lkOlxuICAgICAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICBzdGF0dXNfY29kZT00MDksIGRldGFpbD1cIlVzZXIgd2l0aCB0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3RzXCJcbiAgICAgICAgICAgIClcblxuICAgIGRiX3VzZXIgPSBjcnVkLnVwZGF0ZV91c2VyKHNlc3Npb249c2Vzc2lvbiwgZGJfdXNlcj1kYl91c2VyLCB1c2VyX2luPXVzZXJfaW4pXG4gICAgcmV0dXJuIGRiX3VzZXJcblxuXG5Acm91dGVyLmRlbGV0ZShcIi97dXNlcl9pZH1cIiwgZGVwZW5kZW5jaWVzPVtEZXBlbmRzKGdldF9jdXJyZW50X2FjdGl2ZV9zdXBlcnVzZXIpXSlcbmRlZiBkZWxldGVfdXNlcihcbiAgICBzZXNzaW9uOiBTZXNzaW9uRGVwLCBjdXJyZW50X3VzZXI6IEN1cnJlbnRVc2VyLCB1c2VyX2lkOiB1dWlkLlVVSURcbikgLT4gTWVzc2FnZTpcbiAgICBcIlwiXCJcbiAgICBEZWxldGUgYSB1c2VyLlxuICAgIFwiXCJcIlxuICAgIHVzZXIgPSBzZXNzaW9uLmdldChVc2VyLCB1c2VyX2lkKVxuICAgIGlmIG5vdCB1c2VyOlxuICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTQwNCwgZGV0YWlsPVwiVXNlciBub3QgZm91bmRcIilcbiAgICBpZiB1c2VyID09IGN1cnJlbnRfdXNlcjpcbiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbihcbiAgICAgICAgICAgIHN0YXR1c19jb2RlPTQwMywgZGV0YWlsPVwiU3VwZXIgdXNlcnMgYXJlIG5vdCBhbGxvd2VkIHRvIGRlbGV0ZSB0aGVtc2VsdmVzXCJcbiAgICAgICAgKVxuICAgIHN0YXRlbWVudCA9IGRlbGV0ZShJdGVtKS53aGVyZShjb2woSXRlbS5vd25lcl9pZCkgPT0gdXNlcl9pZClcbiAgICBzZXNzaW9uLmV4ZWMoc3RhdGVtZW50KSAgIyB0eXBlOiBpZ25vcmVcbiAgICBzZXNzaW9uLmRlbGV0ZSh1c2VyKVxuICAgIHNlc3Npb24uY29tbWl0KClcbiAgICByZXR1cm4gTWVzc2FnZShtZXNzYWdlPVwiVXNlciBkZWxldGVkIHN1Y2Nlc3NmdWxseVwiKVxuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvcm91dGVzL2xvZ2luLnRzeFxuaW1wb3J0IHsgQ29udGFpbmVyLCBJbWFnZSwgSW5wdXQsIFRleHQgfSBmcm9tIFwiQGNoYWtyYS11aS9yZWFjdFwiXG5pbXBvcnQge1xuICBMaW5rIGFzIFJvdXRlckxpbmssXG4gIGNyZWF0ZUZpbGVSb3V0ZSxcbiAgcmVkaXJlY3QsXG59IGZyb20gXCJAdGFuc3RhY2svcmVhY3Qtcm91dGVyXCJcbmltcG9ydCB7IHR5cGUgU3VibWl0SGFuZGxlciwgdXNlRm9ybSB9IGZyb20gXCJyZWFjdC1ob29rLWZvcm1cIlxuaW1wb3J0IHsgRmlMb2NrLCBGaU1haWwgfSBmcm9tIFwicmVhY3QtaWNvbnMvZmlcIlxuXG5pbXBvcnQgdHlwZSB7IEJvZHlfbG9naW5fbG9naW5fYWNjZXNzX3Rva2VuIGFzIEFjY2Vzc1Rva2VuIH0gZnJvbSBcIkAvY2xpZW50XCJcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvYnV0dG9uXCJcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9maWVsZFwiXG5pbXBvcnQgeyBJbnB1dEdyb3VwIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9pbnB1dC1ncm91cFwiXG5pbXBvcnQgeyBQYXNzd29yZElucHV0IH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9wYXNzd29yZC1pbnB1dFwiXG5pbXBvcnQgdXNlQXV0aCwgeyBpc0xvZ2dlZEluIH0gZnJvbSBcIkAvaG9va3MvdXNlQXV0aFwiXG5pbXBvcnQgTG9nbyBmcm9tIFwiL2Fzc2V0cy9pbWFnZXMvZmFzdGFwaS1sb2dvLnN2Z1wiXG5pbXBvcnQgeyBlbWFpbFBhdHRlcm4sIHBhc3N3b3JkUnVsZXMgfSBmcm9tIFwiLi4vdXRpbHNcIlxuXG5leHBvcnQgY29uc3QgUm91dGUgPSBjcmVhdGVGaWxlUm91dGUoXCIvbG9naW5cIikoe1xuICBjb21wb25lbnQ6IExvZ2luLFxuICBiZWZvcmVMb2FkOiBhc3luYyAoKSA9PiB7XG4gICAgaWYgKGlzTG9nZ2VkSW4oKSkge1xuICAgICAgdGhyb3cgcmVkaXJlY3Qoe1xuICAgICAgICB0bzogXCIvXCIsXG4gICAgICB9KVxuICAgIH1cbiAgfSxcbn0pXG5cbmZ1bmN0aW9uIExvZ2luKCkge1xuICBjb25zdCB7IGxvZ2luTXV0YXRpb24sIGVycm9yLCByZXNldEVycm9yIH0gPSB1c2VBdXRoKClcbiAgY29uc3Qge1xuICAgIHJlZ2lzdGVyLFxuICAgIGhhbmRsZVN1Ym1pdCxcbiAgICBmb3JtU3RhdGU6IHsgZXJyb3JzLCBpc1N1Ym1pdHRpbmcgfSxcbiAgfSA9IHVzZUZvcm08QWNjZXNzVG9rZW4+KHtcbiAgICBtb2RlOiBcIm9uQmx1clwiLFxuICAgIGNyaXRlcmlhTW9kZTogXCJhbGxcIixcbiAgICBkZWZhdWx0VmFsdWVzOiB7XG4gICAgICB1c2VybmFtZTogXCJcIixcbiAgICAgIHBhc3N3b3JkOiBcIlwiLFxuICAgIH0sXG4gIH0pXG5cbiAgY29uc3Qgb25TdWJtaXQ6IFN1Ym1pdEhhbmRsZXI8QWNjZXNzVG9rZW4+ID0gYXN5bmMgKGRhdGEpID0+IHtcbiAgICBpZiAoaXNTdWJtaXR0aW5nKSByZXR1cm5cblxuICAgIHJlc2V0RXJyb3IoKVxuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGxvZ2luTXV0YXRpb24ubXV0YXRlQXN5bmMoZGF0YSlcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIGVycm9yIGlzIGhhbmRsZWQgYnkgdXNlQXV0aCBob29rXG4gICAgfVxuICB9XG4uLi5cblBhdGg6IGRvYy9GdWxsLVN0YWNrLUZhc3RBUEktVGVtcGxhdGXlrabkuaDmiYvlhowubWRcbi4uLlxuXG4jIyAxMC4gQVBJIOW8gOWPkVxuXG4jIyMg6Lev55Sx57uE57uHXG5cbkFQSSDot6/nlLHnu4Tnu4flnKggYGJhY2tlbmQvYXBwL2FwaS9yb3V0ZXMvYCDnm67lvZXkuIvvvJpcblxuYGBgcHl0aG9uXG4jIGJhY2tlbmQvYXBwL2FwaS9tYWluLnB5XG5mcm9tIGZhc3RhcGkgaW1wb3J0IEFQSVJvdXRlclxuZnJvbSBhcHAuYXBpLnJvdXRlcyBpbXBvcnQgaXRlbXMsIGxvZ2luLCB1c2VycywgdXRpbHNcblxuYXBpX3JvdXRlciA9IEFQSVJvdXRlcigpXG5hcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKGxvZ2luLnJvdXRlcilcbmFwaV9yb3V0ZXIuaW5jbHVkZV9yb3V0ZXIodXNlcnMucm91dGVyKVxuYXBpX3JvdXRlci5pbmNsdWRlX3JvdXRlcih1dGlscy5yb3V0ZXIpXG5hcGlfcm91dGVyLmluY2x1ZGVfcm91dGVyKGl0ZW1zLnJvdXRlcilcbmBgYFxuXG4jIyMgQ1JVRCDmk43kvZxcblxuQ1JVRCDmk43kvZzlsIHoo4XlnKggYGJhY2tlbmQvYXBwL2NydWQucHlgIOS4re+8mlxuXG5gYGBweXRob25cbiMgYmFja2VuZC9hcHAvY3J1ZC5weVxuZnJvbSBzcWxtb2RlbCBpbXBvcnQgU2Vzc2lvbiwgc2VsZWN0XG5mcm9tIGFwcC5tb2RlbHMgaW1wb3J0IFVzZXIsIFVzZXJDcmVhdGVcblxuZGVmIGdldF91c2VyKHNlc3Npb246IFNlc3Npb24sIHVzZXJfaWQ6IHN0cikgLT4gVXNlciB8IE5vbmU6XG4gICAgcmV0dXJuIHNlc3Npb24uZXhlYyhzZWxlY3QoVXNlcikud2hlcmUoVXNlci5pZCA9PSB1c2VyX2lkKSkuZmlyc3QoKVxuLi4uXG5QYXRoOiBiYWNrZW5kL2FwcC9hcGkvcm91dGVzL3ByaXZhdGUucHlcbmZyb20gdHlwaW5nIGltcG9ydCBBbnlcblxuZnJvbSBmYXN0YXBpIGltcG9ydCBBUElSb3V0ZXJcbmZyb20gcHlkYW50aWMgaW1wb3J0IEJhc2VNb2RlbFxuXG5mcm9tIGFwcC5hcGkuZGVwcyBpbXBvcnQgU2Vzc2lvbkRlcFxuZnJvbSBhcHAuY29yZS5zZWN1cml0eSBpbXBvcnQgZ2V0X3Bhc3N3b3JkX2hhc2hcbmZyb20gYXBwLm1vZGVscyBpbXBvcnQgKFxuICAgIFVzZXIsXG4gICAgVXNlclB1YmxpYyxcbilcblxucm91dGVyID0gQVBJUm91dGVyKHRhZ3M9W1wicHJpdmF0ZVwiXSwgcHJlZml4PVwiL3ByaXZhdGVcIilcblxuXG5jbGFzcyBQcml2YXRlVXNlckNyZWF0ZShCYXNlTW9kZWwpOlxuICAgIGVtYWlsOiBzdHJcbiAgICBwYXNzd29yZDogc3RyXG4gICAgZnVsbF9uYW1lOiBzdHJcbiAgICBpc192ZXJpZmllZDogYm9vbCA9IEZhbHNlXG5cblxuQHJvdXRlci5wb3N0KFwiL3VzZXJzL1wiLCByZXNwb25zZV9tb2RlbD1Vc2VyUHVibGljKVxuZGVmIGNyZWF0ZV91c2VyKHVzZXJfaW46IFByaXZhdGVVc2VyQ3JlYXRlLCBzZXNzaW9uOiBTZXNzaW9uRGVwKSAtPiBBbnk6XG4gICAgXCJcIlwiXG4gICAgQ3JlYXRlIGEgbmV3IHVzZXIuXG4gICAgXCJcIlwiXG5cbiAgICB1c2VyID0gVXNlcihcbiAgICAgICAgZW1haWw9dXNlcl9pbi5lbWFpbCxcbiAgICAgICAgZnVsbF9uYW1lPXVzZXJfaW4uZnVsbF9uYW1lLFxuICAgICAgICBoYXNoZWRfcGFzc3dvcmQ9Z2V0X3Bhc3N3b3JkX2hhc2godXNlcl9pbi5wYXNzd29yZCksXG4gICAgKVxuXG4gICAgc2Vzc2lvbi5hZGQodXNlcilcbiAgICBzZXNzaW9uLmNvbW1pdCgpXG5cbiAgICByZXR1cm4gdXNlclxuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvcm91dGVzL3NpZ251cC50c3hcbmltcG9ydCB7IENvbnRhaW5lciwgRmxleCwgSW1hZ2UsIElucHV0LCBUZXh0IH0gZnJvbSBcIkBjaGFrcmEtdWkvcmVhY3RcIlxuaW1wb3J0IHtcbiAgTGluayBhcyBSb3V0ZXJMaW5rLFxuICBjcmVhdGVGaWxlUm91dGUsXG4gIHJlZGlyZWN0LFxufSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXJvdXRlclwiXG5pbXBvcnQgeyB0eXBlIFN1Ym1pdEhhbmRsZXIsIHVzZUZvcm0gfSBmcm9tIFwicmVhY3QtaG9vay1mb3JtXCJcbmltcG9ydCB7IEZpTG9jaywgRmlVc2VyIH0gZnJvbSBcInJlYWN0LWljb25zL2ZpXCJcblxuaW1wb3J0IHR5cGUgeyBVc2VyUmVnaXN0ZXIgfSBmcm9tIFwiQC9jbGllbnRcIlxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9idXR0b25cIlxuaW1wb3J0IHsgRmllbGQgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2ZpZWxkXCJcbmltcG9ydCB7IElucHV0R3JvdXAgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2lucHV0LWdyb3VwXCJcbmltcG9ydCB7IFBhc3N3b3JkSW5wdXQgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL3Bhc3N3b3JkLWlucHV0XCJcbmltcG9ydCB1c2VBdXRoLCB7IGlzTG9nZ2VkSW4gfSBmcm9tIFwiQC9ob29rcy91c2VBdXRoXCJcbmltcG9ydCB7IGNvbmZpcm1QYXNzd29yZFJ1bGVzLCBlbWFpbFBhdHRlcm4sIHBhc3N3b3JkUnVsZXMgfSBmcm9tIFwiQC91dGlsc1wiXG5pbXBvcnQgTG9nbyBmcm9tIFwiL2Fzc2V0cy9pbWFnZXMvZmFzdGFwaS1sb2dvLnN2Z1wiXG5cbmV4cG9ydCBjb25zdCBSb3V0ZSA9IGNyZWF0ZUZpbGVSb3V0ZShcIi9zaWdudXBcIikoe1xuICBjb21wb25lbnQ6IFNpZ25VcCxcbiAgYmVmb3JlTG9hZDogYXN5bmMgKCkgPT4ge1xuICAgIGlmIChpc0xvZ2dlZEluKCkpIHtcbiAgICAgIHRocm93IHJlZGlyZWN0KHtcbiAgICAgICAgdG86IFwiL1wiLFxuICAgICAgfSlcbiAgICB9XG4gIH0sXG59KVxuXG5pbnRlcmZhY2UgVXNlclJlZ2lzdGVyRm9ybSBleHRlbmRzIFVzZXJSZWdpc3RlciB7XG4gIGNvbmZpcm1fcGFzc3dvcmQ6IHN0cmluZ1xufVxuXG5mdW5jdGlvbiBTaWduVXAoKSB7XG4gIGNvbnN0IHsgc2lnblVwTXV0YXRpb24gfSA9IHVzZUF1dGgoKVxuICBjb25zdCB7XG4gICAgcmVnaXN0ZXIsXG4gICAgaGFuZGxlU3VibWl0LFxuICAgIGdldFZhbHVlcyxcbiAgICBmb3JtU3RhdGU6IHsgZXJyb3JzLCBpc1N1Ym1pdHRpbmcgfSxcbiAgfSA9IHVzZUZvcm08VXNlclJlZ2lzdGVyRm9ybT4oe1xuICAgIG1vZGU6IFwib25CbHVyXCIsXG4gICAgY3JpdGVyaWFNb2RlOiBcImFsbFwiLFxuICAgIGRlZmF1bHRWYWx1ZXM6IHtcbiAgICAgIGVtYWlsOiBcIlwiLFxuICAgICAgZnVsbF9uYW1lOiBcIlwiLFxuICAgICAgcGFzc3dvcmQ6IFwiXCIsXG4gICAgICBjb25maXJtX3Bhc3N3b3JkOiBcIlwiLFxuICAgIH0sXG4gIH0pXG5cbiAgY29uc3Qgb25TdWJtaXQ6IFN1Ym1pdEhhbmRsZXI8VXNlclJlZ2lzdGVyRm9ybT4gPSAoZGF0YSkgPT4ge1xuICAgIHNpZ25VcE11dGF0aW9uLm11dGF0ZShkYXRhKVxuICB9XG4uLi5cblBhdGg6IGJhY2tlbmQvYXBwL3Rlc3RzL2FwaS9yb3V0ZXMvdGVzdF9sb2dpbi5weVxuLi4uXG5cblxuZGVmIHRlc3RfdXNlX2FjY2Vzc190b2tlbihcbiAgICBjbGllbnQ6IFRlc3RDbGllbnQsIHN1cGVydXNlcl90b2tlbl9oZWFkZXJzOiBkaWN0W3N0ciwgc3RyXVxuKSAtPiBOb25lOlxuICAgIHIgPSBjbGllbnQucG9zdChcbiAgICAgICAgZlwie3NldHRpbmdzLkFQSV9WMV9TVFJ9L2xvZ2luL3Rlc3QtdG9rZW5cIixcbiAgICAgICAgaGVhZGVycz1zdXBlcnVzZXJfdG9rZW5faGVhZGVycyxcbiAgICApXG4gICAgcmVzdWx0ID0gci5qc29uKClcbiAgICBhc3NlcnQgci5zdGF0dXNfY29kZSA9PSAyMDBcbiAgICBhc3NlcnQgXCJlbWFpbFwiIGluIHJlc3VsdFxuXG5cbmRlZiB0ZXN0X3JlY292ZXJ5X3Bhc3N3b3JkKFxuICAgIGNsaWVudDogVGVzdENsaWVudCwgbm9ybWFsX3VzZXJfdG9rZW5faGVhZGVyczogZGljdFtzdHIsIHN0cl1cbikgLT4gTm9uZTpcbiAgICB3aXRoIChcbiAgICAgICAgcGF0Y2goXCJhcHAuY29yZS5jb25maWcuc2V0dGluZ3MuU01UUF9IT1NUXCIsIFwic210cC5leGFtcGxlLmNvbVwiKSxcbiAgICAgICAgcGF0Y2goXCJhcHAuY29yZS5jb25maWcuc2V0dGluZ3MuU01UUF9VU0VSXCIsIFwiYWRtaW5AZXhhbXBsZS5jb21cIiksXG4gICAgKTpcbiAgICAgICAgZW1haWwgPSBcInRlc3RAZXhhbXBsZS5jb21cIlxuICAgICAgICByID0gY2xpZW50LnBvc3QoXG4gICAgICAgICAgICBmXCJ7c2V0dGluZ3MuQVBJX1YxX1NUUn0vcGFzc3dvcmQtcmVjb3Zlcnkve2VtYWlsfVwiLFxuICAgICAgICAgICAgaGVhZGVycz1ub3JtYWxfdXNlcl90b2tlbl9oZWFkZXJzLFxuICAgICAgICApXG4gICAgICAgIGFzc2VydCByLnN0YXR1c19jb2RlID09IDIwMFxuICAgICAgICBhc3NlcnQgci5qc29uKCkgPT0ge1wibWVzc2FnZVwiOiBcIlBhc3N3b3JkIHJlY292ZXJ5IGVtYWlsIHNlbnRcIn1cbi4uLlxuUGF0aDogZnJvbnRlbmQvc3JjL3JvdXRlVHJlZS5nZW4udHNcbi4uLlxuICAgICcvX2xheW91dC9zZXR0aW5ncyc6IHtcbiAgICAgIHByZUxvYWRlclJvdXRlOiB0eXBlb2YgTGF5b3V0U2V0dGluZ3NJbXBvcnRcbiAgICAgIHBhcmVudFJvdXRlOiB0eXBlb2YgTGF5b3V0SW1wb3J0XG4gICAgfVxuICAgICcvX2xheW91dC8nOiB7XG4gICAgICBwcmVMb2FkZXJSb3V0ZTogdHlwZW9mIExheW91dEluZGV4SW1wb3J0XG4gICAgICBwYXJlbnRSb3V0ZTogdHlwZW9mIExheW91dEltcG9ydFxuICAgIH1cbiAgfVxufVxuXG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgdHJlZVxuXG5leHBvcnQgY29uc3Qgcm91dGVUcmVlID0gcm9vdFJvdXRlLmFkZENoaWxkcmVuKFtcbiAgTGF5b3V0Um91dGUuYWRkQ2hpbGRyZW4oW1xuICAgIExheW91dEFkbWluUm91dGUsXG4gICAgTGF5b3V0SXRlbXNSb3V0ZSxcbiAgICBMYXlvdXRTZXR0aW5nc1JvdXRlLFxuICAgIExheW91dEluZGV4Um91dGUsXG4gIF0pLFxuICBMb2dpblJvdXRlLFxuICBSZWNvdmVyUGFzc3dvcmRSb3V0ZSxcbiAgUmVzZXRQYXNzd29yZFJvdXRlLFxuICBTaWdudXBSb3V0ZSxcbl0pXG5cbi8qIHByZXR0aWVyLWlnbm9yZS1lbmQgKi9cbi4uLlxuUGF0aDogZnJvbnRlbmQvc3JjL2hvb2tzL3VzZUF1dGgudHNcbmltcG9ydCB7IHVzZU11dGF0aW9uLCB1c2VRdWVyeSwgdXNlUXVlcnlDbGllbnQgfSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCJcbmltcG9ydCB7IHVzZU5hdmlnYXRlIH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1yb3V0ZXJcIlxuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIlxuXG5pbXBvcnQge1xuICB0eXBlIEJvZHlfbG9naW5fbG9naW5fYWNjZXNzX3Rva2VuIGFzIEFjY2Vzc1Rva2VuLFxuICB0eXBlIEFwaUVycm9yLFxuICBMb2dpblNlcnZpY2UsXG4gIHR5cGUgVXNlclB1YmxpYyxcbiAgdHlwZSBVc2VyUmVnaXN0ZXIsXG4gIFVzZXJzU2VydmljZSxcbn0gZnJvbSBcIkAvY2xpZW50XCJcbmltcG9ydCB7IGhhbmRsZUVycm9yIH0gZnJvbSBcIkAvdXRpbHNcIlxuXG5jb25zdCBpc0xvZ2dlZEluID0gKCkgPT4ge1xuICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJhY2Nlc3NfdG9rZW5cIikgIT09IG51bGxcbn1cblxuY29uc3QgdXNlQXV0aCA9ICgpID0+IHtcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKVxuICBjb25zdCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKClcbiAgY29uc3QgcXVlcnlDbGllbnQgPSB1c2VRdWVyeUNsaWVudCgpXG4gIGNvbnN0IHsgZGF0YTogdXNlciB9ID0gdXNlUXVlcnk8VXNlclB1YmxpYyB8IG51bGwsIEVycm9yPih7XG4gICAgcXVlcnlLZXk6IFtcImN1cnJlbnRVc2VyXCJdLFxuICAgIHF1ZXJ5Rm46IFVzZXJzU2VydmljZS5yZWFkVXNlck1lLFxuICAgIGVuYWJsZWQ6IGlzTG9nZ2VkSW4oKSxcbiAgfSlcblxuICBjb25zdCBzaWduVXBNdXRhdGlvbiA9IHVzZU11dGF0aW9uKHtcbiAgICBtdXRhdGlvbkZuOiAoZGF0YTogVXNlclJlZ2lzdGVyKSA9PlxuICAgICAgVXNlcnNTZXJ2aWNlLnJlZ2lzdGVyVXNlcih7IHJlcXVlc3RCb2R5OiBkYXRhIH0pLFxuXG4gICAgb25TdWNjZXNzOiAoKSA9PiB7XG4gICAgICBuYXZpZ2F0ZSh7IHRvOiBcIi9sb2dpblwiIH0pXG4gICAgfSxcbiAgICBvbkVycm9yOiAoZXJyOiBBcGlFcnJvcikgPT4ge1xuICAgICAgaGFuZGxlRXJyb3IoZXJyKVxuICAgIH0sXG4gICAgb25TZXR0bGVkOiAoKSA9PiB7XG4gICAgICBxdWVyeUNsaWVudC5pbnZhbGlkYXRlUXVlcmllcyh7IHF1ZXJ5S2V5OiBbXCJ1c2Vyc1wiXSB9KVxuICAgIH0sXG4gIH0pXG5cbiAgY29uc3QgbG9naW4gPSBhc3luYyAoZGF0YTogQWNjZXNzVG9rZW4pID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IExvZ2luU2VydmljZS5sb2dpbkFjY2Vzc1Rva2VuKHtcbiAgICAgIGZvcm1EYXRhOiBkYXRhLFxuICAgIH0pXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJhY2Nlc3NfdG9rZW5cIiwgcmVzcG9uc2UuYWNjZXNzX3Rva2VuKVxuICB9XG5cbiAgY29uc3QgbG9naW5NdXRhdGlvbiA9IHVzZU11dGF0aW9uKHtcbiAgICBtdXRhdGlvbkZuOiBsb2dpbixcbiAgICBvblN1Y2Nlc3M6ICgpID0+IHtcbiAgICAgIG5hdmlnYXRlKHsgdG86IFwiL1wiIH0pXG4gICAgfSxcbiAgICBvbkVycm9yOiAoZXJyOiBBcGlFcnJvcikgPT4ge1xuICAgICAgaGFuZGxlRXJyb3IoZXJyKVxuICAgIH0sXG4gIH0pXG5cbiAgY29uc3QgbG9nb3V0ID0gKCkgPT4ge1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiYWNjZXNzX3Rva2VuXCIpXG4gICAgbmF2aWdhdGUoeyB0bzogXCIvbG9naW5cIiB9KVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzaWduVXBNdXRhdGlvbixcbiAgICBsb2dpbk11dGF0aW9uLFxuICAgIGxvZ291dCxcbiAgICB1c2VyLFxuICAgIGVycm9yLFxuICAgIHJlc2V0RXJyb3I6ICgpID0+IHNldEVycm9yKG51bGwpLFxuICB9XG59XG5cbmV4cG9ydCB7IGlzTG9nZ2VkSW4gfVxuZXhwb3J0IGRlZmF1bHQgdXNlQXV0aFxuLi4uXG5QYXRoOiBmcm9udGVuZC9zcmMvbWFpbi50c3hcbmltcG9ydCB7XG4gIE11dGF0aW9uQ2FjaGUsXG4gIFF1ZXJ5Q2FjaGUsXG4gIFF1ZXJ5Q2xpZW50LFxuICBRdWVyeUNsaWVudFByb3ZpZGVyLFxufSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCJcbmltcG9ydCB7IFJvdXRlclByb3ZpZGVyLCBjcmVhdGVSb3V0ZXIgfSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXJvdXRlclwiXG5pbXBvcnQgUmVhY3QsIHsgU3RyaWN0TW9kZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbS9jbGllbnRcIlxuaW1wb3J0IHsgcm91dGVUcmVlIH0gZnJvbSBcIi4vcm91dGVUcmVlLmdlblwiXG5cbmltcG9ydCB7IEFwaUVycm9yLCBPcGVuQVBJIH0gZnJvbSBcIi4vY2xpZW50XCJcbmltcG9ydCB7IEN1c3RvbVByb3ZpZGVyIH0gZnJvbSBcIi4vY29tcG9uZW50cy91aS9wcm92aWRlclwiXG5cbk9wZW5BUEkuQkFTRSA9IGltcG9ydC5tZXRhLmVudi5WSVRFX0FQSV9VUkxcbk9wZW5BUEkuVE9LRU4gPSBhc3luYyAoKSA9PiB7XG4gIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImFjY2Vzc190b2tlblwiKSB8fCBcIlwiXG59XG5cbmNvbnN0IGhhbmRsZUFwaUVycm9yID0gKGVycm9yOiBFcnJvcikgPT4ge1xuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBBcGlFcnJvciAmJiBbNDAxLCA0MDNdLmluY2x1ZGVzKGVycm9yLnN0YXR1cykpIHtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImFjY2Vzc190b2tlblwiKVxuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gXCIvbG9naW5cIlxuICB9XG59XG4uLi5cblBhdGg6IGZyb250ZW5kL3NyYy9yb3V0ZXMvcmVjb3Zlci1wYXNzd29yZC50c3hcbi4uLlxuXG5leHBvcnQgY29uc3QgUm91dGUgPSBjcmVhdGVGaWxlUm91dGUoXCIvcmVjb3Zlci1wYXNzd29yZFwiKSh7XG4gIGNvbXBvbmVudDogUmVjb3ZlclBhc3N3b3JkLFxuICBiZWZvcmVMb2FkOiBhc3luYyAoKSA9PiB7XG4gICAgaWYgKGlzTG9nZ2VkSW4oKSkge1xuICAgICAgdGhyb3cgcmVkaXJlY3Qoe1xuICAgICAgICB0bzogXCIvXCIsXG4gICAgICB9KVxuICAgIH1cbiAgfSxcbn0pXG5cbmZ1bmN0aW9uIFJlY292ZXJQYXNzd29yZCgpIHtcbiAgY29uc3Qge1xuICAgIHJlZ2lzdGVyLFxuICAgIGhhbmRsZVN1Ym1pdCxcbiAgICByZXNldCxcbiAgICBmb3JtU3RhdGU6IHsgZXJyb3JzLCBpc1N1Ym1pdHRpbmcgfSxcbiAgfSA9IHVzZUZvcm08Rm9ybURhdGE+KClcbiAgY29uc3QgeyBzaG93U3VjY2Vzc1RvYXN0IH0gPSB1c2VDdXN0b21Ub2FzdCgpXG5cbiAgY29uc3QgcmVjb3ZlclBhc3N3b3JkID0gYXN5bmMgKGRhdGE6IEZvcm1EYXRhKSA9PiB7XG4gICAgYXdhaXQgTG9naW5TZXJ2aWNlLnJlY292ZXJQYXNzd29yZCh7XG4gICAgICBlbWFpbDogZGF0YS5lbWFpbCxcbiAgICB9KVxuICB9XG5cbiAgY29uc3QgbXV0YXRpb24gPSB1c2VNdXRhdGlvbih7XG4gICAgbXV0YXRpb25GbjogcmVjb3ZlclBhc3N3b3JkLFxuICAgIG9uU3VjY2VzczogKCkgPT4ge1xuICAgICAgc2hvd1N1Y2Nlc3NUb2FzdChcIlBhc3N3b3JkIHJlY292ZXJ5IGVtYWlsIHNlbnQgc3VjY2Vzc2Z1bGx5LlwiKVxuICAgICAgcmVzZXQoKVxuICAgIH0sXG4gICAgb25FcnJvcjogKGVycjogQXBpRXJyb3IpID0+IHtcbiAgICAgIGhhbmRsZUVycm9yKGVycilcbiAgICB9LFxuICB9KVxuXG4gIGNvbnN0IG9uU3VibWl0OiBTdWJtaXRIYW5kbGVyPEZvcm1EYXRhPiA9IGFzeW5jIChkYXRhKSA9PiB7XG4gICAgbXV0YXRpb24ubXV0YXRlKGRhdGEpXG4gIH1cbi4uLlxuUGF0aDogZnJvbnRlbmQvc3JjL3JvdXRlcy9yZXNldC1wYXNzd29yZC50c3hcbi4uLlxuXG5mdW5jdGlvbiBSZXNldFBhc3N3b3JkKCkge1xuICBjb25zdCB7XG4gICAgcmVnaXN0ZXIsXG4gICAgaGFuZGxlU3VibWl0LFxuICAgIGdldFZhbHVlcyxcbiAgICByZXNldCxcbiAgICBmb3JtU3RhdGU6IHsgZXJyb3JzIH0sXG4gIH0gPSB1c2VGb3JtPE5ld1Bhc3N3b3JkRm9ybT4oe1xuICAgIG1vZGU6IFwib25CbHVyXCIsXG4gICAgY3JpdGVyaWFNb2RlOiBcImFsbFwiLFxuICAgIGRlZmF1bHRWYWx1ZXM6IHtcbiAgICAgIG5ld19wYXNzd29yZDogXCJcIixcbiAgICB9LFxuICB9KVxuICBjb25zdCB7IHNob3dTdWNjZXNzVG9hc3QgfSA9IHVzZUN1c3RvbVRvYXN0KClcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpXG5cbiAgY29uc3QgcmVzZXRQYXNzd29yZCA9IGFzeW5jIChkYXRhOiBOZXdQYXNzd29yZCkgPT4ge1xuICAgIGNvbnN0IHRva2VuID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKS5nZXQoXCJ0b2tlblwiKVxuICAgIGlmICghdG9rZW4pIHJldHVyblxuICAgIGF3YWl0IExvZ2luU2VydmljZS5yZXNldFBhc3N3b3JkKHtcbiAgICAgIHJlcXVlc3RCb2R5OiB7IG5ld19wYXNzd29yZDogZGF0YS5uZXdfcGFzc3dvcmQsIHRva2VuOi4uLiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjgwYTg1OWUwLTFjNmQtNDVjMi1hNjU0LTJmZTU1ZTVkMTRlYzt0b29sdV92cnR4XzAxR2FmNmFBZ05HMm9BYlkzSGEzYkdOSyI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJDb21tYW5kIGlzIHN0aWxsIHJ1bm5pbmcgYWZ0ZXIgMCBzZWNvbmRzLiBZb3UgY2FuIHVzZSByZWFkLXByb2Nlc3MgdG8gZ2V0IG1vcmUgb3V0cHV0XG5hbmQga2lsbC1wcm9jZXNzIHRvIHRlcm1pbmF0ZSBpdCBpZiBuZWVkZWQuXG5QSUQgMTBcbk91dHB1dCBzbyBmYXI6XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjdkMTA1MDY2LTE1ODktNDE3MC1hNGNkLTUwNTBmNDcwMTE0Mzt0b29sdV92cnR4XzAxN2o4WTRaVlBlVGliWTNFVUhDalk2NCI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlIGlzIHRoZSBvdXRwdXQgZnJvbSB0ZXJtaW5hbCAxMCAoc3RhdHVzOiBjb21wbGV0ZWQpOlxuPG91dHB1dD57XCJlbWFpbFwiOlwidGVzdEBleGFtcGxlLmNvbVwiLFwiaXNfYWN0aXZlXCI6dHJ1ZSxcImlzX3N1cGVydXNlclwiOmZhbHNlLFwiZnVsbF9uYW1lXCI6XCJUZXN0IFVzZXJcIixcImlkXCI6XCJmZmYwYTkxZS0xZTY2LTQ3NDMtYjQwZC05ZmFlMzliYjNjZjhcIn08L291dHB1dD5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJlOWZlNjQ0NS0zNzA1LTQ4N2EtYWFmYi01OTE5YzBlZDQyZmY7dG9vbHVfdnJ0eF8wMVNhMmtUanV5QjM3ZHh4cXZTUVVwMnUiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiQ29tbWFuZCBpcyBzdGlsbCBydW5uaW5nIGFmdGVyIDAgc2Vjb25kcy4gWW91IGNhbiB1c2UgcmVhZC1wcm9jZXNzIHRvIGdldCBtb3JlIG91dHB1dFxuYW5kIGtpbGwtcHJvY2VzcyB0byB0ZXJtaW5hdGUgaXQgaWYgbmVlZGVkLlxuUElEIDExXG5PdXRwdXQgc28gZmFyOlxuPHN0ZG91dD5cblxuPC9zdGRvdXQ+XG48c3RkZXJyPlxuXG48L3N0ZGVycj4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIzMmNiZjk0Ni1lNWY4LTQzZTMtOGU4OS1lMTMzOGExZTUxM2Q7dG9vbHVfdnJ0eF8wMVZndXhhYUxjV0RyWWY2SGUzcmtkTnoiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSBpcyB0aGUgb3V0cHV0IGZyb20gdGVybWluYWwgMTEgKHN0YXR1czogY29tcGxldGVkKTpcbjxvdXRwdXQ+e1wiYWNjZXNzX3Rva2VuXCI6XCJleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKbGVIQWlPakUzTkRRNU5qSXlPVFVzSW5OMVlpSTZJbVptWmpCaE9URmxMVEZsTmpZdE5EYzBNeTFpTkRCa0xUbG1ZV1V6T1dKaU0yTm1PQ0o5LlZCbTNLd2VfLVVDV0Q4OE5tb3c2QUN0WlBuWVJkV1VycWZucGJaZWRKMUFcIixcInRva2VuX3R5cGVcIjpcImJlYXJlclwifTwvb3V0cHV0PlxuPHJldHVybi1jb2RlPlxuMFxuPC9yZXR1cm4tY29kZT5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjE5YjI1MzcyLWZlOGYtNGE5YS1iNGU5LTg1YjU2NmFiZDdhMTt0b29sdV92cnR4XzAxU3JKeFpwZDZzQ2UyMU44YUxERHJ4ayI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJQcm9jZXNzIGxhdW5jaGVkIHdpdGggUElEIDEyIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMTM1M2Y4MDEtZGQ2Yi00NmE3LThhMWEtNzM4ZGViYTAzYThlO3Rvb2x1X3ZydHhfMDFXTVdVR0xqbjUxaXhMbTZ1Tnk1TVplIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDEyIChzdGF0dXM6IGNvbXBsZXRlZCk6XG48b3V0cHV0PkludGVybmFsIFNlcnZlciBFcnJvcjwvb3V0cHV0PlxuPHJldHVybi1jb2RlPlxuMFxuPC9yZXR1cm4tY29kZT5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjJlYjgzM2M5LTFiOWMtNGUyNy04YzcyLWE2ZTRmNjA1YTU4Yjt0b29sdV92cnR4XzAxUUxncmhBUTRHZ3dYNEtBZkczcVNRaSI6eyJwaGFzZSI6OH0sImRhZmExYzM0LWE4NzEtNGNkMi05YWEwLTJlOWQ1NDAwZjA4Yjt0b29sdV92cnR4XzAxOFh3cFBodzI4dVI0aVBWeTIyYVZiMiI6eyJwaGFzZSI6OCwicmVzdWx0Ijp7InRleHQiOiJDb21tYW5kIGlzIHN0aWxsIHJ1bm5pbmcgYWZ0ZXIgMCBzZWNvbmRzLiBZb3UgY2FuIHVzZSByZWFkLXByb2Nlc3MgdG8gZ2V0IG1vcmUgb3V0cHV0XG5hbmQga2lsbC1wcm9jZXNzIHRvIHRlcm1pbmF0ZSBpdCBpZiBuZWVkZWQuXG5QSUQgMTNcbk91dHB1dCBzbyBmYXI6XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjA5NzJmMWJlLTQ5YTAtNGIxOS04YjRmLWE5ZmI4NTQyMjYwNjt0b29sdV92cnR4XzAxOFh3cFBodzI4dVI0aVBWeTIyYVZiMiI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJDb21tYW5kIGlzIHN0aWxsIHJ1bm5pbmcgYWZ0ZXIgMCBzZWNvbmRzLiBZb3UgY2FuIHVzZSByZWFkLXByb2Nlc3MgdG8gZ2V0IG1vcmUgb3V0cHV0XG5hbmQga2lsbC1wcm9jZXNzIHRvIHRlcm1pbmF0ZSBpdCBpZiBuZWVkZWQuXG5QSUQgMTRcbk91dHB1dCBzbyBmYXI6XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjA5NzJmMWJlLTQ5YTAtNGIxOS04YjRmLWE5ZmI4NTQyMjYwNjt0b29sdV92cnR4XzAxS3V4VUttNVVFcHFyWEh6UGU1VmVDMiI6eyJwaGFzZSI6OH0sIjcwMjEyZjU2LWU5NjktNDhiYi05NmY0LTU2ZWE5NjZmNGZmYjt0b29sdV92cnR4XzAxS29DUDRwb2R6cW13dlFGTXlyUWd0QiI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJDb21tYW5kIGlzIHN0aWxsIHJ1bm5pbmcgYWZ0ZXIgMCBzZWNvbmRzLiBZb3UgY2FuIHVzZSByZWFkLXByb2Nlc3MgdG8gZ2V0IG1vcmUgb3V0cHV0XG5hbmQga2lsbC1wcm9jZXNzIHRvIHRlcm1pbmF0ZSBpdCBpZiBuZWVkZWQuXG5QSUQgMTVcbk91dHB1dCBzbyBmYXI6XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImIyYWQ2MjE2LTQ0MTEtNGQ1NS05ZGE1LWUxNzYyN2QzMWY4ODt0b29sdV92cnR4XzAxOEVmV0pUVFVTeFFqMTZ4bVdVajZzUSI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlIGlzIHRoZSBvdXRwdXQgZnJvbSB0ZXJtaW5hbCAxNSAoc3RhdHVzOiBjb21wbGV0ZWQpOlxuPG91dHB1dD5JTkZPOl9fbWFpbl9fOkluaXRpYWxpemluZyBzZXJ2aWNlXHJcbklORk86X19tYWluX186U3RhcnRpbmcgY2FsbCB0byAnX19tYWluX18uaW5pdCcsIHRoaXMgaXMgdGhlIDFzdCB0aW1lIGNhbGxpbmcgaXQuXHJcbklORk86X19tYWluX186U2VydmljZSBmaW5pc2hlZCBpbml0aWFsaXppbmdcclxuPC9vdXRwdXQ+XG48cmV0dXJuLWNvZGU+XG4wXG48L3JldHVybi1jb2RlPlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiNGM0YmRiZmItNTNjOS00N2RlLTg1ZTgtYzgzNjdkZDA2MThkO3Rvb2x1X3ZydHhfMDFKM0Q1QW1pTUxZSkJaUm53NHhWQnQ2Ijp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkNvbW1hbmQgaXMgc3RpbGwgcnVubmluZyBhZnRlciAwIHNlY29uZHMuIFlvdSBjYW4gdXNlIHJlYWQtcHJvY2VzcyB0byBnZXQgbW9yZSBvdXRwdXRcbmFuZCBraWxsLXByb2Nlc3MgdG8gdGVybWluYXRlIGl0IGlmIG5lZWRlZC5cblBJRCAxNlxuT3V0cHV0IHNvIGZhcjpcbjxzdGRvdXQ+XG5cbjwvc3Rkb3V0PlxuPHN0ZGVycj5cblxuPC9zdGRlcnI+IiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiNmY2NmUxNjAtMmUyOC00YTgxLWFlODAtMDQ5YTQxNDZmNWYyO3Rvb2x1X3ZydHhfMDFYWUJKdGtZNVhVS3N1dVhQcjhpaFhVIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDE2IChzdGF0dXM6IGNvbXBsZXRlZCk6XG48b3V0cHV0PklORk8gIFthbGVtYmljLnJ1bnRpbWUubWlncmF0aW9uXSBDb250ZXh0IGltcGwgUG9zdGdyZXNxbEltcGwuXHJcbklORk8gIFthbGVtYmljLnJ1bnRpbWUubWlncmF0aW9uXSBXaWxsIGFzc3VtZSB0cmFuc2FjdGlvbmFsIERETC5cclxuPC9vdXRwdXQ+XG48cmV0dXJuLWNvZGU+XG4wXG48L3JldHVybi1jb2RlPlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiZjA5ZGIxMGYtZTQzYS00MjZjLTlhZWUtMjg3ZTliYmZkOTlkO3Rvb2x1X3ZydHhfMDE3WTY1cUV4YzdNVWo5RExoVFk4VzlIIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkNvbW1hbmQgaXMgc3RpbGwgcnVubmluZyBhZnRlciAwIHNlY29uZHMuIFlvdSBjYW4gdXNlIHJlYWQtcHJvY2VzcyB0byBnZXQgbW9yZSBvdXRwdXRcbmFuZCBraWxsLXByb2Nlc3MgdG8gdGVybWluYXRlIGl0IGlmIG5lZWRlZC5cblBJRCAxN1xuT3V0cHV0IHNvIGZhcjpcbjxzdGRvdXQ+XG5cbjwvc3Rkb3V0PlxuPHN0ZGVycj5cblxuPC9zdGRlcnI+IiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMTRkNjJmNzQtYmE3OS00NjY3LWIwYWMtZGY3ZDdiYjg2MzBlO3Rvb2x1X3ZydHhfMDEyVkdXcktQcG1tZ2tHckIxaVhFOUhQIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDE3IChzdGF0dXM6IGNvbXBsZXRlZCk6XG48b3V0cHV0PklORk86X19tYWluX186Q3JlYXRpbmcgaW5pdGlhbCBkYXRhXHJcbklORk86X19tYWluX186SW5pdGlhbCBkYXRhIGNyZWF0ZWRcclxuPC9vdXRwdXQ+XG48cmV0dXJuLWNvZGU+XG4wXG48L3JldHVybi1jb2RlPlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMDVkN2NlOTItZjVmMC00NjkyLTlkZjQtMDg4ZTRjNzA4YzVmO3Rvb2x1X3ZydHhfMDFXMjRIZzNyYURQRWRzTHNOWnA4dFJwIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkNvbW1hbmQgaXMgc3RpbGwgcnVubmluZyBhZnRlciAwIHNlY29uZHMuIFlvdSBjYW4gdXNlIHJlYWQtcHJvY2VzcyB0byBnZXQgbW9yZSBvdXRwdXRcbmFuZCBraWxsLXByb2Nlc3MgdG8gdGVybWluYXRlIGl0IGlmIG5lZWRlZC5cblBJRCAxOFxuT3V0cHV0IHNvIGZhcjpcbjxzdGRvdXQ+XG5cbjwvc3Rkb3V0PlxuPHN0ZGVycj5cblxuPC9zdGRlcnI+IiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiYTc1MGUzMjMtNDY1ZS00YjAxLTkwODUtMzMyMDVhYjQ1NWUyO3Rvb2x1X3ZydHhfMDFCQ0pMRGFuZENIY2pwOVFSd3RXdW5UIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDE4IChzdGF0dXM6IGNvbXBsZXRlZCk6XG48b3V0cHV0PlRhYmxlcyBpbiBkYXRhYmFzZTogWydhbGVtYmljX3ZlcnNpb24nLCAndXNlcicsICdpdGVtJywgJ2NoaWxkJywgJ2RvY3VtZW50JywgJ2dyb3d0aF9yZWNvcmQnLCAnY2hhdF9oaXN0b3J5J11cclxuPC9vdXRwdXQ+XG48cmV0dXJuLWNvZGU+XG4wXG48L3JldHVybi1jb2RlPlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMTU4MTM1NzQtM2ZmYS00OWVjLTlkOGUtM2NkMmJmNGFiYTlkO3Rvb2x1X3ZydHhfMDFHYWFpM0tkNzhReWJTS1kxSFRzVVJKIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gYmFja2VuZC9hcHAvbW9kZWxzLnB5OlxuICAgMjAwXHRcbiAgIDIwMVx0XG4gICAyMDJcdGNsYXNzIERvY3VtZW50UHVibGljKERvY3VtZW50QmFzZSk6XG4gICAyMDNcdCAgICBpZDogdXVpZC5VVUlEXG4gICAyMDRcdCAgICBmaWxlbmFtZTogc3RyXG4gICAyMDVcdCAgICB1cGxvYWRfdGltZXN0YW1wOiBkYXRldGltZVxuICAgMjA2XHQgICAgZG9jX21ldGFkYXRhOiBEaWN0W3N0ciwgQW55XSB8IE5vbmUgPSBOb25lXG4gICAyMDdcdFxuICAgMjA4XHRcbiAgIDIwOVx0Y2xhc3MgRG9jdW1lbnRzUHVibGljKFNRTE1vZGVsKTpcbiAgIDIxMFx0ICAgIGRhdGE6IGxpc3RbRG9jdW1lbnRQdWJsaWNdXG4gICAyMTFcdCAgICBjb3VudDogaW50XG4gICAyMTJcdFxuICAgMjEzXHRcbiAgIDIxNFx0IyBDaGF0IGhpc3RvcnkgbW9kZWxzXG4gICAyMTVcdGNsYXNzIENoYXRIaXN0b3J5QmFzZShTUUxNb2RlbCk6XG4gICAyMTZcdCAgICBzZXNzaW9uX2lkOiBzdHIgPSBGaWVsZChtYXhfbGVuZ3RoPTUwKVxuICAgMjE3XHQgICAgdXNlcl9xdWVyeTogc3RyXG4gICAyMThcdCAgICBhaV9yZXNwb25zZTogc3RyXG4gICAyMTlcdCAgICBtb2RlbDogc3RyID0gRmllbGQobWF4X2xlbmd0aD01MClcbiAgIDIyMFx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAyODNcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImRiZmQzM2ZjLTVhOGUtNGEwYy1hN2M5LWQzMjk5ZGM1YWRkODt0b29sdV92cnR4XzAxTjZVQmM3dHlmaG9RQjFFUTZvQjhwTSI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGJhY2tlbmQvYXBwL21vZGVscy5weTpcbiAgIDIyMFx0XG4gICAyMjFcdFxuICAgMjIyXHRjbGFzcyBDaGF0SGlzdG9yeUNyZWF0ZShDaGF0SGlzdG9yeUJhc2UpOlxuICAgMjIzXHQgICAgdXNlcl9pZDogdXVpZC5VVUlEXG4gICAyMjRcdCAgICBjaGlsZF9pZDogdXVpZC5VVUlEIHwgTm9uZSA9IE5vbmVcbiAgIDIyNVx0XG4gICAyMjZcdFxuICAgMjI3XHRjbGFzcyBDaGF0SGlzdG9yeShDaGF0SGlzdG9yeUJhc2UsIHRhYmxlPVRydWUpOlxuICAgMjI4XHQgICAgaWQ6IHV1aWQuVVVJRCA9IEZpZWxkKGRlZmF1bHRfZmFjdG9yeT11dWlkLnV1aWQ0LCBwcmltYXJ5X2tleT1UcnVlKVxuICAgMjI5XHQgICAgdXNlcl9pZDogdXVpZC5VVUlEID0gRmllbGQoZm9yZWlnbl9rZXk9XCJ1c2VyLmlkXCIpXG4gICAyMzBcdCAgICB1c2VyOiBVc2VyID0gUmVsYXRpb25zaGlwKGJhY2tfcG9wdWxhdGVzPVwiY2hhdF9oaXN0b3JpZXNcIilcbiAgIDIzMVx0ICAgIGNoaWxkX2lkOiB1dWlkLlVVSUQgfCBOb25lID0gRmllbGQoZGVmYXVsdD1Ob25lLCBmb3JlaWduX2tleT1cImNoaWxkLmlkXCIpXG4gICAyMzJcdCAgICBjaGlsZDogQ2hpbGQgfCBOb25lID0gUmVsYXRpb25zaGlwKGJhY2tfcG9wdWxhdGVzPVwiY2hhdF9oaXN0b3JpZXNcIilcbiAgIDIzM1x0ICAgIGNyZWF0ZWRfYXQ6IGRhdGV0aW1lID0gRmllbGQoZGVmYXVsdF9mYWN0b3J5PWRhdGV0aW1lLnV0Y25vdylcbiAgIDIzNFx0ICAgIHNvdXJjZXM6IExpc3Rbc3RyXSB8IE5vbmUgPSBGaWVsZChkZWZhdWx0PU5vbmUsIHNhX3R5cGU9SlNPTikgICMgUmVmZXJlbmNlcyB0byBzb3VyY2UgZG9jdW1lbnRzXG4gICAyMzVcdFxuICAgMjM2XHRcbiAgIDIzN1x0Y2xhc3MgQ2hhdEhpc3RvcnlQdWJsaWMoQ2hhdEhpc3RvcnlCYXNlKTpcbiAgIDIzOFx0ICAgIGlkOiB1dWlkLlVVSURcbiAgIDIzOVx0ICAgIHVzZXJfaWQ6IHV1aWQuVVVJRFxuICAgMjQwXHQgICAgY2hpbGRfaWQ6IHV1aWQuVVVJRCB8IE5vbmUgPSBOb25lXG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAyODNcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjQ3ZWVjMThjLTY1MWEtNDYwNS1iNWUyLTQwNzhmNjBhOTY0ZDt0b29sdV92cnR4XzAxNTFlS2hnV2VaS3doRW1ZSEU2UmlrTCI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGJhY2tlbmQvYXBwL3JhZy9jaGF0X2hpc3RvcnkucHk6XG4gICAgNzBcdCAgICBkYjogU2Vzc2lvbixcbiAgICA3MVx0ICAgIHNlc3Npb25faWQ6IHN0cixcbiAgICA3Mlx0ICAgIGxpbWl0OiBpbnQgPSAxMFxuICAgIDczXHQpIC0+IExpc3RbRGljdFtzdHIsIHN0cl1dOlxuICAgIDc0XHQgICAgXCJcIlwiXG4gICAgNzVcdCAgICBHZXQgY2hhdCBoaXN0b3J5IGZvciBhIHNlc3Npb24uXG4gICAgNzZcdCAgICBcbiAgICA3N1x0ICAgIEFyZ3M6XG4gICAgNzhcdCAgICAgICAgZGI6IERhdGFiYXNlIHNlc3Npb25cbiAgICA3OVx0ICAgICAgICBzZXNzaW9uX2lkOiBTZXNzaW9uIElEXG4gICAgODBcdCAgICAgICAgbGltaXQ6IE1heGltdW0gbnVtYmVyIG9mIG1lc3NhZ2VzIHRvIHJldHVyblxuICAgIDgxXHQgICAgICAgIFxuICAgIDgyXHQgICAgUmV0dXJuczpcbiAgICA4M1x0ICAgICAgICBMaXN0IG9mIG1lc3NhZ2VzIGluIHRoZSBmb3JtYXQgZXhwZWN0ZWQgYnkgTGFuZ0NoYWluXG4gICAgODRcdCAgICBcIlwiXCJcbiAgICA4NVx0ICAgICMgUXVlcnkgY2hhdCBoaXN0b3J5XG4gICAgODZcdCAgICBzdGF0ZW1lbnQgPSAoXG4gICAgODdcdCAgICAgICAgc2VsZWN0KENoYXRIaXN0b3J5KVxuICAgIDg4XHQgICAgICAgIC53aGVyZShDaGF0SGlzdG9yeS5zZXNzaW9uX2lkID09IHNlc3Npb25faWQpXG4gICAgODlcdCAgICAgICAgLm9yZGVyX2J5KENoYXRIaXN0b3J5LmNyZWF0ZWRfYXQuZGVzYygpKVxuICAgIDkwXHQgICAgICAgIC5saW1pdChsaW1pdClcbiAgICA5MVx0ICAgIClcbiAgICA5Mlx0ICAgIFxuICAgIDkzXHQgICAgY2hhdF9oaXN0b3JpZXMgPSBkYi5leGVjKHN0YXRlbWVudCkuYWxsKClcbiAgICA5NFx0ICAgIFxuICAgIDk1XHQgICAgIyBGb3JtYXQgZm9yIExhbmdDaGFpblxuICAgIDk2XHQgICAgbWVzc2FnZXMgPSBbXVxuICAgIDk3XHQgICAgZm9yIGNoYXQgaW4gcmV2ZXJzZWQoY2hhdF9oaXN0b3JpZXMpOiAgIyBSZXZlcnNlIHRvIGdldCBjaHJvbm9sb2dpY2FsIG9yZGVyXG4gICAgOThcdCAgICAgICAgbWVzc2FnZXMuZXh0ZW5kKFtcbiAgICA5OVx0ICAgICAgICAgICAge1wicm9sZVwiOiBcImh1bWFuXCIsIFwiY29udGVudFwiOiBjaGF0LnVzZXJfcXVlcnl9LFxuICAgMTAwXHQgICAgICAgICAgICB7XCJyb2xlXCI6IFwiYWlcIiwgXCJjb250ZW50XCI6IGNoYXQuYWlfcmVzcG9uc2V9XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAxNDBcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjc2MmRkNmE4LThkY2EtNGJjNi1hZThmLTlhZDU2ODc0YmQ5Mjt0b29sdV92cnR4XzAxRHRzeWRwaXlVS2dSN1lmZXc1WTR0YyI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJDb21tYW5kIGlzIHN0aWxsIHJ1bm5pbmcgYWZ0ZXIgMCBzZWNvbmRzLiBZb3UgY2FuIHVzZSByZWFkLXByb2Nlc3MgdG8gZ2V0IG1vcmUgb3V0cHV0XG5hbmQga2lsbC1wcm9jZXNzIHRvIHRlcm1pbmF0ZSBpdCBpZiBuZWVkZWQuXG5QSUQgMTlcbk91dHB1dCBzbyBmYXI6XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjFkNmMzOTIxLTViOTktNGViOC1iMmEwLWUxMWNlNjI4NjQ5NTt0b29sdV92cnR4XzAxTTU5eGRZOHFZWmdweVo0eUVtZEdRViI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlIGlzIHRoZSBvdXRwdXQgZnJvbSB0ZXJtaW5hbCAxOSAoc3RhdHVzOiBzdGlsbCBydW5uaW5nKTpcbjxvdXRwdXQ+KyBweXRob24gYXBwL2JhY2tlbmRfcHJlX3N0YXJ0LnB5XHJcbklORk86X19tYWluX186SW5pdGlhbGl6aW5nIHNlcnZpY2VcclxuSU5GTzpfX21haW5fXzpTdGFydGluZyBjYWxsIHRvICdfX21haW5fXy5pbml0JywgdGhpcyBpcyB0aGUgMXN0IHRpbWUgY2FsbGluZyBpdC5cclxuSU5GTzpfX21haW5fXzpTZXJ2aWNlIGZpbmlzaGVkIGluaXRpYWxpemluZ1xyXG4rIGFsZW1iaWMgdXBncmFkZSBoZWFkXHJcbklORk8gIFthbGVtYmljLnJ1bnRpbWUubWlncmF0aW9uXSBDb250ZXh0IGltcGwgUG9zdGdyZXNxbEltcGwuXHJcbklORk8gIFthbGVtYmljLnJ1bnRpbWUubWlncmF0aW9uXSBXaWxsIGFzc3VtZSB0cmFuc2FjdGlvbmFsIERETC5cclxuKyBweXRob24gYXBwL2luaXRpYWxfZGF0YS5weVxyXG5JTkZPOl9fbWFpbl9fOkNyZWF0aW5nIGluaXRpYWwgZGF0YVxyXG48L291dHB1dD5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjk5ZmQ3NGM1LWUyMDYtNDk2Yy04NmZjLTNlNWRlNjE3ZjRlMzt0b29sdV92cnR4XzAxTWR5Z0NEaGt3R3ZocGg3cG1IMm5XUSI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlIGlzIHRoZSBvdXRwdXQgZnJvbSB0ZXJtaW5hbCAxOSAoc3RhdHVzOiBjb21wbGV0ZWQpOlxuPG91dHB1dD4rIHB5dGhvbiBhcHAvYmFja2VuZF9wcmVfc3RhcnQucHlcclxuSU5GTzpfX21haW5fXzpJbml0aWFsaXppbmcgc2VydmljZVxyXG5JTkZPOl9fbWFpbl9fOlN0YXJ0aW5nIGNhbGwgdG8gJ19fbWFpbl9fLmluaXQnLCB0aGlzIGlzIHRoZSAxc3QgdGltZSBjYWxsaW5nIGl0LlxyXG5JTkZPOl9fbWFpbl9fOlNlcnZpY2UgZmluaXNoZWQgaW5pdGlhbGl6aW5nXHJcbisgYWxlbWJpYyB1cGdyYWRlIGhlYWRcclxuSU5GTyAgW2FsZW1iaWMucnVudGltZS5taWdyYXRpb25dIENvbnRleHQgaW1wbCBQb3N0Z3Jlc3FsSW1wbC5cclxuSU5GTyAgW2FsZW1iaWMucnVudGltZS5taWdyYXRpb25dIFdpbGwgYXNzdW1lIHRyYW5zYWN0aW9uYWwgRERMLlxyXG4rIHB5dGhvbiBhcHAvaW5pdGlhbF9kYXRhLnB5XHJcbklORk86X19tYWluX186Q3JlYXRpbmcgaW5pdGlhbCBkYXRhXHJcbklORk86X19tYWluX186SW5pdGlhbCBkYXRhIGNyZWF0ZWRcclxuPC9vdXRwdXQ+XG48cmV0dXJuLWNvZGU+XG4wXG48L3JldHVybi1jb2RlPlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiNzFjZTlkMjAtZDk2MC00NDJkLTkxODAtZTY1ZThiMzM3MDdiO3Rvb2x1X3ZydHhfMDFNTEZ1RmI0Y0NocXVnZHl3N3dZblB6Ijp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlByb2Nlc3MgbGF1bmNoZWQgd2l0aCBQSUQgMjAiLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI2NDA1MjU4NS05NDQ5LTRkMjAtYjkzOS03ZDI2NGE4NTRlYmI7dG9vbHVfdnJ0eF8wMVJKNldVNVp5S1JvdGlRVmR4ZXk4MkQiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSBpcyB0aGUgb3V0cHV0IGZyb20gdGVybWluYWwgMjAgKHN0YXR1czogc3RpbGwgcnVubmluZyk6XG48b3V0cHV0Plx1MDAxYlszNG1JTkZPICAgIFx1MDAxYlswbSBVc2luZyBwYXRoIFx1MDAxYlszNG1hcHAvbWFpbi5weVx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcblx1MDAxYlszNG1JTkZPICAgIFx1MDAxYlswbSBSZXNvbHZlZCBhYnNvbHV0ZSBwYXRoIFx1MDAxYlszNW0vVXNlcnMvcGlwaWx1L0RvY3VtZW50cy9haS9wYXJlbnRpbmctYXNzaXN0YW50LXNlcnZlci9iYWNrZW5kL2FwcC9cdTAwMWJbMG1cdTAwMWJbOTVtbWFpbi5weVx1MDAxYlswbSAgICAgICAgICAgICAgIFxyXG5cdTAwMWJbMzRtSU5GTyAgICBcdTAwMWJbMG0gU2VhcmNoaW5nIGZvciBwYWNrYWdlIGZpbGUgc3RydWN0dXJlIGZyb20gZGlyZWN0b3JpZXMgd2l0aCBcdTAwMWJbMzRtX19pbml0X18ucHlcdTAwMWJbMG0gZmlsZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cdTAwMWJbMzRtSU5GTyAgICBcdTAwMWJbMG0gSW1wb3J0aW5nIGZyb20gXHUwMDFiWzM1bS9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyL1x1MDAxYlswbVx1MDAxYls5NW1iYWNrZW5kXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDila3ilIAgXHUwMDFiWzE7MzJtUHl0aG9uIHBhY2thZ2UgZmlsZSBzdHJ1Y3R1cmVcdTAwMWJbMG0g4pSA4pWuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKUgiAg8J+TgSBhcHAgICAgICAgICAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilIIgIOKUnOKUgOKUgCBcdTAwMWJbMm3wn5CNIF9faW5pdF9fLnB5XHUwMDFiWzBtICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pSCICDilJTilIDilIAg8J+QjSBtYWluLnB5ICAgICAgICAgICAgICAgICDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pWw4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pWvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cdTAwMWJbMzRtSU5GTyAgICBcdTAwMWJbMG0gSW1wb3J0aW5nIG1vZHVsZSBcdTAwMWJbMzJtYXBwLm1haW5cdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5JTkZPOmNocm9tYWRiLnRlbGVtZXRyeS5wcm9kdWN0LnBvc3Rob2c6QW5vbnltaXplZCB0ZWxlbWV0cnkgZW5hYmxlZC4gU2VlICAgICAgICAgICAgICAgICAgICAgaHR0cHM6Ly9kb2NzLnRyeWNocm9tYS5jb20vdGVsZW1ldHJ5IGZvciBtb3JlIGluZm9ybWF0aW9uLlxyXG5cdTAwMWJbMzRtSU5GTyAgICBcdTAwMWJbMG0gRm91bmQgaW1wb3J0YWJsZSBGYXN0QVBJIGFwcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKVreKUgOKUgCBcdTAwMWJbMTszMm1JbXBvcnRhYmxlIEZhc3RBUEkgYXBwXHUwMDFiWzBtIOKUgOKUgOKVriAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiDilIIgIFx1MDAxYlszODs1OzIwNDs0ODs1OzIzNW1mcm9tXHUwMDFiWzBtXHUwMDFiWzM4OzU7MjMxOzQ4OzU7MjM1bSBcdTAwMWJbMG1cdTAwMWJbMzg7NTsyMzE7NDg7NTsyMzVtYXBwXHUwMDFiWzBtXHUwMDFiWzM4OzU7MjMxOzQ4OzU7MjM1bS5cdTAwMWJbMG1cdTAwMWJbMzg7NTsyMzE7NDg7NTsyMzVtbWFpblx1MDAxYlswbVx1MDAxYlszODs1OzIzMTs0ODs1OzIzNW0gXHUwMDFiWzBtXHUwMDFiWzM4OzU7MjA0OzQ4OzU7MjM1bWltcG9ydFx1MDAxYlswbVx1MDAxYlszODs1OzIzMTs0ODs1OzIzNW0gXHUwMDFiWzBtXHUwMDFiWzM4OzU7MjMxOzQ4OzU7MjM1bWFwcFx1MDAxYlswbSAg4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4g4pSCICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIOKVsOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKVryAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuXHUwMDFiWzM0bUlORk8gICAgXHUwMDFiWzBtIFVzaW5nIGltcG9ydCBzdHJpbmcgXHUwMDFiWzE7MzJtYXBwLm1haW46YXBwXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pWt4pSAXHUwMDFiWzBtXHUwMDFiWzMybeKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgFx1MDAxYlswbSBGYXN0QVBJIENMSSAtIFByb2R1Y3Rpb24gbW9kZSBcdTAwMWJbMzJt4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAXHUwMDFiWzBtXHUwMDFiWzMybeKUgOKVrlx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKUglx1MDAxYlswbVx1MDAxYlszMm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx1MDAxYlswbVx1MDAxYlszMm3ilIJcdTAwMWJbMG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuIFx1MDAxYlszMm3ilIJcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMjszMm1TZXJ2aW5nIGF0Olx1MDAxYlswbVx1MDAxYlszMm0gXHUwMDFiWzBtXHUwMDFiWzMybWh0dHA6Ly8wLjAuMC4wOjgwMDBcdTAwMWJbMG1cdTAwMWJbMzJtICAgICAgICAgICAgICAgICAgXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybeKUglx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKUglx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlszMm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybeKUglx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKUglx1MDAxYlswbVx1MDAxYlszMm0gIFx1MDAxYlswbVx1MDAxYlsyOzMybUFQSSBkb2NzOlx1MDAxYlswbVx1MDAxYlszMm0gXHUwMDFiWzBtXHUwMDFiWzMybWh0dHA6Ly8wLjAuMC4wOjgwMDAvZG9jc1x1MDAxYlswbVx1MDAxYlszMm0gICAgICAgICAgICAgICBcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJt4pSCXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pSCXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJt4pSCXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pSCXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzI7MzJtUnVubmluZyBpbiBwcm9kdWN0aW9uIG1vZGUsIGZvciBkZXZlbG9wbWVudCB1c2U6XHUwMDFiWzBtXHUwMDFiWzMybSBcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJt4pSCXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pSCXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzMybSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJt4pSCXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pSCXHUwMDFiWzBtXHUwMDFiWzMybSAgXHUwMDFiWzBtXHUwMDFiWzE7MzJtZmFzdGFwaSBkZXZcdTAwMWJbMG1cdTAwMWJbMzJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdTAwMWJbMG1cdTAwMWJbMzJtICBcdTAwMWJbMG1cdTAwMWJbMzJt4pSCXHUwMDFiWzBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiBcdTAwMWJbMzJt4pSCXHUwMDFiWzBtXHUwMDFiWzMybSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHUwMDFiWzBtXHUwMDFiWzMybeKUglx1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gXHUwMDFiWzMybeKVsOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKVr1x1MDAxYlswbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cdTAwMWJbMzJtSU5GT1x1MDAxYlswbTogICAgIFdpbGwgd2F0Y2ggZm9yIGNoYW5nZXMgaW4gdGhlc2UgZGlyZWN0b3JpZXM6IFsnL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvYmFja2VuZCddXHJcblx1MDAxYlszMm1JTkZPXHUwMDFiWzBtOiAgICAgVXZpY29ybiBydW5uaW5nIG9uIFx1MDAxYlsxbWh0dHA6Ly8wLjAuMC4wOjgwMDBcdTAwMWJbMG0gKFByZXNzIENUUkwrQyB0byBxdWl0KVxyXG5cdTAwMWJbMzJtSU5GT1x1MDAxYlswbTogICAgIFN0YXJ0ZWQgcmVsb2FkZXIgcHJvY2VzcyBbXHUwMDFiWzM2bVx1MDAxYlsxbTczMTgyXHUwMDFiWzBtXSB1c2luZyBcdTAwMWJbMzZtXHUwMDFiWzFtV2F0Y2hGaWxlc1x1MDAxYlswbVxyXG5JTkZPOmNocm9tYWRiLnRlbGVtZXRyeS5wcm9kdWN0LnBvc3Rob2c6QW5vbnltaXplZCB0ZWxlbWV0cnkgZW5hYmxlZC4gU2VlICAgICAgICAgICAgICAgICAgICAgaHR0cHM6Ly9kb2NzLnRyeWNocm9tYS5jb20vdGVsZW1ldHJ5IGZvciBtb3JlIGluZm9ybWF0aW9uLlxyXG5cdTAwMWJbMzJtSU5GT1x1MDAxYlswbTogICAgIFN0YXJ0ZWQgc2VydmVyIHByb2Nlc3MgW1x1MDAxYlszNm03MzE4Nlx1MDAxYlswbV1cclxuXHUwMDFiWzMybUlORk9cdTAwMWJbMG06ICAgICBXYWl0aW5nIGZvciBhcHBsaWNhdGlvbiBzdGFydHVwLlxyXG5cdTAwMWJbMzJtSU5GT1x1MDAxYlswbTogICAgIEFwcGxpY2F0aW9uIHN0YXJ0dXAgY29tcGxldGUuXHJcbjwvb3V0cHV0PlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiOTVjMGFhOWEtYzRjMy00ZmY5LThhYzYtNDQ4ZmUwNjVhYzY5O3Rvb2x1X3ZydHhfMDFTSHd5YmZHdmlzdkFKREw1UmZBRFdkIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlByb2Nlc3MgbGF1bmNoZWQgd2l0aCBQSUQgMjEiLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19fSwiZHJhZnRFeGNoYW5nZSI6eyJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIn1dfSwibWVudGlvbmVkX2l0ZW1zIjpbXSwic3RhdHVzIjoiZHJhZnQifSwicmVxdWVzdElkcyI6W10sImlzUGlubmVkIjpmYWxzZSwiaXNTaGFyZWFibGUiOnRydWUsImV4dHJhRGF0YSI6eyJpc0FnZW50Q29udmVyc2F0aW9uIjp0cnVlLCJoYXNBZ2VudE9uYm9hcmRlZCI6dHJ1ZSwiaGFzRGlydHlFZGl0cyI6ZmFsc2V9LCJkcmFmdEFjdGl2ZUNvbnRleHRJZHMiOlsiL1VzZXJzL3BpcGlsdS9Eb2N1bWVudHMvYWkvcGFyZW50aW5nLWFzc2lzdGFudC1zZXJ2ZXIvLmVudiIsIi9Vc2Vycy9waXBpbHUvRG9jdW1lbnRzL2FpL3BhcmVudGluZy1hc3Npc3RhbnQtc2VydmVyZmFsc2VmYWxzZSIsImFnZW50TWVtb3JpZXMiXX0sIjJlN2E0NDNiLWU4NzItNDIyOC04OTQ2LTViY2U3NTQ3Mjg2ZCI6eyJpZCI6IjJlN2E0NDNiLWU4NzItNDIyOC04OTQ2LTViY2U3NTQ3Mjg2ZCIsImNyZWF0ZWRBdElzbyI6IjIwMjUtMDQtMTRUMTM6NTQ6NTMuMDYyWiIsImxhc3RJbnRlcmFjdGVkQXRJc28iOiIyMDI1LTA0LTE0VDEzOjU0OjUzLjA2MloiLCJjaGF0SGlzdG9yeSI6W10sImZlZWRiYWNrU3RhdGVzIjp7fSwidG9vbFVzZVN0YXRlcyI6e30sImRyYWZ0RXhjaGFuZ2UiOnsicmVxdWVzdF9tZXNzYWdlIjoiIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCJ9XX0sInN0YXR1cyI6ImRyYWZ0In0sInJlcXVlc3RJZHMiOltdLCJpc1Bpbm5lZCI6ZmFsc2UsImlzU2hhcmVhYmxlIjpmYWxzZSwiZXh0cmFEYXRhIjp7Imhhc0RpcnR5RWRpdHMiOmZhbHNlfSwicGVyc29uYVR5cGUiOjB9LCJkOWIxYTM5MS02MWQzLTRiYjEtYTMxMy1jMmI3MGRkOWMwNDQiOnsiaWQiOiJkOWIxYTM5MS02MWQzLTRiYjEtYTMxMy1jMmI3MGRkOWMwNDQiLCJjcmVhdGVkQXRJc28iOiIyMDI1LTA0LTE0VDEzOjU0OjUzLjE1NVoiLCJsYXN0SW50ZXJhY3RlZEF0SXNvIjoiMjAyNS0wNC0xNFQxNDo0OToxNi4wODBaIiwiY2hhdEhpc3RvcnkiOlt7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMmU3ZjhlNDQtMGI4MS00MjQ1LTg1MmUtNDIxMWE4YzgxMzdhIiwicmVxdWVzdF9tZXNzYWdlIjoi5a+55LqOUHl0aG9u5bCP55m977yM56ys5LiA5qyh5L2/55SoZmFzdEFwaeeahOaooeadv+W8gOWPkemhueebru+8jOmcgOimgeS6huino+WTquS6m+WGheWuuSIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiLlr7nkuo5QeXRob27lsI/nmb3vvIznrKzkuIDmrKHkvb/nlKhmYXN0QXBp55qE5qih5p2/5byA5Y+R6aG555uu77yM6ZyA6KaB5LqG6Kej5ZOq5Lqb5YaF5a65In1dfV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLln7rkuo7mj5DkvpvnmoTmlofmoaPvvIzmiJHkuLpQeXRob27lsI/nmb3mlbTnkIbkuIDkuKpGYXN0QVBJ5YWl6Zeo6Lev57q/5Zu+77yaXG5cbjEuIOacgOWfuuehgOW/heWtpuWGheWuue+8mlxuXG48YXVnbWVudF9jb2RlX3NuaXBwZXQgcGF0aD1cImJhY2tlbmQvYXBwL21haW4ucHlcIiBtb2RlPVwiRURJVFwiPlxuYGBgcHl0aG9uXG5mcm9tIGZhc3RhcGkgaW1wb3J0IEZhc3RBUElcblxuIyDliJvlu7pGYXN0QVBJ5bqU55So5a6e5L6LXG5hcHAgPSBGYXN0QVBJKClcblxuIyDlrprkuYnkuIDkuKrmnIDnroDljZXnmoTot6/nlLFcbkBhcHAuZ2V0KFwiL1wiKVxuZGVmIHJlYWRfcm9vdCgpOlxuICAgIHJldHVybiB7XCJIZWxsb1wiOiBcIldvcmxkXCJ9XG5cbiMg5bim5Y+C5pWw55qE6Lev55SxXG5AYXBwLmdldChcIi9pdGVtcy97aXRlbV9pZH1cIilcbmRlZiByZWFkX2l0ZW0oaXRlbV9pZDogaW50KTpcbiAgICByZXR1cm4ge1wiaXRlbV9pZFwiOiBpdGVtX2lkfVxuYGBgXG48L2F1Z21lbnRfY29kZV9zbmlwcGV0PlxuXG4yLiDlhbPplK7mpoLlv7XlrabkuaDpobrluo/vvJpcblxuLSAqKui3r+eUseWSjEhUVFDmlrnms5UqKlxuICAtIEdFVDog6I635Y+W5pWw5o2uXG4gIC0gUE9TVDog5Yib5bu65pWw5o2uXG4gIC0gUFVUOiDmm7TmlrDmlbDmja5cbiAgLSBERUxFVEU6IOWIoOmZpOaVsOaNrlxuXG4tICoq6K+35rGC5ZKM5ZON5bqU5qih5Z6LKirvvIjkvb/nlKhQeWRhbnRpY++8ie+8mlxuPGF1Z21lbnRfY29kZV9zbmlwcGV0IHBhdGg9XCJiYWNrZW5kL2FwcC9zY2hlbWFzLnB5XCIgbW9kZT1cIkVESVRcIj5cbmBgYHB5dGhvblxuZnJvbSBweWRhbnRpYyBpbXBvcnQgQmFzZU1vZGVsXG5cbmNsYXNzIEl0ZW0oQmFzZU1vZGVsKTpcbiAgICBuYW1lOiBzdHJcbiAgICBwcmljZTogZmxvYXRcbiAgICBkZXNjcmlwdGlvbjogc3RyID0gTm9uZSAgIyDlj6/pgInlrZfmrrVcblxuQGFwcC5wb3N0KFwiL2l0ZW1zL1wiKVxuZGVmIGNyZWF0ZV9pdGVtKGl0ZW06IEl0ZW0pOlxuICAgIHJldHVybiBpdGVtXG5gYGBcbjwvYXVnbWVudF9jb2RlX3NuaXBwZXQ+XG5cbjMuIOW8gOWPkeeOr+Wig+iuvue9ru+8mlxuXG5gYGBiYXNoXG4jIDEuIOWIm+W7uuiZmuaLn+eOr+Wig1xucHl0aG9uIC1tIHZlbnYgLnZlbnZcblxuIyAyLiDmv4DmtLvomZrmi5/njq/looNcbiMgV2luZG93czpcbi52ZW52XFxTY3JpcHRzXFxhY3RpdmF0ZVxuIyBMaW51eC9NYWM6XG5zb3VyY2UgLnZlbnYvYmluL2FjdGl2YXRlXG5cbiMgMy4g5a6J6KOF5Z+65pys5L6d6LWWXG5waXAgaW5zdGFsbCBmYXN0YXBpIHV2aWNvcm5cblxuIyA0LiDov5DooYzmnI3liqHlmahcbnV2aWNvcm4gbWFpbjphcHAgLS1yZWxvYWRcbmBgYFxuXG40LiDlrp7nlKjlt6XlhbfvvJpcblxuLSAqKkFQSeaWh+ahoyoq77yaXG4gIC0gU3dhZ2dlciBVSTog6K6/6ZeuIGh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9kb2NzXG4gIC0gUmVEb2M6IOiuv+mXriBodHRwOi8vbG9jYWxob3N0OjgwMDAvcmVkb2NcblxuNS4g5bu66K6u5a2m5Lmg6Lev5b6E77yaXG5cbi0g56ysMeWkqe+8mlxuICAtIEZhc3RBUEnln7rnoYDmpoLlv7VcbiAgLSDnroDljZXot6/nlLHliJvlu7pcbiAgLSDov5DooYznrKzkuIDkuKrlupTnlKhcblxuLSDnrKwyLTPlpKnvvJpcbiAgLSBQeWRhbnRpY+aooeWei+S9v+eUqFxuICAtIOivt+axguWPguaVsOWkhOeQhlxuICAtIOWTjeW6lOWkhOeQhlxuXG4tIOesrDQtNeWkqe+8mlxuICAtIOaVsOaNruW6k+WfuuehgOaTjeS9nFxuICAtIOeugOWNlUNSVUTlrp7njrBcbiAgLSDplJnor6/lpITnkIZcblxuLSDnrKw2LTflpKnvvJpcbiAgLSDnlKjmiLforqTor4FcbiAgLSDmlofku7blpITnkIZcbiAgLSDkuK3pl7Tku7bkvb/nlKhcblxuNi4g5rOo5oSP5LqL6aG577yaXG5cbi0g56Gu5L+d55CG6KejUHl0aG9u5Z+656GA6K+t5rOVXG4tIOaOjOaPoVB5dGhvbuexu+Wei+aPkOekulxuLSDlrabkvJrkvb/nlKhGYXN0QVBJ55qE5a6Y5pa55paH5qGjXG4tIOS7jueugOWNleekuuS+i+W8gOWni++8jOmAkOatpeWinuWKoOWkjeadguW6plxuLSDlpJrkvb/nlKhGYXN0QVBJ55qE6Ieq5Yqo5paH5qGj5Yqf6IO9XG5cbjcuIOaOqOiNkOWPguiAg+i1hOa6kO+8mlxuXG4tIEZhc3RBUEnlrpjmlrnmlofmoaNcbi0gU1FMTW9kZWzmlofmoaPvvIjlpoLpnIDmlbDmja7lupPmk43kvZzvvIlcbi0gUHlkYW50aWPmlofmoaPvvIjmlbDmja7pqozor4HvvIlcbi0g6aG555uu5Lit55qE56S65L6L5Luj56CBXG5cbuiusOS9j++8muS4jeimgeivleWbvuS4gOasoeaAp+aOjOaPoeaJgOacieWGheWuue+8jOaMieeFp+W+quW6j+a4kOi/m+eahOaWueW8j+WtpuS5oO+8jOS7juWfuuehgOWKn+iDveW8gOWni++8jOmAkOatpeaJqeWxleWIsOabtOWkjeadgueahOeJueaAp+OAglxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiJkb2MvRmFzdEFQSeWtpuS5oOaJi+WGjC5tZDowLTc0OVxuZG9jL0Zhc3RBUEnlrabkuaDmiYvlhowubWQ6NzQ5LTEzMjdcbmRvYy9GYXN0QVBJ5a2m5Lmg5omL5YaMLm1kOjEzMjctMTg5M1xuZG9jL0Zhc3RBUEnlrabkuaDmiYvlhowubWQ6MzQ2OC00MjIyXG5kb2MvRmFzdEFQSeWtpuS5oOaJi+WGjC5tZDo4Nzk2LTk0MDZcbmRvYy9GYXN0QVBJ5a2m5Lmg5omL5YaMLm1kOjk5ODYtMTA0ODJcbmRvYy9GYXN0QVBJ5a2m5Lmg5omL5YaMLm1kOjExMTExLTExNjExXG5kb2MvRnVsbC1TdGFjay1GYXN0QVBJLVRlbXBsYXRl5a2m5Lmg5omL5YaMLm1kOjAtNjU4XG5kb2MvRnVsbC1TdGFjay1GYXN0QVBJLVRlbXBsYXRl5a2m5Lmg5omL5YaMLm1kOjY1OC0xMjc2XG5kb2MvRnVsbC1TdGFjay1GYXN0QVBJLVRlbXBsYXRl5a2m5Lmg5omL5YaMLm1kOjEyNzYtMTg1NFxuZG9jL0Z1bGwtU3RhY2stRmFzdEFQSS1UZW1wbGF0ZeWtpuS5oOaJi+WGjC5tZDoxODU0LTI0NDdcbmRvYy9GdWxsLVN0YWNrLUZhc3RBUEktVGVtcGxhdGXlrabkuaDmiYvlhowubWQ6MjQ0Ny0zMTk4XG5kb2MvRnVsbC1TdGFjay1GYXN0QVBJLVRlbXBsYXRl5a2m5Lmg5omL5YaMLm1kOjMxOTgtMzU3OVxuZG9jL0Z1bGwtU3RhY2stRmFzdEFQSS1UZW1wbGF0ZeWtpuS5oOaJi+WGjC5tZDozNTc5LTQyNDRcbmRvYy9GdWxsLVN0YWNrLUZhc3RBUEktVGVtcGxhdGXlrabkuaDmiYvlhowubWQ6NDI0NC00OTIyXG5kb2MvRnVsbC1TdGFjay1GYXN0QVBJLVRlbXBsYXRl5a2m5Lmg5omL5YaMLm1kOjU0NDAtNjE1M1xuZG9jL0Z1bGwtU3RhY2stRmFzdEFQSS1UZW1wbGF0ZeWtpuS5oOaJi+WGjC5tZDo2MTUzLTcwMzZcbmRvYy9GdWxsLVN0YWNrLUZhc3RBUEktVGVtcGxhdGXlrabkuaDmiYvlhowubWQ6NzAzNi03ODc2XG5kb2MvRnVsbC1TdGFjay1GYXN0QVBJLVRlbXBsYXRl5a2m5Lmg5omL5YaMLm1kOjc4NzYtODY4MVxuZG9jL0Z1bGwtU3RhY2stRmFzdEFQSS1UZW1wbGF0ZeWtpuS5oOaJi+WGjC5tZDoxMDY1Ni0xMTMyOFxuZG9jL0Z1bGwtU3RhY2stRmFzdEFQSS1UZW1wbGF0ZeWtpuS5oOaJi+WGjC5tZDoxMTMyOC0xMjE2N1xuZG9jL0Z1bGwtU3RhY2stRmFzdEFQSS1UZW1wbGF0ZeWtpuS5oOaJi+WGjC5tZDoxMjE2Ny0xMjk1OFxuZG9jL0Z1bGwtU3RhY2stRmFzdEFQSS1UZW1wbGF0ZeWtpuS5oOaJi+WGjC5tZDoxNDEyNS0xNDkzMVxuZG9jL0Z1bGwtU3RhY2stRmFzdEFQSS1UZW1wbGF0ZeWtpuS5oOaJi+WGjC5tZDoxNjA2NS0xNjQ4OFxuZG9jL2Zhc3RBcGkgUmFn5py65Zmo5Lq6Lm1kOjIyMC04NzdcbmRvYy9mYXN0QXBpIFJhZ+acuuWZqOS6ui5tZDo4NzctMTM2MVxuUkVBRE1FLm1kOjAtNTc2XG5SRUFETUUubWQ6NTc2LTEzNjNcblJFQURNRS5tZDoxMzYzLTIwNzBcbmRvYy91cGRhdGVkLWFyY2hpdGVjdHVyZS1kb2N1bWVudC5tZDo3Mzc0LTc5MTNcbmRldmVsb3BtZW50Lm1kOjAtNjEyXG5iYWNrZW5kL3B5cHJvamVjdC50b21sOjAtNjc5In1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50Ijoi5a+55LqOUHl0aG9u5bCP55m977yM56ys5LiA5qyh5L2/55SoZmFzdEFwaeeahOaooeadv+W8gOWPkemhueebru+8jOmcgOimgeS6huino+WTquS6m+WGheWuuSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkQ6L2FpL3BhcmVudGluZy1hc3Npc3RhdG4tc2VydmVyIiwiZm9sZGVyUm9vdCI6IkQ6L2FpL3BhcmVudGluZy1hc3Npc3RhdG4tc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwicmVzcG9uc2VfdGV4dCI6IuWfuuS6juaPkOS+m+eahOaWh+aho++8jOaIkeS4ulB5dGhvbuWwj+eZveaVtOeQhuS4gOS4qkZhc3RBUEnlhaXpl6jot6/nur/lm77vvJpcblxuMS4g5pyA5Z+656GA5b+F5a2m5YaF5a6577yaXG5cbmBgYGBweXRob24gcGF0aD1iYWNrZW5kL2FwcC9tYWluLnB5IG1vZGU9RURJVFxuZnJvbSBmYXN0YXBpIGltcG9ydCBGYXN0QVBJXG5cbiMg5Yib5bu6RmFzdEFQSeW6lOeUqOWunuS+i1xuYXBwID0gRmFzdEFQSSgpXG5cbiMg5a6a5LmJ5LiA5Liq5pyA566A5Y2V55qE6Lev55SxXG5AYXBwLmdldChcIi9cIilcbmRlZiByZWFkX3Jvb3QoKTpcbiAgICByZXR1cm4ge1wiSGVsbG9cIjogXCJXb3JsZFwifVxuXG4jIOW4puWPguaVsOeahOi3r+eUsVxuQGFwcC5nZXQoXCIvaXRlbXMve2l0ZW1faWR9XCIpXG5kZWYgcmVhZF9pdGVtKGl0ZW1faWQ6IGludCk6XG4gICAgcmV0dXJuIHtcIml0ZW1faWRcIjogaXRlbV9pZH1cbmBgYGBcblxuMi4g5YWz6ZSu5qaC5b+15a2m5Lmg6aG65bqP77yaXG5cbi0gKirot6/nlLHlkoxIVFRQ5pa55rOVKipcbiAgLSBHRVQ6IOiOt+WPluaVsOaNrlxuICAtIFBPU1Q6IOWIm+W7uuaVsOaNrlxuICAtIFBVVDog5pu05paw5pWw5o2uXG4gIC0gREVMRVRFOiDliKDpmaTmlbDmja5cblxuLSAqKuivt+axguWSjOWTjeW6lOaooeWeiyoq77yI5L2/55SoUHlkYW50aWPvvInvvJpcbmBgYGBweXRob24gcGF0aD1iYWNrZW5kL2FwcC9zY2hlbWFzLnB5IG1vZGU9RURJVFxuZnJvbSBweWRhbnRpYyBpbXBvcnQgQmFzZU1vZGVsXG5cbmNsYXNzIEl0ZW0oQmFzZU1vZGVsKTpcbiAgICBuYW1lOiBzdHJcbiAgICBwcmljZTogZmxvYXRcbiAgICBkZXNjcmlwdGlvbjogc3RyID0gTm9uZSAgIyDlj6/pgInlrZfmrrVcblxuQGFwcC5wb3N0KFwiL2l0ZW1zL1wiKVxuZGVmIGNyZWF0ZV9pdGVtKGl0ZW06IEl0ZW0pOlxuICAgIHJldHVybiBpdGVtXG5gYGBgXG5cbjMuIOW8gOWPkeeOr+Wig+iuvue9ru+8mlxuXG5gYGBiYXNoXG4jIDEuIOWIm+W7uuiZmuaLn+eOr+Wig1xucHl0aG9uIC1tIHZlbnYgLnZlbnZcblxuIyAyLiDmv4DmtLvomZrmi5/njq/looNcbiMgV2luZG93czpcbi52ZW52XFxTY3JpcHRzXFxhY3RpdmF0ZVxuIyBMaW51eC9NYWM6XG5zb3VyY2UgLnZlbnYvYmluL2FjdGl2YXRlXG5cbiMgMy4g5a6J6KOF5Z+65pys5L6d6LWWXG5waXAgaW5zdGFsbCBmYXN0YXBpIHV2aWNvcm5cblxuIyA0LiDov5DooYzmnI3liqHlmahcbnV2aWNvcm4gbWFpbjphcHAgLS1yZWxvYWRcbmBgYFxuXG40LiDlrp7nlKjlt6XlhbfvvJpcblxuLSAqKkFQSeaWh+ahoyoq77yaXG4gIC0gU3dhZ2dlciBVSTog6K6/6ZeuIGh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9kb2NzXG4gIC0gUmVEb2M6IOiuv+mXriBodHRwOi8vbG9jYWxob3N0OjgwMDAvcmVkb2NcblxuNS4g5bu66K6u5a2m5Lmg6Lev5b6E77yaXG5cbi0g56ysMeWkqe+8mlxuICAtIEZhc3RBUEnln7rnoYDmpoLlv7VcbiAgLSDnroDljZXot6/nlLHliJvlu7pcbiAgLSDov5DooYznrKzkuIDkuKrlupTnlKhcblxuLSDnrKwyLTPlpKnvvJpcbiAgLSBQeWRhbnRpY+aooeWei+S9v+eUqFxuICAtIOivt+axguWPguaVsOWkhOeQhlxuICAtIOWTjeW6lOWkhOeQhlxuXG4tIOesrDQtNeWkqe+8mlxuICAtIOaVsOaNruW6k+WfuuehgOaTjeS9nFxuICAtIOeugOWNlUNSVUTlrp7njrBcbiAgLSDplJnor6/lpITnkIZcblxuLSDnrKw2LTflpKnvvJpcbiAgLSDnlKjmiLforqTor4FcbiAgLSDmlofku7blpITnkIZcbiAgLSDkuK3pl7Tku7bkvb/nlKhcblxuNi4g5rOo5oSP5LqL6aG577yaXG5cbi0g56Gu5L+d55CG6KejUHl0aG9u5Z+656GA6K+t5rOVXG4tIOaOjOaPoVB5dGhvbuexu+Wei+aPkOekulxuLSDlrabkvJrkvb/nlKhGYXN0QVBJ55qE5a6Y5pa55paH5qGjXG4tIOS7jueugOWNleekuuS+i+W8gOWni++8jOmAkOatpeWinuWKoOWkjeadguW6plxuLSDlpJrkvb/nlKhGYXN0QVBJ55qE6Ieq5Yqo5paH5qGj5Yqf6IO9XG5cbjcuIOaOqOiNkOWPguiAg+i1hOa6kO+8mlxuXG4tIEZhc3RBUEnlrpjmlrnmlofmoaNcbi0gU1FMTW9kZWzmlofmoaPvvIjlpoLpnIDmlbDmja7lupPmk43kvZzvvIlcbi0gUHlkYW50aWPmlofmoaPvvIjmlbDmja7pqozor4HvvIlcbi0g6aG555uu5Lit55qE56S65L6L5Luj56CBXG5cbuiusOS9j++8muS4jeimgeivleWbvuS4gOasoeaAp+aOjOaPoeaJgOacieWGheWuue+8jOaMieeFp+W+quW6j+a4kOi/m+eahOaWueW8j+WtpuS5oO+8jOS7juWfuuehgOWKn+iDveW8gOWni++8jOmAkOatpeaJqeWxleWIsOabtOWkjeadgueahOeJueaAp+OAglxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbeyJjaGFyX3N0YXJ0IjoiMCIsImNoYXJfZW5kIjoiNzQ5IiwiYmxvYl9uYW1lIjoiMWZjNGNjMTI1NWRjY2Y0MjhmYTEyZTVlMWJjY2QwMGEzYWFlNjZlZGE3ZTAyOGJjM2VhZmI5NjcwZWJiOWY0YiIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6ImRvYy9GYXN0QVBJ5a2m5Lmg5omL5YaMLm1kIn19LHsiY2hhcl9zdGFydCI6Ijc0OSIsImNoYXJfZW5kIjoiMTMyNyIsImJsb2JfbmFtZSI6IjFmYzRjYzEyNTVkY2NmNDI4ZmExMmU1ZTFiY2NkMDBhM2FhZTY2ZWRhN2UwMjhiYzNlYWZiOTY3MGViYjlmNGIiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJkb2MvRmFzdEFQSeWtpuS5oOaJi+WGjC5tZCJ9fSx7ImNoYXJfc3RhcnQiOiIxMzI3IiwiY2hhcl9lbmQiOiIxODkzIiwiYmxvYl9uYW1lIjoiMWZjNGNjMTI1NWRjY2Y0MjhmYTEyZTVlMWJjY2QwMGEzYWFlNjZlZGE3ZTAyOGJjM2VhZmI5NjcwZWJiOWY0YiIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6ImRvYy9GYXN0QVBJ5a2m5Lmg5omL5YaMLm1kIn19LHsiY2hhcl9zdGFydCI6IjM0NjgiLCJjaGFyX2VuZCI6IjQyMjIiLCJibG9iX25hbWUiOiIxZmM0Y2MxMjU1ZGNjZjQyOGZhMTJlNWUxYmNjZDAwYTNhYWU2NmVkYTdlMDI4YmMzZWFmYjk2NzBlYmI5ZjRiIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiZG9jL0Zhc3RBUEnlrabkuaDmiYvlhowubWQifX0seyJjaGFyX3N0YXJ0IjoiODc5NiIsImNoYXJfZW5kIjoiOTQwNiIsImJsb2JfbmFtZSI6IjFmYzRjYzEyNTVkY2NmNDI4ZmExMmU1ZTFiY2NkMDBhM2FhZTY2ZWRhN2UwMjhiYzNlYWZiOTY3MGViYjlmNGIiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJkb2MvRmFzdEFQSeWtpuS5oOaJi+WGjC5tZCJ9fSx7ImNoYXJfc3RhcnQiOiI5OTg2IiwiY2hhcl9lbmQiOiIxMDQ4MiIsImJsb2JfbmFtZSI6IjFmYzRjYzEyNTVkY2NmNDI4ZmExMmU1ZTFiY2NkMDBhM2FhZTY2ZWRhN2UwMjhiYzNlYWZiOTY3MGViYjlmNGIiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJkb2MvRmFzdEFQSeWtpuS5oOaJi+WGjC5tZCJ9fSx7ImNoYXJfc3RhcnQiOiIxMTExMSIsImNoYXJfZW5kIjoiMTE2MTEiLCJibG9iX25hbWUiOiIxZmM0Y2MxMjU1ZGNjZjQyOGZhMTJlNWUxYmNjZDAwYTNhYWU2NmVkYTdlMDI4YmMzZWFmYjk2NzBlYmI5ZjRiIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiZG9jL0Zhc3RBUEnlrabkuaDmiYvlhowubWQifX0seyJjaGFyX3N0YXJ0IjoiMCIsImNoYXJfZW5kIjoiNjU4IiwiYmxvYl9uYW1lIjoiOGM4ODY4NGVhNjE5NDNiN2Y3YWY1ZGNlZjNlMDNmNjZmMThkNDM1OTJiYTJkOTRiNjE0ZTFkYmFlNDk4YTA4OCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6ImRvYy9GdWxsLVN0YWNrLUZhc3RBUEktVGVtcGxhdGXlrabkuaDmiYvlhowubWQifX0seyJjaGFyX3N0YXJ0IjoiNjU4IiwiY2hhcl9lbmQiOiIxMjc2IiwiYmxvYl9uYW1lIjoiOGM4ODY4NGVhNjE5NDNiN2Y3YWY1ZGNlZjNlMDNmNjZmMThkNDM1OTJiYTJkOTRiNjE0ZTFkYmFlNDk4YTA4OCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6ImRvYy9GdWxsLVN0YWNrLUZhc3RBUEktVGVtcGxhdGXlrabkuaDmiYvlhowubWQifX0seyJjaGFyX3N0YXJ0IjoiMTI3NiIsImNoYXJfZW5kIjoiMTg1NCIsImJsb2JfbmFtZSI6IjhjODg2ODRlYTYxOTQzYjdmN2FmNWRjZWYzZTAzZjY2ZjE4ZDQzNTkyYmEyZDk0YjYxNGUxZGJhZTQ5OGEwODgiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJkb2MvRnVsbC1TdGFjay1GYXN0QVBJLVRlbXBsYXRl5a2m5Lmg5omL5YaMLm1kIn19LHsiY2hhcl9zdGFydCI6IjE4NTQiLCJjaGFyX2VuZCI6IjI0NDciLCJibG9iX25hbWUiOiI4Yzg4Njg0ZWE2MTk0M2I3ZjdhZjVkY2VmM2UwM2Y2NmYxOGQ0MzU5MmJhMmQ5NGI2MTRlMWRiYWU0OThhMDg4IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiZG9jL0Z1bGwtU3RhY2stRmFzdEFQSS1UZW1wbGF0ZeWtpuS5oOaJi+WGjC5tZCJ9fSx7ImNoYXJfc3RhcnQiOiIyNDQ3IiwiY2hhcl9lbmQiOiIzMTk4IiwiYmxvYl9uYW1lIjoiOGM4ODY4NGVhNjE5NDNiN2Y3YWY1ZGNlZjNlMDNmNjZmMThkNDM1OTJiYTJkOTRiNjE0ZTFkYmFlNDk4YTA4OCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6ImRvYy9GdWxsLVN0YWNrLUZhc3RBUEktVGVtcGxhdGXlrabkuaDmiYvlhowubWQifX0seyJjaGFyX3N0YXJ0IjoiMzE5OCIsImNoYXJfZW5kIjoiMzU3OSIsImJsb2JfbmFtZSI6IjhjODg2ODRlYTYxOTQzYjdmN2FmNWRjZWYzZTAzZjY2ZjE4ZDQzNTkyYmEyZDk0YjYxNGUxZGJhZTQ5OGEwODgiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJkb2MvRnVsbC1TdGFjay1GYXN0QVBJLVRlbXBsYXRl5a2m5Lmg5omL5YaMLm1kIn19LHsiY2hhcl9zdGFydCI6IjM1NzkiLCJjaGFyX2VuZCI6IjQyNDQiLCJibG9iX25hbWUiOiI4Yzg4Njg0ZWE2MTk0M2I3ZjdhZjVkY2VmM2UwM2Y2NmYxOGQ0MzU5MmJhMmQ5NGI2MTRlMWRiYWU0OThhMDg4IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiZG9jL0Z1bGwtU3RhY2stRmFzdEFQSS1UZW1wbGF0ZeWtpuS5oOaJi+WGjC5tZCJ9fSx7ImNoYXJfc3RhcnQiOiI0MjQ0IiwiY2hhcl9lbmQiOiI0OTIyIiwiYmxvYl9uYW1lIjoiOGM4ODY4NGVhNjE5NDNiN2Y3YWY1ZGNlZjNlMDNmNjZmMThkNDM1OTJiYTJkOTRiNjE0ZTFkYmFlNDk4YTA4OCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6ImRvYy9GdWxsLVN0YWNrLUZhc3RBUEktVGVtcGxhdGXlrabkuaDmiYvlhowubWQifX0seyJjaGFyX3N0YXJ0IjoiNTQ0MCIsImNoYXJfZW5kIjoiNjE1MyIsImJsb2JfbmFtZSI6IjhjODg2ODRlYTYxOTQzYjdmN2FmNWRjZWYzZTAzZjY2ZjE4ZDQzNTkyYmEyZDk0YjYxNGUxZGJhZTQ5OGEwODgiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJkb2MvRnVsbC1TdGFjay1GYXN0QVBJLVRlbXBsYXRl5a2m5Lmg5omL5YaMLm1kIn19LHsiY2hhcl9zdGFydCI6IjYxNTMiLCJjaGFyX2VuZCI6IjcwMzYiLCJibG9iX25hbWUiOiI4Yzg4Njg0ZWE2MTk0M2I3ZjdhZjVkY2VmM2UwM2Y2NmYxOGQ0MzU5MmJhMmQ5NGI2MTRlMWRiYWU0OThhMDg4IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiZG9jL0Z1bGwtU3RhY2stRmFzdEFQSS1UZW1wbGF0ZeWtpuS5oOaJi+WGjC5tZCJ9fSx7ImNoYXJfc3RhcnQiOiI3MDM2IiwiY2hhcl9lbmQiOiI3ODc2IiwiYmxvYl9uYW1lIjoiOGM4ODY4NGVhNjE5NDNiN2Y3YWY1ZGNlZjNlMDNmNjZmMThkNDM1OTJiYTJkOTRiNjE0ZTFkYmFlNDk4YTA4OCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6ImRvYy9GdWxsLVN0YWNrLUZhc3RBUEktVGVtcGxhdGXlrabkuaDmiYvlhowubWQifX0seyJjaGFyX3N0YXJ0IjoiNzg3NiIsImNoYXJfZW5kIjoiODY4MSIsImJsb2JfbmFtZSI6IjhjODg2ODRlYTYxOTQzYjdmN2FmNWRjZWYzZTAzZjY2ZjE4ZDQzNTkyYmEyZDk0YjYxNGUxZGJhZTQ5OGEwODgiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJkb2MvRnVsbC1TdGFjay1GYXN0QVBJLVRlbXBsYXRl5a2m5Lmg5omL5YaMLm1kIn19LHsiY2hhcl9zdGFydCI6IjEwNjU2IiwiY2hhcl9lbmQiOiIxMTMyOCIsImJsb2JfbmFtZSI6IjhjODg2ODRlYTYxOTQzYjdmN2FmNWRjZWYzZTAzZjY2ZjE4ZDQzNTkyYmEyZDk0YjYxNGUxZGJhZTQ5OGEwODgiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJkb2MvRnVsbC1TdGFjay1GYXN0QVBJLVRlbXBsYXRl5a2m5Lmg5omL5YaMLm1kIn19LHsiY2hhcl9zdGFydCI6IjExMzI4IiwiY2hhcl9lbmQiOiIxMjE2NyIsImJsb2JfbmFtZSI6IjhjODg2ODRlYTYxOTQzYjdmN2FmNWRjZWYzZTAzZjY2ZjE4ZDQzNTkyYmEyZDk0YjYxNGUxZGJhZTQ5OGEwODgiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJkb2MvRnVsbC1TdGFjay1GYXN0QVBJLVRlbXBsYXRl5a2m5Lmg5omL5YaMLm1kIn19LHsiY2hhcl9zdGFydCI6IjEyMTY3IiwiY2hhcl9lbmQiOiIxMjk1OCIsImJsb2JfbmFtZSI6IjhjODg2ODRlYTYxOTQzYjdmN2FmNWRjZWYzZTAzZjY2ZjE4ZDQzNTkyYmEyZDk0YjYxNGUxZGJhZTQ5OGEwODgiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJkb2MvRnVsbC1TdGFjay1GYXN0QVBJLVRlbXBsYXRl5a2m5Lmg5omL5YaMLm1kIn19LHsiY2hhcl9zdGFydCI6IjE0MTI1IiwiY2hhcl9lbmQiOiIxNDkzMSIsImJsb2JfbmFtZSI6IjhjODg2ODRlYTYxOTQzYjdmN2FmNWRjZWYzZTAzZjY2ZjE4ZDQzNTkyYmEyZDk0YjYxNGUxZGJhZTQ5OGEwODgiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJkb2MvRnVsbC1TdGFjay1GYXN0QVBJLVRlbXBsYXRl5a2m5Lmg5omL5YaMLm1kIn19LHsiY2hhcl9zdGFydCI6IjE2MDY1IiwiY2hhcl9lbmQiOiIxNjQ4OCIsImJsb2JfbmFtZSI6IjhjODg2ODRlYTYxOTQzYjdmN2FmNWRjZWYzZTAzZjY2ZjE4ZDQzNTkyYmEyZDk0YjYxNGUxZGJhZTQ5OGEwODgiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJkb2MvRnVsbC1TdGFjay1GYXN0QVBJLVRlbXBsYXRl5a2m5Lmg5omL5YaMLm1kIn19LHsiY2hhcl9zdGFydCI6IjIyMCIsImNoYXJfZW5kIjoiODc3IiwiYmxvYl9uYW1lIjoiZWIyNjhhMDk0NzRiNDgyMmEyZmJiZTBhZDNhMDkyZjA3OWU5OTc1M2U5ZGM0OTUyYTdmNGEwMjQ0ZWE2ODc3MyIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6ImRvYy9mYXN0QXBpIFJhZ+acuuWZqOS6ui5tZCJ9fSx7ImNoYXJfc3RhcnQiOiI4NzciLCJjaGFyX2VuZCI6IjEzNjEiLCJibG9iX25hbWUiOiJlYjI2OGEwOTQ3NGI0ODIyYTJmYmJlMGFkM2EwOTJmMDc5ZTk5NzUzZTlkYzQ5NTJhN2Y0YTAyNDRlYTY4NzczIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiZG9jL2Zhc3RBcGkgUmFn5py65Zmo5Lq6Lm1kIn19LHsiY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6IjU3NiIsImJsb2JfbmFtZSI6IjE4Yzg3NjZmYjgxZmY5NzRjMThkMDlmNTRkNWI4YTBiNDM1NjVmMzBkNjRhNTMzNWEwZGU4NGFiMTA1MmNmYWIiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJSRUFETUUubWQifX0seyJjaGFyX3N0YXJ0IjoiNTc2IiwiY2hhcl9lbmQiOiIxMzYzIiwiYmxvYl9uYW1lIjoiMThjODc2NmZiODFmZjk3NGMxOGQwOWY1NGQ1YjhhMGI0MzU2NWYzMGQ2NGE1MzM1YTBkZTg0YWIxMDUyY2ZhYiIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6IlJFQURNRS5tZCJ9fSx7ImNoYXJfc3RhcnQiOiIxMzYzIiwiY2hhcl9lbmQiOiIyMDcwIiwiYmxvYl9uYW1lIjoiMThjODc2NmZiODFmZjk3NGMxOGQwOWY1NGQ1YjhhMGI0MzU2NWYzMGQ2NGE1MzM1YTBkZTg0YWIxMDUyY2ZhYiIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6IlJFQURNRS5tZCJ9fSx7ImNoYXJfc3RhcnQiOiI3Mzc0IiwiY2hhcl9lbmQiOiI3OTEzIiwiYmxvYl9uYW1lIjoiMWYzOGZmNjljYzhkNjExOTBmNWJlM2JkYWJhM2JlOGJmMDRlZjA5ODdkYWY1Y2NjN2U0MjhmYzQ3MTg0ODNiYyIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6ImRvYy91cGRhdGVkLWFyY2hpdGVjdHVyZS1kb2N1bWVudC5tZCJ9fSx7ImNoYXJfc3RhcnQiOiIwIiwiY2hhcl9lbmQiOiI2MTIiLCJibG9iX25hbWUiOiJiMmEwZTcyMWY1NzQwMWI2MTBjNjEwOWU5MWNlNjBhOTUwOWZiYzU0NzNmMzZjYzgwYmU2NjI4YWUzYmRlNDA3IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiZGV2ZWxvcG1lbnQubWQifX0seyJjaGFyX3N0YXJ0IjoiMCIsImNoYXJfZW5kIjoiNjc5IiwiYmxvYl9uYW1lIjoiZGU0Mzc1MDE4OWFmZDU1YTI4YjMwOGIxODgyNTNmODQyOGRkOWE0ZTQwY2Q2OGM3NmNhNDVlYWI0ZTdhODA4MiIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6ImJhY2tlbmQvcHlwcm9qZWN0LnRvbWwifX1dfV0sImZlZWRiYWNrU3RhdGVzIjp7InRlbXAtZmUtOWExNDI4MmUtMDY3My00YjYxLTgxNGYtMmFlZTNjNjAxM2VjIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifX0sInRvb2xVc2VTdGF0ZXMiOnt9LCJkcmFmdEV4Y2hhbmdlIjp7InJlcXVlc3RfbWVzc2FnZSI6ImZvcm1hdHRlZF9kZXRhaWwgPSBmXCItIHtkZXRhaWxbJ21ldGFkYXRhJ11bJ2RldGFpbF90eXBlJ119OiB7ZGV0YWlsWydjb250ZW50J10uc3BsaXQoJ0NvbnRlbnQ6ICcpWzFdLnNwbGl0KCdcXG4nKVswXX1cIlxu6L+Z5q615Luj56CB5oql6ZSZ77yaU3ludGF4RXJyb3I6IGYtc3RyaW5nIGV4cHJlc3Npb24gcGFydCBjYW5ub3QgaW5jbHVkZSBhIGJhY2tzbGFzaFxyXG4iLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0IjoiZm9ybWF0dGVkX2RldGFpbCA9IGZcIi0ge2RldGFpbFsnbWV0YWRhdGEnXVsnZGV0YWlsX3R5cGUnXX06IHtkZXRhaWxbJ2NvbnRlbnQnXS5zcGxpdCgnQ29udGVudDogJylbMV0uc3BsaXQoJ1xcbicpWzBdfVwiIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiLov5nmrrXku6PnoIHmiqXplJnvvJpTeW50YXhFcnJvcjogZi1zdHJpbmcgZXhwcmVzc2lvbiBwYXJ0IGNhbm5vdCBpbmNsdWRlIGEgYmFja3NsYXNoXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0YXR1cyI6ImRyYWZ0In0sImRyYWZ0QWN0aXZlQ29udGV4dElkcyI6WyJEOi9haS9wYXJlbnRpbmctYXNzaXN0YXRuLXNlcnZlci9iYWNrZW5kL2FwcC9yYWcvY2hhdF9oaXN0b3J5LnB5OkwxNDctMTQ3IiwiRDovYWkvcGFyZW50aW5nLWFzc2lzdGF0bi1zZXJ2ZXIvYmFja2VuZC9hcHAvcmFnL2NoYXRfaGlzdG9yeS5weSIsIkQ6L2FpL3BhcmVudGluZy1hc3Npc3RhdG4tc2VydmVyZmFsc2VmYWxzZSJdLCJyZXF1ZXN0SWRzIjpbXSwiaXNQaW5uZWQiOmZhbHNlLCJpc1NoYXJlYWJsZSI6dHJ1ZSwiZXh0cmFEYXRhIjp7Imhhc0RpcnR5RWRpdHMiOmZhbHNlfSwicGVyc29uYVR5cGUiOjB9LCJhZWFlZGQ1MS00NDQ0LTQyNmItOWU1Yi02Mzk0OTY1NTFhN2IiOnsiaWQiOiJhZWFlZGQ1MS00NDQ0LTQyNmItOWU1Yi02Mzk0OTY1NTFhN2IiLCJjcmVhdGVkQXRJc28iOiIyMDI1LTA0LTE0VDE0OjQzOjMxLjUwMFoiLCJsYXN0SW50ZXJhY3RlZEF0SXNvIjoiMjAyNS0wNC0xNFQxNDo0Mzo0OS4yMTNaIiwiY2hhdEhpc3RvcnkiOlt7InJlcXVlc3RfaWQiOiJhNzJhZGU3NC0yNTllLTQ2MDUtYTcyMS1jNjU2MjNiMzgwMWUiLCJ1dWlkIjoiZGViOGRjZGItYzI0NC00MzM3LTgzYWItODVkYzNiYjZlYjgzIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjowLCJ0b1RpbWVzdGFtcCI6MTc0NDY0MTgxMTUwMSwic2Vlbl9zdGF0ZSI6InNlZW4ifSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMmE0ZDkwOTAtOGExNC00NjZhLWI5MTQtM2MwMGM2MzZkYzNiIiwicmVxdWVzdF9tZXNzYWdlIjoiZm9ybWF0dGVkX2RldGFpbCA9IGZcIi0ge2RldGFpbFsnbWV0YWRhdGEnXVsnZGV0YWlsX3R5cGUnXX06IHtkZXRhaWxbJ2NvbnRlbnQnXS5zcGxpdCgnQ29udGVudDogJylbMV0uc3BsaXQoJ1xcbicpWzBdfVwiXG7ov5nmrrXku6PnoIHmiqXplJnvvJpTeW50YXhFcnJvcjogZi1zdHJpbmcgZXhwcmVzc2lvbiBwYXJ0IGNhbm5vdCBpbmNsdWRlIGEgYmFja3NsYXNoXHJcbiIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiJmb3JtYXR0ZWRfZGV0YWlsID0gZlwiLSB7ZGV0YWlsWydtZXRhZGF0YSddWydkZXRhaWxfdHlwZSddfToge2RldGFpbFsnY29udGVudCddLnNwbGl0KCdDb250ZW50OiAnKVsxXS5zcGxpdCgnXFxuJylbMF19XCIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Iui/meauteS7o+eggeaKpemUme+8mlN5bnRheEVycm9yOiBmLXN0cmluZyBleHByZXNzaW9uIHBhcnQgY2Fubm90IGluY2x1ZGUgYSBiYWNrc2xhc2hcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9XX1dfSwibWVudGlvbmVkX2l0ZW1zIjpbXSwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMTFSM1NxMXJaWllyMlVqazdyazFtNk4iLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwiYmFja2VuZC9hcHAvcmFnL2NoYXRfaGlzdG9yeS5weVwifSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSdsbCBoZWxwIHlvdSBmaXggdGhlIFN5bnRheEVycm9yIGluIHlvdXIgZi1zdHJpbmcuIExldCdzIGZpcnN0IHVuZGVyc3RhbmQgdGhlIGlzc3VlIGFuZCB0aGVuIG1ha2UgdGhlIG5lY2Vzc2FyeSBjaGFuZ2VzLlxuXG4jIyBVbmRlcnN0YW5kaW5nIHRoZSBFcnJvclxuXG5UaGUgZXJyb3IgbWVzc2FnZSBpbmRpY2F0ZXMgdGhhdCB0aGVyZSdzIGEgcHJvYmxlbSB3aXRoIHRoZSBmLXN0cmluZyBpbiB5b3VyIGNvZGUuIEluIFB5dGhvbiwgZi1zdHJpbmdzIGNhbm5vdCBjb250YWluIGJhY2tzbGFzaGVzIHdpdGhpbiB0aGUgZXhwcmVzc2lvbiBwYXJ0cyAodGhlIHBhcnRzIGluc2lkZSB0aGUgY3VybHkgYnJhY2VzIGB7fWApLiBIb3dldmVyLCB0aGUgZXJyb3IgaXMgb2NjdXJyaW5nIGJlY2F1c2Ugb2YgaG93IHRoZSBzdHJpbmcgc3BsaXR0aW5nIGlzIGJlaW5nIGhhbmRsZWQuXG5cbkxldCdzIGZpcnN0IGV4YW1pbmUgdGhlIGZpbGUgdG8gZ2V0IG1vcmUgY29udGV4dCBhYm91dCB3aGF0IHRoaXMgY29kZSBpcyBkb2luZy5cbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50IjoiZm9ybWF0dGVkX2RldGFpbCA9IGZcIi0ge2RldGFpbFsnbWV0YWRhdGEnXVsnZGV0YWlsX3R5cGUnXX06IHtkZXRhaWxbJ2NvbnRlbnQnXS5zcGxpdCgnQ29udGVudDogJylbMV0uc3BsaXQoJ1xcbicpWzBdfVwiXG7ov5nmrrXku6PnoIHmiqXplJnvvJpTeW50YXhFcnJvcjogZi1zdHJpbmcgZXhwcmVzc2lvbiBwYXJ0IGNhbm5vdCBpbmNsdWRlIGEgYmFja3NsYXNoXHJcbiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkQ6L2FpL3BhcmVudGluZy1hc3Npc3RhdG4tc2VydmVyIiwiZm9sZGVyUm9vdCI6IkQ6L2FpL3BhcmVudGluZy1hc3Npc3RhdG4tc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwicmVzcG9uc2VfdGV4dCI6IkknbGwgaGVscCB5b3UgZml4IHRoZSBTeW50YXhFcnJvciBpbiB5b3VyIGYtc3RyaW5nLiBMZXQncyBmaXJzdCB1bmRlcnN0YW5kIHRoZSBpc3N1ZSBhbmQgdGhlbiBtYWtlIHRoZSBuZWNlc3NhcnkgY2hhbmdlcy5cblxuIyMgVW5kZXJzdGFuZGluZyB0aGUgRXJyb3JcblxuVGhlIGVycm9yIG1lc3NhZ2UgaW5kaWNhdGVzIHRoYXQgdGhlcmUncyBhIHByb2JsZW0gd2l0aCB0aGUgZi1zdHJpbmcgaW4geW91ciBjb2RlLiBJbiBQeXRob24sIGYtc3RyaW5ncyBjYW5ub3QgY29udGFpbiBiYWNrc2xhc2hlcyB3aXRoaW4gdGhlIGV4cHJlc3Npb24gcGFydHMgKHRoZSBwYXJ0cyBpbnNpZGUgdGhlIGN1cmx5IGJyYWNlcyBge31gKS4gSG93ZXZlciwgdGhlIGVycm9yIGlzIG9jY3VycmluZyBiZWNhdXNlIG9mIGhvdyB0aGUgc3RyaW5nIHNwbGl0dGluZyBpcyBiZWluZyBoYW5kbGVkLlxuXG5MZXQncyBmaXJzdCBleGFtaW5lIHRoZSBmaWxlIHRvIGdldCBtb3JlIGNvbnRleHQgYWJvdXQgd2hhdCB0aGlzIGNvZGUgaXMgZG9pbmcuXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMzQwM2I4MzEtNzkzYi00ZmVmLWE1ODgtZGQ1ZGJiMGMxMDc2IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMVdkVzV5THUzaUJoUnA3U2lUZ21keTEiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcImJhY2tlbmQvYXBwL3JhZy9jaGF0X2hpc3RvcnkucHlcIiwgXCJzdHJfcmVwbGFjZV9lbnRyaWVzXCI6IFt7XCJvbGRfc3RyXCI6IFwiICAgICAgICAgICAgICAgIGZvcm1hdHRlZF9kZXRhaWwgPSBmXFxcIi0ge2RldGFpbFsnbWV0YWRhdGEnXVsnZGV0YWlsX3R5cGUnXX06IHtkZXRhaWxbJ2NvbnRlbnQnXS5zcGxpdCgnQ29udGVudDogJylbMV0uc3BsaXQoJ1xcXFxuJylbMF19XFxcIlwiLCBcIm5ld19zdHJcIjogXCIgICAgICAgICAgICAgICAgIyBFeHRyYWN0IGNvbnRlbnQgZmlyc3QgdG8gYXZvaWQgYmFja3NsYXNoIGluIGYtc3RyaW5nXFxuICAgICAgICAgICAgICAgIGNvbnRlbnRfdGV4dCA9IGRldGFpbFsnY29udGVudCddLnNwbGl0KCdDb250ZW50OiAnKVsxXS5zcGxpdCgnXFxcXG4nKVswXVxcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRfZGV0YWlsID0gZlxcXCItIHtkZXRhaWxbJ21ldGFkYXRhJ11bJ2RldGFpbF90eXBlJ119OiB7Y29udGVudF90ZXh0fVxcXCJcIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXCI6IDE0OCwgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlclwiOiAxNDh9XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6Ik5vdyBJIHVuZGVyc3RhbmQgdGhlIGNvbnRleHQuIFRoZSBlcnJvciBpcyBpbiBsaW5lIDE0OCB3aGVyZSB5b3UncmUgdHJ5aW5nIHRvIGV4dHJhY3QgY29udGVudCBmcm9tIGEgZGV0YWlsIG9iamVjdC4gVGhlIGlzc3VlIGlzIHdpdGggdGhlIGJhY2tzbGFzaCBpbiB0aGUgZi1zdHJpbmcgZXhwcmVzc2lvbi5cblxuIyMgUGxhbiB0byBGaXggdGhlIEVycm9yXG5cbjEuIE1vZGlmeSB0aGUgZi1zdHJpbmcgdG8gYXZvaWQgdXNpbmcgYmFja3NsYXNoZXMgaW4gdGhlIGV4cHJlc3Npb24gcGFydFxuMi4gU3BsaXQgdGhlIHN0cmluZyBvcGVyYXRpb25zIGludG8gc2VwYXJhdGUgc3RlcHMgYmVmb3JlIHVzaW5nIHRoZW0gaW4gdGhlIGYtc3RyaW5nXG5cbkhlcmUncyBob3cgSSdsbCBmaXggaXQ6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGJhY2tlbmQvYXBwL3JhZy9jaGF0X2hpc3RvcnkucHk6XG4gICAgIDFcdFwiXCJcIlxuICAgICAyXHRDaGF0IGhpc3RvcnkgbWFuYWdlbWVudCB1dGlsaXRpZXMuXG4gICAgIDNcdFwiXCJcIlxuICAgICA0XHRmcm9tIHR5cGluZyBpbXBvcnQgTGlzdCwgRGljdCwgQW55LCBPcHRpb25hbFxuICAgICA1XHRpbXBvcnQgdXVpZFxuICAgICA2XHRcbiAgICAgN1x0ZnJvbSBzcWxtb2RlbCBpbXBvcnQgU2Vzc2lvbiwgc2VsZWN0XG4gICAgIDhcdFxuICAgICA5XHRmcm9tIGFwcC5tb2RlbHMgaW1wb3J0IENoYXRIaXN0b3J5LCBDaGF0SGlzdG9yeUNyZWF0ZSwgVXNlciwgQ2hpbGRcbiAgICAxMFx0ZnJvbSBhcHAucmFnLmNoaWxkX2RldGFpbHMgaW1wb3J0IGdldF9jaGlsZF9kZXRhaWxzX2Zvcl9yYWdcbiAgICAxMVx0XG4gICAgMTJcdFxuICAgIDEzXHRkZWYgc2F2ZV9jaGF0X2ludGVyYWN0aW9uKFxuICAgIDE0XHQgICAgZGI6IFNlc3Npb24sXG4gICAgMTVcdCAgICB1c2VyX2lkOiB1dWlkLlVVSUQsXG4gICAgMTZcdCAgICBzZXNzaW9uX2lkOiBzdHIsXG4gICAgMTdcdCAgICB1c2VyX3F1ZXJ5OiBzdHIsXG4gICAgMThcdCAgICBhaV9yZXNwb25zZTogc3RyLFxuICAgIDE5XHQgICAgbW9kZWw6IHN0cixcbiAgICAyMFx0ICAgIGNoaWxkX2lkOiBPcHRpb25hbFt1dWlkLlVVSURdID0gTm9uZSxcbiAgICAyMVx0ICAgIHNvdXJjZXM6IE9wdGlvbmFsW0xpc3RbRGljdFtzdHIsIEFueV1dXSA9IE5vbmVcbiAgICAyMlx0KSAtPiBDaGF0SGlzdG9yeTpcbiAgICAyM1x0ICAgIFwiXCJcIlxuICAgIDI0XHQgICAgU2F2ZSBhIGNoYXQgaW50ZXJhY3Rpb24gdG8gdGhlIGRhdGFiYXNlLlxuICAgIDI1XHRcbiAgICAyNlx0ICAgIEFyZ3M6XG4gICAgMjdcdCAgICAgICAgZGI6IERhdGFiYXNlIHNlc3Npb25cbiAgICAyOFx0ICAgICAgICB1c2VyX2lkOiBVc2VyIElEXG4gICAgMjlcdCAgICAgICAgc2Vzc2lvbl9pZDogU2Vzc2lvbiBJRFxuICAgIDMwXHQgICAgICAgIHVzZXJfcXVlcnk6IFVzZXIncyBxdWVzdGlvblxuICAgIDMxXHQgICAgICAgIGFpX3Jlc3BvbnNlOiBBSSdzIHJlc3BvbnNlXG4gICAgMzJcdCAgICAgICAgbW9kZWw6IE1vZGVsIG5hbWVcbiAgICAzM1x0ICAgICAgICBjaGlsZF9pZDogT3B0aW9uYWwgY2hpbGQgSURcbiAgICAzNFx0ICAgICAgICBzb3VyY2VzOiBPcHRpb25hbCBsaXN0IG9mIHNvdXJjZSBkb2N1bWVudHNcbiAgICAzNVx0XG4gICAgMzZcdCAgICBSZXR1cm5zOlxuICAgIDM3XHQgICAgICAgIENoYXRIaXN0b3J5IGluc3RhbmNlXG4gICAgMzhcdCAgICBcIlwiXCJcbiAgICAzOVx0ICAgICMgQ3JlYXRlIGNoYXQgaGlzdG9yeSByZWNvcmRcbiAgICA0MFx0ICAgIGNoYXRfaGlzdG9yeV9kYXRhID0gQ2hhdEhpc3RvcnlDcmVhdGUoXG4gICAgNDFcdCAgICAgICAgdXNlcl9pZD11c2VyX2lkLFxuICAgIDQyXHQgICAgICAgIGNoaWxkX2lkPWNoaWxkX2lkLFxuICAgIDQzXHQgICAgICAgIHNlc3Npb25faWQ9c2Vzc2lvbl9pZCxcbiAgICA0NFx0ICAgICAgICB1c2VyX3F1ZXJ5PXVzZXJfcXVlcnksXG4gICAgNDVcdCAgICAgICAgYWlfcmVzcG9uc2U9YWlfcmVzcG9uc2UsXG4gICAgNDZcdCAgICAgICAgbW9kZWw9bW9kZWxcbiAgICA0N1x0ICAgIClcbiAgICA0OFx0XG4gICAgNDlcdCAgICAjIENvbnZlcnQgc291cmNlcyB0byBsaXN0IG9mIHN0cmluZ3MgKGRvY3VtZW50IElEcylcbiAgICA1MFx0ICAgIHNvdXJjZV9pZHMgPSBbXVxuICAgIDUxXHQgICAgaWYgc291cmNlczpcbiAgICA1Mlx0ICAgICAgICBmb3Igc291cmNlIGluIHNvdXJjZXM6XG4gICAgNTNcdCAgICAgICAgICAgIGlmICdkb2N1bWVudF9pZCcgaW4gc291cmNlOlxuICAgIDU0XHQgICAgICAgICAgICAgICAgc291cmNlX2lkcy5hcHBlbmQoc291cmNlWydkb2N1bWVudF9pZCddKVxuICAgIDU1XHRcbiAgICA1Nlx0ICAgICMgQ3JlYXRlIGNoYXQgaGlzdG9yeSBpbnN0YW5jZVxuICAgIDU3XHQgICAgY2hhdF9oaXN0b3J5ID0gQ2hhdEhpc3RvcnkoXG4gICAgNThcdCAgICAgICAgKipjaGF0X2hpc3RvcnlfZGF0YS5tb2RlbF9kdW1wKCksXG4gICAgNTlcdCAgICAgICAgc291cmNlcz1zb3VyY2VfaWRzIGlmIHNvdXJjZV9pZHMgZWxzZSBOb25lXG4gICAgNjBcdCAgICApXG4gICAgNjFcdFxuICAgIDYyXHQgICAgIyBBZGQgdG8gZGF0YWJhc2VcbiAgICA2M1x0ICAgIGRiLmFkZChjaGF0X2hpc3RvcnkpXG4gICAgNjRcdCAgICBkYi5jb21taXQoKVxuICAgIDY1XHQgICAgZGIucmVmcmVzaChjaGF0X2hpc3RvcnkpXG4gICAgNjZcdFxuICAgIDY3XHQgICAgcmV0dXJuIGNoYXRfaGlzdG9yeVxuICAgIDY4XHRcbiAgICA2OVx0XG4gICAgNzBcdGRlZiBnZXRfY2hhdF9oaXN0b3J5KFxuICAgIDcxXHQgICAgZGI6IFNlc3Npb24sXG4gICAgNzJcdCAgICBzZXNzaW9uX2lkOiBzdHIsXG4gICAgNzNcdCAgICBsaW1pdDogaW50ID0gMTBcbiAgICA3NFx0KSAtPiBMaXN0W0RpY3Rbc3RyLCBzdHJdXTpcbiAgICA3NVx0ICAgIFwiXCJcIlxuICAgIDc2XHQgICAgR2V0IGNoYXQgaGlzdG9yeSBmb3IgYSBzZXNzaW9uLlxuICAgIDc3XHRcbiAgICA3OFx0ICAgIEFyZ3M6XG4gICAgNzlcdCAgICAgICAgZGI6IERhdGFiYXNlIHNlc3Npb25cbiAgICA4MFx0ICAgICAgICBzZXNzaW9uX2lkOiBTZXNzaW9uIElEXG4gICAgODFcdCAgICAgICAgbGltaXQ6IE1heGltdW0gbnVtYmVyIG9mIG1lc3NhZ2VzIHRvIHJldHVyblxuICAgIDgyXHRcbiAgICA4M1x0ICAgIFJldHVybnM6XG4gICAgODRcdCAgICAgICAgTGlzdCBvZiBtZXNzYWdlcyBpbiB0aGUgZm9ybWF0IGV4cGVjdGVkIGJ5IExhbmdDaGFpblxuICAgIDg1XHQgICAgXCJcIlwiXG4gICAgODZcdCAgICAjIFF1ZXJ5IGNoYXQgaGlzdG9yeVxuICAgIDg3XHQgICAgc3RhdGVtZW50ID0gKFxuICAgIDg4XHQgICAgICAgIHNlbGVjdChDaGF0SGlzdG9yeSlcbiAgICA4OVx0ICAgICAgICAud2hlcmUoQ2hhdEhpc3Rvcnkuc2Vzc2lvbl9pZCA9PSBzZXNzaW9uX2lkKVxuICAgIDkwXHQgICAgICAgIC5vcmRlcl9ieShDaGF0SGlzdG9yeS5jcmVhdGVkX2F0LmRlc2MoKSlcbiAgICA5MVx0ICAgICAgICAubGltaXQobGltaXQpXG4gICAgOTJcdCAgICApXG4gICAgOTNcdFxuICAgIDk0XHQgICAgY2hhdF9oaXN0b3JpZXMgPSBkYi5leGVjKHN0YXRlbWVudCkuYWxsKClcbiAgICA5NVx0XG4gICAgOTZcdCAgICAjIEZvcm1hdCBmb3IgTGFuZ0NoYWluXG4gICAgOTdcdCAgICBtZXNzYWdlcyA9IFtdXG4gICAgOThcdCAgICBmb3IgY2hhdCBpbiByZXZlcnNlZChjaGF0X2hpc3Rvcmllcyk6ICAjIFJldmVyc2UgdG8gZ2V0IGNocm9ub2xvZ2ljYWwgb3JkZXJcbiAgICA5OVx0ICAgICAgICBtZXNzYWdlcy5leHRlbmQoW1xuICAgMTAwXHQgICAgICAgICAgICB7XCJyb2xlXCI6IFwiaHVtYW5cIiwgXCJjb250ZW50XCI6IGNoYXQudXNlcl9xdWVyeX0sXG4gICAxMDFcdCAgICAgICAgICAgIHtcInJvbGVcIjogXCJhaVwiLCBcImNvbnRlbnRcIjogY2hhdC5haV9yZXNwb25zZX1cbiAgIDEwMlx0ICAgICAgICBdKVxuICAgMTAzXHRcbiAgIDEwNFx0ICAgIHJldHVybiBtZXNzYWdlc1xuICAgMTA1XHRcbiAgIDEwNlx0XG4gICAxMDdcdGRlZiBnZXRfY2hpbGRfaW5mbyhkYjogU2Vzc2lvbiwgY2hpbGRfaWQ6IHV1aWQuVVVJRCwgcXVlcnk6IE9wdGlvbmFsW3N0cl0gPSBOb25lKSAtPiBPcHRpb25hbFtEaWN0W3N0ciwgQW55XV06XG4gICAxMDhcdCAgICBcIlwiXCJcbiAgIDEwOVx0ICAgIEdldCBjaGlsZCBpbmZvcm1hdGlvbiB3aXRoIG9wdGlvbmFsIHJlbGV2YW50IGRldGFpbHMgYmFzZWQgb24gcXVlcnkuXG4gICAxMTBcdFxuICAgMTExXHQgICAgQXJnczpcbiAgIDExMlx0ICAgICAgICBkYjogRGF0YWJhc2Ugc2Vzc2lvblxuICAgMTEzXHQgICAgICAgIGNoaWxkX2lkOiBDaGlsZCBJRFxuICAgMTE0XHQgICAgICAgIHF1ZXJ5OiBPcHRpb25hbCBxdWVyeSB0byBmaW5kIHJlbGV2YW50IGNoaWxkIGRldGFpbHNcbiAgIDExNVx0XG4gICAxMTZcdCAgICBSZXR1cm5zOlxuICAgMTE3XHQgICAgICAgIERpY3Rpb25hcnkgd2l0aCBjaGlsZCBpbmZvcm1hdGlvbiBvciBOb25lIGlmIG5vdCBmb3VuZFxuICAgMTE4XHQgICAgXCJcIlwiXG4gICAxMTlcdCAgICAjIFF1ZXJ5IGNoaWxkXG4gICAxMjBcdCAgICBjaGlsZCA9IGRiLmdldChDaGlsZCwgY2hpbGRfaWQpXG4gICAxMjFcdCAgICBpZiBub3QgY2hpbGQ6XG4gICAxMjJcdCAgICAgICAgcmV0dXJuIE5vbmVcbiAgIDEyM1x0XG4gICAxMjRcdCAgICAjIENhbGN1bGF0ZSBhZ2VcbiAgIDEyNVx0ICAgIGZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lXG4gICAxMjZcdCAgICB0b2RheSA9IGRhdGV0aW1lLm5vdygpLmRhdGUoKVxuICAgMTI3XHQgICAgYWdlX2RheXMgPSAodG9kYXkgLSBjaGlsZC5iaXJ0aGRheSkuZGF5c1xuICAgMTI4XHQgICAgYWdlX21vbnRocyA9IGFnZV9kYXlzIC8vIDMwXG4gICAxMjlcdCAgICBhZ2VfeWVhcnMgPSBhZ2VfZGF5cyAvLyAzNjVcbiAgIDEzMFx0XG4gICAxMzFcdCAgICAjIEZvcm1hdCBjaGlsZCBpbmZvXG4gICAxMzJcdCAgICBjaGlsZF9pbmZvID0ge1xuICAgMTMzXHQgICAgICAgIFwibmFtZVwiOiBjaGlsZC5uYW1lLFxuICAgMTM0XHQgICAgICAgIFwiZ2VuZGVyXCI6IGNoaWxkLmdlbmRlcixcbiAgIDEzNVx0ICAgICAgICBcImJpcnRoZGF5XCI6IGNoaWxkLmJpcnRoZGF5Lmlzb2Zvcm1hdCgpLFxuICAgMTM2XHQgICAgICAgIFwiYWdlX2RheXNcIjogYWdlX2RheXMsXG4gICAxMzdcdCAgICAgICAgXCJhZ2VfbW9udGhzXCI6IGFnZV9tb250aHMsXG4gICAxMzhcdCAgICAgICAgXCJhZ2VfeWVhcnNcIjogYWdlX3llYXJzXG4gICAxMzlcdCAgICB9XG4gICAxNDBcdFxuICAgMTQxXHQgICAgIyBBZGQgcmVsZXZhbnQgY2hpbGQgZGV0YWlscyBpZiBxdWVyeSBpcyBwcm92aWRlZFxuICAgMTQyXHQgICAgaWYgcXVlcnk6XG4gICAxNDNcdCAgICAgICAgcmVsZXZhbnRfZGV0YWlscyA9IGdldF9jaGlsZF9kZXRhaWxzX2Zvcl9yYWcoZGIsIGNoaWxkX2lkLCBxdWVyeSlcbiAgIDE0NFx0ICAgICAgICBpZiByZWxldmFudF9kZXRhaWxzOlxuICAgMTQ1XHQgICAgICAgICAgICAjIEZvcm1hdCBkZXRhaWxzIGZvciBiZXR0ZXIgcmVhZGFiaWxpdHkgaW4gdGhlIHByb21wdFxuICAgMTQ2XHQgICAgICAgICAgICBmb3JtYXR0ZWRfZGV0YWlscyA9IFtdXG4gICAxNDdcdCAgICAgICAgICAgIGZvciBkZXRhaWwgaW4gcmVsZXZhbnRfZGV0YWlsczpcbiAgIDE0OFx0ICAgICAgICAgICAgICAgIGZvcm1hdHRlZF9kZXRhaWwgPSBmXCItIHtkZXRhaWxbJ21ldGFkYXRhJ11bJ2RldGFpbF90eXBlJ119OiB7ZGV0YWlsWydjb250ZW50J10uc3BsaXQoJ0NvbnRlbnQ6ICcpWzFdLnNwbGl0KCdcXG4nKVswXX1cIlxuICAgMTQ5XHQgICAgICAgICAgICAgICAgZm9ybWF0dGVkX2RldGFpbHMuYXBwZW5kKGZvcm1hdHRlZF9kZXRhaWwpXG4gICAxNTBcdFxuICAgMTUxXHQgICAgICAgICAgICBjaGlsZF9pbmZvW1wicmVsZXZhbnRfZGV0YWlsc1wiXSA9IGZvcm1hdHRlZF9kZXRhaWxzXG4gICAxNTJcdFxuICAgMTUzXHQgICAgcmV0dXJuIGNoaWxkX2luZm9cbiAgIDE1NFx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAxNTRcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDExUjNTcTFyWlpZcjJVams3cmsxbTZOIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRDovYWkvcGFyZW50aW5nLWFzc2lzdGF0bi1zZXJ2ZXIiLCJmb2xkZXJSb290IjoiRDovYWkvcGFyZW50aW5nLWFzc2lzdGF0bi1zZXJ2ZXIifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJyZXNwb25zZV90ZXh0IjoiTm93IEkgdW5kZXJzdGFuZCB0aGUgY29udGV4dC4gVGhlIGVycm9yIGlzIGluIGxpbmUgMTQ4IHdoZXJlIHlvdSdyZSB0cnlpbmcgdG8gZXh0cmFjdCBjb250ZW50IGZyb20gYSBkZXRhaWwgb2JqZWN0LiBUaGUgaXNzdWUgaXMgd2l0aCB0aGUgYmFja3NsYXNoIGluIHRoZSBmLXN0cmluZyBleHByZXNzaW9uLlxuXG4jIyBQbGFuIHRvIEZpeCB0aGUgRXJyb3JcblxuMS4gTW9kaWZ5IHRoZSBmLXN0cmluZyB0byBhdm9pZCB1c2luZyBiYWNrc2xhc2hlcyBpbiB0aGUgZXhwcmVzc2lvbiBwYXJ0XG4yLiBTcGxpdCB0aGUgc3RyaW5nIG9wZXJhdGlvbnMgaW50byBzZXBhcmF0ZSBzdGVwcyBiZWZvcmUgdXNpbmcgdGhlbSBpbiB0aGUgZi1zdHJpbmdcblxuSGVyZSdzIGhvdyBJJ2xsIGZpeCBpdDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI1NGFjYmVlZi03NTRlLTQzMTEtODk2Yi01MTlkZWFiN2Y0NTUiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJJJ3ZlIGZpeGVkIHRoZSBpc3N1ZSBieSBicmVha2luZyBkb3duIHRoZSBzdHJpbmcgb3BlcmF0aW9ucyBpbnRvIHNlcGFyYXRlIHN0ZXBzOlxuXG4xLiBGaXJzdCwgSSBleHRyYWN0IHRoZSBjb250ZW50IHRleHQgaW50byBhIHNlcGFyYXRlIHZhcmlhYmxlIChgY29udGVudF90ZXh0YClcbjIuIFRoZW4gSSB1c2UgdGhpcyB2YXJpYWJsZSBpbiB0aGUgZi1zdHJpbmcsIHdoaWNoIGF2b2lkcyBoYXZpbmcgYmFja3NsYXNoZXMgaW4gdGhlIGV4cHJlc3Npb24gcGFydFxuXG5UaGlzIGFwcHJvYWNoIHNvbHZlcyB0aGUgU3ludGF4RXJyb3IgYmVjYXVzZTpcbjEuIFRoZSBiYWNrc2xhc2ggKGBcXG5gKSBpcyBub3cgaW4gYSByZWd1bGFyIHN0cmluZyBvcGVyYXRpb24sIG5vdCBpbnNpZGUgdGhlIGYtc3RyaW5nIGV4cHJlc3Npb25cbjIuIFRoZSBmLXN0cmluZyBub3cgb25seSByZWZlcmVuY2VzIGEgc2ltcGxlIHZhcmlhYmxlLCBub3QgYSBjb21wbGV4IGV4cHJlc3Npb24gd2l0aCBiYWNrc2xhc2hlc1xuXG5UaGUgY29kZSBzaG91bGQgbm93IHdvcmsgY29ycmVjdGx5IHdpdGhvdXQgdGhlIFN5bnRheEVycm9yLiBUaGUgZnVuY3Rpb25hbGl0eSByZW1haW5zIHRoZSBzYW1lIC0gaXQgc3RpbGwgZXh0cmFjdHMgdGhlIGNvbnRlbnQgZnJvbSB0aGUgZGV0YWlsIG9iamVjdCBieSBzcGxpdHRpbmcgb24gJ0NvbnRlbnQ6ICcgYW5kIHRoZW4gdGFraW5nIHRoZSBmaXJzdCBsaW5lLlxuXG5Xb3VsZCB5b3UgbGlrZSBtZSB0byBleHBsYWluIG1vcmUgYWJvdXQgd2h5IHRoaXMgZXJyb3Igb2NjdXJzIGluIFB5dGhvbiBmLXN0cmluZ3MsIG9yIGRvIHlvdSBuZWVkIGFueSBvdGhlciBjaGFuZ2VzIHRvIHRoaXMgY29kZT9cbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgYmFja2VuZC9hcHAvcmFnL2NoYXRfaGlzdG9yeS5weS5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgMTQ0XHQgICAgICAgIGlmIHJlbGV2YW50X2RldGFpbHM6XG4gICAxNDVcdCAgICAgICAgICAgICMgRm9ybWF0IGRldGFpbHMgZm9yIGJldHRlciByZWFkYWJpbGl0eSBpbiB0aGUgcHJvbXB0XG4gICAxNDZcdCAgICAgICAgICAgIGZvcm1hdHRlZF9kZXRhaWxzID0gW11cbiAgIDE0N1x0ICAgICAgICAgICAgZm9yIGRldGFpbCBpbiByZWxldmFudF9kZXRhaWxzOlxuICAgMTQ4XHQgICAgICAgICAgICAgICAgIyBFeHRyYWN0IGNvbnRlbnQgZmlyc3QgdG8gYXZvaWQgYmFja3NsYXNoIGluIGYtc3RyaW5nXG4gICAxNDlcdCAgICAgICAgICAgICAgICBjb250ZW50X3RleHQgPSBkZXRhaWxbJ2NvbnRlbnQnXS5zcGxpdCgnQ29udGVudDogJylbMV0uc3BsaXQoJ1xcbicpWzBdXG4gICAxNTBcdCAgICAgICAgICAgICAgICBmb3JtYXR0ZWRfZGV0YWlsID0gZlwiLSB7ZGV0YWlsWydtZXRhZGF0YSddWydkZXRhaWxfdHlwZSddfToge2NvbnRlbnRfdGV4dH1cIlxuICAgMTUxXHQgICAgICAgICAgICAgICAgZm9ybWF0dGVkX2RldGFpbHMuYXBwZW5kKGZvcm1hdHRlZF9kZXRhaWwpXG4gICAxNTJcdFxuICAgMTUzXHQgICAgICAgICAgICBjaGlsZF9pbmZvW1wicmVsZXZhbnRfZGV0YWlsc1wiXSA9IGZvcm1hdHRlZF9kZXRhaWxzXG4gICAxNTRcdFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxV2RXNXlMdTNpQmhScDdTaVRnbWR5MSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkQ6L2FpL3BhcmVudGluZy1hc3Npc3RhdG4tc2VydmVyIiwiZm9sZGVyUm9vdCI6IkQ6L2FpL3BhcmVudGluZy1hc3Npc3RhdG4tc2VydmVyIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwicmVzcG9uc2VfdGV4dCI6IkkndmUgZml4ZWQgdGhlIGlzc3VlIGJ5IGJyZWFraW5nIGRvd24gdGhlIHN0cmluZyBvcGVyYXRpb25zIGludG8gc2VwYXJhdGUgc3RlcHM6XG5cbjEuIEZpcnN0LCBJIGV4dHJhY3QgdGhlIGNvbnRlbnQgdGV4dCBpbnRvIGEgc2VwYXJhdGUgdmFyaWFibGUgKGBjb250ZW50X3RleHRgKVxuMi4gVGhlbiBJIHVzZSB0aGlzIHZhcmlhYmxlIGluIHRoZSBmLXN0cmluZywgd2hpY2ggYXZvaWRzIGhhdmluZyBiYWNrc2xhc2hlcyBpbiB0aGUgZXhwcmVzc2lvbiBwYXJ0XG5cblRoaXMgYXBwcm9hY2ggc29sdmVzIHRoZSBTeW50YXhFcnJvciBiZWNhdXNlOlxuMS4gVGhlIGJhY2tzbGFzaCAoYFxcbmApIGlzIG5vdyBpbiBhIHJlZ3VsYXIgc3RyaW5nIG9wZXJhdGlvbiwgbm90IGluc2lkZSB0aGUgZi1zdHJpbmcgZXhwcmVzc2lvblxuMi4gVGhlIGYtc3RyaW5nIG5vdyBvbmx5IHJlZmVyZW5jZXMgYSBzaW1wbGUgdmFyaWFibGUsIG5vdCBhIGNvbXBsZXggZXhwcmVzc2lvbiB3aXRoIGJhY2tzbGFzaGVzXG5cblRoZSBjb2RlIHNob3VsZCBub3cgd29yayBjb3JyZWN0bHkgd2l0aG91dCB0aGUgU3ludGF4RXJyb3IuIFRoZSBmdW5jdGlvbmFsaXR5IHJlbWFpbnMgdGhlIHNhbWUgLSBpdCBzdGlsbCBleHRyYWN0cyB0aGUgY29udGVudCBmcm9tIHRoZSBkZXRhaWwgb2JqZWN0IGJ5IHNwbGl0dGluZyBvbiAnQ29udGVudDogJyBhbmQgdGhlbiB0YWtpbmcgdGhlIGZpcnN0IGxpbmUuXG5cbldvdWxkIHlvdSBsaWtlIG1lIHRvIGV4cGxhaW4gbW9yZSBhYm91dCB3aHkgdGhpcyBlcnJvciBvY2N1cnMgaW4gUHl0aG9uIGYtc3RyaW5ncywgb3IgZG8geW91IG5lZWQgYW55IG90aGVyIGNoYW5nZXMgdG8gdGhpcyBjb2RlP1xuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX1dLCJmZWVkYmFja1N0YXRlcyI6eyJ0ZW1wLWZlLWQxMWUyMWZhLTBkMDEtNDg4Zi1iOTQ5LTU1MmM4OTgyYmE5YiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNzY3MmM2NjktMTMyMC00NTgyLTg5YjQtZGI2ZTI2NjYzYjk3Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS00YWY4YzE1MS1hMDdhLTRhZWEtOTU0ZC1jMWRlYWM0ZjNlZGMiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9fSwidG9vbFVzZVN0YXRlcyI6eyIyYTRkOTA5MC04YTE0LTQ2NmEtYjkxNC0zYzAwYzYzNmRjM2I7dG9vbHVfMDExUjNTcTFyWlpZcjJVams3cmsxbTZOIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gYmFja2VuZC9hcHAvcmFnL2NoYXRfaGlzdG9yeS5weTpcbiAgICAgMVx0XCJcIlwiXG4gICAgIDJcdENoYXQgaGlzdG9yeSBtYW5hZ2VtZW50IHV0aWxpdGllcy5cbiAgICAgM1x0XCJcIlwiXG4gICAgIDRcdGZyb20gdHlwaW5nIGltcG9ydCBMaXN0LCBEaWN0LCBBbnksIE9wdGlvbmFsXG4gICAgIDVcdGltcG9ydCB1dWlkXG4gICAgIDZcdFxuICAgICA3XHRmcm9tIHNxbG1vZGVsIGltcG9ydCBTZXNzaW9uLCBzZWxlY3RcbiAgICAgOFx0XG4gICAgIDlcdGZyb20gYXBwLm1vZGVscyBpbXBvcnQgQ2hhdEhpc3RvcnksIENoYXRIaXN0b3J5Q3JlYXRlLCBVc2VyLCBDaGlsZFxuICAgIDEwXHRmcm9tIGFwcC5yYWcuY2hpbGRfZGV0YWlscyBpbXBvcnQgZ2V0X2NoaWxkX2RldGFpbHNfZm9yX3JhZ1xuICAgIDExXHRcbiAgICAxMlx0XG4gICAgMTNcdGRlZiBzYXZlX2NoYXRfaW50ZXJhY3Rpb24oXG4gICAgMTRcdCAgICBkYjogU2Vzc2lvbixcbiAgICAxNVx0ICAgIHVzZXJfaWQ6IHV1aWQuVVVJRCxcbiAgICAxNlx0ICAgIHNlc3Npb25faWQ6IHN0cixcbiAgICAxN1x0ICAgIHVzZXJfcXVlcnk6IHN0cixcbiAgICAxOFx0ICAgIGFpX3Jlc3BvbnNlOiBzdHIsXG4gICAgMTlcdCAgICBtb2RlbDogc3RyLFxuICAgIDIwXHQgICAgY2hpbGRfaWQ6IE9wdGlvbmFsW3V1aWQuVVVJRF0gPSBOb25lLFxuICAgIDIxXHQgICAgc291cmNlczogT3B0aW9uYWxbTGlzdFtEaWN0W3N0ciwgQW55XV1dID0gTm9uZVxuICAgIDIyXHQpIC0+IENoYXRIaXN0b3J5OlxuICAgIDIzXHQgICAgXCJcIlwiXG4gICAgMjRcdCAgICBTYXZlIGEgY2hhdCBpbnRlcmFjdGlvbiB0byB0aGUgZGF0YWJhc2UuXG4gICAgMjVcdFxuICAgIDI2XHQgICAgQXJnczpcbiAgICAyN1x0ICAgICAgICBkYjogRGF0YWJhc2Ugc2Vzc2lvblxuICAgIDI4XHQgICAgICAgIHVzZXJfaWQ6IFVzZXIgSURcbiAgICAyOVx0ICAgICAgICBzZXNzaW9uX2lkOiBTZXNzaW9uIElEXG4gICAgMzBcdCAgICAgICAgdXNlcl9xdWVyeTogVXNlcidzIHF1ZXN0aW9uXG4gICAgMzFcdCAgICAgICAgYWlfcmVzcG9uc2U6IEFJJ3MgcmVzcG9uc2VcbiAgICAzMlx0ICAgICAgICBtb2RlbDogTW9kZWwgbmFtZVxuICAgIDMzXHQgICAgICAgIGNoaWxkX2lkOiBPcHRpb25hbCBjaGlsZCBJRFxuICAgIDM0XHQgICAgICAgIHNvdXJjZXM6IE9wdGlvbmFsIGxpc3Qgb2Ygc291cmNlIGRvY3VtZW50c1xuICAgIDM1XHRcbiAgICAzNlx0ICAgIFJldHVybnM6XG4gICAgMzdcdCAgICAgICAgQ2hhdEhpc3RvcnkgaW5zdGFuY2VcbiAgICAzOFx0ICAgIFwiXCJcIlxuICAgIDM5XHQgICAgIyBDcmVhdGUgY2hhdCBoaXN0b3J5IHJlY29yZFxuICAgIDQwXHQgICAgY2hhdF9oaXN0b3J5X2RhdGEgPSBDaGF0SGlzdG9yeUNyZWF0ZShcbiAgICA0MVx0ICAgICAgICB1c2VyX2lkPXVzZXJfaWQsXG4gICAgNDJcdCAgICAgICAgY2hpbGRfaWQ9Y2hpbGRfaWQsXG4gICAgNDNcdCAgICAgICAgc2Vzc2lvbl9pZD1zZXNzaW9uX2lkLFxuICAgIDQ0XHQgICAgICAgIHVzZXJfcXVlcnk9dXNlcl9xdWVyeSxcbiAgICA0NVx0ICAgICAgICBhaV9yZXNwb25zZT1haV9yZXNwb25zZSxcbiAgICA0Nlx0ICAgICAgICBtb2RlbD1tb2RlbFxuICAgIDQ3XHQgICAgKVxuICAgIDQ4XHRcbiAgICA0OVx0ICAgICMgQ29udmVydCBzb3VyY2VzIHRvIGxpc3Qgb2Ygc3RyaW5ncyAoZG9jdW1lbnQgSURzKVxuICAgIDUwXHQgICAgc291cmNlX2lkcyA9IFtdXG4gICAgNTFcdCAgICBpZiBzb3VyY2VzOlxuICAgIDUyXHQgICAgICAgIGZvciBzb3VyY2UgaW4gc291cmNlczpcbiAgICA1M1x0ICAgICAgICAgICAgaWYgJ2RvY3VtZW50X2lkJyBpbiBzb3VyY2U6XG4gICAgNTRcdCAgICAgICAgICAgICAgICBzb3VyY2VfaWRzLmFwcGVuZChzb3VyY2VbJ2RvY3VtZW50X2lkJ10pXG4gICAgNTVcdFxuICAgIDU2XHQgICAgIyBDcmVhdGUgY2hhdCBoaXN0b3J5IGluc3RhbmNlXG4gICAgNTdcdCAgICBjaGF0X2hpc3RvcnkgPSBDaGF0SGlzdG9yeShcbiAgICA1OFx0ICAgICAgICAqKmNoYXRfaGlzdG9yeV9kYXRhLm1vZGVsX2R1bXAoKSxcbiAgICA1OVx0ICAgICAgICBzb3VyY2VzPXNvdXJjZV9pZHMgaWYgc291cmNlX2lkcyBlbHNlIE5vbmVcbiAgICA2MFx0ICAgIClcbiAgICA2MVx0XG4gICAgNjJcdCAgICAjIEFkZCB0byBkYXRhYmFzZVxuICAgIDYzXHQgICAgZGIuYWRkKGNoYXRfaGlzdG9yeSlcbiAgICA2NFx0ICAgIGRiLmNvbW1pdCgpXG4gICAgNjVcdCAgICBkYi5yZWZyZXNoKGNoYXRfaGlzdG9yeSlcbiAgICA2Nlx0XG4gICAgNjdcdCAgICByZXR1cm4gY2hhdF9oaXN0b3J5XG4gICAgNjhcdFxuICAgIDY5XHRcbiAgICA3MFx0ZGVmIGdldF9jaGF0X2hpc3RvcnkoXG4gICAgNzFcdCAgICBkYjogU2Vzc2lvbixcbiAgICA3Mlx0ICAgIHNlc3Npb25faWQ6IHN0cixcbiAgICA3M1x0ICAgIGxpbWl0OiBpbnQgPSAxMFxuICAgIDc0XHQpIC0+IExpc3RbRGljdFtzdHIsIHN0cl1dOlxuICAgIDc1XHQgICAgXCJcIlwiXG4gICAgNzZcdCAgICBHZXQgY2hhdCBoaXN0b3J5IGZvciBhIHNlc3Npb24uXG4gICAgNzdcdFxuICAgIDc4XHQgICAgQXJnczpcbiAgICA3OVx0ICAgICAgICBkYjogRGF0YWJhc2Ugc2Vzc2lvblxuICAgIDgwXHQgICAgICAgIHNlc3Npb25faWQ6IFNlc3Npb24gSURcbiAgICA4MVx0ICAgICAgICBsaW1pdDogTWF4aW11bSBudW1iZXIgb2YgbWVzc2FnZXMgdG8gcmV0dXJuXG4gICAgODJcdFxuICAgIDgzXHQgICAgUmV0dXJuczpcbiAgICA4NFx0ICAgICAgICBMaXN0IG9mIG1lc3NhZ2VzIGluIHRoZSBmb3JtYXQgZXhwZWN0ZWQgYnkgTGFuZ0NoYWluXG4gICAgODVcdCAgICBcIlwiXCJcbiAgICA4Nlx0ICAgICMgUXVlcnkgY2hhdCBoaXN0b3J5XG4gICAgODdcdCAgICBzdGF0ZW1lbnQgPSAoXG4gICAgODhcdCAgICAgICAgc2VsZWN0KENoYXRIaXN0b3J5KVxuICAgIDg5XHQgICAgICAgIC53aGVyZShDaGF0SGlzdG9yeS5zZXNzaW9uX2lkID09IHNlc3Npb25faWQpXG4gICAgOTBcdCAgICAgICAgLm9yZGVyX2J5KENoYXRIaXN0b3J5LmNyZWF0ZWRfYXQuZGVzYygpKVxuICAgIDkxXHQgICAgICAgIC5saW1pdChsaW1pdClcbiAgICA5Mlx0ICAgIClcbiAgICA5M1x0XG4gICAgOTRcdCAgICBjaGF0X2hpc3RvcmllcyA9IGRiLmV4ZWMoc3RhdGVtZW50KS5hbGwoKVxuICAgIDk1XHRcbiAgICA5Nlx0ICAgICMgRm9ybWF0IGZvciBMYW5nQ2hhaW5cbiAgICA5N1x0ICAgIG1lc3NhZ2VzID0gW11cbiAgICA5OFx0ICAgIGZvciBjaGF0IGluIHJldmVyc2VkKGNoYXRfaGlzdG9yaWVzKTogICMgUmV2ZXJzZSB0byBnZXQgY2hyb25vbG9naWNhbCBvcmRlclxuICAgIDk5XHQgICAgICAgIG1lc3NhZ2VzLmV4dGVuZChbXG4gICAxMDBcdCAgICAgICAgICAgIHtcInJvbGVcIjogXCJodW1hblwiLCBcImNvbnRlbnRcIjogY2hhdC51c2VyX3F1ZXJ5fSxcbiAgIDEwMVx0ICAgICAgICAgICAge1wicm9sZVwiOiBcImFpXCIsIFwiY29udGVudFwiOiBjaGF0LmFpX3Jlc3BvbnNlfVxuICAgMTAyXHQgICAgICAgIF0pXG4gICAxMDNcdFxuICAgMTA0XHQgICAgcmV0dXJuIG1lc3NhZ2VzXG4gICAxMDVcdFxuICAgMTA2XHRcbiAgIDEwN1x0ZGVmIGdldF9jaGlsZF9pbmZvKGRiOiBTZXNzaW9uLCBjaGlsZF9pZDogdXVpZC5VVUlELCBxdWVyeTogT3B0aW9uYWxbc3RyXSA9IE5vbmUpIC0+IE9wdGlvbmFsW0RpY3Rbc3RyLCBBbnldXTpcbiAgIDEwOFx0ICAgIFwiXCJcIlxuICAgMTA5XHQgICAgR2V0IGNoaWxkIGluZm9ybWF0aW9uIHdpdGggb3B0aW9uYWwgcmVsZXZhbnQgZGV0YWlscyBiYXNlZCBvbiBxdWVyeS5cbiAgIDExMFx0XG4gICAxMTFcdCAgICBBcmdzOlxuICAgMTEyXHQgICAgICAgIGRiOiBEYXRhYmFzZSBzZXNzaW9uXG4gICAxMTNcdCAgICAgICAgY2hpbGRfaWQ6IENoaWxkIElEXG4gICAxMTRcdCAgICAgICAgcXVlcnk6IE9wdGlvbmFsIHF1ZXJ5IHRvIGZpbmQgcmVsZXZhbnQgY2hpbGQgZGV0YWlsc1xuICAgMTE1XHRcbiAgIDExNlx0ICAgIFJldHVybnM6XG4gICAxMTdcdCAgICAgICAgRGljdGlvbmFyeSB3aXRoIGNoaWxkIGluZm9ybWF0aW9uIG9yIE5vbmUgaWYgbm90IGZvdW5kXG4gICAxMThcdCAgICBcIlwiXCJcbiAgIDExOVx0ICAgICMgUXVlcnkgY2hpbGRcbiAgIDEyMFx0ICAgIGNoaWxkID0gZGIuZ2V0KENoaWxkLCBjaGlsZF9pZClcbiAgIDEyMVx0ICAgIGlmIG5vdCBjaGlsZDpcbiAgIDEyMlx0ICAgICAgICByZXR1cm4gTm9uZVxuICAgMTIzXHRcbiAgIDEyNFx0ICAgICMgQ2FsY3VsYXRlIGFnZVxuICAgMTI1XHQgICAgZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWVcbiAgIDEyNlx0ICAgIHRvZGF5ID0gZGF0ZXRpbWUubm93KCkuZGF0ZSgpXG4gICAxMjdcdCAgICBhZ2VfZGF5cyA9ICh0b2RheSAtIGNoaWxkLmJpcnRoZGF5KS5kYXlzXG4gICAxMjhcdCAgICBhZ2VfbW9udGhzID0gYWdlX2RheXMgLy8gMzBcbiAgIDEyOVx0ICAgIGFnZV95ZWFycyA9IGFnZV9kYXlzIC8vIDM2NVxuICAgMTMwXHRcbiAgIDEzMVx0ICAgICMgRm9ybWF0IGNoaWxkIGluZm9cbiAgIDEzMlx0ICAgIGNoaWxkX2luZm8gPSB7XG4gICAxMzNcdCAgICAgICAgXCJuYW1lXCI6IGNoaWxkLm5hbWUsXG4gICAxMzRcdCAgICAgICAgXCJnZW5kZXJcIjogY2hpbGQuZ2VuZGVyLFxuICAgMTM1XHQgICAgICAgIFwiYmlydGhkYXlcIjogY2hpbGQuYmlydGhkYXkuaXNvZm9ybWF0KCksXG4gICAxMzZcdCAgICAgICAgXCJhZ2VfZGF5c1wiOiBhZ2VfZGF5cyxcbiAgIDEzN1x0ICAgICAgICBcImFnZV9tb250aHNcIjogYWdlX21vbnRocyxcbiAgIDEzOFx0ICAgICAgICBcImFnZV95ZWFyc1wiOiBhZ2VfeWVhcnNcbiAgIDEzOVx0ICAgIH1cbiAgIDE0MFx0XG4gICAxNDFcdCAgICAjIEFkZCByZWxldmFudCBjaGlsZCBkZXRhaWxzIGlmIHF1ZXJ5IGlzIHByb3ZpZGVkXG4gICAxNDJcdCAgICBpZiBxdWVyeTpcbiAgIDE0M1x0ICAgICAgICByZWxldmFudF9kZXRhaWxzID0gZ2V0X2NoaWxkX2RldGFpbHNfZm9yX3JhZyhkYiwgY2hpbGRfaWQsIHF1ZXJ5KVxuICAgMTQ0XHQgICAgICAgIGlmIHJlbGV2YW50X2RldGFpbHM6XG4gICAxNDVcdCAgICAgICAgICAgICMgRm9ybWF0IGRldGFpbHMgZm9yIGJldHRlciByZWFkYWJpbGl0eSBpbiB0aGUgcHJvbXB0XG4gICAxNDZcdCAgICAgICAgICAgIGZvcm1hdHRlZF9kZXRhaWxzID0gW11cbiAgIDE0N1x0ICAgICAgICAgICAgZm9yIGRldGFpbCBpbiByZWxldmFudF9kZXRhaWxzOlxuICAgMTQ4XHQgICAgICAgICAgICAgICAgZm9ybWF0dGVkX2RldGFpbCA9IGZcIi0ge2RldGFpbFsnbWV0YWRhdGEnXVsnZGV0YWlsX3R5cGUnXX06IHtkZXRhaWxbJ2NvbnRlbnQnXS5zcGxpdCgnQ29udGVudDogJylbMV0uc3BsaXQoJ1xcbicpWzBdfVwiXG4gICAxNDlcdCAgICAgICAgICAgICAgICBmb3JtYXR0ZWRfZGV0YWlscy5hcHBlbmQoZm9ybWF0dGVkX2RldGFpbClcbiAgIDE1MFx0XG4gICAxNTFcdCAgICAgICAgICAgIGNoaWxkX2luZm9bXCJyZWxldmFudF9kZXRhaWxzXCJdID0gZm9ybWF0dGVkX2RldGFpbHNcbiAgIDE1Mlx0XG4gICAxNTNcdCAgICByZXR1cm4gY2hpbGRfaW5mb1xuICAgMTU0XHRcblRvdGFsIGxpbmVzIGluIGZpbGU6IDE1NFxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMzQwM2I4MzEtNzkzYi00ZmVmLWE1ODgtZGQ1ZGJiMGMxMDc2O3Rvb2x1XzAxV2RXNXlMdTNpQmhScDdTaVRnbWR5MSI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIGJhY2tlbmQvYXBwL3JhZy9jaGF0X2hpc3RvcnkucHkuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgIDE0NFx0ICAgICAgICBpZiByZWxldmFudF9kZXRhaWxzOlxuICAgMTQ1XHQgICAgICAgICAgICAjIEZvcm1hdCBkZXRhaWxzIGZvciBiZXR0ZXIgcmVhZGFiaWxpdHkgaW4gdGhlIHByb21wdFxuICAgMTQ2XHQgICAgICAgICAgICBmb3JtYXR0ZWRfZGV0YWlscyA9IFtdXG4gICAxNDdcdCAgICAgICAgICAgIGZvciBkZXRhaWwgaW4gcmVsZXZhbnRfZGV0YWlsczpcbiAgIDE0OFx0ICAgICAgICAgICAgICAgICMgRXh0cmFjdCBjb250ZW50IGZpcnN0IHRvIGF2b2lkIGJhY2tzbGFzaCBpbiBmLXN0cmluZ1xuICAgMTQ5XHQgICAgICAgICAgICAgICAgY29udGVudF90ZXh0ID0gZGV0YWlsWydjb250ZW50J10uc3BsaXQoJ0NvbnRlbnQ6ICcpWzFdLnNwbGl0KCdcXG4nKVswXVxuICAgMTUwXHQgICAgICAgICAgICAgICAgZm9ybWF0dGVkX2RldGFpbCA9IGZcIi0ge2RldGFpbFsnbWV0YWRhdGEnXVsnZGV0YWlsX3R5cGUnXX06IHtjb250ZW50X3RleHR9XCJcbiAgIDE1MVx0ICAgICAgICAgICAgICAgIGZvcm1hdHRlZF9kZXRhaWxzLmFwcGVuZChmb3JtYXR0ZWRfZGV0YWlsKVxuICAgMTUyXHRcbiAgIDE1M1x0ICAgICAgICAgICAgY2hpbGRfaW5mb1tcInJlbGV2YW50X2RldGFpbHNcIl0gPSBmb3JtYXR0ZWRfZGV0YWlsc1xuICAgMTU0XHRcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fX0sImRyYWZ0RXhjaGFuZ2UiOnsicmVxdWVzdF9tZXNzYWdlIjoiIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCJ9XX0sInN0YXR1cyI6ImRyYWZ0In0sImRyYWZ0QWN0aXZlQ29udGV4dElkcyI6WyJEOi9haS9wYXJlbnRpbmctYXNzaXN0YXRuLXNlcnZlci9iYWNrZW5kL2FwcC9yYWcvY2hhdF9oaXN0b3J5LnB5IiwiRDovYWkvcGFyZW50aW5nLWFzc2lzdGF0bi1zZXJ2ZXJmYWxzZWZhbHNlIiwiYWdlbnRNZW1vcmllcyJdLCJyZXF1ZXN0SWRzIjpbXSwiaXNQaW5uZWQiOmZhbHNlLCJpc1NoYXJlYWJsZSI6dHJ1ZSwiZXh0cmFEYXRhIjp7ImlzQWdlbnRDb252ZXJzYXRpb24iOnRydWUsImhhc0RpcnR5RWRpdHMiOmZhbHNlfSwicGVyc29uYVR5cGUiOjB9fSwiYWdlbnRFeGVjdXRpb25Nb2RlIjoiYXV0byIsImlzQWdlbnRFZGl0c0NvbGxhcHNlZCI6dHJ1ZSwic2hvdWxkRGlzcGxheUFnZW50QmFubmVyIjpmYWxzZSwiaGFzTm90VXNlZEFnZW50IjpmYWxzZX0=" />
      </map>
    </option>
  </component>
</project>